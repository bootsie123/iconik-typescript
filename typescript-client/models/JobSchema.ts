/**
 * Iconik
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ActionContextSchema } from '../models/ActionContextSchema';
import { JobStep } from '../models/JobStep';
import { RelatedObject } from '../models/RelatedObject';
import { HttpFile } from '../http/http';

export class JobSchema {
    'actionContext'?: ActionContextSchema;
    'childrenProgress'?: any;
    'completedAt'?: Date;
    'createdBy'?: string;
    'customType'?: string | null;
    'dateCreated'?: Date;
    'dateModified'?: Date;
    'errorMessage'?: string;
    'hasChildren'?: boolean;
    'id'?: string;
    'jobContext'?: any;
    'message'?: string;
    'metadata'?: any;
    'objectId'?: string | null;
    'objectType'?: string | null;
    'parentId'?: string | null;
    'priority'?: number;
    'progress'?: number;
    'progressProcessed'?: number;
    'progressTotal'?: number;
    'relatedObjects'?: Array<RelatedObject>;
    'startedAt'?: Date;
    'status': JobSchemaStatusEnum;
    'steps'?: Array<JobStep>;
    'title': string;
    'type': JobSchemaTypeEnum;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "actionContext",
            "baseName": "action_context",
            "type": "ActionContextSchema",
            "format": ""
        },
        {
            "name": "childrenProgress",
            "baseName": "children_progress",
            "type": "any",
            "format": ""
        },
        {
            "name": "completedAt",
            "baseName": "completed_at",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "createdBy",
            "baseName": "created_by",
            "type": "string",
            "format": "uuid"
        },
        {
            "name": "customType",
            "baseName": "custom_type",
            "type": "string",
            "format": ""
        },
        {
            "name": "dateCreated",
            "baseName": "date_created",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "dateModified",
            "baseName": "date_modified",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "errorMessage",
            "baseName": "error_message",
            "type": "string",
            "format": ""
        },
        {
            "name": "hasChildren",
            "baseName": "has_children",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": "uuid"
        },
        {
            "name": "jobContext",
            "baseName": "job_context",
            "type": "any",
            "format": ""
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string",
            "format": ""
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "any",
            "format": ""
        },
        {
            "name": "objectId",
            "baseName": "object_id",
            "type": "string",
            "format": "uuid"
        },
        {
            "name": "objectType",
            "baseName": "object_type",
            "type": "string",
            "format": ""
        },
        {
            "name": "parentId",
            "baseName": "parent_id",
            "type": "string",
            "format": "uuid"
        },
        {
            "name": "priority",
            "baseName": "priority",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "progress",
            "baseName": "progress",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "progressProcessed",
            "baseName": "progress_processed",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "progressTotal",
            "baseName": "progress_total",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "relatedObjects",
            "baseName": "related_objects",
            "type": "Array<RelatedObject>",
            "format": ""
        },
        {
            "name": "startedAt",
            "baseName": "started_at",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "JobSchemaStatusEnum",
            "format": ""
        },
        {
            "name": "steps",
            "baseName": "steps",
            "type": "Array<JobStep>",
            "format": ""
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "JobSchemaTypeEnum",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return JobSchema.attributeTypeMap;
    }

    public constructor() {
    }
}


export enum JobSchemaStatusEnum {
    Ready = 'READY',
    Started = 'STARTED',
    Finished = 'FINISHED',
    FinishedWithWarning = 'FINISHED_WITH_WARNING',
    Failed = 'FAILED',
    Waiting = 'WAITING',
    AbortPending = 'ABORT_PENDING',
    Aborted = 'ABORTED',
    Skipped = 'SKIPPED',
    Paused = 'PAUSED'
}
export enum JobSchemaTypeEnum {
    Mediainfo = 'MEDIAINFO',
    Transcode = 'TRANSCODE',
    Keyframes = 'KEYFRAMES',
    Export = 'EXPORT',
    Delete = 'DELETE',
    Reindex = 'REINDEX',
    Move = 'MOVE',
    Transfer = 'TRANSFER',
    Analyze = 'ANALYZE',
    Metadata = 'METADATA',
    Custom = 'CUSTOM',
    Scan = 'SCAN',
    Archive = 'ARCHIVE',
    Restore = 'RESTORE',
    RestoreFromGlacier = 'RESTORE_FROM_GLACIER',
    Acl = 'ACL',
    Copy = 'COPY',
    Transcription = 'TRANSCRIPTION',
    RequestCollectionMap = 'REQUEST_COLLECTION_MAP',
    CollectionCustomOrder = 'COLLECTION_CUSTOM_ORDER',
    StorageGatewayFileIngest = 'STORAGE_GATEWAY_FILE_INGEST',
    MarkMissing = 'MARK_MISSING',
    FaceRecognition = 'FACE_RECOGNITION',
    SetApproval = 'SET_APPROVAL'
}

