/**
 * Iconik
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { CriteriaFilterSchema } from '../models/CriteriaFilterSchema';
import { CriteriaSortSchema } from '../models/CriteriaSortSchema';
import { FacetFilterSchema } from '../models/FacetFilterSchema';
import { HttpFile } from '../http/http';

export class SearchCriteria {
    'docTypes'?: Array<string>;
    'excludeFields'?: Array<string>;
    'facets'?: Array<string>;
    'facetsFilters'?: Array<FacetFilterSchema>;
    'filter'?: CriteriaFilterSchema;
    'includeFields'?: Array<string>;
    'metadataViewId'?: string;
    'query'?: string;
    /**
    * This parameter is used for infinite scroll pagination instead of deprecatedscroll API. It accepts a list of sort keys that will be used for getting a next page and it can be obtained from `_sort` key of the last object of the previous response
    */
    'searchAfter'?: Array<any>;
    'searchFields'?: Array<string>;
    'sort'?: Array<CriteriaSortSchema>;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "docTypes",
            "baseName": "doc_types",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "excludeFields",
            "baseName": "exclude_fields",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "facets",
            "baseName": "facets",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "facetsFilters",
            "baseName": "facets_filters",
            "type": "Array<FacetFilterSchema>",
            "format": ""
        },
        {
            "name": "filter",
            "baseName": "filter",
            "type": "CriteriaFilterSchema",
            "format": ""
        },
        {
            "name": "includeFields",
            "baseName": "include_fields",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "metadataViewId",
            "baseName": "metadata_view_id",
            "type": "string",
            "format": "uuid"
        },
        {
            "name": "query",
            "baseName": "query",
            "type": "string",
            "format": ""
        },
        {
            "name": "searchAfter",
            "baseName": "search_after",
            "type": "Array<any>",
            "format": ""
        },
        {
            "name": "searchFields",
            "baseName": "search_fields",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "sort",
            "baseName": "sort",
            "type": "Array<CriteriaSortSchema>",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return SearchCriteria.attributeTypeMap;
    }

    public constructor() {
    }
}

