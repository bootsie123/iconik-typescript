import { ResponseContext, RequestContext, HttpFile, HttpInfo } from '../http/http';
import { Configuration} from '../configuration'

import { ACLSchema } from '../models/ACLSchema';
import { ACLTemplateSchema } from '../models/ACLTemplateSchema';
import { ACLTemplatesSchema } from '../models/ACLTemplatesSchema';
import { ACLsSchema } from '../models/ACLsSchema';
import { AbortStorageTranscodeJobsSchema } from '../models/AbortStorageTranscodeJobsSchema';
import { AclsV1AclPostDefaultResponse } from '../models/AclsV1AclPostDefaultResponse';
import { AclsV1AclPostDefaultResponseOneOf } from '../models/AclsV1AclPostDefaultResponseOneOf';
import { AclsV1AclPostDefaultResponseOneOf1 } from '../models/AclsV1AclPostDefaultResponseOneOf1';
import { ActionContextSchema } from '../models/ActionContextSchema';
import { ActionContextValue } from '../models/ActionContextValue';
import { ActionContextValueSchema } from '../models/ActionContextValueSchema';
import { AllowedIPSchema } from '../models/AllowedIPSchema';
import { AnalysisAmazonRekognitionSettingsSchema } from '../models/AnalysisAmazonRekognitionSettingsSchema';
import { AnalysisGoogleAISettingsSchema } from '../models/AnalysisGoogleAISettingsSchema';
import { AnalysisIconikSettingsSchema } from '../models/AnalysisIconikSettingsSchema';
import { AnalysisProfileAmazonRekognitionSettingsSchema } from '../models/AnalysisProfileAmazonRekognitionSettingsSchema';
import { AnalysisProfileGoogleVideoIntelligenceSettingsSchema } from '../models/AnalysisProfileGoogleVideoIntelligenceSettingsSchema';
import { AnalysisProfileGoogleVisionSettingsSchema } from '../models/AnalysisProfileGoogleVisionSettingsSchema';
import { AnalysisProfileIconikFaceRecognitionSettingsSchema } from '../models/AnalysisProfileIconikFaceRecognitionSettingsSchema';
import { AnalysisProfileSchema } from '../models/AnalysisProfileSchema';
import { AnalysisProfileServiceIdSchema } from '../models/AnalysisProfileServiceIdSchema';
import { AnalysisProfileSettingsSchema } from '../models/AnalysisProfileSettingsSchema';
import { AnalysisProfilesSchema } from '../models/AnalysisProfilesSchema';
import { AnalysisRevAISettingsSchema } from '../models/AnalysisRevAISettingsSchema';
import { AnalysisServiceAccountReadSchema } from '../models/AnalysisServiceAccountReadSchema';
import { AnalysisServiceAccountSchema } from '../models/AnalysisServiceAccountSchema';
import { AnalysisServiceAccountsSchema } from '../models/AnalysisServiceAccountsSchema';
import { AnalyzeSchema } from '../models/AnalyzeSchema';
import { AppSchema } from '../models/AppSchema';
import { ApprovalBySchema } from '../models/ApprovalBySchema';
import { ApprovalSchema } from '../models/ApprovalSchema';
import { ApprovalsBySchema } from '../models/ApprovalsBySchema';
import { ApprovedAppInstanceSchema } from '../models/ApprovedAppInstanceSchema';
import { AppsSchema } from '../models/AppsSchema';
import { AssetBaseSchema } from '../models/AssetBaseSchema';
import { AssetBatchExportItemSchema } from '../models/AssetBatchExportItemSchema';
import { AssetBatchExportSchema } from '../models/AssetBatchExportSchema';
import { AssetCreateSchema } from '../models/AssetCreateSchema';
import { AssetEditSchema } from '../models/AssetEditSchema';
import { AssetElasticSchema } from '../models/AssetElasticSchema';
import { AssetExportSchema } from '../models/AssetExportSchema';
import { AssetHistoryBaseSchema } from '../models/AssetHistoryBaseSchema';
import { AssetHistoryBulkSchema } from '../models/AssetHistoryBulkSchema';
import { AssetHistoryElasticSchema } from '../models/AssetHistoryElasticSchema';
import { AssetHistoryEntitiesSchema } from '../models/AssetHistoryEntitiesSchema';
import { AssetHistorySchema } from '../models/AssetHistorySchema';
import { AssetLinkData } from '../models/AssetLinkData';
import { AssetLinkProxySchema } from '../models/AssetLinkProxySchema';
import { AssetLinkURLSchema } from '../models/AssetLinkURLSchema';
import { AssetOrCollectionSchema } from '../models/AssetOrCollectionSchema';
import { AssetSchema } from '../models/AssetSchema';
import { AssetSubclipKeyframesSchema } from '../models/AssetSubclipKeyframesSchema';
import { AssetTranscriptionFromSubtitleSchema } from '../models/AssetTranscriptionFromSubtitleSchema';
import { AssetTranscriptionPropertiesSchema } from '../models/AssetTranscriptionPropertiesSchema';
import { AssetTranscriptionsPropertiesSchema } from '../models/AssetTranscriptionsPropertiesSchema';
import { AssetUsageSchema } from '../models/AssetUsageSchema';
import { AssetUsagesElasticSchema } from '../models/AssetUsagesElasticSchema';
import { AssetUsagesSchema } from '../models/AssetUsagesSchema';
import { AssetVersion } from '../models/AssetVersion';
import { AssetVersionSchema } from '../models/AssetVersionSchema';
import { AssetVersionsSchema } from '../models/AssetVersionsSchema';
import { AssetsHistoryQueryParamsSchema } from '../models/AssetsHistoryQueryParamsSchema';
import { AssetsQueryParamsSchema } from '../models/AssetsQueryParamsSchema';
import { AssetsSchema } from '../models/AssetsSchema';
import { Auth0SettingsSchema } from '../models/Auth0SettingsSchema';
import { AuthV1AuthSamlLoginPost200Response } from '../models/AuthV1AuthSamlLoginPost200Response';
import { AuthV1AuthSamlLogoutPublicIdPost200Response } from '../models/AuthV1AuthSamlLogoutPublicIdPost200Response';
import { AuthV1SystemDomainsSystemDomainIdLogoPost201Response } from '../models/AuthV1SystemDomainsSystemDomainIdLogoPost201Response';
import { AuthV1SystemDomainsSystemDomainIdLogoPostRequest } from '../models/AuthV1SystemDomainsSystemDomainIdLogoPostRequest';
import { AzureSettingsSchema } from '../models/AzureSettingsSchema';
import { B2SettingsSchema } from '../models/B2SettingsSchema';
import { BaseExportSchema } from '../models/BaseExportSchema';
import { BaseQueryParamsSchema } from '../models/BaseQueryParamsSchema';
import { BaseQueryParamsSchema1 } from '../models/BaseQueryParamsSchema1';
import { BillingCreditsSchema } from '../models/BillingCreditsSchema';
import { BillingCreditsVerifySchema } from '../models/BillingCreditsVerifySchema';
import { BillingCustomerCardSchema } from '../models/BillingCustomerCardSchema';
import { BillingCustomerSchema } from '../models/BillingCustomerSchema';
import { BillingCustomerShipping } from '../models/BillingCustomerShipping';
import { BillingCustomerShippingAddress } from '../models/BillingCustomerShippingAddress';
import { BillingCustomerShippingAddressSchema } from '../models/BillingCustomerShippingAddressSchema';
import { BillingCustomerShippingSchema } from '../models/BillingCustomerShippingSchema';
import { BillingReceiptSchema } from '../models/BillingReceiptSchema';
import { BillingRecipientsSchema } from '../models/BillingRecipientsSchema';
import { BillingSchema } from '../models/BillingSchema';
import { BillingSettingsSchema } from '../models/BillingSettingsSchema';
import { BillingStatsSchema } from '../models/BillingStatsSchema';
import { BillingsSchema } from '../models/BillingsSchema';
import { BulkACLSchema } from '../models/BulkACLSchema';
import { BulkACLsObjectSchema } from '../models/BulkACLsObjectSchema';
import { BulkActionSchema } from '../models/BulkActionSchema';
import { BulkAddToFavoritesSchema } from '../models/BulkAddToFavoritesSchema';
import { BulkAnalyzeSchema } from '../models/BulkAnalyzeSchema';
import { BulkAssetEditSchema } from '../models/BulkAssetEditSchema';
import { BulkAssetIdsWithFiles } from '../models/BulkAssetIdsWithFiles';
import { BulkAssetVersionEditSchema } from '../models/BulkAssetVersionEditSchema';
import { BulkCheckAssetHasFilesSchema } from '../models/BulkCheckAssetHasFilesSchema';
import { BulkCollectionACLsUpdateSchema } from '../models/BulkCollectionACLsUpdateSchema';
import { BulkCollectionActionSchema } from '../models/BulkCollectionActionSchema';
import { BulkCollectionAnalyzeSchema } from '../models/BulkCollectionAnalyzeSchema';
import { BulkCollectionDeleteSchema } from '../models/BulkCollectionDeleteSchema';
import { BulkCollectionFaceExtractionSchema } from '../models/BulkCollectionFaceExtractionSchema';
import { BulkCollectionMetadataUpdateSchema } from '../models/BulkCollectionMetadataUpdateSchema';
import { BulkCollectionTranscodeSchema } from '../models/BulkCollectionTranscodeSchema';
import { BulkCollectionTranscribeSchema } from '../models/BulkCollectionTranscribeSchema';
import { BulkCollectionTransferSchema } from '../models/BulkCollectionTransferSchema';
import { BulkCreateSegmentsSchema } from '../models/BulkCreateSegmentsSchema';
import { BulkCreateShareACLs } from '../models/BulkCreateShareACLs';
import { BulkDeleteFromFavoritesSchema } from '../models/BulkDeleteFromFavoritesSchema';
import { BulkDeleteSchema } from '../models/BulkDeleteSchema';
import { BulkDeleteShareACLs } from '../models/BulkDeleteShareACLs';
import { BulkFilesetArchiveSchema } from '../models/BulkFilesetArchiveSchema';
import { BulkFilesetExportSchema } from '../models/BulkFilesetExportSchema';
import { BulkFilesetRestoreSchema } from '../models/BulkFilesetRestoreSchema';
import { BulkMetadataCopySchema } from '../models/BulkMetadataCopySchema';
import { BulkMetadataDeleteSchema } from '../models/BulkMetadataDeleteSchema';
import { BulkRemoveApprovalSchema } from '../models/BulkRemoveApprovalSchema';
import { BulkSavedSearchActionSchema } from '../models/BulkSavedSearchActionSchema';
import { BulkSavedSearchFaceExtractionSchema } from '../models/BulkSavedSearchFaceExtractionSchema';
import { BulkSavedSearchFilesDeleteSchema } from '../models/BulkSavedSearchFilesDeleteSchema';
import { BulkSavedSearchMetadataUpdateSchema } from '../models/BulkSavedSearchMetadataUpdateSchema';
import { BulkSavedSearchObjectsACLUpdateSchema } from '../models/BulkSavedSearchObjectsACLUpdateSchema';
import { BulkSavedSearchObjectsAnalyzeSchema } from '../models/BulkSavedSearchObjectsAnalyzeSchema';
import { BulkSavedSearchObjectsDeleteSchema } from '../models/BulkSavedSearchObjectsDeleteSchema';
import { BulkSavedSearchObjectsSetApprovalSchema } from '../models/BulkSavedSearchObjectsSetApprovalSchema';
import { BulkSavedSearchObjectsTranscodeSchema } from '../models/BulkSavedSearchObjectsTranscodeSchema';
import { BulkSavedSearchObjectsTranscribeSchema } from '../models/BulkSavedSearchObjectsTranscribeSchema';
import { BulkSavedSearchObjectsTransferSchema } from '../models/BulkSavedSearchObjectsTransferSchema';
import { BulkSetApprovalSchema } from '../models/BulkSetApprovalSchema';
import { BulkShareCreateSchema } from '../models/BulkShareCreateSchema';
import { BulkTranscodeSchema } from '../models/BulkTranscodeSchema';
import { BulkTranscribeSchema } from '../models/BulkTranscribeSchema';
import { BulkTransferSchema } from '../models/BulkTransferSchema';
import { BulkTransferToStorageSchema } from '../models/BulkTransferToStorageSchema';
import { CORSHostSchema } from '../models/CORSHostSchema';
import { CORSHostsSchema } from '../models/CORSHostsSchema';
import { CheckAssetHasFiles } from '../models/CheckAssetHasFiles';
import { CheckAssetHasFilesSchema } from '../models/CheckAssetHasFilesSchema';
import { CheckBulkACLsSchema } from '../models/CheckBulkACLsSchema';
import { CollectionBaseSchema } from '../models/CollectionBaseSchema';
import { CollectionContentInfoSchema } from '../models/CollectionContentInfoSchema';
import { CollectionContentOrderingSchema } from '../models/CollectionContentOrderingSchema';
import { CollectionContentQueryParamsSchema } from '../models/CollectionContentQueryParamsSchema';
import { CollectionContentSchema } from '../models/CollectionContentSchema';
import { CollectionElastic } from '../models/CollectionElastic';
import { CollectionElasticSchema } from '../models/CollectionElasticSchema';
import { CollectionExportSchema } from '../models/CollectionExportSchema';
import { CollectionInputSchema } from '../models/CollectionInputSchema';
import { CollectionKeyframeCreateSchema } from '../models/CollectionKeyframeCreateSchema';
import { CollectionKeyframeSchema } from '../models/CollectionKeyframeSchema';
import { CollectionKeyframeUpdateSchema } from '../models/CollectionKeyframeUpdateSchema';
import { CollectionKeyframesSchema } from '../models/CollectionKeyframesSchema';
import { CollectionMetadataValuesBatchSchema } from '../models/CollectionMetadataValuesBatchSchema';
import { CollectionSchema } from '../models/CollectionSchema';
import { CollectionSizeSchema } from '../models/CollectionSizeSchema';
import { CollectionUsageSchema } from '../models/CollectionUsageSchema';
import { CollectionUsagesElasticSchema } from '../models/CollectionUsagesElasticSchema';
import { CollectionUsagesSchema } from '../models/CollectionUsagesSchema';
import { CollectionsQueryParamsSchema } from '../models/CollectionsQueryParamsSchema';
import { CollectionsSchema } from '../models/CollectionsSchema';
import { CombinedPermissionsSchema } from '../models/CombinedPermissionsSchema';
import { CompleteExportToLocalStorageSchema } from '../models/CompleteExportToLocalStorageSchema';
import { ComponentSchema } from '../models/ComponentSchema';
import { ComponentsSchema } from '../models/ComponentsSchema';
import { CopyInheritedACLSchema } from '../models/CopyInheritedACLSchema';
import { CopySourceQueryParamsSchema } from '../models/CopySourceQueryParamsSchema';
import { CountriesSchema } from '../models/CountriesSchema';
import { Country } from '../models/Country';
import { CountrySchema } from '../models/CountrySchema';
import { CreateACLsResultSchema } from '../models/CreateACLsResultSchema';
import { CreateACLsSchema } from '../models/CreateACLsSchema';
import { CreateAssetVersionFromAssetSchema } from '../models/CreateAssetVersionFromAssetSchema';
import { CreateAssetVersionFromVersionSchema } from '../models/CreateAssetVersionFromVersionSchema';
import { CreateAssetVersionSchema } from '../models/CreateAssetVersionSchema';
import { CreateBulkACLsSchema } from '../models/CreateBulkACLsSchema';
import { CreateCollectionContentOrderingSchema } from '../models/CreateCollectionContentOrderingSchema';
import { CreateMetadataValuesBatchSchema } from '../models/CreateMetadataValuesBatchSchema';
import { CreateShareACLsSchema } from '../models/CreateShareACLsSchema';
import { CreditsSchema } from '../models/CreditsSchema';
import { CriteriaFilterSchema } from '../models/CriteriaFilterSchema';
import { CriteriaRangeFilter } from '../models/CriteriaRangeFilter';
import { CriteriaRangeFilterSchema } from '../models/CriteriaRangeFilterSchema';
import { CriteriaSortSchema } from '../models/CriteriaSortSchema';
import { CriteriaTerm } from '../models/CriteriaTerm';
import { CriteriaTermSchema } from '../models/CriteriaTermSchema';
import { CustomActionCallbackReplySchema } from '../models/CustomActionCallbackReplySchema';
import { CustomActionCallbackSchema } from '../models/CustomActionCallbackSchema';
import { CustomActionSchema } from '../models/CustomActionSchema';
import { CustomActionsSchema } from '../models/CustomActionsSchema';
import { CustomSettingsSchema } from '../models/CustomSettingsSchema';
import { DateFilterSchema } from '../models/DateFilterSchema';
import { DefaultShareOptionsTypeSchema } from '../models/DefaultShareOptionsTypeSchema';
import { DeleteACLsSchema } from '../models/DeleteACLsSchema';
import { DeleteBulkACLsSchema } from '../models/DeleteBulkACLsSchema';
import { DeleteQueueAssetsQueryParamsSchema } from '../models/DeleteQueueAssetsQueryParamsSchema';
import { DeleteQueueCollectionsQueryParamsSchema } from '../models/DeleteQueueCollectionsQueryParamsSchema';
import { DeleteQueueFileSetsQueryParamsSchema } from '../models/DeleteQueueFileSetsQueryParamsSchema';
import { DeleteQueueFormatsQueryParamsSchema } from '../models/DeleteQueueFormatsQueryParamsSchema';
import { DeleteQueueSchema } from '../models/DeleteQueueSchema';
import { DeleteSegmentsSchema } from '../models/DeleteSegmentsSchema';
import { DiscoveryEntitiesSchema } from '../models/DiscoveryEntitiesSchema';
import { DiscoveryEntity } from '../models/DiscoveryEntity';
import { DiscoveryEntitySchema } from '../models/DiscoveryEntitySchema';
import { DiscoveryViewSettingsSchema } from '../models/DiscoveryViewSettingsSchema';
import { DomainIdentityProviderMapSchema } from '../models/DomainIdentityProviderMapSchema';
import { Drawing } from '../models/Drawing';
import { DrawingPoint } from '../models/DrawingPoint';
import { DrawingPointSchema } from '../models/DrawingPointSchema';
import { DrawingPrimitive } from '../models/DrawingPrimitive';
import { DrawingPrimitiveSchema } from '../models/DrawingPrimitiveSchema';
import { DrawingSchema } from '../models/DrawingSchema';
import { EdgeThumbnailJobFieldSchema } from '../models/EdgeThumbnailJobFieldSchema';
import { EdgeTranscodeEndpointSchema } from '../models/EdgeTranscodeEndpointSchema';
import { EdgeTranscodeInputSchema } from '../models/EdgeTranscodeInputSchema';
import { EdgeTranscodeJobFieldSchema } from '../models/EdgeTranscodeJobFieldSchema';
import { EdgeTranscodeJobSchema } from '../models/EdgeTranscodeJobSchema';
import { EdgeTranscodeJobsSchema } from '../models/EdgeTranscodeJobsSchema';
import { EdgeTranscodeWorkerSchema } from '../models/EdgeTranscodeWorkerSchema';
import { EdgeTranscodeWorkersSchema } from '../models/EdgeTranscodeWorkersSchema';
import { EditAssetVersion } from '../models/EditAssetVersion';
import { EditAssetVersionSchema } from '../models/EditAssetVersionSchema';
import { EditProxyResponseSchema } from '../models/EditProxyResponseSchema';
import { EditProxySchema } from '../models/EditProxySchema';
import { EditProxySettingsSchema } from '../models/EditProxySettingsSchema';
import { EditReadyTranscoderSchema } from '../models/EditReadyTranscoderSchema';
import { EditSegmentSchema } from '../models/EditSegmentSchema';
import { ElementalMediaConvertSchema } from '../models/ElementalMediaConvertSchema';
import { ElementalServerSchema } from '../models/ElementalServerSchema';
import { EmailLoginSchema } from '../models/EmailLoginSchema';
import { EncodingComSettingsSchema } from '../models/EncodingComSettingsSchema';
import { EndpointSchema } from '../models/EndpointSchema';
import { ExportLocationSchema } from '../models/ExportLocationSchema';
import { ExportLocationsSchema } from '../models/ExportLocationsSchema';
import { ExternalAuthRequestResponseSchema } from '../models/ExternalAuthRequestResponseSchema';
import { ExternalAuthRequestSchema } from '../models/ExternalAuthRequestSchema';
import { ExternalAuthSchema } from '../models/ExternalAuthSchema';
import { ExternalSourceFieldOptionsSchema } from '../models/ExternalSourceFieldOptionsSchema';
import { FFmpegSettingsSchema } from '../models/FFmpegSettingsSchema';
import { FacetBucketSchema } from '../models/FacetBucketSchema';
import { FacetFieldNamesSchema } from '../models/FacetFieldNamesSchema';
import { FacetFieldSchema } from '../models/FacetFieldSchema';
import { FacetFilterSchema } from '../models/FacetFilterSchema';
import { FacetSchema } from '../models/FacetSchema';
import { FavoritesSchema } from '../models/FavoritesSchema';
import { FieldOptionsSchema } from '../models/FieldOptionsSchema';
import { FileBaseSchema } from '../models/FileBaseSchema';
import { FileCreateSchema } from '../models/FileCreateSchema';
import { FileDeletionFromLocalStorageSchema } from '../models/FileDeletionFromLocalStorageSchema';
import { FileDeletionsSchema } from '../models/FileDeletionsSchema';
import { FileDownloadURLSchema } from '../models/FileDownloadURLSchema';
import { FileElasticSchema } from '../models/FileElasticSchema';
import { FileExistenceCheckSchema } from '../models/FileExistenceCheckSchema';
import { FileSchema } from '../models/FileSchema';
import { FileSetElasticSchema } from '../models/FileSetElasticSchema';
import { FileSetSchema } from '../models/FileSetSchema';
import { FileSetSourceSchema } from '../models/FileSetSourceSchema';
import { FileSetSourcesSchema } from '../models/FileSetSourcesSchema';
import { FileSetsElasticSchema } from '../models/FileSetsElasticSchema';
import { FileSetsSchema } from '../models/FileSetsSchema';
import { FileSettingsSchema } from '../models/FileSettingsSchema';
import { FileShareUploadEditSchema } from '../models/FileShareUploadEditSchema';
import { FilesElasticSchema } from '../models/FilesElasticSchema';
import { FilesSchema } from '../models/FilesSchema';
import { FilesV1StoragesIsgLatestVersionGet200Response } from '../models/FilesV1StoragesIsgLatestVersionGet200Response';
import { FilesV1StoragesStorageIdLogsPost200Response } from '../models/FilesV1StoragesStorageIdLogsPost200Response';
import { FilesV1StoragesStorageIdVerificationsAccessGet200Response } from '../models/FilesV1StoragesStorageIdVerificationsAccessGet200Response';
import { FilesV1StoragesStorageIdVerificationsPermissionsGet200Response } from '../models/FilesV1StoragesStorageIdVerificationsPermissionsGet200Response';
import { FilesetTransferBaseSchema } from '../models/FilesetTransferBaseSchema';
import { ForgotPasswordSchema } from '../models/ForgotPasswordSchema';
import { FormatArchiveSchema } from '../models/FormatArchiveSchema';
import { FormatDeleteArchiveSchema } from '../models/FormatDeleteArchiveSchema';
import { FormatElasticSchema } from '../models/FormatElasticSchema';
import { FormatRestoreSchema } from '../models/FormatRestoreSchema';
import { FormatSchema } from '../models/FormatSchema';
import { FormatsElasticSchema } from '../models/FormatsElasticSchema';
import { FormatsSchema } from '../models/FormatsSchema';
import { FtpSettingsSchema } from '../models/FtpSettingsSchema';
import { GatewayReportSchema } from '../models/GatewayReportSchema';
import { GatewayStatusSchema } from '../models/GatewayStatusSchema';
import { GenerateCollectionKeyframeSchema } from '../models/GenerateCollectionKeyframeSchema';
import { GenericSettingsSchema } from '../models/GenericSettingsSchema';
import { GetAssetsLatestVersionSchema } from '../models/GetAssetsLatestVersionSchema';
import { GlobalSettingsSchema } from '../models/GlobalSettingsSchema';
import { GoogleCloudStorageSettingsSchema } from '../models/GoogleCloudStorageSettingsSchema';
import { GroupACL } from '../models/GroupACL';
import { GroupACL1 } from '../models/GroupACL1';
import { GroupACLSchema } from '../models/GroupACLSchema';
import { GroupBaseSchema } from '../models/GroupBaseSchema';
import { GroupCreateSchema } from '../models/GroupCreateSchema';
import { GroupElasticSchema } from '../models/GroupElasticSchema';
import { GroupIDsSchema } from '../models/GroupIDsSchema';
import { GroupMappingSchema } from '../models/GroupMappingSchema';
import { GroupMappingsSchema } from '../models/GroupMappingsSchema';
import { GroupSchema } from '../models/GroupSchema';
import { GroupSettingPublicSchema } from '../models/GroupSettingPublicSchema';
import { GroupSettingSchema } from '../models/GroupSettingSchema';
import { GroupsQueryParamsSchema } from '../models/GroupsQueryParamsSchema';
import { GroupsSchema } from '../models/GroupsSchema';
import { HttpSettingsSchema } from '../models/HttpSettingsSchema';
import { ISGHandlerURLSchema } from '../models/ISGHandlerURLSchema';
import { IconikEdgeTranscoderSchema } from '../models/IconikEdgeTranscoderSchema';
import { IconikStorageGatewayEventSchema } from '../models/IconikStorageGatewayEventSchema';
import { IconikStorageGatewayEventsPurgeSchema } from '../models/IconikStorageGatewayEventsPurgeSchema';
import { IconikStorageGatewayEventsSchema } from '../models/IconikStorageGatewayEventsSchema';
import { IdentityProviderBaseSchema } from '../models/IdentityProviderBaseSchema';
import { IdentityProviderBaseSettingsSchema } from '../models/IdentityProviderBaseSettingsSchema';
import { IdentityProviderSchema } from '../models/IdentityProviderSchema';
import { IdentityProvidersSchema } from '../models/IdentityProvidersSchema';
import { ImageMagickSettingsSchema } from '../models/ImageMagickSettingsSchema';
import { InheritedACLSchema } from '../models/InheritedACLSchema';
import { InputSchema } from '../models/InputSchema';
import { JobBaseSchema } from '../models/JobBaseSchema';
import { JobBaseSchema1 } from '../models/JobBaseSchema1';
import { JobChildProgressSchema } from '../models/JobChildProgressSchema';
import { JobCreateSchema } from '../models/JobCreateSchema';
import { JobElasticSchema } from '../models/JobElasticSchema';
import { JobSchema } from '../models/JobSchema';
import { JobSchema1 } from '../models/JobSchema1';
import { JobStep } from '../models/JobStep';
import { JobStep1 } from '../models/JobStep1';
import { JobStepElastic } from '../models/JobStepElastic';
import { JobStepElasticSchema } from '../models/JobStepElasticSchema';
import { JobStepSchema } from '../models/JobStepSchema';
import { JobStepSchema1 } from '../models/JobStepSchema1';
import { JobStepUpdateBulkSchema } from '../models/JobStepUpdateBulkSchema';
import { JobStepUpdateSchema } from '../models/JobStepUpdateSchema';
import { JobStepsSchema } from '../models/JobStepsSchema';
import { JobStepsUpdateSchema } from '../models/JobStepsUpdateSchema';
import { JobsBulkActionSchema } from '../models/JobsBulkActionSchema';
import { JobsBulkDeleteSchema } from '../models/JobsBulkDeleteSchema';
import { JobsDashboard } from '../models/JobsDashboard';
import { JobsDashboardSchema } from '../models/JobsDashboardSchema';
import { JobsDashboardWidget } from '../models/JobsDashboardWidget';
import { JobsDashboardWidgetSchema } from '../models/JobsDashboardWidgetSchema';
import { JobsPrioritySchema } from '../models/JobsPrioritySchema';
import { JobsQueryParamsSchema } from '../models/JobsQueryParamsSchema';
import { JobsSchema } from '../models/JobsSchema';
import { JobsStateSchema } from '../models/JobsStateSchema';
import { JobsStateSchema1 } from '../models/JobsStateSchema1';
import { JobsStateSchema2 } from '../models/JobsStateSchema2';
import { JobsWidgetOption } from '../models/JobsWidgetOption';
import { JobsWidgetOptionFilterSchema } from '../models/JobsWidgetOptionFilterSchema';
import { JobsWidgetOptionSchema } from '../models/JobsWidgetOptionSchema';
import { KeyframeBaseSchema } from '../models/KeyframeBaseSchema';
import { KeyframeCreateSchema } from '../models/KeyframeCreateSchema';
import { KeyframeSchema } from '../models/KeyframeSchema';
import { KeyframeUpdateSchema } from '../models/KeyframeUpdateSchema';
import { KeyframesSchema } from '../models/KeyframesSchema';
import { KubernetesSettingSchema } from '../models/KubernetesSettingSchema';
import { ListObjectsSchema } from '../models/ListObjectsSchema';
import { ListObjectsSchema1 } from '../models/ListObjectsSchema1';
import { ListObjectsSchema2 } from '../models/ListObjectsSchema2';
import { ListObjectsSchema3 } from '../models/ListObjectsSchema3';
import { ListObjectsSchema4 } from '../models/ListObjectsSchema4';
import { LocalStorageFileTranscodeJobSchema } from '../models/LocalStorageFileTranscodeJobSchema';
import { LocalStorageFileTranscodeJobsSchema } from '../models/LocalStorageFileTranscodeJobsSchema';
import { LocalTranscodeInputSchema } from '../models/LocalTranscodeInputSchema';
import { LocalTranscodeJobSchema } from '../models/LocalTranscodeJobSchema';
import { LogoURLSchema } from '../models/LogoURLSchema';
import { LogoURLsSchema } from '../models/LogoURLsSchema';
import { LogsRecipientReadSchema } from '../models/LogsRecipientReadSchema';
import { LogsRecipientSchema } from '../models/LogsRecipientSchema';
import { LogsRecipientsSchema } from '../models/LogsRecipientsSchema';
import { MarketplaceGoogleLinkSchema } from '../models/MarketplaceGoogleLinkSchema';
import { MergedSettingsSchema } from '../models/MergedSettingsSchema';
import { MetadataCategoriesSchema } from '../models/MetadataCategoriesSchema';
import { MetadataCategory } from '../models/MetadataCategory';
import { MetadataCategorySchema } from '../models/MetadataCategorySchema';
import { MetadataField } from '../models/MetadataField';
import { MetadataFieldBaseSchema } from '../models/MetadataFieldBaseSchema';
import { MetadataFieldCreateSchema } from '../models/MetadataFieldCreateSchema';
import { MetadataFieldMappingOptionSchema } from '../models/MetadataFieldMappingOptionSchema';
import { MetadataFieldMappingOptionsSchema } from '../models/MetadataFieldMappingOptionsSchema';
import { MetadataFieldMappingSchema } from '../models/MetadataFieldMappingSchema';
import { MetadataFieldMappingUpdateSchema } from '../models/MetadataFieldMappingUpdateSchema';
import { MetadataFieldMappingsSchema } from '../models/MetadataFieldMappingsSchema';
import { MetadataFieldSchema } from '../models/MetadataFieldSchema';
import { MetadataFieldValueSchema } from '../models/MetadataFieldValueSchema';
import { MetadataFieldValueSchema1 } from '../models/MetadataFieldValueSchema1';
import { MetadataFieldsSchema } from '../models/MetadataFieldsSchema';
import { MetadataValuesBatchSchema } from '../models/MetadataValuesBatchSchema';
import { MetadataValuesObjectId } from '../models/MetadataValuesObjectId';
import { MetadataValuesObjectIdSchema } from '../models/MetadataValuesObjectIdSchema';
import { MetadataValuesSchema } from '../models/MetadataValuesSchema';
import { MetadataView } from '../models/MetadataView';
import { MetadataViewFieldSchema } from '../models/MetadataViewFieldSchema';
import { MetadataViewInputSchema } from '../models/MetadataViewInputSchema';
import { MetadataViewSchema } from '../models/MetadataViewSchema';
import { MetadataViewsSchema } from '../models/MetadataViewsSchema';
import { MoveAssetResourceSchema } from '../models/MoveAssetResourceSchema';
import { MultiDomainLoginSchema } from '../models/MultiDomainLoginSchema';
import { MultiDomainUserSystemSchema } from '../models/MultiDomainUserSystemSchema';
import { MultiDomainUserSystemsSchema } from '../models/MultiDomainUserSystemsSchema';
import { MultiPartS3UrlPartSchema } from '../models/MultiPartS3UrlPartSchema';
import { MultiPartS3UrlPartsSchema } from '../models/MultiPartS3UrlPartsSchema';
import { MultiPartURLsSchema } from '../models/MultiPartURLsSchema';
import { MultiPartUploadComposeURLSchema } from '../models/MultiPartUploadComposeURLSchema';
import { MultiPartUploadURLSchema } from '../models/MultiPartUploadURLSchema';
import { MultiPartUploadURLsSchema } from '../models/MultiPartUploadURLsSchema';
import { MultipartB2CancelUpload } from '../models/MultipartB2CancelUpload';
import { MultipartB2FinishUpload } from '../models/MultipartB2FinishUpload';
import { MultipartB2StartUpload } from '../models/MultipartB2StartUpload';
import { MultipartUploadCleanupSchema } from '../models/MultipartUploadCleanupSchema';
import { MultipartUploadComposeSchema } from '../models/MultipartUploadComposeSchema';
import { MultipartUploadProxyCleanupSchema } from '../models/MultipartUploadProxyCleanupSchema';
import { MultipartUploadSchema } from '../models/MultipartUploadSchema';
import { NotificationSchema } from '../models/NotificationSchema';
import { NotificationSettingSchema } from '../models/NotificationSettingSchema';
import { NotificationSettingsSchema } from '../models/NotificationSettingsSchema';
import { NotificationsSchema } from '../models/NotificationsSchema';
import { OktaSettingsSchema } from '../models/OktaSettingsSchema';
import { OneloginSettingsSchema } from '../models/OneloginSettingsSchema';
import { OutputEndpoint } from '../models/OutputEndpoint';
import { OutputEndpointSchema } from '../models/OutputEndpointSchema';
import { PasswordChecksSchema } from '../models/PasswordChecksSchema';
import { PasswordChecksType } from '../models/PasswordChecksType';
import { PasswordChecksTypeSchema } from '../models/PasswordChecksTypeSchema';
import { PortalSettingsSchema } from '../models/PortalSettingsSchema';
import { PriceSchema } from '../models/PriceSchema';
import { PricesSchema } from '../models/PricesSchema';
import { PrioDir } from '../models/PrioDir';
import { PrioDirSchema } from '../models/PrioDirSchema';
import { ProxiesSchema } from '../models/ProxiesSchema';
import { Proxy } from '../models/Proxy';
import { ProxyBaseSchema } from '../models/ProxyBaseSchema';
import { ProxyCreateSchema } from '../models/ProxyCreateSchema';
import { ProxyDownloadURLSchema } from '../models/ProxyDownloadURLSchema';
import { ProxySchema } from '../models/ProxySchema';
import { ProxyUpdateSchema } from '../models/ProxyUpdateSchema';
import { RedirectInfoType } from '../models/RedirectInfoType';
import { RedirectInfoTypeSchema } from '../models/RedirectInfoTypeSchema';
import { RedlineSchema } from '../models/RedlineSchema';
import { ReferralCodeSchema } from '../models/ReferralCodeSchema';
import { ReferralCodesSchema } from '../models/ReferralCodesSchema';
import { RegistrationSchema } from '../models/RegistrationSchema';
import { ReindexAllAssetsSchema } from '../models/ReindexAllAssetsSchema';
import { ReindexAllCollectionsSchema } from '../models/ReindexAllCollectionsSchema';
import { ReindexAllSegmentsSchema } from '../models/ReindexAllSegmentsSchema';
import { ReindexAssetHistorySchema } from '../models/ReindexAssetHistorySchema';
import { ReindexAssetSchema } from '../models/ReindexAssetSchema';
import { ReindexCollectionContentSchema } from '../models/ReindexCollectionContentSchema';
import { ReindexCollectionSchema } from '../models/ReindexCollectionSchema';
import { ReindexExportLocationSchema } from '../models/ReindexExportLocationSchema';
import { ReindexFileSchema } from '../models/ReindexFileSchema';
import { ReindexFileSetSchema } from '../models/ReindexFileSetSchema';
import { ReindexFormatSchema } from '../models/ReindexFormatSchema';
import { ReindexGroupSchema } from '../models/ReindexGroupSchema';
import { ReindexInheritedCollectionsACLSchema } from '../models/ReindexInheritedCollectionsACLSchema';
import { ReindexJobSchema } from '../models/ReindexJobSchema';
import { ReindexPropagatingACLSchema } from '../models/ReindexPropagatingACLSchema';
import { ReindexQueueRecordSchema } from '../models/ReindexQueueRecordSchema';
import { ReindexSavedSearchGroupSchema } from '../models/ReindexSavedSearchGroupSchema';
import { ReindexSavedSearchSchema } from '../models/ReindexSavedSearchSchema';
import { ReindexSegmentSchema } from '../models/ReindexSegmentSchema';
import { ReindexSegmentsSchema } from '../models/ReindexSegmentsSchema';
import { ReindexStorageSchema } from '../models/ReindexStorageSchema';
import { ReindexTranscoderSchema } from '../models/ReindexTranscoderSchema';
import { ReindexUserSchema } from '../models/ReindexUserSchema';
import { RelatedObject } from '../models/RelatedObject';
import { RelatedObjectSchema } from '../models/RelatedObjectSchema';
import { RelationElastic } from '../models/RelationElastic';
import { RelationElasticSchema } from '../models/RelationElasticSchema';
import { RelationSchema } from '../models/RelationSchema';
import { RelationTypeSchema } from '../models/RelationTypeSchema';
import { RelationTypesSchema } from '../models/RelationTypesSchema';
import { RelationsQueryParamsSchema } from '../models/RelationsQueryParamsSchema';
import { RelationsSchema } from '../models/RelationsSchema';
import { ResetPasswordSchema } from '../models/ResetPasswordSchema';
import { ResolutionType } from '../models/ResolutionType';
import { ResolutionTypeSchema } from '../models/ResolutionTypeSchema';
import { RoleCategories } from '../models/RoleCategories';
import { RoleCategoriesSchema } from '../models/RoleCategoriesSchema';
import { S3SettingsSchema } from '../models/S3SettingsSchema';
import { SAMLLoginSchema } from '../models/SAMLLoginSchema';
import { SavedSearch } from '../models/SavedSearch';
import { SavedSearchElasticSchema } from '../models/SavedSearchElasticSchema';
import { SavedSearchGroupQueryParamsSchema } from '../models/SavedSearchGroupQueryParamsSchema';
import { SavedSearchGroupSchema } from '../models/SavedSearchGroupSchema';
import { SavedSearchGroupsSchema } from '../models/SavedSearchGroupsSchema';
import { SavedSearchQueryParamsSchema } from '../models/SavedSearchQueryParamsSchema';
import { SavedSearchResultsSchema } from '../models/SavedSearchResultsSchema';
import { SavedSearchSchema } from '../models/SavedSearchSchema';
import { SavedSearchesSchema } from '../models/SavedSearchesSchema';
import { SearchCriteria } from '../models/SearchCriteria';
import { SearchCriteriaSchema } from '../models/SearchCriteriaSchema';
import { SearchDisplayField } from '../models/SearchDisplayField';
import { SearchDisplayFieldSchema } from '../models/SearchDisplayFieldSchema';
import { SearchDocument } from '../models/SearchDocument';
import { SearchDocumentInputSchema } from '../models/SearchDocumentInputSchema';
import { SearchDocumentSchema } from '../models/SearchDocumentSchema';
import { SearchDocumentsSchema } from '../models/SearchDocumentsSchema';
import { SearchHistory } from '../models/SearchHistory';
import { SearchHistoryListSchema } from '../models/SearchHistoryListSchema';
import { SearchHistorySchema } from '../models/SearchHistorySchema';
import { SearchQueryParamsSchema } from '../models/SearchQueryParamsSchema';
import { SearchSuggestResponseSchema } from '../models/SearchSuggestResponseSchema';
import { SearchSuggestSchema } from '../models/SearchSuggestSchema';
import { SearchSuggestsResponseSchema } from '../models/SearchSuggestsResponseSchema';
import { Segment } from '../models/Segment';
import { SegmentBaseSchema } from '../models/SegmentBaseSchema';
import { SegmentElasticSchema } from '../models/SegmentElasticSchema';
import { SegmentQueryParamsSchema } from '../models/SegmentQueryParamsSchema';
import { SegmentSchema } from '../models/SegmentSchema';
import { SegmentsCopyMapping } from '../models/SegmentsCopyMapping';
import { SegmentsCopyMappingSchema } from '../models/SegmentsCopyMappingSchema';
import { SegmentsSchema } from '../models/SegmentsSchema';
import { SftpSettingsSchema } from '../models/SftpSettingsSchema';
import { ShareACLSchema } from '../models/ShareACLSchema';
import { ShareBaseSchema } from '../models/ShareBaseSchema';
import { ShareCreateSchema } from '../models/ShareCreateSchema';
import { ShareLoginSchema } from '../models/ShareLoginSchema';
import { ShareRoles } from '../models/ShareRoles';
import { ShareSchema } from '../models/ShareSchema';
import { ShareTokenSchema } from '../models/ShareTokenSchema';
import { ShareURLCreateSchema } from '../models/ShareURLCreateSchema';
import { ShareURLSchema } from '../models/ShareURLSchema';
import { ShareUserSchema } from '../models/ShareUserSchema';
import { ShareUsersSchema } from '../models/ShareUsersSchema';
import { SharesACLSchema } from '../models/SharesACLSchema';
import { SharesSchema } from '../models/SharesSchema';
import { SimpleLoginSchema } from '../models/SimpleLoginSchema';
import { Sort } from '../models/Sort';
import { SortSchema } from '../models/SortSchema';
import { SpecifiedKeyframes } from '../models/SpecifiedKeyframes';
import { SpecifiedKeyframesSchema } from '../models/SpecifiedKeyframesSchema';
import { StatsV1SystemLogsRecipientsLogsRecipientIdPost200Response } from '../models/StatsV1SystemLogsRecipientsLogsRecipientIdPost200Response';
import { StorageAccessElasticSchema } from '../models/StorageAccessElasticSchema';
import { StorageAccessSchema } from '../models/StorageAccessSchema';
import { StorageAccessesSchema } from '../models/StorageAccessesSchema';
import { StorageAutoScanSchema } from '../models/StorageAutoScanSchema';
import { StorageFileSchema } from '../models/StorageFileSchema';
import { StorageFileUpdateSchema } from '../models/StorageFileUpdateSchema';
import { StorageFilesDeleteBulkSchema } from '../models/StorageFilesDeleteBulkSchema';
import { StorageFilesQueryParamsSchema } from '../models/StorageFilesQueryParamsSchema';
import { StoragePrivateDataSchema } from '../models/StoragePrivateDataSchema';
import { StorageReadSchema } from '../models/StorageReadSchema';
import { StorageScanSchema } from '../models/StorageScanSchema';
import { StorageSchema } from '../models/StorageSchema';
import { StorageUsageSchema } from '../models/StorageUsageSchema';
import { StorageUsagesElasticSchema } from '../models/StorageUsagesElasticSchema';
import { StorageUsagesSchema } from '../models/StorageUsagesSchema';
import { StoragesQueryParamsSchema } from '../models/StoragesQueryParamsSchema';
import { StoragesReadSchema } from '../models/StoragesReadSchema';
import { SubscriptionSchema } from '../models/SubscriptionSchema';
import { SubscriptionsSchema } from '../models/SubscriptionsSchema';
import { Subtitle } from '../models/Subtitle';
import { SubtitleRequestSchema } from '../models/SubtitleRequestSchema';
import { SubtitleSchema } from '../models/SubtitleSchema';
import { SubtitlesSchema } from '../models/SubtitlesSchema';
import { SynchronizeCollectionKeyframesSchema } from '../models/SynchronizeCollectionKeyframesSchema';
import { SystemDomainFromReferralCodeSchema } from '../models/SystemDomainFromReferralCodeSchema';
import { SystemDomainFromTemplateSchema } from '../models/SystemDomainFromTemplateSchema';
import { SystemDomainSchema } from '../models/SystemDomainSchema';
import { SystemDomainSuperAdminSchema } from '../models/SystemDomainSuperAdminSchema';
import { SystemDomainsSchema } from '../models/SystemDomainsSchema';
import { SystemNotificationSchema } from '../models/SystemNotificationSchema';
import { SystemSettingPublicSchema } from '../models/SystemSettingPublicSchema';
import { SystemSettingSchema } from '../models/SystemSettingSchema';
import { TelestreamCloudSchema } from '../models/TelestreamCloudSchema';
import { TemporaryFileCreateSchema } from '../models/TemporaryFileCreateSchema';
import { TemporaryFileSetSchema } from '../models/TemporaryFileSetSchema';
import { TemporaryPasswordTokenSchema } from '../models/TemporaryPasswordTokenSchema';
import { ThumbnailJob } from '../models/ThumbnailJob';
import { ThumbnailJobSchema } from '../models/ThumbnailJobSchema';
import { TimeBaseType } from '../models/TimeBaseType';
import { TimeBaseTypeSchema } from '../models/TimeBaseTypeSchema';
import { TimeCodeType } from '../models/TimeCodeType';
import { TimeCodeTypeSchema } from '../models/TimeCodeTypeSchema';
import { TokenBaseSchema } from '../models/TokenBaseSchema';
import { TokenOutputSchema } from '../models/TokenOutputSchema';
import { TokenSchema } from '../models/TokenSchema';
import { TokensSchema } from '../models/TokensSchema';
import { TranscodeESQueueRecordsSchema } from '../models/TranscodeESQueueRecordsSchema';
import { TranscodeElasticQueueRecord } from '../models/TranscodeElasticQueueRecord';
import { TranscodeElasticQueueRecordSchema } from '../models/TranscodeElasticQueueRecordSchema';
import { TranscodeJob } from '../models/TranscodeJob';
import { TranscodeJobSchema } from '../models/TranscodeJobSchema';
import { TranscodeQueueObjectSchema } from '../models/TranscodeQueueObjectSchema';
import { TranscodeQueueRecordSchema } from '../models/TranscodeQueueRecordSchema';
import { TranscodeQueueSchema } from '../models/TranscodeQueueSchema';
import { TranscodeRequestSchema } from '../models/TranscodeRequestSchema';
import { TranscodeResponseSchema } from '../models/TranscodeResponseSchema';
import { TranscodeValidateMediaInfoSchema } from '../models/TranscodeValidateMediaInfoSchema';
import { TranscoderByStorageReadSchema } from '../models/TranscoderByStorageReadSchema';
import { TranscoderReadSchema } from '../models/TranscoderReadSchema';
import { TranscoderSchema } from '../models/TranscoderSchema';
import { TranscoderUsageSchema } from '../models/TranscoderUsageSchema';
import { TranscoderUsagesElasticSchema } from '../models/TranscoderUsagesElasticSchema';
import { TranscoderUsagesSchema } from '../models/TranscoderUsagesSchema';
import { Transcoders } from '../models/Transcoders';
import { TranscodersByStorageSchema } from '../models/TranscodersByStorageSchema';
import { TranscodersQueryParamsSchema } from '../models/TranscodersQueryParamsSchema';
import { TranscodersSchema } from '../models/TranscodersSchema';
import { TranscodersSchema1 } from '../models/TranscodersSchema1';
import { TranscribeSchema } from '../models/TranscribeSchema';
import { TranscriptionElementType } from '../models/TranscriptionElementType';
import { TranscriptionElementTypeSchema } from '../models/TranscriptionElementTypeSchema';
import { TranscriptionType } from '../models/TranscriptionType';
import { TranscriptionTypeSchema } from '../models/TranscriptionTypeSchema';
import { TransferCloudSchema } from '../models/TransferCloudSchema';
import { TransferFromStorageReadSchema } from '../models/TransferFromStorageReadSchema';
import { TransferFromStorageSchema } from '../models/TransferFromStorageSchema';
import { TransferSignedURLSchema } from '../models/TransferSignedURLSchema';
import { TransferStatsSchema } from '../models/TransferStatsSchema';
import { TransferToStorageReadSchema } from '../models/TransferToStorageReadSchema';
import { TransferToStorageSchema } from '../models/TransferToStorageSchema';
import { TransfersFromStorageSchema } from '../models/TransfersFromStorageSchema';
import { TransfersToStorageSchema } from '../models/TransfersToStorageSchema';
import { UnpublishedUserAuditSchema } from '../models/UnpublishedUserAuditSchema';
import { UploadIconikStorageGatewayLogsSchema } from '../models/UploadIconikStorageGatewayLogsSchema';
import { User } from '../models/User';
import { UserACL } from '../models/UserACL';
import { UserACL1 } from '../models/UserACL1';
import { UserACLSchema } from '../models/UserACLSchema';
import { UserAuditSchema } from '../models/UserAuditSchema';
import { UserBaseSchema } from '../models/UserBaseSchema';
import { UserByEmailAndLoginTypeSchema } from '../models/UserByEmailAndLoginTypeSchema';
import { UserByEmailSchema } from '../models/UserByEmailSchema';
import { UserCreateSchema } from '../models/UserCreateSchema';
import { UserEditInternalSchema } from '../models/UserEditInternalSchema';
import { UserEditSchema } from '../models/UserEditSchema';
import { UserElasticSchema } from '../models/UserElasticSchema';
import { UserIDsSchema } from '../models/UserIDsSchema';
import { UserLoginSchema } from '../models/UserLoginSchema';
import { UserRolesSchema } from '../models/UserRolesSchema';
import { UserSamlCreateSchema } from '../models/UserSamlCreateSchema';
import { UserSamlIdpUpdateSchema } from '../models/UserSamlIdpUpdateSchema';
import { UserSamlUpdateSchema } from '../models/UserSamlUpdateSchema';
import { UserSchema } from '../models/UserSchema';
import { UserSchema1 } from '../models/UserSchema1';
import { UserSettingRemoveAttributesSchema } from '../models/UserSettingRemoveAttributesSchema';
import { UserSettingSchema } from '../models/UserSettingSchema';
import { UserSystemDomainInviteSchema } from '../models/UserSystemDomainInviteSchema';
import { UserSystemMetadata } from '../models/UserSystemMetadata';
import { UserSystemMetadataSchema } from '../models/UserSystemMetadataSchema';
import { UserUsagesDetailedSchema } from '../models/UserUsagesDetailedSchema';
import { UserUsagesElasticSchema } from '../models/UserUsagesElasticSchema';
import { UserUsagesSchema } from '../models/UserUsagesSchema';
import { UsersByEmailsSchema } from '../models/UsersByEmailsSchema';
import { UsersCheckAclSchema } from '../models/UsersCheckAclSchema';
import { UsersQueryParamsSchema } from '../models/UsersQueryParamsSchema';
import { UsersSchema } from '../models/UsersSchema';
import { UsersSchema1 } from '../models/UsersSchema1';
import { UsersV1GroupsGroupIdLogoPost200Response } from '../models/UsersV1GroupsGroupIdLogoPost200Response';
import { UsersV1UsersCurrentPhotoPost201Response } from '../models/UsersV1UsersCurrentPhotoPost201Response';
import { UsersV1UsersCurrentPhotoPostRequest } from '../models/UsersV1UsersCurrentPhotoPostRequest';
import { VantageSettingsSchema } from '../models/VantageSettingsSchema';
import { WatchFolderVideoTranscoderSchema } from '../models/WatchFolderVideoTranscoderSchema';
import { WebhookBaseSchema } from '../models/WebhookBaseSchema';
import { WebhookCreateSchema } from '../models/WebhookCreateSchema';
import { WebhookInternalSchema } from '../models/WebhookInternalSchema';
import { WebhookSchema } from '../models/WebhookSchema';
import { WebhooksSchema } from '../models/WebhooksSchema';
import { ZencoderSettingsSchema } from '../models/ZencoderSettingsSchema';

import { ObservableAclsApi } from "./ObservableAPI";
import { AclsApiRequestFactory, AclsApiResponseProcessor} from "../apis/AclsApi";

export interface AclsApiAclsV1AclObjectTypeContentDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclObjectTypeContentDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclObjectTypeContentDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclObjectTypeContentDelete
     */
    objectType: string
    /**
     * body
     * @type DeleteBulkACLsSchema
     * @memberof AclsApiaclsV1AclObjectTypeContentDelete
     */
    deleteBulkACLsSchema: DeleteBulkACLsSchema
}

export interface AclsApiAclsV1AclObjectTypeContentPutRequest {
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclObjectTypeContentPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclObjectTypeContentPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclObjectTypeContentPut
     */
    objectType: string
    /**
     * body
     * @type CreateBulkACLsSchema
     * @memberof AclsApiaclsV1AclObjectTypeContentPut
     */
    createBulkACLsSchema: CreateBulkACLsSchema
}

export interface AclsApiAclsV1AclObjectTypeDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclObjectTypeDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclObjectTypeDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclObjectTypeDelete
     */
    objectType: string
    /**
     * body
     * @type DeleteACLsSchema
     * @memberof AclsApiaclsV1AclObjectTypeDelete
     */
    deleteACLsSchema: DeleteACLsSchema
}

export interface AclsApiAclsV1AclObjectTypeObjectKeyGetRequest {
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclObjectTypeObjectKeyGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclObjectTypeObjectKeyGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclObjectTypeObjectKeyGet
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclObjectTypeObjectKeyGet
     */
    objectKey: string
}

export interface AclsApiAclsV1AclObjectTypeObjectKeyPermissionGetRequest {
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclObjectTypeObjectKeyPermissionGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclObjectTypeObjectKeyPermissionGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclObjectTypeObjectKeyPermissionGet
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclObjectTypeObjectKeyPermissionGet
     */
    objectKey: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclObjectTypeObjectKeyPermissionGet
     */
    permission: string
}

export interface AclsApiAclsV1AclObjectTypeObjectKeyPermissionsGetRequest {
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclObjectTypeObjectKeyPermissionsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclObjectTypeObjectKeyPermissionsGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclObjectTypeObjectKeyPermissionsGet
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclObjectTypeObjectKeyPermissionsGet
     */
    objectKey: string
}

export interface AclsApiAclsV1AclObjectTypePermissionPostRequest {
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclObjectTypePermissionPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclObjectTypePermissionPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclObjectTypePermissionPost
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclObjectTypePermissionPost
     */
    permission: string
    /**
     * body
     * @type ACLsSchema
     * @memberof AclsApiaclsV1AclObjectTypePermissionPost
     */
    aCLsSchema: ACLsSchema
}

export interface AclsApiAclsV1AclObjectTypePutRequest {
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclObjectTypePut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclObjectTypePut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclObjectTypePut
     */
    objectType: string
    /**
     * body
     * @type CreateACLsSchema
     * @memberof AclsApiaclsV1AclObjectTypePut
     */
    createACLsSchema: CreateACLsSchema
}

export interface AclsApiAclsV1AclPostRequest {
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclPost
     */
    authToken: string
    /**
     * body
     * @type CheckBulkACLsSchema
     * @memberof AclsApiaclsV1AclPost
     */
    checkBulkACLsSchema: CheckBulkACLsSchema
}

export interface AclsApiAclsV1AclTemplatesGetRequest {
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclTemplatesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclTemplatesGet
     */
    authToken: string
}

export interface AclsApiAclsV1AclTemplatesPostRequest {
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclTemplatesPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclTemplatesPost
     */
    authToken: string
    /**
     * body
     * @type ACLTemplateSchema
     * @memberof AclsApiaclsV1AclTemplatesPost
     */
    aCLTemplateSchema: ACLTemplateSchema
}

export interface AclsApiAclsV1AclTemplatesTemplateIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclTemplatesTemplateIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclTemplatesTemplateIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclTemplatesTemplateIdDelete
     */
    templateId: string
}

export interface AclsApiAclsV1AclTemplatesTemplateIdGetRequest {
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclTemplatesTemplateIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclTemplatesTemplateIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclTemplatesTemplateIdGet
     */
    templateId: string
}

export interface AclsApiAclsV1AclTemplatesTemplateIdObjectTypeObjectKeyPostRequest {
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclTemplatesTemplateIdObjectTypeObjectKeyPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclTemplatesTemplateIdObjectTypeObjectKeyPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclTemplatesTemplateIdObjectTypeObjectKeyPost
     */
    templateId: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclTemplatesTemplateIdObjectTypeObjectKeyPost
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclTemplatesTemplateIdObjectTypeObjectKeyPost
     */
    objectKey: string
    /**
     * 
     * @type boolean
     * @memberof AclsApiaclsV1AclTemplatesTemplateIdObjectTypeObjectKeyPost
     */
    ignoreReindexing?: boolean
    /**
     * Do not apply any ACLs that are not in the collection_id provided (Parent collection normally)
     * @type string
     * @memberof AclsApiaclsV1AclTemplatesTemplateIdObjectTypeObjectKeyPost
     */
    restrictAclsCollectionId?: string
}

export interface AclsApiAclsV1AclTemplatesTemplateIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclTemplatesTemplateIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclTemplatesTemplateIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclTemplatesTemplateIdPatch
     */
    templateId: string
    /**
     * body
     * @type ACLTemplateSchema
     * @memberof AclsApiaclsV1AclTemplatesTemplateIdPatch
     */
    aCLTemplateSchema: ACLTemplateSchema
}

export interface AclsApiAclsV1AclTemplatesTemplateIdPutRequest {
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclTemplatesTemplateIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclTemplatesTemplateIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1AclTemplatesTemplateIdPut
     */
    templateId: string
    /**
     * body
     * @type ACLTemplateSchema
     * @memberof AclsApiaclsV1AclTemplatesTemplateIdPut
     */
    aCLTemplateSchema: ACLTemplateSchema
}

export interface AclsApiAclsV1GroupsGroupIdAclObjectTypeObjectKeyDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1GroupsGroupIdAclObjectTypeObjectKeyDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1GroupsGroupIdAclObjectTypeObjectKeyDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1GroupsGroupIdAclObjectTypeObjectKeyDelete
     */
    groupId: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1GroupsGroupIdAclObjectTypeObjectKeyDelete
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1GroupsGroupIdAclObjectTypeObjectKeyDelete
     */
    objectKey: string
}

export interface AclsApiAclsV1GroupsGroupIdAclObjectTypeObjectKeyGetRequest {
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1GroupsGroupIdAclObjectTypeObjectKeyGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1GroupsGroupIdAclObjectTypeObjectKeyGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1GroupsGroupIdAclObjectTypeObjectKeyGet
     */
    groupId: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1GroupsGroupIdAclObjectTypeObjectKeyGet
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1GroupsGroupIdAclObjectTypeObjectKeyGet
     */
    objectKey: string
}

export interface AclsApiAclsV1GroupsGroupIdAclObjectTypeObjectKeyPermissionGetRequest {
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1GroupsGroupIdAclObjectTypeObjectKeyPermissionGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1GroupsGroupIdAclObjectTypeObjectKeyPermissionGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1GroupsGroupIdAclObjectTypeObjectKeyPermissionGet
     */
    groupId: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1GroupsGroupIdAclObjectTypeObjectKeyPermissionGet
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1GroupsGroupIdAclObjectTypeObjectKeyPermissionGet
     */
    objectKey: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1GroupsGroupIdAclObjectTypeObjectKeyPermissionGet
     */
    permission: string
}

export interface AclsApiAclsV1GroupsGroupIdAclObjectTypeObjectKeyPutRequest {
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1GroupsGroupIdAclObjectTypeObjectKeyPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1GroupsGroupIdAclObjectTypeObjectKeyPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1GroupsGroupIdAclObjectTypeObjectKeyPut
     */
    groupId: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1GroupsGroupIdAclObjectTypeObjectKeyPut
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1GroupsGroupIdAclObjectTypeObjectKeyPut
     */
    objectKey: string
    /**
     * body
     * @type GroupACLSchema
     * @memberof AclsApiaclsV1GroupsGroupIdAclObjectTypeObjectKeyPut
     */
    groupACLSchema: GroupACLSchema
}

export interface AclsApiAclsV1SharesObjectTypeObjectKeyGetRequest {
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesObjectTypeObjectKeyGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesObjectTypeObjectKeyGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesObjectTypeObjectKeyGet
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesObjectTypeObjectKeyGet
     */
    objectKey: string
}

export interface AclsApiAclsV1SharesShareIdAclObjectTypeObjectKeyDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypeObjectKeyDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypeObjectKeyDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypeObjectKeyDelete
     */
    shareId: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypeObjectKeyDelete
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypeObjectKeyDelete
     */
    objectKey: string
}

export interface AclsApiAclsV1SharesShareIdAclObjectTypeObjectKeyGetRequest {
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypeObjectKeyGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypeObjectKeyGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypeObjectKeyGet
     */
    shareId: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypeObjectKeyGet
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypeObjectKeyGet
     */
    objectKey: string
}

export interface AclsApiAclsV1SharesShareIdAclObjectTypeObjectKeyPermissionGetRequest {
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypeObjectKeyPermissionGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypeObjectKeyPermissionGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypeObjectKeyPermissionGet
     */
    shareId: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypeObjectKeyPermissionGet
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypeObjectKeyPermissionGet
     */
    objectKey: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypeObjectKeyPermissionGet
     */
    permission: string
}

export interface AclsApiAclsV1SharesShareIdAclObjectTypeObjectKeyPostRequest {
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypeObjectKeyPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypeObjectKeyPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypeObjectKeyPost
     */
    shareId: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypeObjectKeyPost
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypeObjectKeyPost
     */
    objectKey: string
    /**
     * body
     * @type ShareACLSchema
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypeObjectKeyPost
     */
    shareACLSchema: ShareACLSchema
}

export interface AclsApiAclsV1SharesShareIdAclObjectTypeObjectKeyPutRequest {
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypeObjectKeyPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypeObjectKeyPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypeObjectKeyPut
     */
    shareId: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypeObjectKeyPut
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypeObjectKeyPut
     */
    objectKey: string
    /**
     * body
     * @type ShareACLSchema
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypeObjectKeyPut
     */
    shareACLSchema: ShareACLSchema
}

export interface AclsApiAclsV1SharesShareIdAclObjectTypePutRequest {
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypePut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypePut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypePut
     */
    shareId: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypePut
     */
    objectType: string
    /**
     * body
     * @type CreateShareACLsSchema
     * @memberof AclsApiaclsV1SharesShareIdAclObjectTypePut
     */
    createShareACLsSchema: CreateShareACLsSchema
}

export interface AclsApiAclsV1UsersUserIdAclObjectTypeObjectKeyDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1UsersUserIdAclObjectTypeObjectKeyDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1UsersUserIdAclObjectTypeObjectKeyDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1UsersUserIdAclObjectTypeObjectKeyDelete
     */
    userId: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1UsersUserIdAclObjectTypeObjectKeyDelete
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1UsersUserIdAclObjectTypeObjectKeyDelete
     */
    objectKey: string
}

export interface AclsApiAclsV1UsersUserIdAclObjectTypeObjectKeyGetRequest {
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1UsersUserIdAclObjectTypeObjectKeyGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1UsersUserIdAclObjectTypeObjectKeyGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1UsersUserIdAclObjectTypeObjectKeyGet
     */
    userId: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1UsersUserIdAclObjectTypeObjectKeyGet
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1UsersUserIdAclObjectTypeObjectKeyGet
     */
    objectKey: string
}

export interface AclsApiAclsV1UsersUserIdAclObjectTypeObjectKeyPermissionGetRequest {
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1UsersUserIdAclObjectTypeObjectKeyPermissionGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1UsersUserIdAclObjectTypeObjectKeyPermissionGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1UsersUserIdAclObjectTypeObjectKeyPermissionGet
     */
    userId: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1UsersUserIdAclObjectTypeObjectKeyPermissionGet
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1UsersUserIdAclObjectTypeObjectKeyPermissionGet
     */
    objectKey: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1UsersUserIdAclObjectTypeObjectKeyPermissionGet
     */
    permission: string
}

export interface AclsApiAclsV1UsersUserIdAclObjectTypeObjectKeyPutRequest {
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1UsersUserIdAclObjectTypeObjectKeyPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1UsersUserIdAclObjectTypeObjectKeyPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1UsersUserIdAclObjectTypeObjectKeyPut
     */
    userId: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1UsersUserIdAclObjectTypeObjectKeyPut
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AclsApiaclsV1UsersUserIdAclObjectTypeObjectKeyPut
     */
    objectKey: string
    /**
     * body
     * @type UserACLSchema
     * @memberof AclsApiaclsV1UsersUserIdAclObjectTypeObjectKeyPut
     */
    userACLSchema: UserACLSchema
}

export class ObjectAclsApi {
    private api: ObservableAclsApi

    public constructor(configuration: Configuration, requestFactory?: AclsApiRequestFactory, responseProcessor?: AclsApiResponseProcessor) {
        this.api = new ObservableAclsApi(configuration, requestFactory, responseProcessor);
    }

    /**
     *  Required roles:  - can_delete_acls 
     * Delete acls for content of multiple objects
     * @param param the request object
     */
    public aclsV1AclObjectTypeContentDeleteWithHttpInfo(param: AclsApiAclsV1AclObjectTypeContentDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.aclsV1AclObjectTypeContentDeleteWithHttpInfo(param.appID, param.authToken, param.objectType, param.deleteBulkACLsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_acls 
     * Delete acls for content of multiple objects
     * @param param the request object
     */
    public aclsV1AclObjectTypeContentDelete(param: AclsApiAclsV1AclObjectTypeContentDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.aclsV1AclObjectTypeContentDelete(param.appID, param.authToken, param.objectType, param.deleteBulkACLsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_acls 
     * Create a new acl for content of multiple objects
     * @param param the request object
     */
    public aclsV1AclObjectTypeContentPutWithHttpInfo(param: AclsApiAclsV1AclObjectTypeContentPutRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.aclsV1AclObjectTypeContentPutWithHttpInfo(param.appID, param.authToken, param.objectType, param.createBulkACLsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_acls 
     * Create a new acl for content of multiple objects
     * @param param the request object
     */
    public aclsV1AclObjectTypeContentPut(param: AclsApiAclsV1AclObjectTypeContentPutRequest, options?: Configuration): Promise<void> {
        return this.api.aclsV1AclObjectTypeContentPut(param.appID, param.authToken, param.objectType, param.createBulkACLsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_acls 
     * Delete acls for multiple objects
     * @param param the request object
     */
    public aclsV1AclObjectTypeDeleteWithHttpInfo(param: AclsApiAclsV1AclObjectTypeDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.aclsV1AclObjectTypeDeleteWithHttpInfo(param.appID, param.authToken, param.objectType, param.deleteACLsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_acls 
     * Delete acls for multiple objects
     * @param param the request object
     */
    public aclsV1AclObjectTypeDelete(param: AclsApiAclsV1AclObjectTypeDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.aclsV1AclObjectTypeDelete(param.appID, param.authToken, param.objectType, param.deleteACLsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_acls 
     * List of object permissions
     * @param param the request object
     */
    public aclsV1AclObjectTypeObjectKeyGetWithHttpInfo(param: AclsApiAclsV1AclObjectTypeObjectKeyGetRequest, options?: Configuration): Promise<HttpInfo<ACLSchema>> {
        return this.api.aclsV1AclObjectTypeObjectKeyGetWithHttpInfo(param.appID, param.authToken, param.objectType, param.objectKey,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_acls 
     * List of object permissions
     * @param param the request object
     */
    public aclsV1AclObjectTypeObjectKeyGet(param: AclsApiAclsV1AclObjectTypeObjectKeyGetRequest, options?: Configuration): Promise<ACLSchema> {
        return this.api.aclsV1AclObjectTypeObjectKeyGet(param.appID, param.authToken, param.objectType, param.objectKey,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_acls 
     * Check if particular object has required permission
     * @param param the request object
     */
    public aclsV1AclObjectTypeObjectKeyPermissionGetWithHttpInfo(param: AclsApiAclsV1AclObjectTypeObjectKeyPermissionGetRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.aclsV1AclObjectTypeObjectKeyPermissionGetWithHttpInfo(param.appID, param.authToken, param.objectType, param.objectKey, param.permission,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_acls 
     * Check if particular object has required permission
     * @param param the request object
     */
    public aclsV1AclObjectTypeObjectKeyPermissionGet(param: AclsApiAclsV1AclObjectTypeObjectKeyPermissionGetRequest, options?: Configuration): Promise<void> {
        return this.api.aclsV1AclObjectTypeObjectKeyPermissionGet(param.appID, param.authToken, param.objectType, param.objectKey, param.permission,  options).toPromise();
    }

    /**
     * 
     * List of permissions for the user
     * @param param the request object
     */
    public aclsV1AclObjectTypeObjectKeyPermissionsGetWithHttpInfo(param: AclsApiAclsV1AclObjectTypeObjectKeyPermissionsGetRequest, options?: Configuration): Promise<HttpInfo<CombinedPermissionsSchema>> {
        return this.api.aclsV1AclObjectTypeObjectKeyPermissionsGetWithHttpInfo(param.appID, param.authToken, param.objectType, param.objectKey,  options).toPromise();
    }

    /**
     * 
     * List of permissions for the user
     * @param param the request object
     */
    public aclsV1AclObjectTypeObjectKeyPermissionsGet(param: AclsApiAclsV1AclObjectTypeObjectKeyPermissionsGetRequest, options?: Configuration): Promise<CombinedPermissionsSchema> {
        return this.api.aclsV1AclObjectTypeObjectKeyPermissionsGet(param.appID, param.authToken, param.objectType, param.objectKey,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_acls 
     * Check if objects have required permission
     * @param param the request object
     */
    public aclsV1AclObjectTypePermissionPostWithHttpInfo(param: AclsApiAclsV1AclObjectTypePermissionPostRequest, options?: Configuration): Promise<HttpInfo<BulkACLSchema>> {
        return this.api.aclsV1AclObjectTypePermissionPostWithHttpInfo(param.appID, param.authToken, param.objectType, param.permission, param.aCLsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_acls 
     * Check if objects have required permission
     * @param param the request object
     */
    public aclsV1AclObjectTypePermissionPost(param: AclsApiAclsV1AclObjectTypePermissionPostRequest, options?: Configuration): Promise<BulkACLSchema> {
        return this.api.aclsV1AclObjectTypePermissionPost(param.appID, param.authToken, param.objectType, param.permission, param.aCLsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_acls 
     * Create a new acl for multiple objects
     * @param param the request object
     */
    public aclsV1AclObjectTypePutWithHttpInfo(param: AclsApiAclsV1AclObjectTypePutRequest, options?: Configuration): Promise<HttpInfo<CreateACLsResultSchema>> {
        return this.api.aclsV1AclObjectTypePutWithHttpInfo(param.appID, param.authToken, param.objectType, param.createACLsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_acls 
     * Create a new acl for multiple objects
     * @param param the request object
     */
    public aclsV1AclObjectTypePut(param: AclsApiAclsV1AclObjectTypePutRequest, options?: Configuration): Promise<CreateACLsResultSchema> {
        return this.api.aclsV1AclObjectTypePut(param.appID, param.authToken, param.objectType, param.createACLsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_acls 
     * Check if objects have required permission
     * @param param the request object
     */
    public aclsV1AclPostWithHttpInfo(param: AclsApiAclsV1AclPostRequest, options?: Configuration): Promise<HttpInfo<BulkACLSchema>> {
        return this.api.aclsV1AclPostWithHttpInfo(param.appID, param.authToken, param.checkBulkACLsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_acls 
     * Check if objects have required permission
     * @param param the request object
     */
    public aclsV1AclPost(param: AclsApiAclsV1AclPostRequest, options?: Configuration): Promise<BulkACLSchema> {
        return this.api.aclsV1AclPost(param.appID, param.authToken, param.checkBulkACLsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_acl_templates 
     * Retreive all acl templates
     * @param param the request object
     */
    public aclsV1AclTemplatesGetWithHttpInfo(param: AclsApiAclsV1AclTemplatesGetRequest, options?: Configuration): Promise<HttpInfo<ACLTemplatesSchema>> {
        return this.api.aclsV1AclTemplatesGetWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_acl_templates 
     * Retreive all acl templates
     * @param param the request object
     */
    public aclsV1AclTemplatesGet(param: AclsApiAclsV1AclTemplatesGetRequest, options?: Configuration): Promise<ACLTemplatesSchema> {
        return this.api.aclsV1AclTemplatesGet(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_acl_templates 
     * Create an acl template
     * @param param the request object
     */
    public aclsV1AclTemplatesPostWithHttpInfo(param: AclsApiAclsV1AclTemplatesPostRequest, options?: Configuration): Promise<HttpInfo<ACLTemplateSchema>> {
        return this.api.aclsV1AclTemplatesPostWithHttpInfo(param.appID, param.authToken, param.aCLTemplateSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_acl_templates 
     * Create an acl template
     * @param param the request object
     */
    public aclsV1AclTemplatesPost(param: AclsApiAclsV1AclTemplatesPostRequest, options?: Configuration): Promise<ACLTemplateSchema> {
        return this.api.aclsV1AclTemplatesPost(param.appID, param.authToken, param.aCLTemplateSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_acl_templates 
     * Remove an acl template
     * @param param the request object
     */
    public aclsV1AclTemplatesTemplateIdDeleteWithHttpInfo(param: AclsApiAclsV1AclTemplatesTemplateIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.aclsV1AclTemplatesTemplateIdDeleteWithHttpInfo(param.appID, param.authToken, param.templateId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_acl_templates 
     * Remove an acl template
     * @param param the request object
     */
    public aclsV1AclTemplatesTemplateIdDelete(param: AclsApiAclsV1AclTemplatesTemplateIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.aclsV1AclTemplatesTemplateIdDelete(param.appID, param.authToken, param.templateId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_acl_templates 
     * Retreive an acl template
     * @param param the request object
     */
    public aclsV1AclTemplatesTemplateIdGetWithHttpInfo(param: AclsApiAclsV1AclTemplatesTemplateIdGetRequest, options?: Configuration): Promise<HttpInfo<ACLTemplateSchema>> {
        return this.api.aclsV1AclTemplatesTemplateIdGetWithHttpInfo(param.appID, param.authToken, param.templateId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_acl_templates 
     * Retreive an acl template
     * @param param the request object
     */
    public aclsV1AclTemplatesTemplateIdGet(param: AclsApiAclsV1AclTemplatesTemplateIdGetRequest, options?: Configuration): Promise<ACLTemplateSchema> {
        return this.api.aclsV1AclTemplatesTemplateIdGet(param.appID, param.authToken, param.templateId,  options).toPromise();
    }

    /**
     * 
     * Apply template permissions to an object
     * @param param the request object
     */
    public aclsV1AclTemplatesTemplateIdObjectTypeObjectKeyPostWithHttpInfo(param: AclsApiAclsV1AclTemplatesTemplateIdObjectTypeObjectKeyPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.aclsV1AclTemplatesTemplateIdObjectTypeObjectKeyPostWithHttpInfo(param.appID, param.authToken, param.templateId, param.objectType, param.objectKey, param.ignoreReindexing, param.restrictAclsCollectionId,  options).toPromise();
    }

    /**
     * 
     * Apply template permissions to an object
     * @param param the request object
     */
    public aclsV1AclTemplatesTemplateIdObjectTypeObjectKeyPost(param: AclsApiAclsV1AclTemplatesTemplateIdObjectTypeObjectKeyPostRequest, options?: Configuration): Promise<void> {
        return this.api.aclsV1AclTemplatesTemplateIdObjectTypeObjectKeyPost(param.appID, param.authToken, param.templateId, param.objectType, param.objectKey, param.ignoreReindexing, param.restrictAclsCollectionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_acl_templates 
     * Update an acl template
     * @param param the request object
     */
    public aclsV1AclTemplatesTemplateIdPatchWithHttpInfo(param: AclsApiAclsV1AclTemplatesTemplateIdPatchRequest, options?: Configuration): Promise<HttpInfo<ACLTemplateSchema>> {
        return this.api.aclsV1AclTemplatesTemplateIdPatchWithHttpInfo(param.appID, param.authToken, param.templateId, param.aCLTemplateSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_acl_templates 
     * Update an acl template
     * @param param the request object
     */
    public aclsV1AclTemplatesTemplateIdPatch(param: AclsApiAclsV1AclTemplatesTemplateIdPatchRequest, options?: Configuration): Promise<ACLTemplateSchema> {
        return this.api.aclsV1AclTemplatesTemplateIdPatch(param.appID, param.authToken, param.templateId, param.aCLTemplateSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_acl_templates 
     * Update an acl template
     * @param param the request object
     */
    public aclsV1AclTemplatesTemplateIdPutWithHttpInfo(param: AclsApiAclsV1AclTemplatesTemplateIdPutRequest, options?: Configuration): Promise<HttpInfo<ACLTemplateSchema>> {
        return this.api.aclsV1AclTemplatesTemplateIdPutWithHttpInfo(param.appID, param.authToken, param.templateId, param.aCLTemplateSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_acl_templates 
     * Update an acl template
     * @param param the request object
     */
    public aclsV1AclTemplatesTemplateIdPut(param: AclsApiAclsV1AclTemplatesTemplateIdPutRequest, options?: Configuration): Promise<ACLTemplateSchema> {
        return this.api.aclsV1AclTemplatesTemplateIdPut(param.appID, param.authToken, param.templateId, param.aCLTemplateSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_acls 
     * Delete a particular acl by id for an object
     * @param param the request object
     */
    public aclsV1GroupsGroupIdAclObjectTypeObjectKeyDeleteWithHttpInfo(param: AclsApiAclsV1GroupsGroupIdAclObjectTypeObjectKeyDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.aclsV1GroupsGroupIdAclObjectTypeObjectKeyDeleteWithHttpInfo(param.appID, param.authToken, param.groupId, param.objectType, param.objectKey,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_acls 
     * Delete a particular acl by id for an object
     * @param param the request object
     */
    public aclsV1GroupsGroupIdAclObjectTypeObjectKeyDelete(param: AclsApiAclsV1GroupsGroupIdAclObjectTypeObjectKeyDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.aclsV1GroupsGroupIdAclObjectTypeObjectKeyDelete(param.appID, param.authToken, param.groupId, param.objectType, param.objectKey,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_acls 
     * List of groups permissions for an object
     * @param param the request object
     */
    public aclsV1GroupsGroupIdAclObjectTypeObjectKeyGetWithHttpInfo(param: AclsApiAclsV1GroupsGroupIdAclObjectTypeObjectKeyGetRequest, options?: Configuration): Promise<HttpInfo<GroupACLSchema>> {
        return this.api.aclsV1GroupsGroupIdAclObjectTypeObjectKeyGetWithHttpInfo(param.appID, param.authToken, param.groupId, param.objectType, param.objectKey,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_acls 
     * List of groups permissions for an object
     * @param param the request object
     */
    public aclsV1GroupsGroupIdAclObjectTypeObjectKeyGet(param: AclsApiAclsV1GroupsGroupIdAclObjectTypeObjectKeyGetRequest, options?: Configuration): Promise<GroupACLSchema> {
        return this.api.aclsV1GroupsGroupIdAclObjectTypeObjectKeyGet(param.appID, param.authToken, param.groupId, param.objectType, param.objectKey,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_acls 
     * Check if group has particular permission for an object
     * @param param the request object
     */
    public aclsV1GroupsGroupIdAclObjectTypeObjectKeyPermissionGetWithHttpInfo(param: AclsApiAclsV1GroupsGroupIdAclObjectTypeObjectKeyPermissionGetRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.aclsV1GroupsGroupIdAclObjectTypeObjectKeyPermissionGetWithHttpInfo(param.appID, param.authToken, param.groupId, param.objectType, param.objectKey, param.permission,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_acls 
     * Check if group has particular permission for an object
     * @param param the request object
     */
    public aclsV1GroupsGroupIdAclObjectTypeObjectKeyPermissionGet(param: AclsApiAclsV1GroupsGroupIdAclObjectTypeObjectKeyPermissionGetRequest, options?: Configuration): Promise<void> {
        return this.api.aclsV1GroupsGroupIdAclObjectTypeObjectKeyPermissionGet(param.appID, param.authToken, param.groupId, param.objectType, param.objectKey, param.permission,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_acls 
     * Update or create group acl for an object
     * @param param the request object
     */
    public aclsV1GroupsGroupIdAclObjectTypeObjectKeyPutWithHttpInfo(param: AclsApiAclsV1GroupsGroupIdAclObjectTypeObjectKeyPutRequest, options?: Configuration): Promise<HttpInfo<GroupACLSchema>> {
        return this.api.aclsV1GroupsGroupIdAclObjectTypeObjectKeyPutWithHttpInfo(param.appID, param.authToken, param.groupId, param.objectType, param.objectKey, param.groupACLSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_acls 
     * Update or create group acl for an object
     * @param param the request object
     */
    public aclsV1GroupsGroupIdAclObjectTypeObjectKeyPut(param: AclsApiAclsV1GroupsGroupIdAclObjectTypeObjectKeyPutRequest, options?: Configuration): Promise<GroupACLSchema> {
        return this.api.aclsV1GroupsGroupIdAclObjectTypeObjectKeyPut(param.appID, param.authToken, param.groupId, param.objectType, param.objectKey, param.groupACLSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_acls 
     * List of share acls
     * @param param the request object
     */
    public aclsV1SharesObjectTypeObjectKeyGetWithHttpInfo(param: AclsApiAclsV1SharesObjectTypeObjectKeyGetRequest, options?: Configuration): Promise<HttpInfo<SharesACLSchema>> {
        return this.api.aclsV1SharesObjectTypeObjectKeyGetWithHttpInfo(param.appID, param.authToken, param.objectType, param.objectKey,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_acls 
     * List of share acls
     * @param param the request object
     */
    public aclsV1SharesObjectTypeObjectKeyGet(param: AclsApiAclsV1SharesObjectTypeObjectKeyGetRequest, options?: Configuration): Promise<SharesACLSchema> {
        return this.api.aclsV1SharesObjectTypeObjectKeyGet(param.appID, param.authToken, param.objectType, param.objectKey,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_acls 
     * Delete a share acl for an object
     * @param param the request object
     */
    public aclsV1SharesShareIdAclObjectTypeObjectKeyDeleteWithHttpInfo(param: AclsApiAclsV1SharesShareIdAclObjectTypeObjectKeyDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.aclsV1SharesShareIdAclObjectTypeObjectKeyDeleteWithHttpInfo(param.appID, param.authToken, param.shareId, param.objectType, param.objectKey,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_acls 
     * Delete a share acl for an object
     * @param param the request object
     */
    public aclsV1SharesShareIdAclObjectTypeObjectKeyDelete(param: AclsApiAclsV1SharesShareIdAclObjectTypeObjectKeyDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.aclsV1SharesShareIdAclObjectTypeObjectKeyDelete(param.appID, param.authToken, param.shareId, param.objectType, param.objectKey,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_acls 
     * List of share permissions for an object
     * @param param the request object
     */
    public aclsV1SharesShareIdAclObjectTypeObjectKeyGetWithHttpInfo(param: AclsApiAclsV1SharesShareIdAclObjectTypeObjectKeyGetRequest, options?: Configuration): Promise<HttpInfo<ShareACLSchema>> {
        return this.api.aclsV1SharesShareIdAclObjectTypeObjectKeyGetWithHttpInfo(param.appID, param.authToken, param.shareId, param.objectType, param.objectKey,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_acls 
     * List of share permissions for an object
     * @param param the request object
     */
    public aclsV1SharesShareIdAclObjectTypeObjectKeyGet(param: AclsApiAclsV1SharesShareIdAclObjectTypeObjectKeyGetRequest, options?: Configuration): Promise<ShareACLSchema> {
        return this.api.aclsV1SharesShareIdAclObjectTypeObjectKeyGet(param.appID, param.authToken, param.shareId, param.objectType, param.objectKey,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_acls 
     * Returns a share acl for an object
     * @param param the request object
     */
    public aclsV1SharesShareIdAclObjectTypeObjectKeyPermissionGetWithHttpInfo(param: AclsApiAclsV1SharesShareIdAclObjectTypeObjectKeyPermissionGetRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.aclsV1SharesShareIdAclObjectTypeObjectKeyPermissionGetWithHttpInfo(param.appID, param.authToken, param.shareId, param.objectType, param.objectKey, param.permission,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_acls 
     * Returns a share acl for an object
     * @param param the request object
     */
    public aclsV1SharesShareIdAclObjectTypeObjectKeyPermissionGet(param: AclsApiAclsV1SharesShareIdAclObjectTypeObjectKeyPermissionGetRequest, options?: Configuration): Promise<void> {
        return this.api.aclsV1SharesShareIdAclObjectTypeObjectKeyPermissionGet(param.appID, param.authToken, param.shareId, param.objectType, param.objectKey, param.permission,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_acls 
     * Create a new share acl for an object
     * @param param the request object
     */
    public aclsV1SharesShareIdAclObjectTypeObjectKeyPostWithHttpInfo(param: AclsApiAclsV1SharesShareIdAclObjectTypeObjectKeyPostRequest, options?: Configuration): Promise<HttpInfo<ShareACLSchema>> {
        return this.api.aclsV1SharesShareIdAclObjectTypeObjectKeyPostWithHttpInfo(param.appID, param.authToken, param.shareId, param.objectType, param.objectKey, param.shareACLSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_acls 
     * Create a new share acl for an object
     * @param param the request object
     */
    public aclsV1SharesShareIdAclObjectTypeObjectKeyPost(param: AclsApiAclsV1SharesShareIdAclObjectTypeObjectKeyPostRequest, options?: Configuration): Promise<ShareACLSchema> {
        return this.api.aclsV1SharesShareIdAclObjectTypeObjectKeyPost(param.appID, param.authToken, param.shareId, param.objectType, param.objectKey, param.shareACLSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_acls 
     * Update share acl for an object
     * @param param the request object
     */
    public aclsV1SharesShareIdAclObjectTypeObjectKeyPutWithHttpInfo(param: AclsApiAclsV1SharesShareIdAclObjectTypeObjectKeyPutRequest, options?: Configuration): Promise<HttpInfo<ShareACLSchema>> {
        return this.api.aclsV1SharesShareIdAclObjectTypeObjectKeyPutWithHttpInfo(param.appID, param.authToken, param.shareId, param.objectType, param.objectKey, param.shareACLSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_acls 
     * Update share acl for an object
     * @param param the request object
     */
    public aclsV1SharesShareIdAclObjectTypeObjectKeyPut(param: AclsApiAclsV1SharesShareIdAclObjectTypeObjectKeyPutRequest, options?: Configuration): Promise<ShareACLSchema> {
        return this.api.aclsV1SharesShareIdAclObjectTypeObjectKeyPut(param.appID, param.authToken, param.shareId, param.objectType, param.objectKey, param.shareACLSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_acls 
     * Create a new acl for multiple share objects
     * @param param the request object
     */
    public aclsV1SharesShareIdAclObjectTypePutWithHttpInfo(param: AclsApiAclsV1SharesShareIdAclObjectTypePutRequest, options?: Configuration): Promise<HttpInfo<CreateACLsResultSchema>> {
        return this.api.aclsV1SharesShareIdAclObjectTypePutWithHttpInfo(param.appID, param.authToken, param.shareId, param.objectType, param.createShareACLsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_acls 
     * Create a new acl for multiple share objects
     * @param param the request object
     */
    public aclsV1SharesShareIdAclObjectTypePut(param: AclsApiAclsV1SharesShareIdAclObjectTypePutRequest, options?: Configuration): Promise<CreateACLsResultSchema> {
        return this.api.aclsV1SharesShareIdAclObjectTypePut(param.appID, param.authToken, param.shareId, param.objectType, param.createShareACLsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_acls 
     * Delete a user acl for an object
     * @param param the request object
     */
    public aclsV1UsersUserIdAclObjectTypeObjectKeyDeleteWithHttpInfo(param: AclsApiAclsV1UsersUserIdAclObjectTypeObjectKeyDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.aclsV1UsersUserIdAclObjectTypeObjectKeyDeleteWithHttpInfo(param.appID, param.authToken, param.userId, param.objectType, param.objectKey,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_acls 
     * Delete a user acl for an object
     * @param param the request object
     */
    public aclsV1UsersUserIdAclObjectTypeObjectKeyDelete(param: AclsApiAclsV1UsersUserIdAclObjectTypeObjectKeyDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.aclsV1UsersUserIdAclObjectTypeObjectKeyDelete(param.appID, param.authToken, param.userId, param.objectType, param.objectKey,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_acls 
     * List of user permissions for an object
     * @param param the request object
     */
    public aclsV1UsersUserIdAclObjectTypeObjectKeyGetWithHttpInfo(param: AclsApiAclsV1UsersUserIdAclObjectTypeObjectKeyGetRequest, options?: Configuration): Promise<HttpInfo<UserACLSchema>> {
        return this.api.aclsV1UsersUserIdAclObjectTypeObjectKeyGetWithHttpInfo(param.appID, param.authToken, param.userId, param.objectType, param.objectKey,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_acls 
     * List of user permissions for an object
     * @param param the request object
     */
    public aclsV1UsersUserIdAclObjectTypeObjectKeyGet(param: AclsApiAclsV1UsersUserIdAclObjectTypeObjectKeyGetRequest, options?: Configuration): Promise<UserACLSchema> {
        return this.api.aclsV1UsersUserIdAclObjectTypeObjectKeyGet(param.appID, param.authToken, param.userId, param.objectType, param.objectKey,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_acls 
     * Returns a user acl for an object
     * @param param the request object
     */
    public aclsV1UsersUserIdAclObjectTypeObjectKeyPermissionGetWithHttpInfo(param: AclsApiAclsV1UsersUserIdAclObjectTypeObjectKeyPermissionGetRequest, options?: Configuration): Promise<HttpInfo<UserACLSchema>> {
        return this.api.aclsV1UsersUserIdAclObjectTypeObjectKeyPermissionGetWithHttpInfo(param.appID, param.authToken, param.userId, param.objectType, param.objectKey, param.permission,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_acls 
     * Returns a user acl for an object
     * @param param the request object
     */
    public aclsV1UsersUserIdAclObjectTypeObjectKeyPermissionGet(param: AclsApiAclsV1UsersUserIdAclObjectTypeObjectKeyPermissionGetRequest, options?: Configuration): Promise<UserACLSchema> {
        return this.api.aclsV1UsersUserIdAclObjectTypeObjectKeyPermissionGet(param.appID, param.authToken, param.userId, param.objectType, param.objectKey, param.permission,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_acls 
     * Update or create user acl for an object
     * @param param the request object
     */
    public aclsV1UsersUserIdAclObjectTypeObjectKeyPutWithHttpInfo(param: AclsApiAclsV1UsersUserIdAclObjectTypeObjectKeyPutRequest, options?: Configuration): Promise<HttpInfo<UserACLSchema>> {
        return this.api.aclsV1UsersUserIdAclObjectTypeObjectKeyPutWithHttpInfo(param.appID, param.authToken, param.userId, param.objectType, param.objectKey, param.userACLSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_acls 
     * Update or create user acl for an object
     * @param param the request object
     */
    public aclsV1UsersUserIdAclObjectTypeObjectKeyPut(param: AclsApiAclsV1UsersUserIdAclObjectTypeObjectKeyPutRequest, options?: Configuration): Promise<UserACLSchema> {
        return this.api.aclsV1UsersUserIdAclObjectTypeObjectKeyPut(param.appID, param.authToken, param.userId, param.objectType, param.objectKey, param.userACLSchema,  options).toPromise();
    }

}

import { ObservableAssetsApi } from "./ObservableAPI";
import { AssetsApiRequestFactory, AssetsApiResponseProcessor} from "../apis/AssetsApi";

export interface AssetsApiAssetsV1ApprovalsBulkPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ApprovalsBulkPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ApprovalsBulkPost
     */
    appID: string
    /**
     * body
     * @type BulkSetApprovalSchema
     * @memberof AssetsApiassetsV1ApprovalsBulkPost
     */
    bulkSetApprovalSchema: BulkSetApprovalSchema
}

export interface AssetsApiAssetsV1ApprovalsBulkRemovePostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ApprovalsBulkRemovePost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ApprovalsBulkRemovePost
     */
    appID: string
    /**
     * body
     * @type BulkRemoveApprovalSchema
     * @memberof AssetsApiassetsV1ApprovalsBulkRemovePost
     */
    bulkRemoveApprovalSchema: BulkRemoveApprovalSchema
}

export interface AssetsApiAssetsV1AssetsAssetIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdDelete
     */
    assetId: string
}

export interface AssetsApiAssetsV1AssetsAssetIdGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdGet
     */
    assetId: string
    /**
     * include collection membership
     * @type boolean
     * @memberof AssetsApiassetsV1AssetsAssetIdGet
     */
    includeCollections?: boolean
    /**
     * include info about the users who have interacted with this asset
     * @type boolean
     * @memberof AssetsApiassetsV1AssetsAssetIdGet
     */
    includeUsers?: boolean
}

export interface AssetsApiAssetsV1AssetsAssetIdHistoryGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdHistoryGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdHistoryGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdHistoryGet
     */
    assetId: string
    /**
     * The number of items for each page
     * @type number
     * @memberof AssetsApiassetsV1AssetsAssetIdHistoryGet
     */
    perPage?: number
    /**
     * Which page number to fetch
     * @type number
     * @memberof AssetsApiassetsV1AssetsAssetIdHistoryGet
     */
    page?: number
    /**
     * A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdHistoryGet
     */
    sort?: string
    /**
     * A comma separated list of fieldnames with order For example - first_name,eq,Vlad;last_name,eq,Gudkov
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdHistoryGet
     */
    filter?: string
}

export interface AssetsApiAssetsV1AssetsAssetIdHistoryHistoryEntityIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdHistoryHistoryEntityIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdHistoryHistoryEntityIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdHistoryHistoryEntityIdDelete
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdHistoryHistoryEntityIdDelete
     */
    historyEntityId: string
}

export interface AssetsApiAssetsV1AssetsAssetIdHistoryHistoryEntityIdGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdHistoryHistoryEntityIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdHistoryHistoryEntityIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdHistoryHistoryEntityIdGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdHistoryHistoryEntityIdGet
     */
    historyEntityId: string
}

export interface AssetsApiAssetsV1AssetsAssetIdHistoryHistoryEntityIdReindexPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdHistoryHistoryEntityIdReindexPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdHistoryHistoryEntityIdReindexPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdHistoryHistoryEntityIdReindexPost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdHistoryHistoryEntityIdReindexPost
     */
    historyEntityId: string
}

export interface AssetsApiAssetsV1AssetsAssetIdHistoryPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdHistoryPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdHistoryPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdHistoryPost
     */
    assetId: string
    /**
     * body
     * @type AssetHistorySchema
     * @memberof AssetsApiassetsV1AssetsAssetIdHistoryPost
     */
    assetHistorySchema: AssetHistorySchema
}

export interface AssetsApiAssetsV1AssetsAssetIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdPatch
     */
    assetId: string
    /**
     * body
     * @type AssetSchema
     * @memberof AssetsApiassetsV1AssetsAssetIdPatch
     */
    assetSchema: AssetSchema
}

export interface AssetsApiAssetsV1AssetsAssetIdPurgeDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdPurgeDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdPurgeDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdPurgeDelete
     */
    assetId: string
}

export interface AssetsApiAssetsV1AssetsAssetIdPutRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdPut
     */
    assetId: string
    /**
     * body
     * @type AssetSchema
     * @memberof AssetsApiassetsV1AssetsAssetIdPut
     */
    assetSchema: AssetSchema
}

export interface AssetsApiAssetsV1AssetsAssetIdReindexPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdReindexPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdReindexPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdReindexPost
     */
    assetId: string
    /**
     * body
     * @type ReindexAssetSchema
     * @memberof AssetsApiassetsV1AssetsAssetIdReindexPost
     */
    reindexAssetSchema: ReindexAssetSchema
}

export interface AssetsApiAssetsV1AssetsAssetIdRelationsGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsGet
     */
    assetId: string
    /**
     * Also show assets from recycle bin in relations
     * @type boolean
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsGet
     */
    includeDeleted?: boolean
    /**
     * The number of items for each page
     * @type number
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsGet
     */
    perPage?: number
    /**
     * Which page number to fetch
     * @type number
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsGet
     */
    page?: number
    /**
     * A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsGet
     */
    sort?: string
}

export interface AssetsApiAssetsV1AssetsAssetIdRelationsPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsPost
     */
    assetId: string
    /**
     * body
     * @type RelationSchema
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsPost
     */
    relationSchema: RelationSchema
}

export interface AssetsApiAssetsV1AssetsAssetIdRelationsRelationTypeGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsRelationTypeGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsRelationTypeGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsRelationTypeGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsRelationTypeGet
     */
    relationType: string
    /**
     * Also show assets from recycle bin in relations
     * @type boolean
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsRelationTypeGet
     */
    includeDeleted?: boolean
}

export interface AssetsApiAssetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdDelete
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdDelete
     */
    relationType: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdDelete
     */
    relatedToAssetId: string
}

export interface AssetsApiAssetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdPost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdPost
     */
    relationType: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdPost
     */
    relatedToAssetId: string
    /**
     * body
     * @type RelationSchema
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdPost
     */
    relationSchema: RelationSchema
}

export interface AssetsApiAssetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdReversePostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdReversePost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdReversePost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdReversePost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdReversePost
     */
    relationType: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdReversePost
     */
    relatedToAssetId: string
}

export interface AssetsApiAssetsV1AssetsAssetIdRestorePutRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdRestorePut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdRestorePut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdRestorePut
     */
    assetId: string
}

export interface AssetsApiAssetsV1AssetsAssetIdSearchDocumentPutRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSearchDocumentPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSearchDocumentPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSearchDocumentPut
     */
    assetId: string
    /**
     * body
     * @type AssetElasticSchema
     * @memberof AssetsApiassetsV1AssetsAssetIdSearchDocumentPut
     */
    assetElasticSchema: AssetElasticSchema
}

export interface AssetsApiAssetsV1AssetsAssetIdSegmentsBulkDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsBulkDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsBulkDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsBulkDelete
     */
    assetId: string
    /**
     * body
     * @type DeleteSegmentsSchema
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsBulkDelete
     */
    deleteSegmentsSchema: DeleteSegmentsSchema
    /**
     * If false, delete segments asynchronously
     * @type boolean
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsBulkDelete
     */
    immediately?: boolean
    /**
     * If false, reindex
     * @type boolean
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsBulkDelete
     */
    ignoreReindexing?: boolean
}

export interface AssetsApiAssetsV1AssetsAssetIdSegmentsBulkPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsBulkPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsBulkPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsBulkPost
     */
    assetId: string
    /**
     * body
     * @type BulkCreateSegmentsSchema
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsBulkPost
     */
    bulkCreateSegmentsSchema: BulkCreateSegmentsSchema
}

export interface AssetsApiAssetsV1AssetsAssetIdSegmentsGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsGet
     */
    assetId: string
    /**
     * Sort on field (Comma separated)
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsGet
     */
    sort?: string
    /**
     * Only include these segments (Comma separated)
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsGet
     */
    ids?: string
    /**
     * Search using query
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsGet
     */
    query?: string
    /**
     * Only include fields (Comma separated)
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsGet
     */
    includes?: string
    /**
     * The number of items for each page
     * @type number
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsGet
     */
    perPage?: number
    /**
     * Which page number to fetch
     * @type number
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsGet
     */
    page?: number
    /**
     * If true passed then uses scroll pagination instead of default one
     * @type boolean
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsGet
     */
    scroll?: boolean
    /**
     * In order to get next batch of results using scroll pagination the scroll_id is required 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsGet
     */
    scrollId?: string
    /**
     * Filter segments by transcription_id
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsGet
     */
    transcriptionId?: string
    /**
     * Filter segments by version_id
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsGet
     */
    versionId?: string
    /**
     * Filter segments by segment_type
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsGet
     */
    segmentType?: string
    /**
     * Filter segments by segment_color
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsGet
     */
    segmentColor?: string
    /**
     * Filter segments by time_start_milliseconds
     * @type number
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsGet
     */
    timeStartMilliseconds?: number
    /**
     * Filter segments by time_end_milliseconds
     * @type number
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsGet
     */
    timeEndMilliseconds?: number
    /**
     * Get segments with start time greater than or equal to time_start_milliseconds__gte 
     * @type number
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsGet
     */
    timeStartMillisecondsGte?: number
    /**
     * Get segments with end time less than or equal to time_end_milliseconds__lte
     * @type number
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsGet
     */
    timeEndMillisecondsLte?: number
    /**
     * Filter segments by status
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsGet
     */
    status?: string
    /**
     * Include segment\&#39;s authors info
     * @type boolean
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsGet
     */
    includeUsers?: boolean
}

export interface AssetsApiAssetsV1AssetsAssetIdSegmentsPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsPost
     */
    assetId: string
    /**
     * body
     * @type SegmentSchema
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsPost
     */
    segmentSchema: SegmentSchema
    /**
     * This header is used for shares by URL to identify user. Only valid emails are allowed.
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsPost
     */
    shareUserEmail?: string
}

export interface AssetsApiAssetsV1AssetsAssetIdSegmentsReindexPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsReindexPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsReindexPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsReindexPost
     */
    assetId: string
    /**
     * body
     * @type ReindexSegmentSchema
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsReindexPost
     */
    reindexSegmentSchema: ReindexSegmentSchema
}

export interface AssetsApiAssetsV1AssetsAssetIdSegmentsSegmentIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentIdDelete
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentIdDelete
     */
    segmentId: string
    /**
     * 
     * @type boolean
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentIdDelete
     */
    softDelete?: boolean
}

export interface AssetsApiAssetsV1AssetsAssetIdSegmentsSegmentIdGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentIdGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentIdGet
     */
    segmentId: string
    /**
     * If true passed then uses scroll pagination instead of default one
     * @type boolean
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentIdGet
     */
    scroll?: boolean
    /**
     * In order to get next batch of results using scroll pagination the scroll_id is required 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentIdGet
     */
    scrollId?: string
}

export interface AssetsApiAssetsV1AssetsAssetIdSegmentsSegmentIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentIdPatch
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentIdPatch
     */
    segmentId: string
    /**
     * body
     * @type EditSegmentSchema
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentIdPatch
     */
    editSegmentSchema: EditSegmentSchema
}

export interface AssetsApiAssetsV1AssetsAssetIdSegmentsSegmentIdPutRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentIdPut
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentIdPut
     */
    segmentId: string
    /**
     * body
     * @type EditSegmentSchema
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentIdPut
     */
    editSegmentSchema: EditSegmentSchema
}

export interface AssetsApiAssetsV1AssetsAssetIdSegmentsSegmentIdReindexPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentIdReindexPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentIdReindexPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentIdReindexPost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentIdReindexPost
     */
    segmentId: string
    /**
     * body
     * @type ReindexSegmentSchema
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentIdReindexPost
     */
    reindexSegmentSchema: ReindexSegmentSchema
}

export interface AssetsApiAssetsV1AssetsAssetIdSegmentsSegmentTypeGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentTypeGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentTypeGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentTypeGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentTypeGet
     */
    segmentType: string
    /**
     * Sort on field (Comma separated)
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentTypeGet
     */
    sort?: string
    /**
     * Only include these segments (Comma separated)
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentTypeGet
     */
    ids?: string
    /**
     * Search using query
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentTypeGet
     */
    query?: string
    /**
     * Only include fields (Comma separated)
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentTypeGet
     */
    includes?: string
    /**
     * The number of items for each page
     * @type number
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentTypeGet
     */
    perPage?: number
    /**
     * Which page number to fetch
     * @type number
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentTypeGet
     */
    page?: number
    /**
     * If true passed then uses scroll pagination instead of default one
     * @type boolean
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentTypeGet
     */
    scroll?: boolean
    /**
     * In order to get next batch of results using scroll pagination the scroll_id is required 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentTypeGet
     */
    scrollId?: string
    /**
     * Filter segments by time_start_milliseconds
     * @type number
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentTypeGet
     */
    timeStartMilliseconds?: number
    /**
     * Filter segments by time_end_milliseconds
     * @type number
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentTypeGet
     */
    timeEndMilliseconds?: number
    /**
     * Get segments with start time greater than or equal to time_start_milliseconds__gte 
     * @type number
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentTypeGet
     */
    timeStartMillisecondsGte?: number
    /**
     * Get segments with end time less than or equal to time_end_milliseconds__lte
     * @type number
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSegmentTypeGet
     */
    timeEndMillisecondsLte?: number
}

export interface AssetsApiAssetsV1AssetsAssetIdSegmentsSrtGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSrtGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSrtGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSrtGet
     */
    assetId: string
    /**
     * Only include these segments (Comma separated)
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSrtGet
     */
    ids?: string
    /**
     * Search using query
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSrtGet
     */
    query?: string
    /**
     * Filter segments by transcription_id
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSrtGet
     */
    transcriptionId?: string
    /**
     * Filter segments by version_id
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSrtGet
     */
    versionId?: string
    /**
     * Filter segments by segment_type
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSrtGet
     */
    segmentType?: string
    /**
     * Filter segments by segment_color
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSrtGet
     */
    segmentColor?: string
    /**
     * Limit the number of words per subtitle line
     * @type number
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsSrtGet
     */
    wordsPerLine?: number
}

export interface AssetsApiAssetsV1AssetsAssetIdSegmentsVttGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsVttGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsVttGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsVttGet
     */
    assetId: string
    /**
     * Only include these segments (Comma separated)
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsVttGet
     */
    ids?: string
    /**
     * Search using query
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsVttGet
     */
    query?: string
    /**
     * Filter segments by transcription_id
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsVttGet
     */
    transcriptionId?: string
    /**
     * Filter segments by version_id
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsVttGet
     */
    versionId?: string
    /**
     * Filter segments by segment_type
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsVttGet
     */
    segmentType?: string
    /**
     * Filter segments by segment_color
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsVttGet
     */
    segmentColor?: string
    /**
     * Limit the number of words per subtitle line
     * @type number
     * @memberof AssetsApiassetsV1AssetsAssetIdSegmentsVttGet
     */
    wordsPerLine?: number
}

export interface AssetsApiAssetsV1AssetsAssetIdUploadsDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdUploadsDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdUploadsDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdUploadsDelete
     */
    assetId: string
}

export interface AssetsApiAssetsV1AssetsAssetIdVersionsFromAssetsSourceAssetIdPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsFromAssetsSourceAssetIdPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsFromAssetsSourceAssetIdPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsFromAssetsSourceAssetIdPost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsFromAssetsSourceAssetIdPost
     */
    sourceAssetId: string
    /**
     * body
     * @type CreateAssetVersionFromAssetSchema
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsFromAssetsSourceAssetIdPost
     */
    createAssetVersionFromAssetSchema: CreateAssetVersionFromAssetSchema
}

export interface AssetsApiAssetsV1AssetsAssetIdVersionsFromVersionsSourceVersionIdPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsFromVersionsSourceVersionIdPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsFromVersionsSourceVersionIdPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsFromVersionsSourceVersionIdPost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsFromVersionsSourceVersionIdPost
     */
    sourceVersionId: string
    /**
     * body
     * @type CreateAssetVersionFromVersionSchema
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsFromVersionsSourceVersionIdPost
     */
    createAssetVersionFromVersionSchema: CreateAssetVersionFromVersionSchema
}

export interface AssetsApiAssetsV1AssetsAssetIdVersionsOldDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsOldDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsOldDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsOldDelete
     */
    assetId: string
}

export interface AssetsApiAssetsV1AssetsAssetIdVersionsPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsPost
     */
    assetId: string
    /**
     * body
     * @type CreateAssetVersionSchema
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsPost
     */
    createAssetVersionSchema: CreateAssetVersionSchema
}

export interface AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdDelete
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdDelete
     */
    versionId: string
    /**
     * completely remove the version
     * @type boolean
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdDelete
     */
    hardDelete?: boolean
}

export interface AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdPatch
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdPatch
     */
    versionId: string
    /**
     * body
     * @type AssetVersionSchema
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdPatch
     */
    assetVersionSchema: AssetVersionSchema
}

export interface AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdPromotePutRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdPromotePut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdPromotePut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdPromotePut
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdPromotePut
     */
    versionId: string
}

export interface AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdPutRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdPut
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdPut
     */
    versionId: string
    /**
     * body
     * @type AssetVersionSchema
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdPut
     */
    assetVersionSchema: AssetVersionSchema
}

export interface AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdTranscriptionsPropertiesGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsPropertiesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsPropertiesGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsPropertiesGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsPropertiesGet
     */
    versionId: string
}

export interface AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdTranscriptionsPropertiesPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsPropertiesPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsPropertiesPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsPropertiesPost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsPropertiesPost
     */
    versionId: string
    /**
     * body
     * @type AssetTranscriptionPropertiesSchema
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsPropertiesPost
     */
    assetTranscriptionPropertiesSchema: AssetTranscriptionPropertiesSchema
}

export interface AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdTranscriptionsSubtitlesPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsSubtitlesPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsSubtitlesPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsSubtitlesPost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsSubtitlesPost
     */
    versionId: string
    /**
     * body
     * @type AssetTranscriptionFromSubtitleSchema
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsSubtitlesPost
     */
    assetTranscriptionFromSubtitleSchema: AssetTranscriptionFromSubtitleSchema
}

export interface AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesDelete
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesDelete
     */
    versionId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesDelete
     */
    transcriptionId: string
}

export interface AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesGet
     */
    versionId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesGet
     */
    transcriptionId: string
}

export interface AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesPatchRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesPatch
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesPatch
     */
    versionId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesPatch
     */
    transcriptionId: string
    /**
     * body
     * @type AssetTranscriptionPropertiesSchema
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesPatch
     */
    assetTranscriptionPropertiesSchema: AssetTranscriptionPropertiesSchema
}

export interface AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesPutRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesPut
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesPut
     */
    versionId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesPut
     */
    transcriptionId: string
    /**
     * body
     * @type AssetTranscriptionPropertiesSchema
     * @memberof AssetsApiassetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesPut
     */
    assetTranscriptionPropertiesSchema: AssetTranscriptionPropertiesSchema
}

export interface AssetsApiAssetsV1AssetsAssetIdViewsPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdViewsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdViewsPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsAssetIdViewsPost
     */
    assetId: string
}

export interface AssetsApiAssetsV1AssetsGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsGet
     */
    authToken: string
    /**
     * The number of items for each page
     * @type number
     * @memberof AssetsApiassetsV1AssetsGet
     */
    perPage?: number
    /**
     * Which page number to fetch
     * @type number
     * @memberof AssetsApiassetsV1AssetsGet
     */
    page?: number
    /**
     * If true passed then uses scroll pagination instead of default one
     * @type boolean
     * @memberof AssetsApiassetsV1AssetsGet
     */
    scroll?: boolean
    /**
     * In order to get next batch of results using scroll pagination the scroll_id is required
     * @type string
     * @memberof AssetsApiassetsV1AssetsGet
     */
    scrollId?: string
    /**
     * A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc
     * @type string
     * @memberof AssetsApiassetsV1AssetsGet
     */
    sort?: string
    /**
     * filter by field_name
     * @type string
     * @memberof AssetsApiassetsV1AssetsGet
     */
    fieldName?: string
}

export interface AssetsApiAssetsV1AssetsPatchRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsPatch
     */
    authToken: string
    /**
     * body
     * @type BulkAssetEditSchema
     * @memberof AssetsApiassetsV1AssetsPatch
     */
    bulkAssetEditSchema: BulkAssetEditSchema
}

export interface AssetsApiAssetsV1AssetsPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsPost
     */
    authToken: string
    /**
     * body
     * @type AssetCreateSchema
     * @memberof AssetsApiassetsV1AssetsPost
     */
    assetCreateSchema: AssetCreateSchema
    /**
     * Adds default ACLs to an asset
     * @type boolean
     * @memberof AssetsApiassetsV1AssetsPost
     */
    applyDefaultAcls?: boolean
    /**
     * Adds containing collection\&#39;s ACLs to an asset
     * @type boolean
     * @memberof AssetsApiassetsV1AssetsPost
     */
    applyCollectionAcls?: boolean
    /**
     * Adds the asset to the collection specified in the body
     * @type boolean
     * @memberof AssetsApiassetsV1AssetsPost
     */
    assignToCollection?: boolean
}

export interface AssetsApiAssetsV1AssetsPutRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsPut
     */
    authToken: string
    /**
     * body
     * @type BulkAssetEditSchema
     * @memberof AssetsApiassetsV1AssetsPut
     */
    bulkAssetEditSchema: BulkAssetEditSchema
}

export interface AssetsApiAssetsV1AssetsReindexPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsReindexPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsReindexPost
     */
    authToken: string
    /**
     * body
     * @type ReindexAllAssetsSchema
     * @memberof AssetsApiassetsV1AssetsReindexPost
     */
    reindexAllAssetsSchema?: ReindexAllAssetsSchema
}

export interface AssetsApiAssetsV1AssetsRelationTypesGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsRelationTypesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsRelationTypesGet
     */
    authToken: string
}

export interface AssetsApiAssetsV1AssetsRelationTypesPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsRelationTypesPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsRelationTypesPost
     */
    authToken: string
    /**
     * body
     * @type RelationTypeSchema
     * @memberof AssetsApiassetsV1AssetsRelationTypesPost
     */
    relationTypeSchema: RelationTypeSchema
}

export interface AssetsApiAssetsV1AssetsRelationTypesRelationTypeDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsRelationTypesRelationTypeDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsRelationTypesRelationTypeDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsRelationTypesRelationTypeDelete
     */
    relationType: string
}

export interface AssetsApiAssetsV1AssetsRelationTypesRelationTypeGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsRelationTypesRelationTypeGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsRelationTypesRelationTypeGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsRelationTypesRelationTypeGet
     */
    relationType: string
}

export interface AssetsApiAssetsV1AssetsRelationTypesRelationTypePatchRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsRelationTypesRelationTypePatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsRelationTypesRelationTypePatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsRelationTypesRelationTypePatch
     */
    relationType: string
    /**
     * body
     * @type RelationTypeSchema
     * @memberof AssetsApiassetsV1AssetsRelationTypesRelationTypePatch
     */
    relationTypeSchema: RelationTypeSchema
}

export interface AssetsApiAssetsV1AssetsRelationTypesRelationTypePutRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsRelationTypesRelationTypePut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsRelationTypesRelationTypePut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsRelationTypesRelationTypePut
     */
    relationType: string
    /**
     * body
     * @type RelationTypeSchema
     * @memberof AssetsApiassetsV1AssetsRelationTypesRelationTypePut
     */
    relationTypeSchema: RelationTypeSchema
}

export interface AssetsApiAssetsV1AssetsSegmentsReindexPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsSegmentsReindexPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1AssetsSegmentsReindexPost
     */
    authToken: string
    /**
     * body
     * @type ReindexAllSegmentsSchema
     * @memberof AssetsApiassetsV1AssetsSegmentsReindexPost
     */
    reindexAllSegmentsSchema: ReindexAllSegmentsSchema
}

export interface AssetsApiAssetsV1CollectionsCollectionIdAncestorsGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdAncestorsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdAncestorsGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdAncestorsGet
     */
    collectionId: string
}

export interface AssetsApiAssetsV1CollectionsCollectionIdContentInfoGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentInfoGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentInfoGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentInfoGet
     */
    collectionId: string
    /**
     * If false, include all the contents
     * @type boolean
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentInfoGet
     */
    onlyActive?: boolean
}

export interface AssetsApiAssetsV1CollectionsCollectionIdContentsGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsGet
     */
    collectionId: string
    /**
     * Comma separated list of content types. Example - assets,collections
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsGet
     */
    objectTypes?: string
    /**
     * Comma separated list of content ids.
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsGet
     */
    objectIds?: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsGet
     */
    externalId?: string
    /**
     * The number of items for each page
     * @type number
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsGet
     */
    perPage?: number
    /**
     * Which page number to fetch
     * @type number
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsGet
     */
    page?: number
    /**
     * A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsGet
     */
    sort?: string
    /**
     * A comma separated list of fieldnames with order For example - first_name,eq,Vlad;last_name,eq,Gudkov
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsGet
     */
    filter?: string
}

export interface AssetsApiAssetsV1CollectionsCollectionIdContentsObjectTypeObjectIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsObjectTypeObjectIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsObjectTypeObjectIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsObjectTypeObjectIdDelete
     */
    collectionId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsObjectTypeObjectIdDelete
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsObjectTypeObjectIdDelete
     */
    objectId: string
}

export interface AssetsApiAssetsV1CollectionsCollectionIdContentsObjectTypeObjectIdPutRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsObjectTypeObjectIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsObjectTypeObjectIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsObjectTypeObjectIdPut
     */
    collectionId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsObjectTypeObjectIdPut
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsObjectTypeObjectIdPut
     */
    objectId: string
    /**
     * body
     * @type CollectionContentOrderingSchema
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsObjectTypeObjectIdPut
     */
    collectionContentOrderingSchema: CollectionContentOrderingSchema
}

export interface AssetsApiAssetsV1CollectionsCollectionIdContentsObjectTypeObjectIdReindexPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsObjectTypeObjectIdReindexPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsObjectTypeObjectIdReindexPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsObjectTypeObjectIdReindexPost
     */
    collectionId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsObjectTypeObjectIdReindexPost
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsObjectTypeObjectIdReindexPost
     */
    objectId: string
    /**
     * body
     * @type ReindexCollectionContentSchema
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsObjectTypeObjectIdReindexPost
     */
    reindexCollectionContentSchema: ReindexCollectionContentSchema
}

export interface AssetsApiAssetsV1CollectionsCollectionIdContentsOrderingCustomDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsOrderingCustomDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsOrderingCustomDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsOrderingCustomDelete
     */
    collectionId: string
}

export interface AssetsApiAssetsV1CollectionsCollectionIdContentsOrderingCustomPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsOrderingCustomPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsOrderingCustomPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsOrderingCustomPost
     */
    collectionId: string
    /**
     * body
     * @type CreateCollectionContentOrderingSchema
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsOrderingCustomPost
     */
    createCollectionContentOrderingSchema: CreateCollectionContentOrderingSchema
}

export interface AssetsApiAssetsV1CollectionsCollectionIdContentsPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsPost
     */
    collectionId: string
    /**
     * body
     * @type CollectionContentSchema
     * @memberof AssetsApiassetsV1CollectionsCollectionIdContentsPost
     */
    collectionContentSchema: CollectionContentSchema
}

export interface AssetsApiAssetsV1CollectionsCollectionIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdDelete
     */
    collectionId: string
}

export interface AssetsApiAssetsV1CollectionsCollectionIdFullPathGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdFullPathGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdFullPathGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdFullPathGet
     */
    collectionId: string
    /**
     * Use to get the upload path instead of the full path
     * @type boolean
     * @memberof AssetsApiassetsV1CollectionsCollectionIdFullPathGet
     */
    getUploadPath?: boolean
}

export interface AssetsApiAssetsV1CollectionsCollectionIdGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdGet
     */
    collectionId: string
}

export interface AssetsApiAssetsV1CollectionsCollectionIdKeyframesPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdKeyframesPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdKeyframesPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdKeyframesPost
     */
    collectionId: string
    /**
     * body
     * @type SynchronizeCollectionKeyframesSchema
     * @memberof AssetsApiassetsV1CollectionsCollectionIdKeyframesPost
     */
    synchronizeCollectionKeyframesSchema: SynchronizeCollectionKeyframesSchema
}

export interface AssetsApiAssetsV1CollectionsCollectionIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdPatch
     */
    collectionId: string
    /**
     * body
     * @type CollectionInputSchema
     * @memberof AssetsApiassetsV1CollectionsCollectionIdPatch
     */
    collectionInputSchema: CollectionInputSchema
    /**
     * Set to \&#39;move\&#39; or \&#39;copy\&#39;. Ignored if \&#39;parent_id\&#39; hasn\&#39;t changed
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdPatch
     */
    changeParentMode?: string
}

export interface AssetsApiAssetsV1CollectionsCollectionIdPurgeDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdPurgeDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdPurgeDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdPurgeDelete
     */
    collectionId: string
}

export interface AssetsApiAssetsV1CollectionsCollectionIdPutRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdPut
     */
    collectionId: string
    /**
     * body
     * @type CollectionInputSchema
     * @memberof AssetsApiassetsV1CollectionsCollectionIdPut
     */
    collectionInputSchema: CollectionInputSchema
    /**
     * Set to \&#39;move\&#39; or \&#39;copy\&#39;. Ignored if \&#39;parent_id\&#39; hasn\&#39;t changed
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdPut
     */
    changeParentMode?: string
}

export interface AssetsApiAssetsV1CollectionsCollectionIdReindexContentsPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdReindexContentsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdReindexContentsPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdReindexContentsPost
     */
    collectionId: string
}

export interface AssetsApiAssetsV1CollectionsCollectionIdReindexPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdReindexPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdReindexPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdReindexPost
     */
    collectionId: string
    /**
     * body
     * @type ReindexCollectionSchema
     * @memberof AssetsApiassetsV1CollectionsCollectionIdReindexPost
     */
    reindexCollectionSchema: ReindexCollectionSchema
}

export interface AssetsApiAssetsV1CollectionsCollectionIdRestorePutRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdRestorePut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdRestorePut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdRestorePut
     */
    collectionId: string
}

export interface AssetsApiAssetsV1CollectionsCollectionIdSearchDocumentPutRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdSearchDocumentPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdSearchDocumentPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdSearchDocumentPut
     */
    collectionId: string
    /**
     * body
     * @type CollectionSchema
     * @memberof AssetsApiassetsV1CollectionsCollectionIdSearchDocumentPut
     */
    collectionSchema: CollectionSchema
}

export interface AssetsApiAssetsV1CollectionsCollectionIdSizeGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdSizeGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdSizeGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdSizeGet
     */
    collectionId: string
    /**
     * Compute total size only for files with the specified format name
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdSizeGet
     */
    formatName?: string
    /**
     * Compute total size for all files including sub_collections\&#39; assets
     * @type boolean
     * @memberof AssetsApiassetsV1CollectionsCollectionIdSizeGet
     */
    includeSubcollections?: boolean
}

export interface AssetsApiAssetsV1CollectionsCollectionIdSubcollectionsPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdSubcollectionsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdSubcollectionsPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsCollectionIdSubcollectionsPost
     */
    collectionId: string
    /**
     * body
     * @type CollectionContentSchema
     * @memberof AssetsApiassetsV1CollectionsCollectionIdSubcollectionsPost
     */
    collectionContentSchema: CollectionContentSchema
}

export interface AssetsApiAssetsV1CollectionsGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsGet
     */
    authToken: string
    /**
     * The number of items for each page
     * @type number
     * @memberof AssetsApiassetsV1CollectionsGet
     */
    perPage?: number
    /**
     * Which page number to fetch
     * @type number
     * @memberof AssetsApiassetsV1CollectionsGet
     */
    page?: number
    /**
     * If true passed then uses scroll pagination instead of default one
     * @type boolean
     * @memberof AssetsApiassetsV1CollectionsGet
     */
    scroll?: boolean
    /**
     * In order to get next batch of results using scroll pagination the scroll_id is required
     * @type string
     * @memberof AssetsApiassetsV1CollectionsGet
     */
    scrollId?: string
    /**
     * A comma separated list of fieldnames with order. For example - title,asc;is_root,desc
     * @type string
     * @memberof AssetsApiassetsV1CollectionsGet
     */
    sort?: string
    /**
     * Filter by is_root
     * @type string
     * @memberof AssetsApiassetsV1CollectionsGet
     */
    isRoot?: string
    /**
     * Filter by status
     * @type string
     * @memberof AssetsApiassetsV1CollectionsGet
     */
    status?: string
}

export interface AssetsApiAssetsV1CollectionsPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsPost
     */
    authToken: string
    /**
     * body
     * @type CollectionInputSchema
     * @memberof AssetsApiassetsV1CollectionsPost
     */
    collectionInputSchema: CollectionInputSchema
    /**
     * Adds default ACLs to a collection
     * @type boolean
     * @memberof AssetsApiassetsV1CollectionsPost
     */
    applyDefaultAcls?: boolean
    /**
     * Adds containing collection\&#39;s ACLs to a collection
     * @type boolean
     * @memberof AssetsApiassetsV1CollectionsPost
     */
    applyCollectionAcls?: boolean
    /**
     * Restricts ACLS to containing collection\&#39;s ACLs
     * @type boolean
     * @memberof AssetsApiassetsV1CollectionsPost
     */
    restrictCollectionAcls?: boolean
}

export interface AssetsApiAssetsV1CollectionsReindexPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsReindexPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CollectionsReindexPost
     */
    authToken: string
    /**
     * body
     * @type ReindexAllCollectionsSchema
     * @memberof AssetsApiassetsV1CollectionsReindexPost
     */
    reindexAllCollectionsSchema?: ReindexAllCollectionsSchema
}

export interface AssetsApiAssetsV1CustomActionsContextActionIdCallbackPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsContextActionIdCallbackPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsContextActionIdCallbackPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsContextActionIdCallbackPost
     */
    context: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsContextActionIdCallbackPost
     */
    actionId: string
    /**
     * body
     * @type CustomActionCallbackSchema
     * @memberof AssetsApiassetsV1CustomActionsContextActionIdCallbackPost
     */
    customActionCallbackSchema: CustomActionCallbackSchema
}

export interface AssetsApiAssetsV1CustomActionsContextActionIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsContextActionIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsContextActionIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsContextActionIdDelete
     */
    context: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsContextActionIdDelete
     */
    actionId: string
}

export interface AssetsApiAssetsV1CustomActionsContextActionIdGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsContextActionIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsContextActionIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsContextActionIdGet
     */
    context: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsContextActionIdGet
     */
    actionId: string
}

export interface AssetsApiAssetsV1CustomActionsContextActionIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsContextActionIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsContextActionIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsContextActionIdPatch
     */
    context: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsContextActionIdPatch
     */
    actionId: string
    /**
     * body
     * @type CustomActionSchema
     * @memberof AssetsApiassetsV1CustomActionsContextActionIdPatch
     */
    customActionSchema: CustomActionSchema
}

export interface AssetsApiAssetsV1CustomActionsContextActionIdPutRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsContextActionIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsContextActionIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsContextActionIdPut
     */
    context: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsContextActionIdPut
     */
    actionId: string
    /**
     * body
     * @type CustomActionSchema
     * @memberof AssetsApiassetsV1CustomActionsContextActionIdPut
     */
    customActionSchema: CustomActionSchema
}

export interface AssetsApiAssetsV1CustomActionsContextGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsContextGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsContextGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsContextGet
     */
    context: string
}

export interface AssetsApiAssetsV1CustomActionsContextPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsContextPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsContextPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsContextPost
     */
    context: string
    /**
     * body
     * @type CustomActionSchema
     * @memberof AssetsApiassetsV1CustomActionsContextPost
     */
    customActionSchema: CustomActionSchema
}

export interface AssetsApiAssetsV1CustomActionsGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsGet
     */
    authToken: string
}

export interface AssetsApiAssetsV1CustomActionsSharedContextActionIdCallbackPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsSharedContextActionIdCallbackPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsSharedContextActionIdCallbackPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsSharedContextActionIdCallbackPost
     */
    context: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1CustomActionsSharedContextActionIdCallbackPost
     */
    actionId: string
    /**
     * body
     * @type CustomActionCallbackSchema
     * @memberof AssetsApiassetsV1CustomActionsSharedContextActionIdCallbackPost
     */
    customActionCallbackSchema: CustomActionCallbackSchema
}

export interface AssetsApiAssetsV1DeleteQueueAssetsDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueueAssetsDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueueAssetsDelete
     */
    authToken: string
    /**
     * body
     * @type DeleteQueueSchema
     * @memberof AssetsApiassetsV1DeleteQueueAssetsDelete
     */
    deleteQueueSchema: DeleteQueueSchema
}

export interface AssetsApiAssetsV1DeleteQueueAssetsGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueueAssetsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueueAssetsGet
     */
    authToken: string
    /**
     * The number of items for each page
     * @type number
     * @memberof AssetsApiassetsV1DeleteQueueAssetsGet
     */
    perPage?: number
    /**
     * Which page number to fetch
     * @type number
     * @memberof AssetsApiassetsV1DeleteQueueAssetsGet
     */
    page?: number
    /**
     * A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueueAssetsGet
     */
    sort?: string
    /**
     * A comma separated list of fieldnames with order For example - first_name,eq,Vlad;last_name,eq,Gudkov
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueueAssetsGet
     */
    filter?: string
}

export interface AssetsApiAssetsV1DeleteQueueAssetsPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueueAssetsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueueAssetsPost
     */
    authToken: string
    /**
     * body
     * @type DeleteQueueSchema
     * @memberof AssetsApiassetsV1DeleteQueueAssetsPost
     */
    deleteQueueSchema: DeleteQueueSchema
}

export interface AssetsApiAssetsV1DeleteQueueAssetsPurgeAllPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueueAssetsPurgeAllPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueueAssetsPurgeAllPost
     */
    authToken: string
}

export interface AssetsApiAssetsV1DeleteQueueAssetsPurgePostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueueAssetsPurgePost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueueAssetsPurgePost
     */
    authToken: string
    /**
     * body
     * @type DeleteQueueSchema
     * @memberof AssetsApiassetsV1DeleteQueueAssetsPurgePost
     */
    deleteQueueSchema: DeleteQueueSchema
}

export interface AssetsApiAssetsV1DeleteQueueAssetsRestoreAllPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueueAssetsRestoreAllPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueueAssetsRestoreAllPost
     */
    authToken: string
}

export interface AssetsApiAssetsV1DeleteQueueBulkPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueueBulkPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueueBulkPost
     */
    authToken: string
    /**
     * body
     * @type BulkDeleteSchema
     * @memberof AssetsApiassetsV1DeleteQueueBulkPost
     */
    bulkDeleteSchema: BulkDeleteSchema
}

export interface AssetsApiAssetsV1DeleteQueueCollectionsDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueueCollectionsDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueueCollectionsDelete
     */
    authToken: string
    /**
     * body
     * @type DeleteQueueSchema
     * @memberof AssetsApiassetsV1DeleteQueueCollectionsDelete
     */
    deleteQueueSchema: DeleteQueueSchema
}

export interface AssetsApiAssetsV1DeleteQueueCollectionsGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueueCollectionsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueueCollectionsGet
     */
    authToken: string
    /**
     * The number of items for each page
     * @type number
     * @memberof AssetsApiassetsV1DeleteQueueCollectionsGet
     */
    perPage?: number
    /**
     * Which page number to fetch
     * @type number
     * @memberof AssetsApiassetsV1DeleteQueueCollectionsGet
     */
    page?: number
    /**
     * A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueueCollectionsGet
     */
    sort?: string
    /**
     * A comma separated list of fieldnames with order For example - first_name,eq,Vlad;last_name,eq,Gudkov
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueueCollectionsGet
     */
    filter?: string
}

export interface AssetsApiAssetsV1DeleteQueueCollectionsPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueueCollectionsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueueCollectionsPost
     */
    authToken: string
    /**
     * body
     * @type DeleteQueueSchema
     * @memberof AssetsApiassetsV1DeleteQueueCollectionsPost
     */
    deleteQueueSchema: DeleteQueueSchema
}

export interface AssetsApiAssetsV1DeleteQueueCollectionsPurgeAllPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueueCollectionsPurgeAllPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueueCollectionsPurgeAllPost
     */
    authToken: string
}

export interface AssetsApiAssetsV1DeleteQueueCollectionsPurgePostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueueCollectionsPurgePost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueueCollectionsPurgePost
     */
    authToken: string
    /**
     * body
     * @type DeleteQueueSchema
     * @memberof AssetsApiassetsV1DeleteQueueCollectionsPurgePost
     */
    deleteQueueSchema: DeleteQueueSchema
}

export interface AssetsApiAssetsV1DeleteQueueCollectionsRestoreAllPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueueCollectionsRestoreAllPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueueCollectionsRestoreAllPost
     */
    authToken: string
}

export interface AssetsApiAssetsV1DeleteQueuePurgeAllPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueuePurgeAllPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1DeleteQueuePurgeAllPost
     */
    authToken: string
}

export interface AssetsApiAssetsV1FavoritesAllDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1FavoritesAllDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1FavoritesAllDelete
     */
    authToken: string
}

export interface AssetsApiAssetsV1FavoritesDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1FavoritesDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1FavoritesDelete
     */
    authToken: string
    /**
     * body
     * @type BulkDeleteFromFavoritesSchema
     * @memberof AssetsApiassetsV1FavoritesDelete
     */
    bulkDeleteFromFavoritesSchema: BulkDeleteFromFavoritesSchema
}

export interface AssetsApiAssetsV1FavoritesGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1FavoritesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1FavoritesGet
     */
    authToken: string
    /**
     * The number of objects for each page
     * @type number
     * @memberof AssetsApiassetsV1FavoritesGet
     */
    perPage?: number
    /**
     * Which page number to fetch
     * @type number
     * @memberof AssetsApiassetsV1FavoritesGet
     */
    page?: number
    /**
     * A comma separated list of fieldnames with order. For example - title,asc;date_created,desc
     * @type string
     * @memberof AssetsApiassetsV1FavoritesGet
     */
    sort?: string
}

export interface AssetsApiAssetsV1FavoritesPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1FavoritesPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1FavoritesPost
     */
    authToken: string
    /**
     * body
     * @type BulkAddToFavoritesSchema
     * @memberof AssetsApiassetsV1FavoritesPost
     */
    bulkAddToFavoritesSchema: BulkAddToFavoritesSchema
}

export interface AssetsApiAssetsV1FavouritesAllDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1FavouritesAllDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1FavouritesAllDelete
     */
    authToken: string
}

export interface AssetsApiAssetsV1ObjectTypeObjectIdApprovalsDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsDelete
     */
    objectId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsDelete
     */
    objectType: string
}

export interface AssetsApiAssetsV1ObjectTypeObjectIdApprovalsExternalEmailDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsExternalEmailDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsExternalEmailDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsExternalEmailDelete
     */
    objectId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsExternalEmailDelete
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsExternalEmailDelete
     */
    email: string
}

export interface AssetsApiAssetsV1ObjectTypeObjectIdApprovalsGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsGet
     */
    objectId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsGet
     */
    objectType: string
}

export interface AssetsApiAssetsV1ObjectTypeObjectIdApprovalsPutRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsPut
     */
    objectId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsPut
     */
    objectType: string
    /**
     * body
     * @type ApprovalBySchema
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsPut
     */
    approvalBySchema: ApprovalBySchema
}

export interface AssetsApiAssetsV1ObjectTypeObjectIdApprovalsRequestDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsRequestDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsRequestDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsRequestDelete
     */
    objectId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsRequestDelete
     */
    objectType: string
}

export interface AssetsApiAssetsV1ObjectTypeObjectIdApprovalsRequestGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsRequestGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsRequestGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsRequestGet
     */
    objectId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsRequestGet
     */
    objectType: string
}

export interface AssetsApiAssetsV1ObjectTypeObjectIdApprovalsRequestPatchRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsRequestPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsRequestPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsRequestPatch
     */
    objectId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsRequestPatch
     */
    objectType: string
    /**
     * body
     * @type ApprovalSchema
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsRequestPatch
     */
    approvalSchema: ApprovalSchema
}

export interface AssetsApiAssetsV1ObjectTypeObjectIdApprovalsRequestPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsRequestPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsRequestPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsRequestPost
     */
    objectId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsRequestPost
     */
    objectType: string
    /**
     * body
     * @type ApprovalSchema
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsRequestPost
     */
    approvalSchema: ApprovalSchema
}

export interface AssetsApiAssetsV1ObjectTypeObjectIdApprovalsRequestPutRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsRequestPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsRequestPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsRequestPut
     */
    objectId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsRequestPut
     */
    objectType: string
    /**
     * body
     * @type ApprovalSchema
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsRequestPut
     */
    approvalSchema: ApprovalSchema
}

export interface AssetsApiAssetsV1ObjectTypeObjectIdApprovalsUserUserIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsUserUserIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsUserUserIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsUserUserIdDelete
     */
    objectId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsUserUserIdDelete
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdApprovalsUserUserIdDelete
     */
    userId: string
}

export interface AssetsApiAssetsV1ObjectTypeObjectIdSharesGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesGet
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesGet
     */
    objectId: string
    /**
     * The number of items for each page
     * @type number
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesGet
     */
    perPage?: number
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesGet
     */
    lastId?: string
}

export interface AssetsApiAssetsV1ObjectTypeObjectIdSharesPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesPost
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesPost
     */
    objectId: string
    /**
     * body
     * @type ShareCreateSchema
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesPost
     */
    shareCreateSchema: ShareCreateSchema
    /**
     * 
     * @type boolean
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesPost
     */
    isApproval?: boolean
}

export interface AssetsApiAssetsV1ObjectTypeObjectIdSharesShareIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdDelete
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdDelete
     */
    objectId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdDelete
     */
    shareId: string
}

export interface AssetsApiAssetsV1ObjectTypeObjectIdSharesShareIdGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdGet
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdGet
     */
    objectId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdGet
     */
    shareId: string
}

export interface AssetsApiAssetsV1ObjectTypeObjectIdSharesShareIdPutRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdPut
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdPut
     */
    objectId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdPut
     */
    shareId: string
    /**
     * body
     * @type ShareSchema
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdPut
     */
    shareSchema: ShareSchema
}

export interface AssetsApiAssetsV1ObjectTypeObjectIdSharesShareIdUsersGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersGet
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersGet
     */
    objectId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersGet
     */
    shareId: string
    /**
     * The number of items for each page
     * @type number
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersGet
     */
    perPage?: number
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersGet
     */
    lastId?: string
}

export interface AssetsApiAssetsV1ObjectTypeObjectIdSharesShareIdUsersPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersPost
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersPost
     */
    objectId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersPost
     */
    shareId: string
    /**
     * body
     * @type ShareUserSchema
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersPost
     */
    shareUserSchema: ShareUserSchema
}

export interface AssetsApiAssetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdDelete
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdDelete
     */
    objectId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdDelete
     */
    shareId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdDelete
     */
    shareUserId: string
}

export interface AssetsApiAssetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdGet
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdGet
     */
    objectId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdGet
     */
    shareId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdGet
     */
    shareUserId: string
}

export interface AssetsApiAssetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdPatch
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdPatch
     */
    objectId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdPatch
     */
    shareId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdPatch
     */
    shareUserId: string
    /**
     * body
     * @type ShareUserSchema
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdPatch
     */
    shareUserSchema: ShareUserSchema
}

export interface AssetsApiAssetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdPutRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdPut
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdPut
     */
    objectId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdPut
     */
    shareId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdPut
     */
    shareUserId: string
    /**
     * body
     * @type ShareUserSchema
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdPut
     */
    shareUserSchema: ShareUserSchema
}

export interface AssetsApiAssetsV1ObjectTypeObjectIdSharesUrlPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesUrlPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesUrlPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesUrlPost
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesUrlPost
     */
    objectId: string
    /**
     * body
     * @type ShareURLCreateSchema
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdSharesUrlPost
     */
    shareURLCreateSchema: ShareURLCreateSchema
}

export interface AssetsApiAssetsV1ObjectTypeObjectIdVersionsVersionIdApprovalsGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdVersionsVersionIdApprovalsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdVersionsVersionIdApprovalsGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdVersionsVersionIdApprovalsGet
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdVersionsVersionIdApprovalsGet
     */
    objectId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdVersionsVersionIdApprovalsGet
     */
    versionId: string
}

export interface AssetsApiAssetsV1ObjectTypeObjectIdVersionsVersionIdApprovalsRequestGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdVersionsVersionIdApprovalsRequestGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdVersionsVersionIdApprovalsRequestGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdVersionsVersionIdApprovalsRequestGet
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdVersionsVersionIdApprovalsRequestGet
     */
    objectId: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ObjectTypeObjectIdVersionsVersionIdApprovalsRequestGet
     */
    versionId: string
}

export interface AssetsApiAssetsV1SegmentsReindexPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1SegmentsReindexPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1SegmentsReindexPost
     */
    authToken: string
    /**
     * body
     * @type ReindexSegmentsSchema
     * @memberof AssetsApiassetsV1SegmentsReindexPost
     */
    reindexSegmentsSchema: ReindexSegmentsSchema
}

export interface AssetsApiAssetsV1ShareObjectTypePostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ShareObjectTypePost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ShareObjectTypePost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1ShareObjectTypePost
     */
    objectType: string
    /**
     * body
     * @type BulkShareCreateSchema
     * @memberof AssetsApiassetsV1ShareObjectTypePost
     */
    bulkShareCreateSchema: BulkShareCreateSchema
}

export interface AssetsApiAssetsV1SharesAuthLoginPostRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1SharesAuthLoginPost
     */
    appID: string
    /**
     * body
     * @type ShareLoginSchema
     * @memberof AssetsApiassetsV1SharesAuthLoginPost
     */
    shareLoginSchema: ShareLoginSchema
}

export interface AssetsApiAssetsV1SharesAuthTokenGetRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1SharesAuthTokenGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1SharesAuthTokenGet
     */
    shareAuthToken: string
}

export interface AssetsApiAssetsV1SharesAuthTokenPutRequest {
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1SharesAuthTokenPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AssetsApiassetsV1SharesAuthTokenPut
     */
    shareAuthToken: string
}

export class ObjectAssetsApi {
    private api: ObservableAssetsApi

    public constructor(configuration: Configuration, requestFactory?: AssetsApiRequestFactory, responseProcessor?: AssetsApiResponseProcessor) {
        this.api = new ObservableAssetsApi(configuration, requestFactory, responseProcessor);
    }

    /**
     *  Required roles:  - can_write_approval_status_in_bulk 
     * Create a job for bulk request & set approval
     * @param param the request object
     */
    public assetsV1ApprovalsBulkPostWithHttpInfo(param: AssetsApiAssetsV1ApprovalsBulkPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1ApprovalsBulkPostWithHttpInfo(param.authToken, param.appID, param.bulkSetApprovalSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_approval_status_in_bulk 
     * Create a job for bulk request & set approval
     * @param param the request object
     */
    public assetsV1ApprovalsBulkPost(param: AssetsApiAssetsV1ApprovalsBulkPostRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1ApprovalsBulkPost(param.authToken, param.appID, param.bulkSetApprovalSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_approval_status_in_bulk 
     * Create a job for bulk approval status removal
     * @param param the request object
     */
    public assetsV1ApprovalsBulkRemovePostWithHttpInfo(param: AssetsApiAssetsV1ApprovalsBulkRemovePostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1ApprovalsBulkRemovePostWithHttpInfo(param.authToken, param.appID, param.bulkRemoveApprovalSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_approval_status_in_bulk 
     * Create a job for bulk approval status removal
     * @param param the request object
     */
    public assetsV1ApprovalsBulkRemovePost(param: AssetsApiAssetsV1ApprovalsBulkRemovePostRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1ApprovalsBulkRemovePost(param.authToken, param.appID, param.bulkRemoveApprovalSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_assets 
     * Delete a particular asset by id
     * @param param the request object
     */
    public assetsV1AssetsAssetIdDeleteWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1AssetsAssetIdDeleteWithHttpInfo(param.appID, param.authToken, param.assetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_assets 
     * Delete a particular asset by id
     * @param param the request object
     */
    public assetsV1AssetsAssetIdDelete(param: AssetsApiAssetsV1AssetsAssetIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1AssetsAssetIdDelete(param.appID, param.authToken, param.assetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_assets 
     * Returns a particular asset by id
     * @param param the request object
     */
    public assetsV1AssetsAssetIdGetWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdGetRequest, options?: Configuration): Promise<HttpInfo<AssetSchema>> {
        return this.api.assetsV1AssetsAssetIdGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.includeCollections, param.includeUsers,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_assets 
     * Returns a particular asset by id
     * @param param the request object
     */
    public assetsV1AssetsAssetIdGet(param: AssetsApiAssetsV1AssetsAssetIdGetRequest, options?: Configuration): Promise<AssetSchema> {
        return this.api.assetsV1AssetsAssetIdGet(param.appID, param.authToken, param.assetId, param.includeCollections, param.includeUsers,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_assets_history 
     * Get list of assets
     * @param param the request object
     */
    public assetsV1AssetsAssetIdHistoryGetWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdHistoryGetRequest, options?: Configuration): Promise<HttpInfo<AssetHistoryEntitiesSchema>> {
        return this.api.assetsV1AssetsAssetIdHistoryGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.perPage, param.page, param.sort, param.filter,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_assets_history 
     * Get list of assets
     * @param param the request object
     */
    public assetsV1AssetsAssetIdHistoryGet(param: AssetsApiAssetsV1AssetsAssetIdHistoryGetRequest, options?: Configuration): Promise<AssetHistoryEntitiesSchema> {
        return this.api.assetsV1AssetsAssetIdHistoryGet(param.appID, param.authToken, param.assetId, param.perPage, param.page, param.sort, param.filter,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_assets_history 
     * Deletes an asset history entity
     * @param param the request object
     */
    public assetsV1AssetsAssetIdHistoryHistoryEntityIdDeleteWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdHistoryHistoryEntityIdDeleteRequest, options?: Configuration): Promise<HttpInfo<AssetHistorySchema>> {
        return this.api.assetsV1AssetsAssetIdHistoryHistoryEntityIdDeleteWithHttpInfo(param.appID, param.authToken, param.assetId, param.historyEntityId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_assets_history 
     * Deletes an asset history entity
     * @param param the request object
     */
    public assetsV1AssetsAssetIdHistoryHistoryEntityIdDelete(param: AssetsApiAssetsV1AssetsAssetIdHistoryHistoryEntityIdDeleteRequest, options?: Configuration): Promise<AssetHistorySchema> {
        return this.api.assetsV1AssetsAssetIdHistoryHistoryEntityIdDelete(param.appID, param.authToken, param.assetId, param.historyEntityId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_assets_history 
     * Get an asset history entity
     * @param param the request object
     */
    public assetsV1AssetsAssetIdHistoryHistoryEntityIdGetWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdHistoryHistoryEntityIdGetRequest, options?: Configuration): Promise<HttpInfo<AssetHistorySchema>> {
        return this.api.assetsV1AssetsAssetIdHistoryHistoryEntityIdGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.historyEntityId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_assets_history 
     * Get an asset history entity
     * @param param the request object
     */
    public assetsV1AssetsAssetIdHistoryHistoryEntityIdGet(param: AssetsApiAssetsV1AssetsAssetIdHistoryHistoryEntityIdGetRequest, options?: Configuration): Promise<AssetHistorySchema> {
        return this.api.assetsV1AssetsAssetIdHistoryHistoryEntityIdGet(param.appID, param.authToken, param.assetId, param.historyEntityId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_assets_history 
     * Reindex asset history entity
     * @param param the request object
     */
    public assetsV1AssetsAssetIdHistoryHistoryEntityIdReindexPostWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdHistoryHistoryEntityIdReindexPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1AssetsAssetIdHistoryHistoryEntityIdReindexPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.historyEntityId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_assets_history 
     * Reindex asset history entity
     * @param param the request object
     */
    public assetsV1AssetsAssetIdHistoryHistoryEntityIdReindexPost(param: AssetsApiAssetsV1AssetsAssetIdHistoryHistoryEntityIdReindexPostRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1AssetsAssetIdHistoryHistoryEntityIdReindexPost(param.appID, param.authToken, param.assetId, param.historyEntityId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_assets_history 
     * Create an asset history entity
     * @param param the request object
     */
    public assetsV1AssetsAssetIdHistoryPostWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdHistoryPostRequest, options?: Configuration): Promise<HttpInfo<AssetHistorySchema>> {
        return this.api.assetsV1AssetsAssetIdHistoryPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.assetHistorySchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_assets_history 
     * Create an asset history entity
     * @param param the request object
     */
    public assetsV1AssetsAssetIdHistoryPost(param: AssetsApiAssetsV1AssetsAssetIdHistoryPostRequest, options?: Configuration): Promise<AssetHistorySchema> {
        return this.api.assetsV1AssetsAssetIdHistoryPost(param.appID, param.authToken, param.assetId, param.assetHistorySchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_assets 
     * Update asset
     * @param param the request object
     */
    public assetsV1AssetsAssetIdPatchWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdPatchRequest, options?: Configuration): Promise<HttpInfo<AssetSchema>> {
        return this.api.assetsV1AssetsAssetIdPatchWithHttpInfo(param.appID, param.authToken, param.assetId, param.assetSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_assets 
     * Update asset
     * @param param the request object
     */
    public assetsV1AssetsAssetIdPatch(param: AssetsApiAssetsV1AssetsAssetIdPatchRequest, options?: Configuration): Promise<AssetSchema> {
        return this.api.assetsV1AssetsAssetIdPatch(param.appID, param.authToken, param.assetId, param.assetSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_purge_assets 
     * Purges a particular asset by id immediately
     * @param param the request object
     */
    public assetsV1AssetsAssetIdPurgeDeleteWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdPurgeDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1AssetsAssetIdPurgeDeleteWithHttpInfo(param.appID, param.authToken, param.assetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_purge_assets 
     * Purges a particular asset by id immediately
     * @param param the request object
     */
    public assetsV1AssetsAssetIdPurgeDelete(param: AssetsApiAssetsV1AssetsAssetIdPurgeDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1AssetsAssetIdPurgeDelete(param.appID, param.authToken, param.assetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_assets 
     * Update asset
     * @param param the request object
     */
    public assetsV1AssetsAssetIdPutWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdPutRequest, options?: Configuration): Promise<HttpInfo<AssetSchema>> {
        return this.api.assetsV1AssetsAssetIdPutWithHttpInfo(param.appID, param.authToken, param.assetId, param.assetSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_assets 
     * Update asset
     * @param param the request object
     */
    public assetsV1AssetsAssetIdPut(param: AssetsApiAssetsV1AssetsAssetIdPutRequest, options?: Configuration): Promise<AssetSchema> {
        return this.api.assetsV1AssetsAssetIdPut(param.appID, param.authToken, param.assetId, param.assetSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_assets 
     * Reindex asset
     * @param param the request object
     */
    public assetsV1AssetsAssetIdReindexPostWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdReindexPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1AssetsAssetIdReindexPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.reindexAssetSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_assets 
     * Reindex asset
     * @param param the request object
     */
    public assetsV1AssetsAssetIdReindexPost(param: AssetsApiAssetsV1AssetsAssetIdReindexPostRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1AssetsAssetIdReindexPost(param.appID, param.authToken, param.assetId, param.reindexAssetSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_asset_relations 
     * Returns an assets relations
     * @param param the request object
     */
    public assetsV1AssetsAssetIdRelationsGetWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdRelationsGetRequest, options?: Configuration): Promise<HttpInfo<AssetsSchema>> {
        return this.api.assetsV1AssetsAssetIdRelationsGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.includeDeleted, param.perPage, param.page, param.sort,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_asset_relations 
     * Returns an assets relations
     * @param param the request object
     */
    public assetsV1AssetsAssetIdRelationsGet(param: AssetsApiAssetsV1AssetsAssetIdRelationsGetRequest, options?: Configuration): Promise<AssetsSchema> {
        return this.api.assetsV1AssetsAssetIdRelationsGet(param.appID, param.authToken, param.assetId, param.includeDeleted, param.perPage, param.page, param.sort,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_asset_relations 
     * Create a new asset relation
     * @param param the request object
     */
    public assetsV1AssetsAssetIdRelationsPostWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdRelationsPostRequest, options?: Configuration): Promise<HttpInfo<RelationSchema>> {
        return this.api.assetsV1AssetsAssetIdRelationsPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.relationSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_asset_relations 
     * Create a new asset relation
     * @param param the request object
     */
    public assetsV1AssetsAssetIdRelationsPost(param: AssetsApiAssetsV1AssetsAssetIdRelationsPostRequest, options?: Configuration): Promise<RelationSchema> {
        return this.api.assetsV1AssetsAssetIdRelationsPost(param.appID, param.authToken, param.assetId, param.relationSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_asset_relations 
     * Returns assets that has a relation to this asset
     * @param param the request object
     */
    public assetsV1AssetsAssetIdRelationsRelationTypeGetWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdRelationsRelationTypeGetRequest, options?: Configuration): Promise<HttpInfo<AssetsSchema>> {
        return this.api.assetsV1AssetsAssetIdRelationsRelationTypeGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.relationType, param.includeDeleted,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_asset_relations 
     * Returns assets that has a relation to this asset
     * @param param the request object
     */
    public assetsV1AssetsAssetIdRelationsRelationTypeGet(param: AssetsApiAssetsV1AssetsAssetIdRelationsRelationTypeGetRequest, options?: Configuration): Promise<AssetsSchema> {
        return this.api.assetsV1AssetsAssetIdRelationsRelationTypeGet(param.appID, param.authToken, param.assetId, param.relationType, param.includeDeleted,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_asset_relations 
     * Delete a particular asset by id
     * @param param the request object
     */
    public assetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdDeleteWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdDeleteWithHttpInfo(param.appID, param.authToken, param.assetId, param.relationType, param.relatedToAssetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_asset_relations 
     * Delete a particular asset by id
     * @param param the request object
     */
    public assetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdDelete(param: AssetsApiAssetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdDelete(param.appID, param.authToken, param.assetId, param.relationType, param.relatedToAssetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_asset_relations 
     * Create a new asset relation
     * @param param the request object
     */
    public assetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdPostWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdPostRequest, options?: Configuration): Promise<HttpInfo<RelationSchema>> {
        return this.api.assetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.relationType, param.relatedToAssetId, param.relationSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_asset_relations 
     * Create a new asset relation
     * @param param the request object
     */
    public assetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdPost(param: AssetsApiAssetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdPostRequest, options?: Configuration): Promise<RelationSchema> {
        return this.api.assetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdPost(param.appID, param.authToken, param.assetId, param.relationType, param.relatedToAssetId, param.relationSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_asset_relations 
     * Reverse a particular asset\'s relation
     * @param param the request object
     */
    public assetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdReversePostWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdReversePostRequest, options?: Configuration): Promise<HttpInfo<RelationSchema>> {
        return this.api.assetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdReversePostWithHttpInfo(param.appID, param.authToken, param.assetId, param.relationType, param.relatedToAssetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_asset_relations 
     * Reverse a particular asset\'s relation
     * @param param the request object
     */
    public assetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdReversePost(param: AssetsApiAssetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdReversePostRequest, options?: Configuration): Promise<RelationSchema> {
        return this.api.assetsV1AssetsAssetIdRelationsRelationTypeRelatedToAssetIdReversePost(param.appID, param.authToken, param.assetId, param.relationType, param.relatedToAssetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_assets 
     * Restore deleted asset by id
     * @param param the request object
     */
    public assetsV1AssetsAssetIdRestorePutWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdRestorePutRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1AssetsAssetIdRestorePutWithHttpInfo(param.appID, param.authToken, param.assetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_assets 
     * Restore deleted asset by id
     * @param param the request object
     */
    public assetsV1AssetsAssetIdRestorePut(param: AssetsApiAssetsV1AssetsAssetIdRestorePutRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1AssetsAssetIdRestorePut(param.appID, param.authToken, param.assetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_assets 
     * Update metadata for asset
     * @param param the request object
     */
    public assetsV1AssetsAssetIdSearchDocumentPutWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdSearchDocumentPutRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1AssetsAssetIdSearchDocumentPutWithHttpInfo(param.appID, param.authToken, param.assetId, param.assetElasticSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_assets 
     * Update metadata for asset
     * @param param the request object
     */
    public assetsV1AssetsAssetIdSearchDocumentPut(param: AssetsApiAssetsV1AssetsAssetIdSearchDocumentPutRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1AssetsAssetIdSearchDocumentPut(param.appID, param.authToken, param.assetId, param.assetElasticSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_segments 
     * Delete segments with either ids or by type
     * @param param the request object
     */
    public assetsV1AssetsAssetIdSegmentsBulkDeleteWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdSegmentsBulkDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1AssetsAssetIdSegmentsBulkDeleteWithHttpInfo(param.appID, param.authToken, param.assetId, param.deleteSegmentsSchema, param.immediately, param.ignoreReindexing,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_segments 
     * Delete segments with either ids or by type
     * @param param the request object
     */
    public assetsV1AssetsAssetIdSegmentsBulkDelete(param: AssetsApiAssetsV1AssetsAssetIdSegmentsBulkDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1AssetsAssetIdSegmentsBulkDelete(param.appID, param.authToken, param.assetId, param.deleteSegmentsSchema, param.immediately, param.ignoreReindexing,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_segments 
     * Create multiple new segments for a single asset
     * @param param the request object
     */
    public assetsV1AssetsAssetIdSegmentsBulkPostWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdSegmentsBulkPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1AssetsAssetIdSegmentsBulkPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.bulkCreateSegmentsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_segments 
     * Create multiple new segments for a single asset
     * @param param the request object
     */
    public assetsV1AssetsAssetIdSegmentsBulkPost(param: AssetsApiAssetsV1AssetsAssetIdSegmentsBulkPostRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1AssetsAssetIdSegmentsBulkPost(param.appID, param.authToken, param.assetId, param.bulkCreateSegmentsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_segments 
     * List of segments
     * @param param the request object
     */
    public assetsV1AssetsAssetIdSegmentsGetWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdSegmentsGetRequest, options?: Configuration): Promise<HttpInfo<SegmentsSchema>> {
        return this.api.assetsV1AssetsAssetIdSegmentsGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.sort, param.ids, param.query, param.includes, param.perPage, param.page, param.scroll, param.scrollId, param.transcriptionId, param.versionId, param.segmentType, param.segmentColor, param.timeStartMilliseconds, param.timeEndMilliseconds, param.timeStartMillisecondsGte, param.timeEndMillisecondsLte, param.status, param.includeUsers,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_segments 
     * List of segments
     * @param param the request object
     */
    public assetsV1AssetsAssetIdSegmentsGet(param: AssetsApiAssetsV1AssetsAssetIdSegmentsGetRequest, options?: Configuration): Promise<SegmentsSchema> {
        return this.api.assetsV1AssetsAssetIdSegmentsGet(param.appID, param.authToken, param.assetId, param.sort, param.ids, param.query, param.includes, param.perPage, param.page, param.scroll, param.scrollId, param.transcriptionId, param.versionId, param.segmentType, param.segmentColor, param.timeStartMilliseconds, param.timeEndMilliseconds, param.timeStartMillisecondsGte, param.timeEndMillisecondsLte, param.status, param.includeUsers,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_segments 
     * Create a new segment
     * @param param the request object
     */
    public assetsV1AssetsAssetIdSegmentsPostWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdSegmentsPostRequest, options?: Configuration): Promise<HttpInfo<SegmentSchema>> {
        return this.api.assetsV1AssetsAssetIdSegmentsPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.segmentSchema, param.shareUserEmail,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_segments 
     * Create a new segment
     * @param param the request object
     */
    public assetsV1AssetsAssetIdSegmentsPost(param: AssetsApiAssetsV1AssetsAssetIdSegmentsPostRequest, options?: Configuration): Promise<SegmentSchema> {
        return this.api.assetsV1AssetsAssetIdSegmentsPost(param.appID, param.authToken, param.assetId, param.segmentSchema, param.shareUserEmail,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_segments 
     * Reindex assets segments
     * @param param the request object
     */
    public assetsV1AssetsAssetIdSegmentsReindexPostWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdSegmentsReindexPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1AssetsAssetIdSegmentsReindexPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.reindexSegmentSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_segments 
     * Reindex assets segments
     * @param param the request object
     */
    public assetsV1AssetsAssetIdSegmentsReindexPost(param: AssetsApiAssetsV1AssetsAssetIdSegmentsReindexPostRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1AssetsAssetIdSegmentsReindexPost(param.appID, param.authToken, param.assetId, param.reindexSegmentSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_segments 
     * Delete a particular segment from an asset by id
     * @param param the request object
     */
    public assetsV1AssetsAssetIdSegmentsSegmentIdDeleteWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdSegmentsSegmentIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1AssetsAssetIdSegmentsSegmentIdDeleteWithHttpInfo(param.appID, param.authToken, param.assetId, param.segmentId, param.softDelete,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_segments 
     * Delete a particular segment from an asset by id
     * @param param the request object
     */
    public assetsV1AssetsAssetIdSegmentsSegmentIdDelete(param: AssetsApiAssetsV1AssetsAssetIdSegmentsSegmentIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1AssetsAssetIdSegmentsSegmentIdDelete(param.appID, param.authToken, param.assetId, param.segmentId, param.softDelete,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_segments 
     * Get a segment by ID
     * @param param the request object
     */
    public assetsV1AssetsAssetIdSegmentsSegmentIdGetWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdSegmentsSegmentIdGetRequest, options?: Configuration): Promise<HttpInfo<SegmentSchema>> {
        return this.api.assetsV1AssetsAssetIdSegmentsSegmentIdGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.segmentId, param.scroll, param.scrollId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_segments 
     * Get a segment by ID
     * @param param the request object
     */
    public assetsV1AssetsAssetIdSegmentsSegmentIdGet(param: AssetsApiAssetsV1AssetsAssetIdSegmentsSegmentIdGetRequest, options?: Configuration): Promise<SegmentSchema> {
        return this.api.assetsV1AssetsAssetIdSegmentsSegmentIdGet(param.appID, param.authToken, param.assetId, param.segmentId, param.scroll, param.scrollId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_segments 
     * Update segment
     * @param param the request object
     */
    public assetsV1AssetsAssetIdSegmentsSegmentIdPatchWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdSegmentsSegmentIdPatchRequest, options?: Configuration): Promise<HttpInfo<SegmentSchema>> {
        return this.api.assetsV1AssetsAssetIdSegmentsSegmentIdPatchWithHttpInfo(param.appID, param.authToken, param.assetId, param.segmentId, param.editSegmentSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_segments 
     * Update segment
     * @param param the request object
     */
    public assetsV1AssetsAssetIdSegmentsSegmentIdPatch(param: AssetsApiAssetsV1AssetsAssetIdSegmentsSegmentIdPatchRequest, options?: Configuration): Promise<SegmentSchema> {
        return this.api.assetsV1AssetsAssetIdSegmentsSegmentIdPatch(param.appID, param.authToken, param.assetId, param.segmentId, param.editSegmentSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_segments 
     * Update segment
     * @param param the request object
     */
    public assetsV1AssetsAssetIdSegmentsSegmentIdPutWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdSegmentsSegmentIdPutRequest, options?: Configuration): Promise<HttpInfo<SegmentSchema>> {
        return this.api.assetsV1AssetsAssetIdSegmentsSegmentIdPutWithHttpInfo(param.appID, param.authToken, param.assetId, param.segmentId, param.editSegmentSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_segments 
     * Update segment
     * @param param the request object
     */
    public assetsV1AssetsAssetIdSegmentsSegmentIdPut(param: AssetsApiAssetsV1AssetsAssetIdSegmentsSegmentIdPutRequest, options?: Configuration): Promise<SegmentSchema> {
        return this.api.assetsV1AssetsAssetIdSegmentsSegmentIdPut(param.appID, param.authToken, param.assetId, param.segmentId, param.editSegmentSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_segments 
     * Reindex assets segment
     * @param param the request object
     */
    public assetsV1AssetsAssetIdSegmentsSegmentIdReindexPostWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdSegmentsSegmentIdReindexPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1AssetsAssetIdSegmentsSegmentIdReindexPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.segmentId, param.reindexSegmentSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_segments 
     * Reindex assets segment
     * @param param the request object
     */
    public assetsV1AssetsAssetIdSegmentsSegmentIdReindexPost(param: AssetsApiAssetsV1AssetsAssetIdSegmentsSegmentIdReindexPostRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1AssetsAssetIdSegmentsSegmentIdReindexPost(param.appID, param.authToken, param.assetId, param.segmentId, param.reindexSegmentSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_segments 
     * List of segments
     * @param param the request object
     */
    public assetsV1AssetsAssetIdSegmentsSegmentTypeGetWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdSegmentsSegmentTypeGetRequest, options?: Configuration): Promise<HttpInfo<SegmentsSchema>> {
        return this.api.assetsV1AssetsAssetIdSegmentsSegmentTypeGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.segmentType, param.sort, param.ids, param.query, param.includes, param.perPage, param.page, param.scroll, param.scrollId, param.timeStartMilliseconds, param.timeEndMilliseconds, param.timeStartMillisecondsGte, param.timeEndMillisecondsLte,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_segments 
     * List of segments
     * @param param the request object
     */
    public assetsV1AssetsAssetIdSegmentsSegmentTypeGet(param: AssetsApiAssetsV1AssetsAssetIdSegmentsSegmentTypeGetRequest, options?: Configuration): Promise<SegmentsSchema> {
        return this.api.assetsV1AssetsAssetIdSegmentsSegmentTypeGet(param.appID, param.authToken, param.assetId, param.segmentType, param.sort, param.ids, param.query, param.includes, param.perPage, param.page, param.scroll, param.scrollId, param.timeStartMilliseconds, param.timeEndMilliseconds, param.timeStartMillisecondsGte, param.timeEndMillisecondsLte,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_segments 
     * List of segments as SRT file
     * @param param the request object
     */
    public assetsV1AssetsAssetIdSegmentsSrtGetWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdSegmentsSrtGetRequest, options?: Configuration): Promise<HttpInfo<string>> {
        return this.api.assetsV1AssetsAssetIdSegmentsSrtGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.ids, param.query, param.transcriptionId, param.versionId, param.segmentType, param.segmentColor, param.wordsPerLine,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_segments 
     * List of segments as SRT file
     * @param param the request object
     */
    public assetsV1AssetsAssetIdSegmentsSrtGet(param: AssetsApiAssetsV1AssetsAssetIdSegmentsSrtGetRequest, options?: Configuration): Promise<string> {
        return this.api.assetsV1AssetsAssetIdSegmentsSrtGet(param.appID, param.authToken, param.assetId, param.ids, param.query, param.transcriptionId, param.versionId, param.segmentType, param.segmentColor, param.wordsPerLine,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_segments 
     * List of segments as WebVTT file
     * @param param the request object
     */
    public assetsV1AssetsAssetIdSegmentsVttGetWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdSegmentsVttGetRequest, options?: Configuration): Promise<HttpInfo<string>> {
        return this.api.assetsV1AssetsAssetIdSegmentsVttGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.ids, param.query, param.transcriptionId, param.versionId, param.segmentType, param.segmentColor, param.wordsPerLine,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_segments 
     * List of segments as WebVTT file
     * @param param the request object
     */
    public assetsV1AssetsAssetIdSegmentsVttGet(param: AssetsApiAssetsV1AssetsAssetIdSegmentsVttGetRequest, options?: Configuration): Promise<string> {
        return this.api.assetsV1AssetsAssetIdSegmentsVttGet(param.appID, param.authToken, param.assetId, param.ids, param.query, param.transcriptionId, param.versionId, param.segmentType, param.segmentColor, param.wordsPerLine,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_assets 
     * Delete a particular asset by id on failed uplaod
     * @param param the request object
     */
    public assetsV1AssetsAssetIdUploadsDeleteWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdUploadsDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1AssetsAssetIdUploadsDeleteWithHttpInfo(param.appID, param.authToken, param.assetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_assets 
     * Delete a particular asset by id on failed uplaod
     * @param param the request object
     */
    public assetsV1AssetsAssetIdUploadsDelete(param: AssetsApiAssetsV1AssetsAssetIdUploadsDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1AssetsAssetIdUploadsDelete(param.appID, param.authToken, param.assetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_versions 
     * Create a new asset\'s version from another asset
     * @param param the request object
     */
    public assetsV1AssetsAssetIdVersionsFromAssetsSourceAssetIdPostWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdVersionsFromAssetsSourceAssetIdPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1AssetsAssetIdVersionsFromAssetsSourceAssetIdPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.sourceAssetId, param.createAssetVersionFromAssetSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_versions 
     * Create a new asset\'s version from another asset
     * @param param the request object
     */
    public assetsV1AssetsAssetIdVersionsFromAssetsSourceAssetIdPost(param: AssetsApiAssetsV1AssetsAssetIdVersionsFromAssetsSourceAssetIdPostRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1AssetsAssetIdVersionsFromAssetsSourceAssetIdPost(param.appID, param.authToken, param.assetId, param.sourceAssetId, param.createAssetVersionFromAssetSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_versions 
     * Create a new asset\'s version from another version
     * @param param the request object
     */
    public assetsV1AssetsAssetIdVersionsFromVersionsSourceVersionIdPostWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdVersionsFromVersionsSourceVersionIdPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1AssetsAssetIdVersionsFromVersionsSourceVersionIdPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.sourceVersionId, param.createAssetVersionFromVersionSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_versions 
     * Create a new asset\'s version from another version
     * @param param the request object
     */
    public assetsV1AssetsAssetIdVersionsFromVersionsSourceVersionIdPost(param: AssetsApiAssetsV1AssetsAssetIdVersionsFromVersionsSourceVersionIdPostRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1AssetsAssetIdVersionsFromVersionsSourceVersionIdPost(param.appID, param.authToken, param.assetId, param.sourceVersionId, param.createAssetVersionFromVersionSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_versions 
     * Delete all asset versions except the latest one
     * @param param the request object
     */
    public assetsV1AssetsAssetIdVersionsOldDeleteWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdVersionsOldDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1AssetsAssetIdVersionsOldDeleteWithHttpInfo(param.appID, param.authToken, param.assetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_versions 
     * Delete all asset versions except the latest one
     * @param param the request object
     */
    public assetsV1AssetsAssetIdVersionsOldDelete(param: AssetsApiAssetsV1AssetsAssetIdVersionsOldDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1AssetsAssetIdVersionsOldDelete(param.appID, param.authToken, param.assetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_versions 
     * Add asset version
     * @param param the request object
     */
    public assetsV1AssetsAssetIdVersionsPostWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdVersionsPostRequest, options?: Configuration): Promise<HttpInfo<AssetVersionsSchema>> {
        return this.api.assetsV1AssetsAssetIdVersionsPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.createAssetVersionSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_versions 
     * Add asset version
     * @param param the request object
     */
    public assetsV1AssetsAssetIdVersionsPost(param: AssetsApiAssetsV1AssetsAssetIdVersionsPostRequest, options?: Configuration): Promise<AssetVersionsSchema> {
        return this.api.assetsV1AssetsAssetIdVersionsPost(param.appID, param.authToken, param.assetId, param.createAssetVersionSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_versions 
     * Delete a particular asset version by id
     * @param param the request object
     */
    public assetsV1AssetsAssetIdVersionsVersionIdDeleteWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1AssetsAssetIdVersionsVersionIdDeleteWithHttpInfo(param.appID, param.authToken, param.assetId, param.versionId, param.hardDelete,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_versions 
     * Delete a particular asset version by id
     * @param param the request object
     */
    public assetsV1AssetsAssetIdVersionsVersionIdDelete(param: AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1AssetsAssetIdVersionsVersionIdDelete(param.appID, param.authToken, param.assetId, param.versionId, param.hardDelete,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_versions 
     * Edit asset version
     * @param param the request object
     */
    public assetsV1AssetsAssetIdVersionsVersionIdPatchWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdPatchRequest, options?: Configuration): Promise<HttpInfo<AssetVersionSchema>> {
        return this.api.assetsV1AssetsAssetIdVersionsVersionIdPatchWithHttpInfo(param.appID, param.authToken, param.assetId, param.versionId, param.assetVersionSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_versions 
     * Edit asset version
     * @param param the request object
     */
    public assetsV1AssetsAssetIdVersionsVersionIdPatch(param: AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdPatchRequest, options?: Configuration): Promise<AssetVersionSchema> {
        return this.api.assetsV1AssetsAssetIdVersionsVersionIdPatch(param.appID, param.authToken, param.assetId, param.versionId, param.assetVersionSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_versions 
     * Promote a particular asset version to a latest version
     * @param param the request object
     */
    public assetsV1AssetsAssetIdVersionsVersionIdPromotePutWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdPromotePutRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1AssetsAssetIdVersionsVersionIdPromotePutWithHttpInfo(param.appID, param.authToken, param.assetId, param.versionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_versions 
     * Promote a particular asset version to a latest version
     * @param param the request object
     */
    public assetsV1AssetsAssetIdVersionsVersionIdPromotePut(param: AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdPromotePutRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1AssetsAssetIdVersionsVersionIdPromotePut(param.appID, param.authToken, param.assetId, param.versionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_versions 
     * Edit asset version
     * @param param the request object
     */
    public assetsV1AssetsAssetIdVersionsVersionIdPutWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdPutRequest, options?: Configuration): Promise<HttpInfo<AssetVersionSchema>> {
        return this.api.assetsV1AssetsAssetIdVersionsVersionIdPutWithHttpInfo(param.appID, param.authToken, param.assetId, param.versionId, param.assetVersionSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_versions 
     * Edit asset version
     * @param param the request object
     */
    public assetsV1AssetsAssetIdVersionsVersionIdPut(param: AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdPutRequest, options?: Configuration): Promise<AssetVersionSchema> {
        return this.api.assetsV1AssetsAssetIdVersionsVersionIdPut(param.appID, param.authToken, param.assetId, param.versionId, param.assetVersionSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transcriptions 
     * Get a list of transcription properties
     * @param param the request object
     */
    public assetsV1AssetsAssetIdVersionsVersionIdTranscriptionsPropertiesGetWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdTranscriptionsPropertiesGetRequest, options?: Configuration): Promise<HttpInfo<AssetTranscriptionsPropertiesSchema>> {
        return this.api.assetsV1AssetsAssetIdVersionsVersionIdTranscriptionsPropertiesGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.versionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transcriptions 
     * Get a list of transcription properties
     * @param param the request object
     */
    public assetsV1AssetsAssetIdVersionsVersionIdTranscriptionsPropertiesGet(param: AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdTranscriptionsPropertiesGetRequest, options?: Configuration): Promise<AssetTranscriptionsPropertiesSchema> {
        return this.api.assetsV1AssetsAssetIdVersionsVersionIdTranscriptionsPropertiesGet(param.appID, param.authToken, param.assetId, param.versionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transcriptions 
     * Add a new transcription properties
     * @param param the request object
     */
    public assetsV1AssetsAssetIdVersionsVersionIdTranscriptionsPropertiesPostWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdTranscriptionsPropertiesPostRequest, options?: Configuration): Promise<HttpInfo<AssetTranscriptionPropertiesSchema>> {
        return this.api.assetsV1AssetsAssetIdVersionsVersionIdTranscriptionsPropertiesPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.versionId, param.assetTranscriptionPropertiesSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transcriptions 
     * Add a new transcription properties
     * @param param the request object
     */
    public assetsV1AssetsAssetIdVersionsVersionIdTranscriptionsPropertiesPost(param: AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdTranscriptionsPropertiesPostRequest, options?: Configuration): Promise<AssetTranscriptionPropertiesSchema> {
        return this.api.assetsV1AssetsAssetIdVersionsVersionIdTranscriptionsPropertiesPost(param.appID, param.authToken, param.assetId, param.versionId, param.assetTranscriptionPropertiesSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transcriptions 
     * Add a new transcription properties
     * @param param the request object
     */
    public assetsV1AssetsAssetIdVersionsVersionIdTranscriptionsSubtitlesPostWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdTranscriptionsSubtitlesPostRequest, options?: Configuration): Promise<HttpInfo<AssetTranscriptionPropertiesSchema>> {
        return this.api.assetsV1AssetsAssetIdVersionsVersionIdTranscriptionsSubtitlesPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.versionId, param.assetTranscriptionFromSubtitleSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transcriptions 
     * Add a new transcription properties
     * @param param the request object
     */
    public assetsV1AssetsAssetIdVersionsVersionIdTranscriptionsSubtitlesPost(param: AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdTranscriptionsSubtitlesPostRequest, options?: Configuration): Promise<AssetTranscriptionPropertiesSchema> {
        return this.api.assetsV1AssetsAssetIdVersionsVersionIdTranscriptionsSubtitlesPost(param.appID, param.authToken, param.assetId, param.versionId, param.assetTranscriptionFromSubtitleSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_transcriptions 
     * Delete transcription properties by ID
     * @param param the request object
     */
    public assetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesDeleteWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesDeleteWithHttpInfo(param.appID, param.authToken, param.assetId, param.versionId, param.transcriptionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_transcriptions 
     * Delete transcription properties by ID
     * @param param the request object
     */
    public assetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesDelete(param: AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesDelete(param.appID, param.authToken, param.assetId, param.versionId, param.transcriptionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transcriptions 
     * Get a transcription properties by ID
     * @param param the request object
     */
    public assetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesGetWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesGetRequest, options?: Configuration): Promise<HttpInfo<AssetTranscriptionPropertiesSchema>> {
        return this.api.assetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.versionId, param.transcriptionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transcriptions 
     * Get a transcription properties by ID
     * @param param the request object
     */
    public assetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesGet(param: AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesGetRequest, options?: Configuration): Promise<AssetTranscriptionPropertiesSchema> {
        return this.api.assetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesGet(param.appID, param.authToken, param.assetId, param.versionId, param.transcriptionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transcriptions 
     * Update transcription properties by ID
     * @param param the request object
     */
    public assetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesPatchWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesPatchRequest, options?: Configuration): Promise<HttpInfo<AssetTranscriptionPropertiesSchema>> {
        return this.api.assetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesPatchWithHttpInfo(param.appID, param.authToken, param.assetId, param.versionId, param.transcriptionId, param.assetTranscriptionPropertiesSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transcriptions 
     * Update transcription properties by ID
     * @param param the request object
     */
    public assetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesPatch(param: AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesPatchRequest, options?: Configuration): Promise<AssetTranscriptionPropertiesSchema> {
        return this.api.assetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesPatch(param.appID, param.authToken, param.assetId, param.versionId, param.transcriptionId, param.assetTranscriptionPropertiesSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transcriptions 
     * Update transcription properties by ID
     * @param param the request object
     */
    public assetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesPutWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesPutRequest, options?: Configuration): Promise<HttpInfo<AssetTranscriptionPropertiesSchema>> {
        return this.api.assetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesPutWithHttpInfo(param.appID, param.authToken, param.assetId, param.versionId, param.transcriptionId, param.assetTranscriptionPropertiesSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transcriptions 
     * Update transcription properties by ID
     * @param param the request object
     */
    public assetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesPut(param: AssetsApiAssetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesPutRequest, options?: Configuration): Promise<AssetTranscriptionPropertiesSchema> {
        return this.api.assetsV1AssetsAssetIdVersionsVersionIdTranscriptionsTranscriptionIdPropertiesPut(param.appID, param.authToken, param.assetId, param.versionId, param.transcriptionId, param.assetTranscriptionPropertiesSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_assets 
     * Mark asset as viewed
     * @param param the request object
     */
    public assetsV1AssetsAssetIdViewsPostWithHttpInfo(param: AssetsApiAssetsV1AssetsAssetIdViewsPostRequest, options?: Configuration): Promise<HttpInfo<AssetSchema>> {
        return this.api.assetsV1AssetsAssetIdViewsPostWithHttpInfo(param.appID, param.authToken, param.assetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_assets 
     * Mark asset as viewed
     * @param param the request object
     */
    public assetsV1AssetsAssetIdViewsPost(param: AssetsApiAssetsV1AssetsAssetIdViewsPostRequest, options?: Configuration): Promise<AssetSchema> {
        return this.api.assetsV1AssetsAssetIdViewsPost(param.appID, param.authToken, param.assetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_assets 
     * Get list of assets
     * @param param the request object
     */
    public assetsV1AssetsGetWithHttpInfo(param: AssetsApiAssetsV1AssetsGetRequest, options?: Configuration): Promise<HttpInfo<AssetsSchema>> {
        return this.api.assetsV1AssetsGetWithHttpInfo(param.appID, param.authToken, param.perPage, param.page, param.scroll, param.scrollId, param.sort, param.fieldName,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_assets 
     * Get list of assets
     * @param param the request object
     */
    public assetsV1AssetsGet(param: AssetsApiAssetsV1AssetsGetRequest, options?: Configuration): Promise<AssetsSchema> {
        return this.api.assetsV1AssetsGet(param.appID, param.authToken, param.perPage, param.page, param.scroll, param.scrollId, param.sort, param.fieldName,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_assets 
     * Bulk update assets
     * @param param the request object
     */
    public assetsV1AssetsPatchWithHttpInfo(param: AssetsApiAssetsV1AssetsPatchRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1AssetsPatchWithHttpInfo(param.appID, param.authToken, param.bulkAssetEditSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_assets 
     * Bulk update assets
     * @param param the request object
     */
    public assetsV1AssetsPatch(param: AssetsApiAssetsV1AssetsPatchRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1AssetsPatch(param.appID, param.authToken, param.bulkAssetEditSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_assets 
     * Create a new asset
     * @param param the request object
     */
    public assetsV1AssetsPostWithHttpInfo(param: AssetsApiAssetsV1AssetsPostRequest, options?: Configuration): Promise<HttpInfo<AssetSchema>> {
        return this.api.assetsV1AssetsPostWithHttpInfo(param.appID, param.authToken, param.assetCreateSchema, param.applyDefaultAcls, param.applyCollectionAcls, param.assignToCollection,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_assets 
     * Create a new asset
     * @param param the request object
     */
    public assetsV1AssetsPost(param: AssetsApiAssetsV1AssetsPostRequest, options?: Configuration): Promise<AssetSchema> {
        return this.api.assetsV1AssetsPost(param.appID, param.authToken, param.assetCreateSchema, param.applyDefaultAcls, param.applyCollectionAcls, param.assignToCollection,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_assets 
     * Bulk update assets
     * @param param the request object
     */
    public assetsV1AssetsPutWithHttpInfo(param: AssetsApiAssetsV1AssetsPutRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1AssetsPutWithHttpInfo(param.appID, param.authToken, param.bulkAssetEditSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_assets 
     * Bulk update assets
     * @param param the request object
     */
    public assetsV1AssetsPut(param: AssetsApiAssetsV1AssetsPutRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1AssetsPut(param.appID, param.authToken, param.bulkAssetEditSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_assets 
     * Trigger reindexing of all assets
     * @param param the request object
     */
    public assetsV1AssetsReindexPostWithHttpInfo(param: AssetsApiAssetsV1AssetsReindexPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1AssetsReindexPostWithHttpInfo(param.appID, param.authToken, param.reindexAllAssetsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_assets 
     * Trigger reindexing of all assets
     * @param param the request object
     */
    public assetsV1AssetsReindexPost(param: AssetsApiAssetsV1AssetsReindexPostRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1AssetsReindexPost(param.appID, param.authToken, param.reindexAllAssetsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_asset_relations 
     * Create a new asset relation type
     * @param param the request object
     */
    public assetsV1AssetsRelationTypesGetWithHttpInfo(param: AssetsApiAssetsV1AssetsRelationTypesGetRequest, options?: Configuration): Promise<HttpInfo<RelationTypesSchema>> {
        return this.api.assetsV1AssetsRelationTypesGetWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_asset_relations 
     * Create a new asset relation type
     * @param param the request object
     */
    public assetsV1AssetsRelationTypesGet(param: AssetsApiAssetsV1AssetsRelationTypesGetRequest, options?: Configuration): Promise<RelationTypesSchema> {
        return this.api.assetsV1AssetsRelationTypesGet(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_asset_relation_types 
     * Create a new asset relation type
     * @param param the request object
     */
    public assetsV1AssetsRelationTypesPostWithHttpInfo(param: AssetsApiAssetsV1AssetsRelationTypesPostRequest, options?: Configuration): Promise<HttpInfo<RelationTypeSchema>> {
        return this.api.assetsV1AssetsRelationTypesPostWithHttpInfo(param.appID, param.authToken, param.relationTypeSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_asset_relation_types 
     * Create a new asset relation type
     * @param param the request object
     */
    public assetsV1AssetsRelationTypesPost(param: AssetsApiAssetsV1AssetsRelationTypesPostRequest, options?: Configuration): Promise<RelationTypeSchema> {
        return this.api.assetsV1AssetsRelationTypesPost(param.appID, param.authToken, param.relationTypeSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_asset_relation_types 
     * Delete an asset relation type
     * @param param the request object
     */
    public assetsV1AssetsRelationTypesRelationTypeDeleteWithHttpInfo(param: AssetsApiAssetsV1AssetsRelationTypesRelationTypeDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1AssetsRelationTypesRelationTypeDeleteWithHttpInfo(param.appID, param.authToken, param.relationType,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_asset_relation_types 
     * Delete an asset relation type
     * @param param the request object
     */
    public assetsV1AssetsRelationTypesRelationTypeDelete(param: AssetsApiAssetsV1AssetsRelationTypesRelationTypeDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1AssetsRelationTypesRelationTypeDelete(param.appID, param.authToken, param.relationType,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_asset_relations 
     * Get a relation type
     * @param param the request object
     */
    public assetsV1AssetsRelationTypesRelationTypeGetWithHttpInfo(param: AssetsApiAssetsV1AssetsRelationTypesRelationTypeGetRequest, options?: Configuration): Promise<HttpInfo<RelationTypeSchema>> {
        return this.api.assetsV1AssetsRelationTypesRelationTypeGetWithHttpInfo(param.appID, param.authToken, param.relationType,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_asset_relations 
     * Get a relation type
     * @param param the request object
     */
    public assetsV1AssetsRelationTypesRelationTypeGet(param: AssetsApiAssetsV1AssetsRelationTypesRelationTypeGetRequest, options?: Configuration): Promise<RelationTypeSchema> {
        return this.api.assetsV1AssetsRelationTypesRelationTypeGet(param.appID, param.authToken, param.relationType,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_asset_relation_types 
     * Update an asset relation type
     * @param param the request object
     */
    public assetsV1AssetsRelationTypesRelationTypePatchWithHttpInfo(param: AssetsApiAssetsV1AssetsRelationTypesRelationTypePatchRequest, options?: Configuration): Promise<HttpInfo<RelationTypeSchema>> {
        return this.api.assetsV1AssetsRelationTypesRelationTypePatchWithHttpInfo(param.appID, param.authToken, param.relationType, param.relationTypeSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_asset_relation_types 
     * Update an asset relation type
     * @param param the request object
     */
    public assetsV1AssetsRelationTypesRelationTypePatch(param: AssetsApiAssetsV1AssetsRelationTypesRelationTypePatchRequest, options?: Configuration): Promise<RelationTypeSchema> {
        return this.api.assetsV1AssetsRelationTypesRelationTypePatch(param.appID, param.authToken, param.relationType, param.relationTypeSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_asset_relation_types 
     * Update an asset relation type
     * @param param the request object
     */
    public assetsV1AssetsRelationTypesRelationTypePutWithHttpInfo(param: AssetsApiAssetsV1AssetsRelationTypesRelationTypePutRequest, options?: Configuration): Promise<HttpInfo<RelationTypeSchema>> {
        return this.api.assetsV1AssetsRelationTypesRelationTypePutWithHttpInfo(param.appID, param.authToken, param.relationType, param.relationTypeSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_asset_relation_types 
     * Update an asset relation type
     * @param param the request object
     */
    public assetsV1AssetsRelationTypesRelationTypePut(param: AssetsApiAssetsV1AssetsRelationTypesRelationTypePutRequest, options?: Configuration): Promise<RelationTypeSchema> {
        return this.api.assetsV1AssetsRelationTypesRelationTypePut(param.appID, param.authToken, param.relationType, param.relationTypeSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_segments 
     * Trigger reindexing of all segments
     * @param param the request object
     */
    public assetsV1AssetsSegmentsReindexPostWithHttpInfo(param: AssetsApiAssetsV1AssetsSegmentsReindexPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1AssetsSegmentsReindexPostWithHttpInfo(param.appID, param.authToken, param.reindexAllSegmentsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_segments 
     * Trigger reindexing of all segments
     * @param param the request object
     */
    public assetsV1AssetsSegmentsReindexPost(param: AssetsApiAssetsV1AssetsSegmentsReindexPostRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1AssetsSegmentsReindexPost(param.appID, param.authToken, param.reindexAllSegmentsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_collections 
     * Returns list of ancestors of a collection
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdAncestorsGetWithHttpInfo(param: AssetsApiAssetsV1CollectionsCollectionIdAncestorsGetRequest, options?: Configuration): Promise<HttpInfo<CollectionsSchema>> {
        return this.api.assetsV1CollectionsCollectionIdAncestorsGetWithHttpInfo(param.appID, param.authToken, param.collectionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_collections 
     * Returns list of ancestors of a collection
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdAncestorsGet(param: AssetsApiAssetsV1CollectionsCollectionIdAncestorsGetRequest, options?: Configuration): Promise<CollectionsSchema> {
        return this.api.assetsV1CollectionsCollectionIdAncestorsGet(param.appID, param.authToken, param.collectionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_collections 
     * Returns all sub-collections and assets number for a specific collection
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdContentInfoGetWithHttpInfo(param: AssetsApiAssetsV1CollectionsCollectionIdContentInfoGetRequest, options?: Configuration): Promise<HttpInfo<CollectionContentInfoSchema>> {
        return this.api.assetsV1CollectionsCollectionIdContentInfoGetWithHttpInfo(param.appID, param.authToken, param.collectionId, param.onlyActive,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_collections 
     * Returns all sub-collections and assets number for a specific collection
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdContentInfoGet(param: AssetsApiAssetsV1CollectionsCollectionIdContentInfoGetRequest, options?: Configuration): Promise<CollectionContentInfoSchema> {
        return this.api.assetsV1CollectionsCollectionIdContentInfoGet(param.appID, param.authToken, param.collectionId, param.onlyActive,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_collections 
     * Returns contents of a collection by id
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdContentsGetWithHttpInfo(param: AssetsApiAssetsV1CollectionsCollectionIdContentsGetRequest, options?: Configuration): Promise<HttpInfo<AssetsSchema>> {
        return this.api.assetsV1CollectionsCollectionIdContentsGetWithHttpInfo(param.appID, param.authToken, param.collectionId, param.objectTypes, param.objectIds, param.externalId, param.perPage, param.page, param.sort, param.filter,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_collections 
     * Returns contents of a collection by id
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdContentsGet(param: AssetsApiAssetsV1CollectionsCollectionIdContentsGetRequest, options?: Configuration): Promise<AssetsSchema> {
        return this.api.assetsV1CollectionsCollectionIdContentsGet(param.appID, param.authToken, param.collectionId, param.objectTypes, param.objectIds, param.externalId, param.perPage, param.page, param.sort, param.filter,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_collections 
     * Delete a particular content object in a collection by id
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdContentsObjectTypeObjectIdDeleteWithHttpInfo(param: AssetsApiAssetsV1CollectionsCollectionIdContentsObjectTypeObjectIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1CollectionsCollectionIdContentsObjectTypeObjectIdDeleteWithHttpInfo(param.appID, param.authToken, param.collectionId, param.objectType, param.objectId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_collections 
     * Delete a particular content object in a collection by id
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdContentsObjectTypeObjectIdDelete(param: AssetsApiAssetsV1CollectionsCollectionIdContentsObjectTypeObjectIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1CollectionsCollectionIdContentsObjectTypeObjectIdDelete(param.appID, param.authToken, param.collectionId, param.objectType, param.objectId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_collections 
     * Update an order of a particular content object in a collection
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdContentsObjectTypeObjectIdPutWithHttpInfo(param: AssetsApiAssetsV1CollectionsCollectionIdContentsObjectTypeObjectIdPutRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1CollectionsCollectionIdContentsObjectTypeObjectIdPutWithHttpInfo(param.appID, param.authToken, param.collectionId, param.objectType, param.objectId, param.collectionContentOrderingSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_collections 
     * Update an order of a particular content object in a collection
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdContentsObjectTypeObjectIdPut(param: AssetsApiAssetsV1CollectionsCollectionIdContentsObjectTypeObjectIdPutRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1CollectionsCollectionIdContentsObjectTypeObjectIdPut(param.appID, param.authToken, param.collectionId, param.objectType, param.objectId, param.collectionContentOrderingSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_collections 
     * Reindex collection content
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdContentsObjectTypeObjectIdReindexPostWithHttpInfo(param: AssetsApiAssetsV1CollectionsCollectionIdContentsObjectTypeObjectIdReindexPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1CollectionsCollectionIdContentsObjectTypeObjectIdReindexPostWithHttpInfo(param.appID, param.authToken, param.collectionId, param.objectType, param.objectId, param.reindexCollectionContentSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_collections 
     * Reindex collection content
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdContentsObjectTypeObjectIdReindexPost(param: AssetsApiAssetsV1CollectionsCollectionIdContentsObjectTypeObjectIdReindexPostRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1CollectionsCollectionIdContentsObjectTypeObjectIdReindexPost(param.appID, param.authToken, param.collectionId, param.objectType, param.objectId, param.reindexCollectionContentSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_collections 
     * Disable custom ordering for a collection\'s content
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdContentsOrderingCustomDeleteWithHttpInfo(param: AssetsApiAssetsV1CollectionsCollectionIdContentsOrderingCustomDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1CollectionsCollectionIdContentsOrderingCustomDeleteWithHttpInfo(param.appID, param.authToken, param.collectionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_collections 
     * Disable custom ordering for a collection\'s content
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdContentsOrderingCustomDelete(param: AssetsApiAssetsV1CollectionsCollectionIdContentsOrderingCustomDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1CollectionsCollectionIdContentsOrderingCustomDelete(param.appID, param.authToken, param.collectionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_collections 
     * Enable custom ordering for a collection\'s content
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdContentsOrderingCustomPostWithHttpInfo(param: AssetsApiAssetsV1CollectionsCollectionIdContentsOrderingCustomPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1CollectionsCollectionIdContentsOrderingCustomPostWithHttpInfo(param.appID, param.authToken, param.collectionId, param.createCollectionContentOrderingSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_collections 
     * Enable custom ordering for a collection\'s content
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdContentsOrderingCustomPost(param: AssetsApiAssetsV1CollectionsCollectionIdContentsOrderingCustomPostRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1CollectionsCollectionIdContentsOrderingCustomPost(param.appID, param.authToken, param.collectionId, param.createCollectionContentOrderingSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_collections 
     * Add an object to a collection
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdContentsPostWithHttpInfo(param: AssetsApiAssetsV1CollectionsCollectionIdContentsPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1CollectionsCollectionIdContentsPostWithHttpInfo(param.appID, param.authToken, param.collectionId, param.collectionContentSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_collections 
     * Add an object to a collection
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdContentsPost(param: AssetsApiAssetsV1CollectionsCollectionIdContentsPostRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1CollectionsCollectionIdContentsPost(param.appID, param.authToken, param.collectionId, param.collectionContentSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_collections 
     * Delete a particular collection by id
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdDeleteWithHttpInfo(param: AssetsApiAssetsV1CollectionsCollectionIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1CollectionsCollectionIdDeleteWithHttpInfo(param.appID, param.authToken, param.collectionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_collections 
     * Delete a particular collection by id
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdDelete(param: AssetsApiAssetsV1CollectionsCollectionIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1CollectionsCollectionIdDelete(param.appID, param.authToken, param.collectionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_collections 
     * Gets the full path of the collection
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdFullPathGetWithHttpInfo(param: AssetsApiAssetsV1CollectionsCollectionIdFullPathGetRequest, options?: Configuration): Promise<HttpInfo<string>> {
        return this.api.assetsV1CollectionsCollectionIdFullPathGetWithHttpInfo(param.appID, param.authToken, param.collectionId, param.getUploadPath,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_collections 
     * Gets the full path of the collection
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdFullPathGet(param: AssetsApiAssetsV1CollectionsCollectionIdFullPathGetRequest, options?: Configuration): Promise<string> {
        return this.api.assetsV1CollectionsCollectionIdFullPathGet(param.appID, param.authToken, param.collectionId, param.getUploadPath,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_collections 
     * Returns a particular collection by id
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdGetWithHttpInfo(param: AssetsApiAssetsV1CollectionsCollectionIdGetRequest, options?: Configuration): Promise<HttpInfo<CollectionSchema>> {
        return this.api.assetsV1CollectionsCollectionIdGetWithHttpInfo(param.appID, param.authToken, param.collectionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_collections 
     * Returns a particular collection by id
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdGet(param: AssetsApiAssetsV1CollectionsCollectionIdGetRequest, options?: Configuration): Promise<CollectionSchema> {
        return this.api.assetsV1CollectionsCollectionIdGet(param.appID, param.authToken, param.collectionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_collections 
     * Pick up to three asset_ids for collection keyframes
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdKeyframesPostWithHttpInfo(param: AssetsApiAssetsV1CollectionsCollectionIdKeyframesPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1CollectionsCollectionIdKeyframesPostWithHttpInfo(param.appID, param.authToken, param.collectionId, param.synchronizeCollectionKeyframesSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_collections 
     * Pick up to three asset_ids for collection keyframes
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdKeyframesPost(param: AssetsApiAssetsV1CollectionsCollectionIdKeyframesPostRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1CollectionsCollectionIdKeyframesPost(param.appID, param.authToken, param.collectionId, param.synchronizeCollectionKeyframesSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_collections 
     * Update collection
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdPatchWithHttpInfo(param: AssetsApiAssetsV1CollectionsCollectionIdPatchRequest, options?: Configuration): Promise<HttpInfo<CollectionSchema>> {
        return this.api.assetsV1CollectionsCollectionIdPatchWithHttpInfo(param.appID, param.authToken, param.collectionId, param.collectionInputSchema, param.changeParentMode,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_collections 
     * Update collection
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdPatch(param: AssetsApiAssetsV1CollectionsCollectionIdPatchRequest, options?: Configuration): Promise<CollectionSchema> {
        return this.api.assetsV1CollectionsCollectionIdPatch(param.appID, param.authToken, param.collectionId, param.collectionInputSchema, param.changeParentMode,  options).toPromise();
    }

    /**
     *  Required roles:  - can_purge_collections 
     * Purges deleted collection by id immediately
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdPurgeDeleteWithHttpInfo(param: AssetsApiAssetsV1CollectionsCollectionIdPurgeDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1CollectionsCollectionIdPurgeDeleteWithHttpInfo(param.appID, param.authToken, param.collectionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_purge_collections 
     * Purges deleted collection by id immediately
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdPurgeDelete(param: AssetsApiAssetsV1CollectionsCollectionIdPurgeDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1CollectionsCollectionIdPurgeDelete(param.appID, param.authToken, param.collectionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_collections 
     * Update collection
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdPutWithHttpInfo(param: AssetsApiAssetsV1CollectionsCollectionIdPutRequest, options?: Configuration): Promise<HttpInfo<CollectionSchema>> {
        return this.api.assetsV1CollectionsCollectionIdPutWithHttpInfo(param.appID, param.authToken, param.collectionId, param.collectionInputSchema, param.changeParentMode,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_collections 
     * Update collection
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdPut(param: AssetsApiAssetsV1CollectionsCollectionIdPutRequest, options?: Configuration): Promise<CollectionSchema> {
        return this.api.assetsV1CollectionsCollectionIdPut(param.appID, param.authToken, param.collectionId, param.collectionInputSchema, param.changeParentMode,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_collections 
     * Reindex collection and its content
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdReindexContentsPostWithHttpInfo(param: AssetsApiAssetsV1CollectionsCollectionIdReindexContentsPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1CollectionsCollectionIdReindexContentsPostWithHttpInfo(param.appID, param.authToken, param.collectionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_collections 
     * Reindex collection and its content
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdReindexContentsPost(param: AssetsApiAssetsV1CollectionsCollectionIdReindexContentsPostRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1CollectionsCollectionIdReindexContentsPost(param.appID, param.authToken, param.collectionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_collections 
     * Reindex collection
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdReindexPostWithHttpInfo(param: AssetsApiAssetsV1CollectionsCollectionIdReindexPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1CollectionsCollectionIdReindexPostWithHttpInfo(param.appID, param.authToken, param.collectionId, param.reindexCollectionSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_collections 
     * Reindex collection
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdReindexPost(param: AssetsApiAssetsV1CollectionsCollectionIdReindexPostRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1CollectionsCollectionIdReindexPost(param.appID, param.authToken, param.collectionId, param.reindexCollectionSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_collections 
     * Restore deleted collection by id
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdRestorePutWithHttpInfo(param: AssetsApiAssetsV1CollectionsCollectionIdRestorePutRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1CollectionsCollectionIdRestorePutWithHttpInfo(param.appID, param.authToken, param.collectionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_collections 
     * Restore deleted collection by id
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdRestorePut(param: AssetsApiAssetsV1CollectionsCollectionIdRestorePutRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1CollectionsCollectionIdRestorePut(param.appID, param.authToken, param.collectionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_collections 
     * Update metadata for collection
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdSearchDocumentPutWithHttpInfo(param: AssetsApiAssetsV1CollectionsCollectionIdSearchDocumentPutRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1CollectionsCollectionIdSearchDocumentPutWithHttpInfo(param.appID, param.authToken, param.collectionId, param.collectionSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_collections 
     * Update metadata for collection
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdSearchDocumentPut(param: AssetsApiAssetsV1CollectionsCollectionIdSearchDocumentPutRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1CollectionsCollectionIdSearchDocumentPut(param.appID, param.authToken, param.collectionId, param.collectionSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_collections 
     * Returns the size of all the collection\'s assets in bytes
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdSizeGetWithHttpInfo(param: AssetsApiAssetsV1CollectionsCollectionIdSizeGetRequest, options?: Configuration): Promise<HttpInfo<CollectionSizeSchema>> {
        return this.api.assetsV1CollectionsCollectionIdSizeGetWithHttpInfo(param.appID, param.authToken, param.collectionId, param.formatName, param.includeSubcollections,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_collections 
     * Returns the size of all the collection\'s assets in bytes
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdSizeGet(param: AssetsApiAssetsV1CollectionsCollectionIdSizeGetRequest, options?: Configuration): Promise<CollectionSizeSchema> {
        return this.api.assetsV1CollectionsCollectionIdSizeGet(param.appID, param.authToken, param.collectionId, param.formatName, param.includeSubcollections,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_collections 
     * Copy a collection (recursively) in to another collection
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdSubcollectionsPostWithHttpInfo(param: AssetsApiAssetsV1CollectionsCollectionIdSubcollectionsPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1CollectionsCollectionIdSubcollectionsPostWithHttpInfo(param.appID, param.authToken, param.collectionId, param.collectionContentSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_collections 
     * Copy a collection (recursively) in to another collection
     * @param param the request object
     */
    public assetsV1CollectionsCollectionIdSubcollectionsPost(param: AssetsApiAssetsV1CollectionsCollectionIdSubcollectionsPostRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1CollectionsCollectionIdSubcollectionsPost(param.appID, param.authToken, param.collectionId, param.collectionContentSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_collections 
     * Get list of collections
     * @param param the request object
     */
    public assetsV1CollectionsGetWithHttpInfo(param: AssetsApiAssetsV1CollectionsGetRequest, options?: Configuration): Promise<HttpInfo<CollectionsSchema>> {
        return this.api.assetsV1CollectionsGetWithHttpInfo(param.appID, param.authToken, param.perPage, param.page, param.scroll, param.scrollId, param.sort, param.isRoot, param.status,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_collections 
     * Get list of collections
     * @param param the request object
     */
    public assetsV1CollectionsGet(param: AssetsApiAssetsV1CollectionsGetRequest, options?: Configuration): Promise<CollectionsSchema> {
        return this.api.assetsV1CollectionsGet(param.appID, param.authToken, param.perPage, param.page, param.scroll, param.scrollId, param.sort, param.isRoot, param.status,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_collections 
     * Create a new collection
     * @param param the request object
     */
    public assetsV1CollectionsPostWithHttpInfo(param: AssetsApiAssetsV1CollectionsPostRequest, options?: Configuration): Promise<HttpInfo<CollectionSchema>> {
        return this.api.assetsV1CollectionsPostWithHttpInfo(param.appID, param.authToken, param.collectionInputSchema, param.applyDefaultAcls, param.applyCollectionAcls, param.restrictCollectionAcls,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_collections 
     * Create a new collection
     * @param param the request object
     */
    public assetsV1CollectionsPost(param: AssetsApiAssetsV1CollectionsPostRequest, options?: Configuration): Promise<CollectionSchema> {
        return this.api.assetsV1CollectionsPost(param.appID, param.authToken, param.collectionInputSchema, param.applyDefaultAcls, param.applyCollectionAcls, param.restrictCollectionAcls,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_collections 
     * Trigger reindexing of all collections
     * @param param the request object
     */
    public assetsV1CollectionsReindexPostWithHttpInfo(param: AssetsApiAssetsV1CollectionsReindexPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1CollectionsReindexPostWithHttpInfo(param.appID, param.authToken, param.reindexAllCollectionsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_collections 
     * Trigger reindexing of all collections
     * @param param the request object
     */
    public assetsV1CollectionsReindexPost(param: AssetsApiAssetsV1CollectionsReindexPostRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1CollectionsReindexPost(param.appID, param.authToken, param.reindexAllCollectionsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_custom_actions 
     * Schedules a celery task that will call custom action
     * @param param the request object
     */
    public assetsV1CustomActionsContextActionIdCallbackPostWithHttpInfo(param: AssetsApiAssetsV1CustomActionsContextActionIdCallbackPostRequest, options?: Configuration): Promise<HttpInfo<CustomActionCallbackReplySchema>> {
        return this.api.assetsV1CustomActionsContextActionIdCallbackPostWithHttpInfo(param.appID, param.authToken, param.context, param.actionId, param.customActionCallbackSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_custom_actions 
     * Schedules a celery task that will call custom action
     * @param param the request object
     */
    public assetsV1CustomActionsContextActionIdCallbackPost(param: AssetsApiAssetsV1CustomActionsContextActionIdCallbackPostRequest, options?: Configuration): Promise<CustomActionCallbackReplySchema> {
        return this.api.assetsV1CustomActionsContextActionIdCallbackPost(param.appID, param.authToken, param.context, param.actionId, param.customActionCallbackSchema,  options).toPromise();
    }

    /**
     * 
     * Deletes an custom action
     * @param param the request object
     */
    public assetsV1CustomActionsContextActionIdDeleteWithHttpInfo(param: AssetsApiAssetsV1CustomActionsContextActionIdDeleteRequest, options?: Configuration): Promise<HttpInfo<CustomActionSchema>> {
        return this.api.assetsV1CustomActionsContextActionIdDeleteWithHttpInfo(param.appID, param.authToken, param.context, param.actionId,  options).toPromise();
    }

    /**
     * 
     * Deletes an custom action
     * @param param the request object
     */
    public assetsV1CustomActionsContextActionIdDelete(param: AssetsApiAssetsV1CustomActionsContextActionIdDeleteRequest, options?: Configuration): Promise<CustomActionSchema> {
        return this.api.assetsV1CustomActionsContextActionIdDelete(param.appID, param.authToken, param.context, param.actionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_custom_actions 
     * Get an asset custom action
     * @param param the request object
     */
    public assetsV1CustomActionsContextActionIdGetWithHttpInfo(param: AssetsApiAssetsV1CustomActionsContextActionIdGetRequest, options?: Configuration): Promise<HttpInfo<CustomActionSchema>> {
        return this.api.assetsV1CustomActionsContextActionIdGetWithHttpInfo(param.appID, param.authToken, param.context, param.actionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_custom_actions 
     * Get an asset custom action
     * @param param the request object
     */
    public assetsV1CustomActionsContextActionIdGet(param: AssetsApiAssetsV1CustomActionsContextActionIdGetRequest, options?: Configuration): Promise<CustomActionSchema> {
        return this.api.assetsV1CustomActionsContextActionIdGet(param.appID, param.authToken, param.context, param.actionId,  options).toPromise();
    }

    /**
     * 
     * Update an custom action
     * @param param the request object
     */
    public assetsV1CustomActionsContextActionIdPatchWithHttpInfo(param: AssetsApiAssetsV1CustomActionsContextActionIdPatchRequest, options?: Configuration): Promise<HttpInfo<CustomActionSchema>> {
        return this.api.assetsV1CustomActionsContextActionIdPatchWithHttpInfo(param.appID, param.authToken, param.context, param.actionId, param.customActionSchema,  options).toPromise();
    }

    /**
     * 
     * Update an custom action
     * @param param the request object
     */
    public assetsV1CustomActionsContextActionIdPatch(param: AssetsApiAssetsV1CustomActionsContextActionIdPatchRequest, options?: Configuration): Promise<CustomActionSchema> {
        return this.api.assetsV1CustomActionsContextActionIdPatch(param.appID, param.authToken, param.context, param.actionId, param.customActionSchema,  options).toPromise();
    }

    /**
     * 
     * Update an custom action
     * @param param the request object
     */
    public assetsV1CustomActionsContextActionIdPutWithHttpInfo(param: AssetsApiAssetsV1CustomActionsContextActionIdPutRequest, options?: Configuration): Promise<HttpInfo<CustomActionSchema>> {
        return this.api.assetsV1CustomActionsContextActionIdPutWithHttpInfo(param.appID, param.authToken, param.context, param.actionId, param.customActionSchema,  options).toPromise();
    }

    /**
     * 
     * Update an custom action
     * @param param the request object
     */
    public assetsV1CustomActionsContextActionIdPut(param: AssetsApiAssetsV1CustomActionsContextActionIdPutRequest, options?: Configuration): Promise<CustomActionSchema> {
        return this.api.assetsV1CustomActionsContextActionIdPut(param.appID, param.authToken, param.context, param.actionId, param.customActionSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_custom_actions 
     * Get list of custom actions by context
     * @param param the request object
     */
    public assetsV1CustomActionsContextGetWithHttpInfo(param: AssetsApiAssetsV1CustomActionsContextGetRequest, options?: Configuration): Promise<HttpInfo<CustomActionsSchema>> {
        return this.api.assetsV1CustomActionsContextGetWithHttpInfo(param.appID, param.authToken, param.context,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_custom_actions 
     * Get list of custom actions by context
     * @param param the request object
     */
    public assetsV1CustomActionsContextGet(param: AssetsApiAssetsV1CustomActionsContextGetRequest, options?: Configuration): Promise<CustomActionsSchema> {
        return this.api.assetsV1CustomActionsContextGet(param.appID, param.authToken, param.context,  options).toPromise();
    }

    /**
     * 
     * Create an custom action
     * @param param the request object
     */
    public assetsV1CustomActionsContextPostWithHttpInfo(param: AssetsApiAssetsV1CustomActionsContextPostRequest, options?: Configuration): Promise<HttpInfo<CustomActionSchema>> {
        return this.api.assetsV1CustomActionsContextPostWithHttpInfo(param.appID, param.authToken, param.context, param.customActionSchema,  options).toPromise();
    }

    /**
     * 
     * Create an custom action
     * @param param the request object
     */
    public assetsV1CustomActionsContextPost(param: AssetsApiAssetsV1CustomActionsContextPostRequest, options?: Configuration): Promise<CustomActionSchema> {
        return this.api.assetsV1CustomActionsContextPost(param.appID, param.authToken, param.context, param.customActionSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_custom_actions 
     * Get list of custom actions
     * @param param the request object
     */
    public assetsV1CustomActionsGetWithHttpInfo(param: AssetsApiAssetsV1CustomActionsGetRequest, options?: Configuration): Promise<HttpInfo<CustomActionsSchema>> {
        return this.api.assetsV1CustomActionsGetWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_custom_actions 
     * Get list of custom actions
     * @param param the request object
     */
    public assetsV1CustomActionsGet(param: AssetsApiAssetsV1CustomActionsGetRequest, options?: Configuration): Promise<CustomActionsSchema> {
        return this.api.assetsV1CustomActionsGet(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_custom_actions 
     * Schedules a celery task that will call custom action on shares
     * @param param the request object
     */
    public assetsV1CustomActionsSharedContextActionIdCallbackPostWithHttpInfo(param: AssetsApiAssetsV1CustomActionsSharedContextActionIdCallbackPostRequest, options?: Configuration): Promise<HttpInfo<CustomActionCallbackReplySchema>> {
        return this.api.assetsV1CustomActionsSharedContextActionIdCallbackPostWithHttpInfo(param.appID, param.authToken, param.context, param.actionId, param.customActionCallbackSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_custom_actions 
     * Schedules a celery task that will call custom action on shares
     * @param param the request object
     */
    public assetsV1CustomActionsSharedContextActionIdCallbackPost(param: AssetsApiAssetsV1CustomActionsSharedContextActionIdCallbackPostRequest, options?: Configuration): Promise<CustomActionCallbackReplySchema> {
        return this.api.assetsV1CustomActionsSharedContextActionIdCallbackPost(param.appID, param.authToken, param.context, param.actionId, param.customActionCallbackSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_assets 
     * Delete assets from delete queue (Mark assets as active again)
     * @param param the request object
     */
    public assetsV1DeleteQueueAssetsDeleteWithHttpInfo(param: AssetsApiAssetsV1DeleteQueueAssetsDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1DeleteQueueAssetsDeleteWithHttpInfo(param.appID, param.authToken, param.deleteQueueSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_assets 
     * Delete assets from delete queue (Mark assets as active again)
     * @param param the request object
     */
    public assetsV1DeleteQueueAssetsDelete(param: AssetsApiAssetsV1DeleteQueueAssetsDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1DeleteQueueAssetsDelete(param.appID, param.authToken, param.deleteQueueSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_assets 
     * Get deleted objects
     * @param param the request object
     */
    public assetsV1DeleteQueueAssetsGetWithHttpInfo(param: AssetsApiAssetsV1DeleteQueueAssetsGetRequest, options?: Configuration): Promise<HttpInfo<AssetsSchema>> {
        return this.api.assetsV1DeleteQueueAssetsGetWithHttpInfo(param.appID, param.authToken, param.perPage, param.page, param.sort, param.filter,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_assets 
     * Get deleted objects
     * @param param the request object
     */
    public assetsV1DeleteQueueAssetsGet(param: AssetsApiAssetsV1DeleteQueueAssetsGetRequest, options?: Configuration): Promise<AssetsSchema> {
        return this.api.assetsV1DeleteQueueAssetsGet(param.appID, param.authToken, param.perPage, param.page, param.sort, param.filter,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_assets 
     * Add assets to a delete queue (Mark assets as deleted)
     * @param param the request object
     */
    public assetsV1DeleteQueueAssetsPostWithHttpInfo(param: AssetsApiAssetsV1DeleteQueueAssetsPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1DeleteQueueAssetsPostWithHttpInfo(param.appID, param.authToken, param.deleteQueueSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_assets 
     * Add assets to a delete queue (Mark assets as deleted)
     * @param param the request object
     */
    public assetsV1DeleteQueueAssetsPost(param: AssetsApiAssetsV1DeleteQueueAssetsPostRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1DeleteQueueAssetsPost(param.appID, param.authToken, param.deleteQueueSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_purge_assets 
     * Purge all assets from delete queue (Permanently delete)
     * @param param the request object
     */
    public assetsV1DeleteQueueAssetsPurgeAllPostWithHttpInfo(param: AssetsApiAssetsV1DeleteQueueAssetsPurgeAllPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1DeleteQueueAssetsPurgeAllPostWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_purge_assets 
     * Purge all assets from delete queue (Permanently delete)
     * @param param the request object
     */
    public assetsV1DeleteQueueAssetsPurgeAllPost(param: AssetsApiAssetsV1DeleteQueueAssetsPurgeAllPostRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1DeleteQueueAssetsPurgeAllPost(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_purge_assets 
     * Purge assets from delete queue (Permanently delete)
     * @param param the request object
     */
    public assetsV1DeleteQueueAssetsPurgePostWithHttpInfo(param: AssetsApiAssetsV1DeleteQueueAssetsPurgePostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1DeleteQueueAssetsPurgePostWithHttpInfo(param.appID, param.authToken, param.deleteQueueSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_purge_assets 
     * Purge assets from delete queue (Permanently delete)
     * @param param the request object
     */
    public assetsV1DeleteQueueAssetsPurgePost(param: AssetsApiAssetsV1DeleteQueueAssetsPurgePostRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1DeleteQueueAssetsPurgePost(param.appID, param.authToken, param.deleteQueueSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_assets 
     * Restore all assets from delete queue
     * @param param the request object
     */
    public assetsV1DeleteQueueAssetsRestoreAllPostWithHttpInfo(param: AssetsApiAssetsV1DeleteQueueAssetsRestoreAllPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1DeleteQueueAssetsRestoreAllPostWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_assets 
     * Restore all assets from delete queue
     * @param param the request object
     */
    public assetsV1DeleteQueueAssetsRestoreAllPost(param: AssetsApiAssetsV1DeleteQueueAssetsRestoreAllPostRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1DeleteQueueAssetsRestoreAllPost(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_assets 
     * Bulk delete objects
     * @param param the request object
     */
    public assetsV1DeleteQueueBulkPostWithHttpInfo(param: AssetsApiAssetsV1DeleteQueueBulkPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1DeleteQueueBulkPostWithHttpInfo(param.appID, param.authToken, param.bulkDeleteSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_assets 
     * Bulk delete objects
     * @param param the request object
     */
    public assetsV1DeleteQueueBulkPost(param: AssetsApiAssetsV1DeleteQueueBulkPostRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1DeleteQueueBulkPost(param.appID, param.authToken, param.bulkDeleteSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_collections 
     * Delete collections from delete queue (Mark collections as active again)
     * @param param the request object
     */
    public assetsV1DeleteQueueCollectionsDeleteWithHttpInfo(param: AssetsApiAssetsV1DeleteQueueCollectionsDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1DeleteQueueCollectionsDeleteWithHttpInfo(param.appID, param.authToken, param.deleteQueueSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_collections 
     * Delete collections from delete queue (Mark collections as active again)
     * @param param the request object
     */
    public assetsV1DeleteQueueCollectionsDelete(param: AssetsApiAssetsV1DeleteQueueCollectionsDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1DeleteQueueCollectionsDelete(param.appID, param.authToken, param.deleteQueueSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_collections 
     * Get list of collections
     * @param param the request object
     */
    public assetsV1DeleteQueueCollectionsGetWithHttpInfo(param: AssetsApiAssetsV1DeleteQueueCollectionsGetRequest, options?: Configuration): Promise<HttpInfo<CollectionsSchema>> {
        return this.api.assetsV1DeleteQueueCollectionsGetWithHttpInfo(param.appID, param.authToken, param.perPage, param.page, param.sort, param.filter,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_collections 
     * Get list of collections
     * @param param the request object
     */
    public assetsV1DeleteQueueCollectionsGet(param: AssetsApiAssetsV1DeleteQueueCollectionsGetRequest, options?: Configuration): Promise<CollectionsSchema> {
        return this.api.assetsV1DeleteQueueCollectionsGet(param.appID, param.authToken, param.perPage, param.page, param.sort, param.filter,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_collections 
     * Add collections to a delete queue (Mark collections as deleted)
     * @param param the request object
     */
    public assetsV1DeleteQueueCollectionsPostWithHttpInfo(param: AssetsApiAssetsV1DeleteQueueCollectionsPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1DeleteQueueCollectionsPostWithHttpInfo(param.appID, param.authToken, param.deleteQueueSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_collections 
     * Add collections to a delete queue (Mark collections as deleted)
     * @param param the request object
     */
    public assetsV1DeleteQueueCollectionsPost(param: AssetsApiAssetsV1DeleteQueueCollectionsPostRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1DeleteQueueCollectionsPost(param.appID, param.authToken, param.deleteQueueSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_purge_collections 
     * Purge all collections from delete queue (Permanently delete)
     * @param param the request object
     */
    public assetsV1DeleteQueueCollectionsPurgeAllPostWithHttpInfo(param: AssetsApiAssetsV1DeleteQueueCollectionsPurgeAllPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1DeleteQueueCollectionsPurgeAllPostWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_purge_collections 
     * Purge all collections from delete queue (Permanently delete)
     * @param param the request object
     */
    public assetsV1DeleteQueueCollectionsPurgeAllPost(param: AssetsApiAssetsV1DeleteQueueCollectionsPurgeAllPostRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1DeleteQueueCollectionsPurgeAllPost(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_purge_collections 
     * Purge collections from delete queue (Permanently delete)
     * @param param the request object
     */
    public assetsV1DeleteQueueCollectionsPurgePostWithHttpInfo(param: AssetsApiAssetsV1DeleteQueueCollectionsPurgePostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1DeleteQueueCollectionsPurgePostWithHttpInfo(param.appID, param.authToken, param.deleteQueueSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_purge_collections 
     * Purge collections from delete queue (Permanently delete)
     * @param param the request object
     */
    public assetsV1DeleteQueueCollectionsPurgePost(param: AssetsApiAssetsV1DeleteQueueCollectionsPurgePostRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1DeleteQueueCollectionsPurgePost(param.appID, param.authToken, param.deleteQueueSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_collections 
     * Restore all collections from delete queue
     * @param param the request object
     */
    public assetsV1DeleteQueueCollectionsRestoreAllPostWithHttpInfo(param: AssetsApiAssetsV1DeleteQueueCollectionsRestoreAllPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1DeleteQueueCollectionsRestoreAllPostWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_collections 
     * Restore all collections from delete queue
     * @param param the request object
     */
    public assetsV1DeleteQueueCollectionsRestoreAllPost(param: AssetsApiAssetsV1DeleteQueueCollectionsRestoreAllPostRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1DeleteQueueCollectionsRestoreAllPost(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_purge_assets - can_purge_collections 
     * Purge all assets and collections from delete queue (Permanently delete)
     * @param param the request object
     */
    public assetsV1DeleteQueuePurgeAllPostWithHttpInfo(param: AssetsApiAssetsV1DeleteQueuePurgeAllPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1DeleteQueuePurgeAllPostWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_purge_assets - can_purge_collections 
     * Purge all assets and collections from delete queue (Permanently delete)
     * @param param the request object
     */
    public assetsV1DeleteQueuePurgeAllPost(param: AssetsApiAssetsV1DeleteQueuePurgeAllPostRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1DeleteQueuePurgeAllPost(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_favorites 
     * Removes all assets/collections from the list of favourites
     * @param param the request object
     */
    public assetsV1FavoritesAllDeleteWithHttpInfo(param: AssetsApiAssetsV1FavoritesAllDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1FavoritesAllDeleteWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_favorites 
     * Removes all assets/collections from the list of favourites
     * @param param the request object
     */
    public assetsV1FavoritesAllDelete(param: AssetsApiAssetsV1FavoritesAllDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1FavoritesAllDelete(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_favorites 
     * Deletes objects items from a list of favorites
     * @param param the request object
     */
    public assetsV1FavoritesDeleteWithHttpInfo(param: AssetsApiAssetsV1FavoritesDeleteRequest, options?: Configuration): Promise<HttpInfo<BulkDeleteFromFavoritesSchema>> {
        return this.api.assetsV1FavoritesDeleteWithHttpInfo(param.appID, param.authToken, param.bulkDeleteFromFavoritesSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_favorites 
     * Deletes objects items from a list of favorites
     * @param param the request object
     */
    public assetsV1FavoritesDelete(param: AssetsApiAssetsV1FavoritesDeleteRequest, options?: Configuration): Promise<BulkDeleteFromFavoritesSchema> {
        return this.api.assetsV1FavoritesDelete(param.appID, param.authToken, param.bulkDeleteFromFavoritesSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_assets 
     * Get list of favorite objects
     * @param param the request object
     */
    public assetsV1FavoritesGetWithHttpInfo(param: AssetsApiAssetsV1FavoritesGetRequest, options?: Configuration): Promise<HttpInfo<FavoritesSchema>> {
        return this.api.assetsV1FavoritesGetWithHttpInfo(param.appID, param.authToken, param.perPage, param.page, param.sort,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_assets 
     * Get list of favorite objects
     * @param param the request object
     */
    public assetsV1FavoritesGet(param: AssetsApiAssetsV1FavoritesGetRequest, options?: Configuration): Promise<FavoritesSchema> {
        return this.api.assetsV1FavoritesGet(param.appID, param.authToken, param.perPage, param.page, param.sort,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_favorites 
     * Adds multiple objects to a list of favorites
     * @param param the request object
     */
    public assetsV1FavoritesPostWithHttpInfo(param: AssetsApiAssetsV1FavoritesPostRequest, options?: Configuration): Promise<HttpInfo<BulkAddToFavoritesSchema>> {
        return this.api.assetsV1FavoritesPostWithHttpInfo(param.appID, param.authToken, param.bulkAddToFavoritesSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_favorites 
     * Adds multiple objects to a list of favorites
     * @param param the request object
     */
    public assetsV1FavoritesPost(param: AssetsApiAssetsV1FavoritesPostRequest, options?: Configuration): Promise<BulkAddToFavoritesSchema> {
        return this.api.assetsV1FavoritesPost(param.appID, param.authToken, param.bulkAddToFavoritesSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_favorites 
     * Removes all assets/collections from the list of favourites
     * @param param the request object
     */
    public assetsV1FavouritesAllDeleteWithHttpInfo(param: AssetsApiAssetsV1FavouritesAllDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1FavouritesAllDeleteWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_favorites 
     * Removes all assets/collections from the list of favourites
     * @param param the request object
     */
    public assetsV1FavouritesAllDelete(param: AssetsApiAssetsV1FavouritesAllDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1FavouritesAllDelete(param.appID, param.authToken,  options).toPromise();
    }

    /**
     * 
     * Deletes an objects approval status
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdApprovalsDeleteWithHttpInfo(param: AssetsApiAssetsV1ObjectTypeObjectIdApprovalsDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1ObjectTypeObjectIdApprovalsDeleteWithHttpInfo(param.appID, param.authToken, param.objectId, param.objectType,  options).toPromise();
    }

    /**
     * 
     * Deletes an objects approval status
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdApprovalsDelete(param: AssetsApiAssetsV1ObjectTypeObjectIdApprovalsDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1ObjectTypeObjectIdApprovalsDelete(param.appID, param.authToken, param.objectId, param.objectType,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_approval_status 
     * Deletes an objects approval status by user_id
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdApprovalsExternalEmailDeleteWithHttpInfo(param: AssetsApiAssetsV1ObjectTypeObjectIdApprovalsExternalEmailDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1ObjectTypeObjectIdApprovalsExternalEmailDeleteWithHttpInfo(param.appID, param.authToken, param.objectId, param.objectType, param.email,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_approval_status 
     * Deletes an objects approval status by user_id
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdApprovalsExternalEmailDelete(param: AssetsApiAssetsV1ObjectTypeObjectIdApprovalsExternalEmailDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1ObjectTypeObjectIdApprovalsExternalEmailDelete(param.appID, param.authToken, param.objectId, param.objectType, param.email,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_approval_request 
     * Returns an objects approval request
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdApprovalsGetWithHttpInfo(param: AssetsApiAssetsV1ObjectTypeObjectIdApprovalsGetRequest, options?: Configuration): Promise<HttpInfo<ApprovalsBySchema>> {
        return this.api.assetsV1ObjectTypeObjectIdApprovalsGetWithHttpInfo(param.appID, param.authToken, param.objectId, param.objectType,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_approval_request 
     * Returns an objects approval request
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdApprovalsGet(param: AssetsApiAssetsV1ObjectTypeObjectIdApprovalsGetRequest, options?: Configuration): Promise<ApprovalsBySchema> {
        return this.api.assetsV1ObjectTypeObjectIdApprovalsGet(param.appID, param.authToken, param.objectId, param.objectType,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_approval_status 
     * Returns an objects approval status
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdApprovalsPutWithHttpInfo(param: AssetsApiAssetsV1ObjectTypeObjectIdApprovalsPutRequest, options?: Configuration): Promise<HttpInfo<ApprovalBySchema>> {
        return this.api.assetsV1ObjectTypeObjectIdApprovalsPutWithHttpInfo(param.appID, param.authToken, param.objectId, param.objectType, param.approvalBySchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_approval_status 
     * Returns an objects approval status
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdApprovalsPut(param: AssetsApiAssetsV1ObjectTypeObjectIdApprovalsPutRequest, options?: Configuration): Promise<ApprovalBySchema> {
        return this.api.assetsV1ObjectTypeObjectIdApprovalsPut(param.appID, param.authToken, param.objectId, param.objectType, param.approvalBySchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_approval_request 
     * Deletes an objects approval request
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdApprovalsRequestDeleteWithHttpInfo(param: AssetsApiAssetsV1ObjectTypeObjectIdApprovalsRequestDeleteRequest, options?: Configuration): Promise<HttpInfo<ApprovalSchema>> {
        return this.api.assetsV1ObjectTypeObjectIdApprovalsRequestDeleteWithHttpInfo(param.appID, param.authToken, param.objectId, param.objectType,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_approval_request 
     * Deletes an objects approval request
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdApprovalsRequestDelete(param: AssetsApiAssetsV1ObjectTypeObjectIdApprovalsRequestDeleteRequest, options?: Configuration): Promise<ApprovalSchema> {
        return this.api.assetsV1ObjectTypeObjectIdApprovalsRequestDelete(param.appID, param.authToken, param.objectId, param.objectType,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_approval_request 
     * Returns an objects approval request
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdApprovalsRequestGetWithHttpInfo(param: AssetsApiAssetsV1ObjectTypeObjectIdApprovalsRequestGetRequest, options?: Configuration): Promise<HttpInfo<ApprovalSchema>> {
        return this.api.assetsV1ObjectTypeObjectIdApprovalsRequestGetWithHttpInfo(param.appID, param.authToken, param.objectId, param.objectType,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_approval_request 
     * Returns an objects approval request
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdApprovalsRequestGet(param: AssetsApiAssetsV1ObjectTypeObjectIdApprovalsRequestGetRequest, options?: Configuration): Promise<ApprovalSchema> {
        return this.api.assetsV1ObjectTypeObjectIdApprovalsRequestGet(param.appID, param.authToken, param.objectId, param.objectType,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_approval_request 
     * Edits an approval request
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdApprovalsRequestPatchWithHttpInfo(param: AssetsApiAssetsV1ObjectTypeObjectIdApprovalsRequestPatchRequest, options?: Configuration): Promise<HttpInfo<ApprovalSchema>> {
        return this.api.assetsV1ObjectTypeObjectIdApprovalsRequestPatchWithHttpInfo(param.appID, param.authToken, param.objectId, param.objectType, param.approvalSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_approval_request 
     * Edits an approval request
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdApprovalsRequestPatch(param: AssetsApiAssetsV1ObjectTypeObjectIdApprovalsRequestPatchRequest, options?: Configuration): Promise<ApprovalSchema> {
        return this.api.assetsV1ObjectTypeObjectIdApprovalsRequestPatch(param.appID, param.authToken, param.objectId, param.objectType, param.approvalSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_approval_request 
     * Creates an objects approval request
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdApprovalsRequestPostWithHttpInfo(param: AssetsApiAssetsV1ObjectTypeObjectIdApprovalsRequestPostRequest, options?: Configuration): Promise<HttpInfo<ApprovalSchema>> {
        return this.api.assetsV1ObjectTypeObjectIdApprovalsRequestPostWithHttpInfo(param.appID, param.authToken, param.objectId, param.objectType, param.approvalSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_approval_request 
     * Creates an objects approval request
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdApprovalsRequestPost(param: AssetsApiAssetsV1ObjectTypeObjectIdApprovalsRequestPostRequest, options?: Configuration): Promise<ApprovalSchema> {
        return this.api.assetsV1ObjectTypeObjectIdApprovalsRequestPost(param.appID, param.authToken, param.objectId, param.objectType, param.approvalSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_approval_request 
     * Edits an approval request
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdApprovalsRequestPutWithHttpInfo(param: AssetsApiAssetsV1ObjectTypeObjectIdApprovalsRequestPutRequest, options?: Configuration): Promise<HttpInfo<ApprovalSchema>> {
        return this.api.assetsV1ObjectTypeObjectIdApprovalsRequestPutWithHttpInfo(param.appID, param.authToken, param.objectId, param.objectType, param.approvalSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_approval_request 
     * Edits an approval request
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdApprovalsRequestPut(param: AssetsApiAssetsV1ObjectTypeObjectIdApprovalsRequestPutRequest, options?: Configuration): Promise<ApprovalSchema> {
        return this.api.assetsV1ObjectTypeObjectIdApprovalsRequestPut(param.appID, param.authToken, param.objectId, param.objectType, param.approvalSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_approval_status 
     * Deletes an objects approval status by user_id
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdApprovalsUserUserIdDeleteWithHttpInfo(param: AssetsApiAssetsV1ObjectTypeObjectIdApprovalsUserUserIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1ObjectTypeObjectIdApprovalsUserUserIdDeleteWithHttpInfo(param.appID, param.authToken, param.objectId, param.objectType, param.userId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_approval_status 
     * Deletes an objects approval status by user_id
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdApprovalsUserUserIdDelete(param: AssetsApiAssetsV1ObjectTypeObjectIdApprovalsUserUserIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1ObjectTypeObjectIdApprovalsUserUserIdDelete(param.appID, param.authToken, param.objectId, param.objectType, param.userId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_shares 
     * Get list of shares
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdSharesGetWithHttpInfo(param: AssetsApiAssetsV1ObjectTypeObjectIdSharesGetRequest, options?: Configuration): Promise<HttpInfo<SharesSchema>> {
        return this.api.assetsV1ObjectTypeObjectIdSharesGetWithHttpInfo(param.appID, param.authToken, param.objectType, param.objectId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_shares 
     * Get list of shares
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdSharesGet(param: AssetsApiAssetsV1ObjectTypeObjectIdSharesGetRequest, options?: Configuration): Promise<SharesSchema> {
        return this.api.assetsV1ObjectTypeObjectIdSharesGet(param.appID, param.authToken, param.objectType, param.objectId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     * In case if is_approval=True, share options will be created respectively to user roles.<br/>In case if is_approval=True, share options will be created respectively to user roles.<br/> Required roles:  - can_write_shares 
     * Create a new share.
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdSharesPostWithHttpInfo(param: AssetsApiAssetsV1ObjectTypeObjectIdSharesPostRequest, options?: Configuration): Promise<HttpInfo<ShareSchema>> {
        return this.api.assetsV1ObjectTypeObjectIdSharesPostWithHttpInfo(param.appID, param.authToken, param.objectType, param.objectId, param.shareCreateSchema, param.isApproval,  options).toPromise();
    }

    /**
     * In case if is_approval=True, share options will be created respectively to user roles.<br/>In case if is_approval=True, share options will be created respectively to user roles.<br/> Required roles:  - can_write_shares 
     * Create a new share.
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdSharesPost(param: AssetsApiAssetsV1ObjectTypeObjectIdSharesPostRequest, options?: Configuration): Promise<ShareSchema> {
        return this.api.assetsV1ObjectTypeObjectIdSharesPost(param.appID, param.authToken, param.objectType, param.objectId, param.shareCreateSchema, param.isApproval,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_object_shares 
     * Delete a particular share by id
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdSharesShareIdDeleteWithHttpInfo(param: AssetsApiAssetsV1ObjectTypeObjectIdSharesShareIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1ObjectTypeObjectIdSharesShareIdDeleteWithHttpInfo(param.appID, param.authToken, param.objectType, param.objectId, param.shareId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_object_shares 
     * Delete a particular share by id
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdSharesShareIdDelete(param: AssetsApiAssetsV1ObjectTypeObjectIdSharesShareIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1ObjectTypeObjectIdSharesShareIdDelete(param.appID, param.authToken, param.objectType, param.objectId, param.shareId,  options).toPromise();
    }

    /**
     * 
     * Returns a particular share by id
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdSharesShareIdGetWithHttpInfo(param: AssetsApiAssetsV1ObjectTypeObjectIdSharesShareIdGetRequest, options?: Configuration): Promise<HttpInfo<ShareSchema>> {
        return this.api.assetsV1ObjectTypeObjectIdSharesShareIdGetWithHttpInfo(param.appID, param.authToken, param.objectType, param.objectId, param.shareId,  options).toPromise();
    }

    /**
     * 
     * Returns a particular share by id
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdSharesShareIdGet(param: AssetsApiAssetsV1ObjectTypeObjectIdSharesShareIdGetRequest, options?: Configuration): Promise<ShareSchema> {
        return this.api.assetsV1ObjectTypeObjectIdSharesShareIdGet(param.appID, param.authToken, param.objectType, param.objectId, param.shareId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_shares 
     * Update share
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdSharesShareIdPutWithHttpInfo(param: AssetsApiAssetsV1ObjectTypeObjectIdSharesShareIdPutRequest, options?: Configuration): Promise<HttpInfo<ShareSchema>> {
        return this.api.assetsV1ObjectTypeObjectIdSharesShareIdPutWithHttpInfo(param.appID, param.authToken, param.objectType, param.objectId, param.shareId, param.shareSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_shares 
     * Update share
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdSharesShareIdPut(param: AssetsApiAssetsV1ObjectTypeObjectIdSharesShareIdPutRequest, options?: Configuration): Promise<ShareSchema> {
        return this.api.assetsV1ObjectTypeObjectIdSharesShareIdPut(param.appID, param.authToken, param.objectType, param.objectId, param.shareId, param.shareSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_shares 
     * Get list of share users
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdSharesShareIdUsersGetWithHttpInfo(param: AssetsApiAssetsV1ObjectTypeObjectIdSharesShareIdUsersGetRequest, options?: Configuration): Promise<HttpInfo<ShareUsersSchema>> {
        return this.api.assetsV1ObjectTypeObjectIdSharesShareIdUsersGetWithHttpInfo(param.appID, param.authToken, param.objectType, param.objectId, param.shareId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_shares 
     * Get list of share users
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdSharesShareIdUsersGet(param: AssetsApiAssetsV1ObjectTypeObjectIdSharesShareIdUsersGetRequest, options?: Configuration): Promise<ShareUsersSchema> {
        return this.api.assetsV1ObjectTypeObjectIdSharesShareIdUsersGet(param.appID, param.authToken, param.objectType, param.objectId, param.shareId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_shares 
     * Add a new share_user to a share
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdSharesShareIdUsersPostWithHttpInfo(param: AssetsApiAssetsV1ObjectTypeObjectIdSharesShareIdUsersPostRequest, options?: Configuration): Promise<HttpInfo<ShareUserSchema>> {
        return this.api.assetsV1ObjectTypeObjectIdSharesShareIdUsersPostWithHttpInfo(param.appID, param.authToken, param.objectType, param.objectId, param.shareId, param.shareUserSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_shares 
     * Add a new share_user to a share
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdSharesShareIdUsersPost(param: AssetsApiAssetsV1ObjectTypeObjectIdSharesShareIdUsersPostRequest, options?: Configuration): Promise<ShareUserSchema> {
        return this.api.assetsV1ObjectTypeObjectIdSharesShareIdUsersPost(param.appID, param.authToken, param.objectType, param.objectId, param.shareId, param.shareUserSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_shares 
     * Delete a particular share_user user by id
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdDeleteWithHttpInfo(param: AssetsApiAssetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdDeleteWithHttpInfo(param.appID, param.authToken, param.objectType, param.objectId, param.shareId, param.shareUserId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_shares 
     * Delete a particular share_user user by id
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdDelete(param: AssetsApiAssetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdDelete(param.appID, param.authToken, param.objectType, param.objectId, param.shareId, param.shareUserId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_shares 
     * Returns a particular share user by id
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdGetWithHttpInfo(param: AssetsApiAssetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdGetRequest, options?: Configuration): Promise<HttpInfo<ShareUserSchema>> {
        return this.api.assetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdGetWithHttpInfo(param.appID, param.authToken, param.objectType, param.objectId, param.shareId, param.shareUserId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_shares 
     * Returns a particular share user by id
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdGet(param: AssetsApiAssetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdGetRequest, options?: Configuration): Promise<ShareUserSchema> {
        return this.api.assetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdGet(param.appID, param.authToken, param.objectType, param.objectId, param.shareId, param.shareUserId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_shares 
     * Update share user
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdPatchWithHttpInfo(param: AssetsApiAssetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdPatchRequest, options?: Configuration): Promise<HttpInfo<ShareUserSchema>> {
        return this.api.assetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdPatchWithHttpInfo(param.appID, param.authToken, param.objectType, param.objectId, param.shareId, param.shareUserId, param.shareUserSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_shares 
     * Update share user
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdPatch(param: AssetsApiAssetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdPatchRequest, options?: Configuration): Promise<ShareUserSchema> {
        return this.api.assetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdPatch(param.appID, param.authToken, param.objectType, param.objectId, param.shareId, param.shareUserId, param.shareUserSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_shares 
     * Update share user
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdPutWithHttpInfo(param: AssetsApiAssetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdPutRequest, options?: Configuration): Promise<HttpInfo<ShareUserSchema>> {
        return this.api.assetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdPutWithHttpInfo(param.appID, param.authToken, param.objectType, param.objectId, param.shareId, param.shareUserId, param.shareUserSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_shares 
     * Update share user
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdPut(param: AssetsApiAssetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdPutRequest, options?: Configuration): Promise<ShareUserSchema> {
        return this.api.assetsV1ObjectTypeObjectIdSharesShareIdUsersShareUserIdPut(param.appID, param.authToken, param.objectType, param.objectId, param.shareId, param.shareUserId, param.shareUserSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_shares 
     * Generates a URL for the shared object
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdSharesUrlPostWithHttpInfo(param: AssetsApiAssetsV1ObjectTypeObjectIdSharesUrlPostRequest, options?: Configuration): Promise<HttpInfo<ShareURLSchema>> {
        return this.api.assetsV1ObjectTypeObjectIdSharesUrlPostWithHttpInfo(param.appID, param.authToken, param.objectType, param.objectId, param.shareURLCreateSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_shares 
     * Generates a URL for the shared object
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdSharesUrlPost(param: AssetsApiAssetsV1ObjectTypeObjectIdSharesUrlPostRequest, options?: Configuration): Promise<ShareURLSchema> {
        return this.api.assetsV1ObjectTypeObjectIdSharesUrlPost(param.appID, param.authToken, param.objectType, param.objectId, param.shareURLCreateSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_approval_request 
     * Returns an objects approval request by version
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdVersionsVersionIdApprovalsGetWithHttpInfo(param: AssetsApiAssetsV1ObjectTypeObjectIdVersionsVersionIdApprovalsGetRequest, options?: Configuration): Promise<HttpInfo<ApprovalsBySchema>> {
        return this.api.assetsV1ObjectTypeObjectIdVersionsVersionIdApprovalsGetWithHttpInfo(param.appID, param.authToken, param.objectType, param.objectId, param.versionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_approval_request 
     * Returns an objects approval request by version
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdVersionsVersionIdApprovalsGet(param: AssetsApiAssetsV1ObjectTypeObjectIdVersionsVersionIdApprovalsGetRequest, options?: Configuration): Promise<ApprovalsBySchema> {
        return this.api.assetsV1ObjectTypeObjectIdVersionsVersionIdApprovalsGet(param.appID, param.authToken, param.objectType, param.objectId, param.versionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_approval_request 
     * Returns an objects approval request by version
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdVersionsVersionIdApprovalsRequestGetWithHttpInfo(param: AssetsApiAssetsV1ObjectTypeObjectIdVersionsVersionIdApprovalsRequestGetRequest, options?: Configuration): Promise<HttpInfo<ApprovalSchema>> {
        return this.api.assetsV1ObjectTypeObjectIdVersionsVersionIdApprovalsRequestGetWithHttpInfo(param.appID, param.authToken, param.objectType, param.objectId, param.versionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_approval_request 
     * Returns an objects approval request by version
     * @param param the request object
     */
    public assetsV1ObjectTypeObjectIdVersionsVersionIdApprovalsRequestGet(param: AssetsApiAssetsV1ObjectTypeObjectIdVersionsVersionIdApprovalsRequestGetRequest, options?: Configuration): Promise<ApprovalSchema> {
        return this.api.assetsV1ObjectTypeObjectIdVersionsVersionIdApprovalsRequestGet(param.appID, param.authToken, param.objectType, param.objectId, param.versionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_segments 
     * Trigger reindexing of specific segment ids
     * @param param the request object
     */
    public assetsV1SegmentsReindexPostWithHttpInfo(param: AssetsApiAssetsV1SegmentsReindexPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.assetsV1SegmentsReindexPostWithHttpInfo(param.appID, param.authToken, param.reindexSegmentsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_segments 
     * Trigger reindexing of specific segment ids
     * @param param the request object
     */
    public assetsV1SegmentsReindexPost(param: AssetsApiAssetsV1SegmentsReindexPostRequest, options?: Configuration): Promise<void> {
        return this.api.assetsV1SegmentsReindexPost(param.appID, param.authToken, param.reindexSegmentsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_shares 
     * Create a new share of multiple objects (currently only assets are supported)
     * @param param the request object
     */
    public assetsV1ShareObjectTypePostWithHttpInfo(param: AssetsApiAssetsV1ShareObjectTypePostRequest, options?: Configuration): Promise<HttpInfo<ShareSchema>> {
        return this.api.assetsV1ShareObjectTypePostWithHttpInfo(param.appID, param.authToken, param.objectType, param.bulkShareCreateSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_shares 
     * Create a new share of multiple objects (currently only assets are supported)
     * @param param the request object
     */
    public assetsV1ShareObjectTypePost(param: AssetsApiAssetsV1ShareObjectTypePostRequest, options?: Configuration): Promise<ShareSchema> {
        return this.api.assetsV1ShareObjectTypePost(param.appID, param.authToken, param.objectType, param.bulkShareCreateSchema,  options).toPromise();
    }

    /**
     * 
     * Login for share
     * @param param the request object
     */
    public assetsV1SharesAuthLoginPostWithHttpInfo(param: AssetsApiAssetsV1SharesAuthLoginPostRequest, options?: Configuration): Promise<HttpInfo<ShareTokenSchema>> {
        return this.api.assetsV1SharesAuthLoginPostWithHttpInfo(param.appID, param.shareLoginSchema,  options).toPromise();
    }

    /**
     * 
     * Login for share
     * @param param the request object
     */
    public assetsV1SharesAuthLoginPost(param: AssetsApiAssetsV1SharesAuthLoginPostRequest, options?: Configuration): Promise<ShareTokenSchema> {
        return this.api.assetsV1SharesAuthLoginPost(param.appID, param.shareLoginSchema,  options).toPromise();
    }

    /**
     * 
     * Check if a token is valid
     * @param param the request object
     */
    public assetsV1SharesAuthTokenGetWithHttpInfo(param: AssetsApiAssetsV1SharesAuthTokenGetRequest, options?: Configuration): Promise<HttpInfo<ShareTokenSchema>> {
        return this.api.assetsV1SharesAuthTokenGetWithHttpInfo(param.appID, param.shareAuthToken,  options).toPromise();
    }

    /**
     * 
     * Check if a token is valid
     * @param param the request object
     */
    public assetsV1SharesAuthTokenGet(param: AssetsApiAssetsV1SharesAuthTokenGetRequest, options?: Configuration): Promise<ShareTokenSchema> {
        return this.api.assetsV1SharesAuthTokenGet(param.appID, param.shareAuthToken,  options).toPromise();
    }

    /**
     * 
     * Refreshes a token for share
     * @param param the request object
     */
    public assetsV1SharesAuthTokenPutWithHttpInfo(param: AssetsApiAssetsV1SharesAuthTokenPutRequest, options?: Configuration): Promise<HttpInfo<ShareTokenSchema>> {
        return this.api.assetsV1SharesAuthTokenPutWithHttpInfo(param.appID, param.shareAuthToken,  options).toPromise();
    }

    /**
     * 
     * Refreshes a token for share
     * @param param the request object
     */
    public assetsV1SharesAuthTokenPut(param: AssetsApiAssetsV1SharesAuthTokenPutRequest, options?: Configuration): Promise<ShareTokenSchema> {
        return this.api.assetsV1SharesAuthTokenPut(param.appID, param.shareAuthToken,  options).toPromise();
    }

}

import { ObservableAuthApi } from "./ObservableAPI";
import { AuthApiRequestFactory, AuthApiResponseProcessor} from "../apis/AuthApi";

export interface AuthApiAuthV1AppsAppIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AppsAppIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AppsAppIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AppsAppIdDelete
     */
    appId: string
}

export interface AuthApiAuthV1AppsAppIdGetRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AppsAppIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AppsAppIdGet
     */
    appId: string
}

export interface AuthApiAuthV1AppsAppIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AppsAppIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AppsAppIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AppsAppIdPatch
     */
    appId: string
    /**
     * body
     * @type AppSchema
     * @memberof AuthApiauthV1AppsAppIdPatch
     */
    appSchema: AppSchema
}

export interface AuthApiAuthV1AppsAppIdPutRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AppsAppIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AppsAppIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AppsAppIdPut
     */
    appId: string
    /**
     * body
     * @type AppSchema
     * @memberof AuthApiauthV1AppsAppIdPut
     */
    appSchema: AppSchema
}

export interface AuthApiAuthV1AppsAppIdTokenPostRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AppsAppIdTokenPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AppsAppIdTokenPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AppsAppIdTokenPost
     */
    appId: string
}

export interface AuthApiAuthV1AppsExternalAuthPostRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AppsExternalAuthPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AppsExternalAuthPost
     */
    authToken: string
    /**
     * body
     * @type ExternalAuthRequestSchema
     * @memberof AuthApiauthV1AppsExternalAuthPost
     */
    externalAuthRequestSchema: ExternalAuthRequestSchema
}

export interface AuthApiAuthV1AppsExternalAuthSecretGetRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AppsExternalAuthSecretGet
     */
    secret: string
}

export interface AuthApiAuthV1AppsGetRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AppsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AppsGet
     */
    authToken: string
    /**
     * The number of items for each page
     * @type number
     * @memberof AuthApiauthV1AppsGet
     */
    perPage?: number
    /**
     * ID of a last file set on previous page
     * @type string
     * @memberof AuthApiauthV1AppsGet
     */
    lastId?: string
}

export interface AuthApiAuthV1AppsInstanceApprovedInstanceIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AppsInstanceApprovedInstanceIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AppsInstanceApprovedInstanceIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AppsInstanceApprovedInstanceIdDelete
     */
    approvedInstanceId: string
}

export interface AuthApiAuthV1AppsInstanceApprovedInstanceIdGetRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AppsInstanceApprovedInstanceIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AppsInstanceApprovedInstanceIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AppsInstanceApprovedInstanceIdGet
     */
    approvedInstanceId: string
}

export interface AuthApiAuthV1AppsInstancePostRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AppsInstancePost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AppsInstancePost
     */
    authToken: string
    /**
     * body
     * @type ApprovedAppInstanceSchema
     * @memberof AuthApiauthV1AppsInstancePost
     */
    approvedAppInstanceSchema: ApprovedAppInstanceSchema
}

export interface AuthApiAuthV1AppsPostRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AppsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AppsPost
     */
    authToken: string
    /**
     * body
     * @type AppSchema
     * @memberof AuthApiauthV1AppsPost
     */
    appSchema: AppSchema
}

export interface AuthApiAuthV1AuthAdLoginPostRequest {
    /**
     * body
     * @type any
     * @memberof AuthApiauthV1AuthAdLoginPost
     */
    body: any
}

export interface AuthApiAuthV1AuthMultidomainLoginPostRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthMultidomainLoginPost
     */
    tempAuthToken: string
    /**
     * body
     * @type MultiDomainLoginSchema
     * @memberof AuthApiauthV1AuthMultidomainLoginPost
     */
    multiDomainLoginSchema: MultiDomainLoginSchema
}

export interface AuthApiAuthV1AuthOauthLoginPostRequest {
    /**
     * body
     * @type any
     * @memberof AuthApiauthV1AuthOauthLoginPost
     */
    body: any
}

export interface AuthApiAuthV1AuthSamlAcsPublicIdPostRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlAcsPublicIdPost
     */
    publicId: string
}

export interface AuthApiAuthV1AuthSamlAcsSystemDomainIdIdentityProviderIdPostRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlAcsSystemDomainIdIdentityProviderIdPost
     */
    systemDomainId: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlAcsSystemDomainIdIdentityProviderIdPost
     */
    identityProviderId: string
}

export interface AuthApiAuthV1AuthSamlDomainsDomainDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlDomainsDomainDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlDomainsDomainDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlDomainsDomainDelete
     */
    domain: string
}

export interface AuthApiAuthV1AuthSamlDomainsPostRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlDomainsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlDomainsPost
     */
    authToken: string
    /**
     * body
     * @type DomainIdentityProviderMapSchema
     * @memberof AuthApiauthV1AuthSamlDomainsPost
     */
    domainIdentityProviderMapSchema: DomainIdentityProviderMapSchema
}

export interface AuthApiAuthV1AuthSamlIdpConvertPostRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlIdpConvertPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlIdpConvertPost
     */
    authToken: string
    /**
     * 
     * @type IdentityProviderSchema
     * @memberof AuthApiauthV1AuthSamlIdpConvertPost
     */
    identityProviderSchema: IdentityProviderSchema
}

export interface AuthApiAuthV1AuthSamlIdpGetRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlIdpGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlIdpGet
     */
    authToken: string
    /**
     * The number of items for each page
     * @type number
     * @memberof AuthApiauthV1AuthSamlIdpGet
     */
    perPage?: number
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlIdpGet
     */
    lastId?: string
}

export interface AuthApiAuthV1AuthSamlIdpIdentityProviderIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlIdpIdentityProviderIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlIdpIdentityProviderIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlIdpIdentityProviderIdDelete
     */
    identityProviderId: string
}

export interface AuthApiAuthV1AuthSamlIdpIdentityProviderIdGetRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlIdpIdentityProviderIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlIdpIdentityProviderIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlIdpIdentityProviderIdGet
     */
    identityProviderId: string
}

export interface AuthApiAuthV1AuthSamlIdpIdentityProviderIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlIdpIdentityProviderIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlIdpIdentityProviderIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlIdpIdentityProviderIdPatch
     */
    identityProviderId: string
    /**
     * body
     * @type IdentityProviderSchema
     * @memberof AuthApiauthV1AuthSamlIdpIdentityProviderIdPatch
     */
    identityProviderSchema: IdentityProviderSchema
}

export interface AuthApiAuthV1AuthSamlIdpIdentityProviderIdPutRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlIdpIdentityProviderIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlIdpIdentityProviderIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlIdpIdentityProviderIdPut
     */
    identityProviderId: string
    /**
     * body
     * @type IdentityProviderSchema
     * @memberof AuthApiauthV1AuthSamlIdpIdentityProviderIdPut
     */
    identityProviderSchema: IdentityProviderSchema
}

export interface AuthApiAuthV1AuthSamlIdpPostRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlIdpPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlIdpPost
     */
    authToken: string
    /**
     * 
     * @type IdentityProviderSchema
     * @memberof AuthApiauthV1AuthSamlIdpPost
     */
    identityProviderSchema: IdentityProviderSchema
}

export interface AuthApiAuthV1AuthSamlLoginPostRequest {
    /**
     * body
     * @type SAMLLoginSchema
     * @memberof AuthApiauthV1AuthSamlLoginPost
     */
    sAMLLoginSchema: SAMLLoginSchema
}

export interface AuthApiAuthV1AuthSamlLogoutPublicIdPostRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlLogoutPublicIdPost
     */
    publicId: string
}

export interface AuthApiAuthV1AuthSamlMetadataPublicIdGetRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlMetadataPublicIdGet
     */
    publicId: string
}

export interface AuthApiAuthV1AuthSamlMetadataSystemDomainIdIdentityProviderIdGetRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlMetadataSystemDomainIdIdentityProviderIdGet
     */
    systemDomainId: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlMetadataSystemDomainIdIdentityProviderIdGet
     */
    identityProviderId: string
}

export interface AuthApiAuthV1AuthSamlMultidomainLoginPostRequest {
    /**
     * body
     * @type SAMLLoginSchema
     * @memberof AuthApiauthV1AuthSamlMultidomainLoginPost
     */
    sAMLLoginSchema: SAMLLoginSchema
}

export interface AuthApiAuthV1AuthSamlSloPublicIdGetRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlSloPublicIdGet
     */
    publicId: string
}

export interface AuthApiAuthV1AuthSamlSloSystemDomainIdIdentityProviderIdGetRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlSloSystemDomainIdIdentityProviderIdGet
     */
    systemDomainId: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlSloSystemDomainIdIdentityProviderIdGet
     */
    identityProviderId: string
}

export interface AuthApiAuthV1AuthSamlSsoPublicIdGetRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlSsoPublicIdGet
     */
    publicId: string
}

export interface AuthApiAuthV1AuthSamlSsoSystemDomainIdIdentityProviderIdGetRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlSsoSystemDomainIdIdentityProviderIdGet
     */
    systemDomainId: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthSamlSsoSystemDomainIdIdentityProviderIdGet
     */
    identityProviderId: string
}

export interface AuthApiAuthV1AuthSimpleLoginPostRequest {
    /**
     * body
     * @type SimpleLoginSchema
     * @memberof AuthApiauthV1AuthSimpleLoginPost
     */
    simpleLoginSchema: SimpleLoginSchema
}

export interface AuthApiAuthV1AuthTokenDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthTokenDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthTokenDelete
     */
    authToken: string
}

export interface AuthApiAuthV1AuthTokenGetRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthTokenGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthTokenGet
     */
    authToken: string
}

export interface AuthApiAuthV1AuthTokenPostRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthTokenPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthTokenPost
     */
    authToken: string
}

export interface AuthApiAuthV1AuthTokenPutRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthTokenPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthTokenPut
     */
    authToken: string
}

export interface AuthApiAuthV1AuthTokenTokenIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthTokenTokenIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthTokenTokenIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthTokenTokenIdDelete
     */
    tokenId: string
}

export interface AuthApiAuthV1AuthTokenTokenIdGetRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthTokenTokenIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthTokenTokenIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthTokenTokenIdGet
     */
    tokenId: string
}

export interface AuthApiAuthV1AuthTokensGetRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthTokensGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1AuthTokensGet
     */
    authToken: string
    /**
     * The number of items for each page
     * @type number
     * @memberof AuthApiauthV1AuthTokensGet
     */
    perPage?: number
    /**
     * ID of a last file set on previous page
     * @type string
     * @memberof AuthApiauthV1AuthTokensGet
     */
    lastId?: string
}

export interface AuthApiAuthV1MarketplaceGoogleLinkPostRequest {
    /**
     * body
     * @type MarketplaceGoogleLinkSchema
     * @memberof AuthApiauthV1MarketplaceGoogleLinkPost
     */
    marketplaceGoogleLinkSchema: MarketplaceGoogleLinkSchema
}

export interface AuthApiAuthV1MarketplaceGoogleSignupPostRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1MarketplaceGoogleSignupPost
     */
    xGcpMarketplaceToken?: string
}

export interface AuthApiAuthV1PasswordChecksGetRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1PasswordChecksGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1PasswordChecksGet
     */
    authToken: string
}

export interface AuthApiAuthV1PasswordForgotPostRequest {
    /**
     * body
     * @type ForgotPasswordSchema
     * @memberof AuthApiauthV1PasswordForgotPost
     */
    forgotPasswordSchema: ForgotPasswordSchema
}

export interface AuthApiAuthV1PasswordResetHashChecksGetRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1PasswordResetHashChecksGet
     */
    resetHash: string
}

export interface AuthApiAuthV1PasswordResetResetHashPutRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1PasswordResetResetHashPut
     */
    resetHash: string
    /**
     * body
     * @type ResetPasswordSchema
     * @memberof AuthApiauthV1PasswordResetResetHashPut
     */
    resetPasswordSchema: ResetPasswordSchema
}

export interface AuthApiAuthV1ReferralCodesCodeDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1ReferralCodesCodeDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1ReferralCodesCodeDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1ReferralCodesCodeDelete
     */
    code: string
}

export interface AuthApiAuthV1ReferralCodesCodeGetRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1ReferralCodesCodeGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1ReferralCodesCodeGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1ReferralCodesCodeGet
     */
    code: string
}

export interface AuthApiAuthV1ReferralCodesGetRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1ReferralCodesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1ReferralCodesGet
     */
    authToken: string
}

export interface AuthApiAuthV1ReferralCodesPostRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1ReferralCodesPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1ReferralCodesPost
     */
    authToken: string
    /**
     * body
     * @type ReferralCodeSchema
     * @memberof AuthApiauthV1ReferralCodesPost
     */
    referralCodeSchema: ReferralCodeSchema
}

export interface AuthApiAuthV1RegistrationsCountriesGetRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1RegistrationsCountriesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1RegistrationsCountriesGet
     */
    authToken: string
}

export interface AuthApiAuthV1RegistrationsPostRequest {
    /**
     * body
     * @type RegistrationSchema
     * @memberof AuthApiauthV1RegistrationsPost
     */
    registrationSchema: RegistrationSchema
}

export interface AuthApiAuthV1RegistrationsVerifyEmailHashPostRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1RegistrationsVerifyEmailHashPost
     */
    emailHash: string
}

export interface AuthApiAuthV1SystemDomainsGetRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1SystemDomainsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1SystemDomainsGet
     */
    authToken: string
    /**
     * Query the name
     * @type string
     * @memberof AuthApiauthV1SystemDomainsGet
     */
    query?: string
    /**
     * Comma separated list of statuses to show
     * @type string
     * @memberof AuthApiauthV1SystemDomainsGet
     */
    statuses?: string
}

export interface AuthApiAuthV1SystemDomainsPostRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1SystemDomainsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1SystemDomainsPost
     */
    authToken: string
    /**
     * body
     * @type SystemDomainSchema
     * @memberof AuthApiauthV1SystemDomainsPost
     */
    systemDomainSchema: SystemDomainSchema
}

export interface AuthApiAuthV1SystemDomainsReferralCodeReferralCodePostRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1SystemDomainsReferralCodeReferralCodePost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1SystemDomainsReferralCodeReferralCodePost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1SystemDomainsReferralCodeReferralCodePost
     */
    referralCode: string
    /**
     * body
     * @type SystemDomainFromReferralCodeSchema
     * @memberof AuthApiauthV1SystemDomainsReferralCodeReferralCodePost
     */
    systemDomainFromReferralCodeSchema: SystemDomainFromReferralCodeSchema
}

export interface AuthApiAuthV1SystemDomainsSystemDomainIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1SystemDomainsSystemDomainIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1SystemDomainsSystemDomainIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1SystemDomainsSystemDomainIdDelete
     */
    systemDomainId: string
}

export interface AuthApiAuthV1SystemDomainsSystemDomainIdE2eDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1SystemDomainsSystemDomainIdE2eDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1SystemDomainsSystemDomainIdE2eDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1SystemDomainsSystemDomainIdE2eDelete
     */
    systemDomainId: string
}

export interface AuthApiAuthV1SystemDomainsSystemDomainIdGetRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1SystemDomainsSystemDomainIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1SystemDomainsSystemDomainIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1SystemDomainsSystemDomainIdGet
     */
    systemDomainId: string
}

export interface AuthApiAuthV1SystemDomainsSystemDomainIdLogoDeleteRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1SystemDomainsSystemDomainIdLogoDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1SystemDomainsSystemDomainIdLogoDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1SystemDomainsSystemDomainIdLogoDelete
     */
    systemDomainId: string
}

export interface AuthApiAuthV1SystemDomainsSystemDomainIdLogoPostRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1SystemDomainsSystemDomainIdLogoPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1SystemDomainsSystemDomainIdLogoPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1SystemDomainsSystemDomainIdLogoPost
     */
    systemDomainId: string
    /**
     * 
     * @type AuthV1SystemDomainsSystemDomainIdLogoPostRequest
     * @memberof AuthApiauthV1SystemDomainsSystemDomainIdLogoPost
     */
    authV1SystemDomainsSystemDomainIdLogoPostRequest: AuthV1SystemDomainsSystemDomainIdLogoPostRequest
}

export interface AuthApiAuthV1SystemDomainsSystemDomainIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1SystemDomainsSystemDomainIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1SystemDomainsSystemDomainIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1SystemDomainsSystemDomainIdPatch
     */
    systemDomainId: string
    /**
     * body
     * @type SystemDomainSchema
     * @memberof AuthApiauthV1SystemDomainsSystemDomainIdPatch
     */
    systemDomainSchema: SystemDomainSchema
}

export interface AuthApiAuthV1SystemDomainsSystemDomainIdPutRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1SystemDomainsSystemDomainIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1SystemDomainsSystemDomainIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1SystemDomainsSystemDomainIdPut
     */
    systemDomainId: string
    /**
     * body
     * @type SystemDomainSchema
     * @memberof AuthApiauthV1SystemDomainsSystemDomainIdPut
     */
    systemDomainSchema: SystemDomainSchema
}

export interface AuthApiAuthV1SystemDomainsTemplatesGetRequest {
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1SystemDomainsTemplatesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof AuthApiauthV1SystemDomainsTemplatesGet
     */
    authToken: string
}

export class ObjectAuthApi {
    private api: ObservableAuthApi

    public constructor(configuration: Configuration, requestFactory?: AuthApiRequestFactory, responseProcessor?: AuthApiResponseProcessor) {
        this.api = new ObservableAuthApi(configuration, requestFactory, responseProcessor);
    }

    /**
     *  Required roles:  - can_delete_apps 
     * Delete a particular app by id
     * @param param the request object
     */
    public authV1AppsAppIdDeleteWithHttpInfo(param: AuthApiAuthV1AppsAppIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.authV1AppsAppIdDeleteWithHttpInfo(param.appID, param.authToken, param.appId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_apps 
     * Delete a particular app by id
     * @param param the request object
     */
    public authV1AppsAppIdDelete(param: AuthApiAuthV1AppsAppIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.authV1AppsAppIdDelete(param.appID, param.authToken, param.appId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_apps 
     * Returns a particular app by id
     * @param param the request object
     */
    public authV1AppsAppIdGetWithHttpInfo(param: AuthApiAuthV1AppsAppIdGetRequest, options?: Configuration): Promise<HttpInfo<AppSchema>> {
        return this.api.authV1AppsAppIdGetWithHttpInfo(param.authToken, param.appId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_apps 
     * Returns a particular app by id
     * @param param the request object
     */
    public authV1AppsAppIdGet(param: AuthApiAuthV1AppsAppIdGetRequest, options?: Configuration): Promise<AppSchema> {
        return this.api.authV1AppsAppIdGet(param.authToken, param.appId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_apps 
     * Update app
     * @param param the request object
     */
    public authV1AppsAppIdPatchWithHttpInfo(param: AuthApiAuthV1AppsAppIdPatchRequest, options?: Configuration): Promise<HttpInfo<AppSchema>> {
        return this.api.authV1AppsAppIdPatchWithHttpInfo(param.appID, param.authToken, param.appId, param.appSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_apps 
     * Update app
     * @param param the request object
     */
    public authV1AppsAppIdPatch(param: AuthApiAuthV1AppsAppIdPatchRequest, options?: Configuration): Promise<AppSchema> {
        return this.api.authV1AppsAppIdPatch(param.appID, param.authToken, param.appId, param.appSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_apps 
     * Update app
     * @param param the request object
     */
    public authV1AppsAppIdPutWithHttpInfo(param: AuthApiAuthV1AppsAppIdPutRequest, options?: Configuration): Promise<HttpInfo<AppSchema>> {
        return this.api.authV1AppsAppIdPutWithHttpInfo(param.appID, param.authToken, param.appId, param.appSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_apps 
     * Update app
     * @param param the request object
     */
    public authV1AppsAppIdPut(param: AuthApiAuthV1AppsAppIdPutRequest, options?: Configuration): Promise<AppSchema> {
        return this.api.authV1AppsAppIdPut(param.appID, param.authToken, param.appId, param.appSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_apps 
     * Creates app token by id and returns it\'s data
     * @param param the request object
     */
    public authV1AppsAppIdTokenPostWithHttpInfo(param: AuthApiAuthV1AppsAppIdTokenPostRequest, options?: Configuration): Promise<HttpInfo<TokenSchema>> {
        return this.api.authV1AppsAppIdTokenPostWithHttpInfo(param.appID, param.authToken, param.appId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_apps 
     * Creates app token by id and returns it\'s data
     * @param param the request object
     */
    public authV1AppsAppIdTokenPost(param: AuthApiAuthV1AppsAppIdTokenPostRequest, options?: Configuration): Promise<TokenSchema> {
        return this.api.authV1AppsAppIdTokenPost(param.appID, param.authToken, param.appId,  options).toPromise();
    }

    /**
     * 
     * Create a new token for the logged in user and store it for an external app
     * @param param the request object
     */
    public authV1AppsExternalAuthPostWithHttpInfo(param: AuthApiAuthV1AppsExternalAuthPostRequest, options?: Configuration): Promise<HttpInfo<ExternalAuthRequestResponseSchema>> {
        return this.api.authV1AppsExternalAuthPostWithHttpInfo(param.appID, param.authToken, param.externalAuthRequestSchema,  options).toPromise();
    }

    /**
     * 
     * Create a new token for the logged in user and store it for an external app
     * @param param the request object
     */
    public authV1AppsExternalAuthPost(param: AuthApiAuthV1AppsExternalAuthPostRequest, options?: Configuration): Promise<ExternalAuthRequestResponseSchema> {
        return this.api.authV1AppsExternalAuthPost(param.appID, param.authToken, param.externalAuthRequestSchema,  options).toPromise();
    }

    /**
     * 
     * Gets a token requested by an external app
     * @param param the request object
     */
    public authV1AppsExternalAuthSecretGetWithHttpInfo(param: AuthApiAuthV1AppsExternalAuthSecretGetRequest, options?: Configuration): Promise<HttpInfo<ExternalAuthSchema>> {
        return this.api.authV1AppsExternalAuthSecretGetWithHttpInfo(param.secret,  options).toPromise();
    }

    /**
     * 
     * Gets a token requested by an external app
     * @param param the request object
     */
    public authV1AppsExternalAuthSecretGet(param: AuthApiAuthV1AppsExternalAuthSecretGetRequest, options?: Configuration): Promise<ExternalAuthSchema> {
        return this.api.authV1AppsExternalAuthSecretGet(param.secret,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_apps 
     * List of apps
     * @param param the request object
     */
    public authV1AppsGetWithHttpInfo(param: AuthApiAuthV1AppsGetRequest, options?: Configuration): Promise<HttpInfo<AppsSchema>> {
        return this.api.authV1AppsGetWithHttpInfo(param.appID, param.authToken, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_apps 
     * List of apps
     * @param param the request object
     */
    public authV1AppsGet(param: AuthApiAuthV1AppsGetRequest, options?: Configuration): Promise<AppsSchema> {
        return this.api.authV1AppsGet(param.appID, param.authToken, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     * 
     * Delete an approved instance of an app
     * @param param the request object
     */
    public authV1AppsInstanceApprovedInstanceIdDeleteWithHttpInfo(param: AuthApiAuthV1AppsInstanceApprovedInstanceIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.authV1AppsInstanceApprovedInstanceIdDeleteWithHttpInfo(param.appID, param.authToken, param.approvedInstanceId,  options).toPromise();
    }

    /**
     * 
     * Delete an approved instance of an app
     * @param param the request object
     */
    public authV1AppsInstanceApprovedInstanceIdDelete(param: AuthApiAuthV1AppsInstanceApprovedInstanceIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.authV1AppsInstanceApprovedInstanceIdDelete(param.appID, param.authToken, param.approvedInstanceId,  options).toPromise();
    }

    /**
     * 
     * Gets an approved instance of an app
     * @param param the request object
     */
    public authV1AppsInstanceApprovedInstanceIdGetWithHttpInfo(param: AuthApiAuthV1AppsInstanceApprovedInstanceIdGetRequest, options?: Configuration): Promise<HttpInfo<ExternalAuthSchema>> {
        return this.api.authV1AppsInstanceApprovedInstanceIdGetWithHttpInfo(param.appID, param.authToken, param.approvedInstanceId,  options).toPromise();
    }

    /**
     * 
     * Gets an approved instance of an app
     * @param param the request object
     */
    public authV1AppsInstanceApprovedInstanceIdGet(param: AuthApiAuthV1AppsInstanceApprovedInstanceIdGetRequest, options?: Configuration): Promise<ExternalAuthSchema> {
        return this.api.authV1AppsInstanceApprovedInstanceIdGet(param.appID, param.authToken, param.approvedInstanceId,  options).toPromise();
    }

    /**
     * 
     * Create a new app instance
     * @param param the request object
     */
    public authV1AppsInstancePostWithHttpInfo(param: AuthApiAuthV1AppsInstancePostRequest, options?: Configuration): Promise<HttpInfo<ApprovedAppInstanceSchema>> {
        return this.api.authV1AppsInstancePostWithHttpInfo(param.appID, param.authToken, param.approvedAppInstanceSchema,  options).toPromise();
    }

    /**
     * 
     * Create a new app instance
     * @param param the request object
     */
    public authV1AppsInstancePost(param: AuthApiAuthV1AppsInstancePostRequest, options?: Configuration): Promise<ApprovedAppInstanceSchema> {
        return this.api.authV1AppsInstancePost(param.appID, param.authToken, param.approvedAppInstanceSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_apps 
     * Create a new app
     * @param param the request object
     */
    public authV1AppsPostWithHttpInfo(param: AuthApiAuthV1AppsPostRequest, options?: Configuration): Promise<HttpInfo<AppSchema>> {
        return this.api.authV1AppsPostWithHttpInfo(param.appID, param.authToken, param.appSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_apps 
     * Create a new app
     * @param param the request object
     */
    public authV1AppsPost(param: AuthApiAuthV1AppsPostRequest, options?: Configuration): Promise<AppSchema> {
        return this.api.authV1AppsPost(param.appID, param.authToken, param.appSchema,  options).toPromise();
    }

    /**
     * <br/>This function is not yet implemented.
     * Login by ActiveDirectory
     * @param param the request object
     */
    public authV1AuthAdLoginPostWithHttpInfo(param: AuthApiAuthV1AuthAdLoginPostRequest, options?: Configuration): Promise<HttpInfo<TokenSchema>> {
        return this.api.authV1AuthAdLoginPostWithHttpInfo(param.body,  options).toPromise();
    }

    /**
     * <br/>This function is not yet implemented.
     * Login by ActiveDirectory
     * @param param the request object
     */
    public authV1AuthAdLoginPost(param: AuthApiAuthV1AuthAdLoginPostRequest, options?: Configuration): Promise<TokenSchema> {
        return this.api.authV1AuthAdLoginPost(param.body,  options).toPromise();
    }

    /**
     * 
     * Login by using temp token
     * @param param the request object
     */
    public authV1AuthMultidomainLoginPostWithHttpInfo(param: AuthApiAuthV1AuthMultidomainLoginPostRequest, options?: Configuration): Promise<HttpInfo<TokenSchema>> {
        return this.api.authV1AuthMultidomainLoginPostWithHttpInfo(param.tempAuthToken, param.multiDomainLoginSchema,  options).toPromise();
    }

    /**
     * 
     * Login by using temp token
     * @param param the request object
     */
    public authV1AuthMultidomainLoginPost(param: AuthApiAuthV1AuthMultidomainLoginPostRequest, options?: Configuration): Promise<TokenSchema> {
        return this.api.authV1AuthMultidomainLoginPost(param.tempAuthToken, param.multiDomainLoginSchema,  options).toPromise();
    }

    /**
     * <br/>This function is not yet implemented.
     * Login by OAuth
     * @param param the request object
     */
    public authV1AuthOauthLoginPostWithHttpInfo(param: AuthApiAuthV1AuthOauthLoginPostRequest, options?: Configuration): Promise<HttpInfo<TokenSchema>> {
        return this.api.authV1AuthOauthLoginPostWithHttpInfo(param.body,  options).toPromise();
    }

    /**
     * <br/>This function is not yet implemented.
     * Login by OAuth
     * @param param the request object
     */
    public authV1AuthOauthLoginPost(param: AuthApiAuthV1AuthOauthLoginPostRequest, options?: Configuration): Promise<TokenSchema> {
        return this.api.authV1AuthOauthLoginPost(param.body,  options).toPromise();
    }

    /**
     * 
     * SAML Assertion Consumer Service
     * @param param the request object
     */
    public authV1AuthSamlAcsPublicIdPostWithHttpInfo(param: AuthApiAuthV1AuthSamlAcsPublicIdPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.authV1AuthSamlAcsPublicIdPostWithHttpInfo(param.publicId,  options).toPromise();
    }

    /**
     * 
     * SAML Assertion Consumer Service
     * @param param the request object
     */
    public authV1AuthSamlAcsPublicIdPost(param: AuthApiAuthV1AuthSamlAcsPublicIdPostRequest, options?: Configuration): Promise<void> {
        return this.api.authV1AuthSamlAcsPublicIdPost(param.publicId,  options).toPromise();
    }

    /**
     * 
     * SAML Assertion Consumer Service
     * @param param the request object
     */
    public authV1AuthSamlAcsSystemDomainIdIdentityProviderIdPostWithHttpInfo(param: AuthApiAuthV1AuthSamlAcsSystemDomainIdIdentityProviderIdPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.authV1AuthSamlAcsSystemDomainIdIdentityProviderIdPostWithHttpInfo(param.systemDomainId, param.identityProviderId,  options).toPromise();
    }

    /**
     * 
     * SAML Assertion Consumer Service
     * @param param the request object
     */
    public authV1AuthSamlAcsSystemDomainIdIdentityProviderIdPost(param: AuthApiAuthV1AuthSamlAcsSystemDomainIdIdentityProviderIdPostRequest, options?: Configuration): Promise<void> {
        return this.api.authV1AuthSamlAcsSystemDomainIdIdentityProviderIdPost(param.systemDomainId, param.identityProviderId,  options).toPromise();
    }

    /**
     * 
     * Unbind domain from identity provider
     * @param param the request object
     */
    public authV1AuthSamlDomainsDomainDeleteWithHttpInfo(param: AuthApiAuthV1AuthSamlDomainsDomainDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.authV1AuthSamlDomainsDomainDeleteWithHttpInfo(param.appID, param.authToken, param.domain,  options).toPromise();
    }

    /**
     * 
     * Unbind domain from identity provider
     * @param param the request object
     */
    public authV1AuthSamlDomainsDomainDelete(param: AuthApiAuthV1AuthSamlDomainsDomainDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.authV1AuthSamlDomainsDomainDelete(param.appID, param.authToken, param.domain,  options).toPromise();
    }

    /**
     * 
     * Bind domain to identity provider
     * @param param the request object
     */
    public authV1AuthSamlDomainsPostWithHttpInfo(param: AuthApiAuthV1AuthSamlDomainsPostRequest, options?: Configuration): Promise<HttpInfo<DomainIdentityProviderMapSchema>> {
        return this.api.authV1AuthSamlDomainsPostWithHttpInfo(param.appID, param.authToken, param.domainIdentityProviderMapSchema,  options).toPromise();
    }

    /**
     * 
     * Bind domain to identity provider
     * @param param the request object
     */
    public authV1AuthSamlDomainsPost(param: AuthApiAuthV1AuthSamlDomainsPostRequest, options?: Configuration): Promise<DomainIdentityProviderMapSchema> {
        return this.api.authV1AuthSamlDomainsPost(param.appID, param.authToken, param.domainIdentityProviderMapSchema,  options).toPromise();
    }

    /**
     * <br/>Input should be a SAML EntityDescriptor XML.
     * Convert an IdP EntityDescriptor XML into json suitable as a settings configuration.
     * @param param the request object
     */
    public authV1AuthSamlIdpConvertPostWithHttpInfo(param: AuthApiAuthV1AuthSamlIdpConvertPostRequest, options?: Configuration): Promise<HttpInfo<IdentityProviderSchema>> {
        return this.api.authV1AuthSamlIdpConvertPostWithHttpInfo(param.appID, param.authToken, param.identityProviderSchema,  options).toPromise();
    }

    /**
     * <br/>Input should be a SAML EntityDescriptor XML.
     * Convert an IdP EntityDescriptor XML into json suitable as a settings configuration.
     * @param param the request object
     */
    public authV1AuthSamlIdpConvertPost(param: AuthApiAuthV1AuthSamlIdpConvertPostRequest, options?: Configuration): Promise<IdentityProviderSchema> {
        return this.api.authV1AuthSamlIdpConvertPost(param.appID, param.authToken, param.identityProviderSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_identity_providers 
     * Get list of identity providers
     * @param param the request object
     */
    public authV1AuthSamlIdpGetWithHttpInfo(param: AuthApiAuthV1AuthSamlIdpGetRequest, options?: Configuration): Promise<HttpInfo<IdentityProvidersSchema>> {
        return this.api.authV1AuthSamlIdpGetWithHttpInfo(param.appID, param.authToken, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_identity_providers 
     * Get list of identity providers
     * @param param the request object
     */
    public authV1AuthSamlIdpGet(param: AuthApiAuthV1AuthSamlIdpGetRequest, options?: Configuration): Promise<IdentityProvidersSchema> {
        return this.api.authV1AuthSamlIdpGet(param.appID, param.authToken, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_identity_providers 
     * Delete a particular identity provider by id
     * @param param the request object
     */
    public authV1AuthSamlIdpIdentityProviderIdDeleteWithHttpInfo(param: AuthApiAuthV1AuthSamlIdpIdentityProviderIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.authV1AuthSamlIdpIdentityProviderIdDeleteWithHttpInfo(param.appID, param.authToken, param.identityProviderId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_identity_providers 
     * Delete a particular identity provider by id
     * @param param the request object
     */
    public authV1AuthSamlIdpIdentityProviderIdDelete(param: AuthApiAuthV1AuthSamlIdpIdentityProviderIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.authV1AuthSamlIdpIdentityProviderIdDelete(param.appID, param.authToken, param.identityProviderId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_identity_providers 
     * Get a particular identity provider by id
     * @param param the request object
     */
    public authV1AuthSamlIdpIdentityProviderIdGetWithHttpInfo(param: AuthApiAuthV1AuthSamlIdpIdentityProviderIdGetRequest, options?: Configuration): Promise<HttpInfo<IdentityProviderSchema>> {
        return this.api.authV1AuthSamlIdpIdentityProviderIdGetWithHttpInfo(param.appID, param.authToken, param.identityProviderId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_identity_providers 
     * Get a particular identity provider by id
     * @param param the request object
     */
    public authV1AuthSamlIdpIdentityProviderIdGet(param: AuthApiAuthV1AuthSamlIdpIdentityProviderIdGetRequest, options?: Configuration): Promise<IdentityProviderSchema> {
        return this.api.authV1AuthSamlIdpIdentityProviderIdGet(param.appID, param.authToken, param.identityProviderId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_identity_providers 
     * Update a particular identity provider by id
     * @param param the request object
     */
    public authV1AuthSamlIdpIdentityProviderIdPatchWithHttpInfo(param: AuthApiAuthV1AuthSamlIdpIdentityProviderIdPatchRequest, options?: Configuration): Promise<HttpInfo<IdentityProviderSchema>> {
        return this.api.authV1AuthSamlIdpIdentityProviderIdPatchWithHttpInfo(param.appID, param.authToken, param.identityProviderId, param.identityProviderSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_identity_providers 
     * Update a particular identity provider by id
     * @param param the request object
     */
    public authV1AuthSamlIdpIdentityProviderIdPatch(param: AuthApiAuthV1AuthSamlIdpIdentityProviderIdPatchRequest, options?: Configuration): Promise<IdentityProviderSchema> {
        return this.api.authV1AuthSamlIdpIdentityProviderIdPatch(param.appID, param.authToken, param.identityProviderId, param.identityProviderSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_identity_providers 
     * Update a particular identity provider by id
     * @param param the request object
     */
    public authV1AuthSamlIdpIdentityProviderIdPutWithHttpInfo(param: AuthApiAuthV1AuthSamlIdpIdentityProviderIdPutRequest, options?: Configuration): Promise<HttpInfo<IdentityProviderSchema>> {
        return this.api.authV1AuthSamlIdpIdentityProviderIdPutWithHttpInfo(param.appID, param.authToken, param.identityProviderId, param.identityProviderSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_identity_providers 
     * Update a particular identity provider by id
     * @param param the request object
     */
    public authV1AuthSamlIdpIdentityProviderIdPut(param: AuthApiAuthV1AuthSamlIdpIdentityProviderIdPutRequest, options?: Configuration): Promise<IdentityProviderSchema> {
        return this.api.authV1AuthSamlIdpIdentityProviderIdPut(param.appID, param.authToken, param.identityProviderId, param.identityProviderSchema,  options).toPromise();
    }

    /**
     * <br/>Input can either be an IdentityProviderSchema as json or a SAML<br/>EntityDescriptor XML.<br/>Input can either be an IdentityProviderSchema as json or a SAML<br/>EntityDescriptor XML. Required roles:  - can_write_identity_providers 
     * Create a new identity provider.
     * @param param the request object
     */
    public authV1AuthSamlIdpPostWithHttpInfo(param: AuthApiAuthV1AuthSamlIdpPostRequest, options?: Configuration): Promise<HttpInfo<IdentityProviderSchema>> {
        return this.api.authV1AuthSamlIdpPostWithHttpInfo(param.appID, param.authToken, param.identityProviderSchema,  options).toPromise();
    }

    /**
     * <br/>Input can either be an IdentityProviderSchema as json or a SAML<br/>EntityDescriptor XML.<br/>Input can either be an IdentityProviderSchema as json or a SAML<br/>EntityDescriptor XML. Required roles:  - can_write_identity_providers 
     * Create a new identity provider.
     * @param param the request object
     */
    public authV1AuthSamlIdpPost(param: AuthApiAuthV1AuthSamlIdpPostRequest, options?: Configuration): Promise<IdentityProviderSchema> {
        return this.api.authV1AuthSamlIdpPost(param.appID, param.authToken, param.identityProviderSchema,  options).toPromise();
    }

    /**
     * 
     * SAML Single sign-on url by domain
     * @param param the request object
     */
    public authV1AuthSamlLoginPostWithHttpInfo(param: AuthApiAuthV1AuthSamlLoginPostRequest, options?: Configuration): Promise<HttpInfo<AuthV1AuthSamlLoginPost200Response>> {
        return this.api.authV1AuthSamlLoginPostWithHttpInfo(param.sAMLLoginSchema,  options).toPromise();
    }

    /**
     * 
     * SAML Single sign-on url by domain
     * @param param the request object
     */
    public authV1AuthSamlLoginPost(param: AuthApiAuthV1AuthSamlLoginPostRequest, options?: Configuration): Promise<AuthV1AuthSamlLoginPost200Response> {
        return this.api.authV1AuthSamlLoginPost(param.sAMLLoginSchema,  options).toPromise();
    }

    /**
     * 
     * Initiate SAML Single logout
     * @param param the request object
     */
    public authV1AuthSamlLogoutPublicIdPostWithHttpInfo(param: AuthApiAuthV1AuthSamlLogoutPublicIdPostRequest, options?: Configuration): Promise<HttpInfo<AuthV1AuthSamlLogoutPublicIdPost200Response>> {
        return this.api.authV1AuthSamlLogoutPublicIdPostWithHttpInfo(param.publicId,  options).toPromise();
    }

    /**
     * 
     * Initiate SAML Single logout
     * @param param the request object
     */
    public authV1AuthSamlLogoutPublicIdPost(param: AuthApiAuthV1AuthSamlLogoutPublicIdPostRequest, options?: Configuration): Promise<AuthV1AuthSamlLogoutPublicIdPost200Response> {
        return this.api.authV1AuthSamlLogoutPublicIdPost(param.publicId,  options).toPromise();
    }

    /**
     * 
     * SAML Single Logout Service
     * @param param the request object
     */
    public authV1AuthSamlMetadataPublicIdGetWithHttpInfo(param: AuthApiAuthV1AuthSamlMetadataPublicIdGetRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.authV1AuthSamlMetadataPublicIdGetWithHttpInfo(param.publicId,  options).toPromise();
    }

    /**
     * 
     * SAML Single Logout Service
     * @param param the request object
     */
    public authV1AuthSamlMetadataPublicIdGet(param: AuthApiAuthV1AuthSamlMetadataPublicIdGetRequest, options?: Configuration): Promise<void> {
        return this.api.authV1AuthSamlMetadataPublicIdGet(param.publicId,  options).toPromise();
    }

    /**
     * 
     * SAML Single Logout Service
     * @param param the request object
     */
    public authV1AuthSamlMetadataSystemDomainIdIdentityProviderIdGetWithHttpInfo(param: AuthApiAuthV1AuthSamlMetadataSystemDomainIdIdentityProviderIdGetRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.authV1AuthSamlMetadataSystemDomainIdIdentityProviderIdGetWithHttpInfo(param.systemDomainId, param.identityProviderId,  options).toPromise();
    }

    /**
     * 
     * SAML Single Logout Service
     * @param param the request object
     */
    public authV1AuthSamlMetadataSystemDomainIdIdentityProviderIdGet(param: AuthApiAuthV1AuthSamlMetadataSystemDomainIdIdentityProviderIdGetRequest, options?: Configuration): Promise<void> {
        return this.api.authV1AuthSamlMetadataSystemDomainIdIdentityProviderIdGet(param.systemDomainId, param.identityProviderId,  options).toPromise();
    }

    /**
     * 
     * SAML Single sign-on url by domain
     * @param param the request object
     */
    public authV1AuthSamlMultidomainLoginPostWithHttpInfo(param: AuthApiAuthV1AuthSamlMultidomainLoginPostRequest, options?: Configuration): Promise<HttpInfo<MultiDomainUserSystemsSchema>> {
        return this.api.authV1AuthSamlMultidomainLoginPostWithHttpInfo(param.sAMLLoginSchema,  options).toPromise();
    }

    /**
     * 
     * SAML Single sign-on url by domain
     * @param param the request object
     */
    public authV1AuthSamlMultidomainLoginPost(param: AuthApiAuthV1AuthSamlMultidomainLoginPostRequest, options?: Configuration): Promise<MultiDomainUserSystemsSchema> {
        return this.api.authV1AuthSamlMultidomainLoginPost(param.sAMLLoginSchema,  options).toPromise();
    }

    /**
     * 
     * SAML Single Logout Service
     * @param param the request object
     */
    public authV1AuthSamlSloPublicIdGetWithHttpInfo(param: AuthApiAuthV1AuthSamlSloPublicIdGetRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.authV1AuthSamlSloPublicIdGetWithHttpInfo(param.publicId,  options).toPromise();
    }

    /**
     * 
     * SAML Single Logout Service
     * @param param the request object
     */
    public authV1AuthSamlSloPublicIdGet(param: AuthApiAuthV1AuthSamlSloPublicIdGetRequest, options?: Configuration): Promise<void> {
        return this.api.authV1AuthSamlSloPublicIdGet(param.publicId,  options).toPromise();
    }

    /**
     * 
     * SAML Single Logout Service
     * @param param the request object
     */
    public authV1AuthSamlSloSystemDomainIdIdentityProviderIdGetWithHttpInfo(param: AuthApiAuthV1AuthSamlSloSystemDomainIdIdentityProviderIdGetRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.authV1AuthSamlSloSystemDomainIdIdentityProviderIdGetWithHttpInfo(param.systemDomainId, param.identityProviderId,  options).toPromise();
    }

    /**
     * 
     * SAML Single Logout Service
     * @param param the request object
     */
    public authV1AuthSamlSloSystemDomainIdIdentityProviderIdGet(param: AuthApiAuthV1AuthSamlSloSystemDomainIdIdentityProviderIdGetRequest, options?: Configuration): Promise<void> {
        return this.api.authV1AuthSamlSloSystemDomainIdIdentityProviderIdGet(param.systemDomainId, param.identityProviderId,  options).toPromise();
    }

    /**
     * 
     * SAML Single sign-on Service
     * @param param the request object
     */
    public authV1AuthSamlSsoPublicIdGetWithHttpInfo(param: AuthApiAuthV1AuthSamlSsoPublicIdGetRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.authV1AuthSamlSsoPublicIdGetWithHttpInfo(param.publicId,  options).toPromise();
    }

    /**
     * 
     * SAML Single sign-on Service
     * @param param the request object
     */
    public authV1AuthSamlSsoPublicIdGet(param: AuthApiAuthV1AuthSamlSsoPublicIdGetRequest, options?: Configuration): Promise<void> {
        return this.api.authV1AuthSamlSsoPublicIdGet(param.publicId,  options).toPromise();
    }

    /**
     * 
     * SAML Single sign-on Service
     * @param param the request object
     */
    public authV1AuthSamlSsoSystemDomainIdIdentityProviderIdGetWithHttpInfo(param: AuthApiAuthV1AuthSamlSsoSystemDomainIdIdentityProviderIdGetRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.authV1AuthSamlSsoSystemDomainIdIdentityProviderIdGetWithHttpInfo(param.systemDomainId, param.identityProviderId,  options).toPromise();
    }

    /**
     * 
     * SAML Single sign-on Service
     * @param param the request object
     */
    public authV1AuthSamlSsoSystemDomainIdIdentityProviderIdGet(param: AuthApiAuthV1AuthSamlSsoSystemDomainIdIdentityProviderIdGetRequest, options?: Configuration): Promise<void> {
        return this.api.authV1AuthSamlSsoSystemDomainIdIdentityProviderIdGet(param.systemDomainId, param.identityProviderId,  options).toPromise();
    }

    /**
     * 
     * Login by using email and password
     * @param param the request object
     */
    public authV1AuthSimpleLoginPostWithHttpInfo(param: AuthApiAuthV1AuthSimpleLoginPostRequest, options?: Configuration): Promise<HttpInfo<TokenSchema>> {
        return this.api.authV1AuthSimpleLoginPostWithHttpInfo(param.simpleLoginSchema,  options).toPromise();
    }

    /**
     * 
     * Login by using email and password
     * @param param the request object
     */
    public authV1AuthSimpleLoginPost(param: AuthApiAuthV1AuthSimpleLoginPostRequest, options?: Configuration): Promise<TokenSchema> {
        return this.api.authV1AuthSimpleLoginPost(param.simpleLoginSchema,  options).toPromise();
    }

    /**
     * 
     * Revoke token
     * @param param the request object
     */
    public authV1AuthTokenDeleteWithHttpInfo(param: AuthApiAuthV1AuthTokenDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.authV1AuthTokenDeleteWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     * 
     * Revoke token
     * @param param the request object
     */
    public authV1AuthTokenDelete(param: AuthApiAuthV1AuthTokenDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.authV1AuthTokenDelete(param.appID, param.authToken,  options).toPromise();
    }

    /**
     * 
     * Check if auth token valid
     * @param param the request object
     */
    public authV1AuthTokenGetWithHttpInfo(param: AuthApiAuthV1AuthTokenGetRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.authV1AuthTokenGetWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     * 
     * Check if auth token valid
     * @param param the request object
     */
    public authV1AuthTokenGet(param: AuthApiAuthV1AuthTokenGetRequest, options?: Configuration): Promise<void> {
        return this.api.authV1AuthTokenGet(param.appID, param.authToken,  options).toPromise();
    }

    /**
     * 
     * Create new token without invalidating the old one
     * @param param the request object
     */
    public authV1AuthTokenPostWithHttpInfo(param: AuthApiAuthV1AuthTokenPostRequest, options?: Configuration): Promise<HttpInfo<TokenSchema>> {
        return this.api.authV1AuthTokenPostWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     * 
     * Create new token without invalidating the old one
     * @param param the request object
     */
    public authV1AuthTokenPost(param: AuthApiAuthV1AuthTokenPostRequest, options?: Configuration): Promise<TokenSchema> {
        return this.api.authV1AuthTokenPost(param.appID, param.authToken,  options).toPromise();
    }

    /**
     * 
     * Refresh token
     * @param param the request object
     */
    public authV1AuthTokenPutWithHttpInfo(param: AuthApiAuthV1AuthTokenPutRequest, options?: Configuration): Promise<HttpInfo<TokenSchema>> {
        return this.api.authV1AuthTokenPutWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     * 
     * Refresh token
     * @param param the request object
     */
    public authV1AuthTokenPut(param: AuthApiAuthV1AuthTokenPutRequest, options?: Configuration): Promise<TokenSchema> {
        return this.api.authV1AuthTokenPut(param.appID, param.authToken,  options).toPromise();
    }

    /**
     * 
     * Revoke token by ID
     * @param param the request object
     */
    public authV1AuthTokenTokenIdDeleteWithHttpInfo(param: AuthApiAuthV1AuthTokenTokenIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.authV1AuthTokenTokenIdDeleteWithHttpInfo(param.appID, param.authToken, param.tokenId,  options).toPromise();
    }

    /**
     * 
     * Revoke token by ID
     * @param param the request object
     */
    public authV1AuthTokenTokenIdDelete(param: AuthApiAuthV1AuthTokenTokenIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.authV1AuthTokenTokenIdDelete(param.appID, param.authToken, param.tokenId,  options).toPromise();
    }

    /**
     * 
     * Get token by ID
     * @param param the request object
     */
    public authV1AuthTokenTokenIdGetWithHttpInfo(param: AuthApiAuthV1AuthTokenTokenIdGetRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.authV1AuthTokenTokenIdGetWithHttpInfo(param.appID, param.authToken, param.tokenId,  options).toPromise();
    }

    /**
     * 
     * Get token by ID
     * @param param the request object
     */
    public authV1AuthTokenTokenIdGet(param: AuthApiAuthV1AuthTokenTokenIdGetRequest, options?: Configuration): Promise<void> {
        return this.api.authV1AuthTokenTokenIdGet(param.appID, param.authToken, param.tokenId,  options).toPromise();
    }

    /**
     * 
     * List of tokens
     * @param param the request object
     */
    public authV1AuthTokensGetWithHttpInfo(param: AuthApiAuthV1AuthTokensGetRequest, options?: Configuration): Promise<HttpInfo<TokensSchema>> {
        return this.api.authV1AuthTokensGetWithHttpInfo(param.appID, param.authToken, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     * 
     * List of tokens
     * @param param the request object
     */
    public authV1AuthTokensGet(param: AuthApiAuthV1AuthTokensGetRequest, options?: Configuration): Promise<TokensSchema> {
        return this.api.authV1AuthTokensGet(param.appID, param.authToken, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     * 
     * Google cloud marketplace link to existing system domain
     * @param param the request object
     */
    public authV1MarketplaceGoogleLinkPostWithHttpInfo(param: AuthApiAuthV1MarketplaceGoogleLinkPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.authV1MarketplaceGoogleLinkPostWithHttpInfo(param.marketplaceGoogleLinkSchema,  options).toPromise();
    }

    /**
     * 
     * Google cloud marketplace link to existing system domain
     * @param param the request object
     */
    public authV1MarketplaceGoogleLinkPost(param: AuthApiAuthV1MarketplaceGoogleLinkPostRequest, options?: Configuration): Promise<void> {
        return this.api.authV1MarketplaceGoogleLinkPost(param.marketplaceGoogleLinkSchema,  options).toPromise();
    }

    /**
     * 
     * Google cloud marketplace signup
     * @param param the request object
     */
    public authV1MarketplaceGoogleSignupPostWithHttpInfo(param: AuthApiAuthV1MarketplaceGoogleSignupPostRequest = {}, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.authV1MarketplaceGoogleSignupPostWithHttpInfo(param.xGcpMarketplaceToken,  options).toPromise();
    }

    /**
     * 
     * Google cloud marketplace signup
     * @param param the request object
     */
    public authV1MarketplaceGoogleSignupPost(param: AuthApiAuthV1MarketplaceGoogleSignupPostRequest = {}, options?: Configuration): Promise<void> {
        return this.api.authV1MarketplaceGoogleSignupPost(param.xGcpMarketplaceToken,  options).toPromise();
    }

    /**
     * 
     * Returns a list of password checks required for the password to be safe
     * @param param the request object
     */
    public authV1PasswordChecksGetWithHttpInfo(param: AuthApiAuthV1PasswordChecksGetRequest, options?: Configuration): Promise<HttpInfo<PasswordChecksSchema>> {
        return this.api.authV1PasswordChecksGetWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     * 
     * Returns a list of password checks required for the password to be safe
     * @param param the request object
     */
    public authV1PasswordChecksGet(param: AuthApiAuthV1PasswordChecksGetRequest, options?: Configuration): Promise<PasswordChecksSchema> {
        return this.api.authV1PasswordChecksGet(param.appID, param.authToken,  options).toPromise();
    }

    /**
     * 
     * Receives email address and sends email to this address with link for resetting password
     * @param param the request object
     */
    public authV1PasswordForgotPostWithHttpInfo(param: AuthApiAuthV1PasswordForgotPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.authV1PasswordForgotPostWithHttpInfo(param.forgotPasswordSchema,  options).toPromise();
    }

    /**
     * 
     * Receives email address and sends email to this address with link for resetting password
     * @param param the request object
     */
    public authV1PasswordForgotPost(param: AuthApiAuthV1PasswordForgotPostRequest, options?: Configuration): Promise<void> {
        return this.api.authV1PasswordForgotPost(param.forgotPasswordSchema,  options).toPromise();
    }

    /**
     * 
     * Returns a list of password checks required for the password to be safe
     * @param param the request object
     */
    public authV1PasswordResetHashChecksGetWithHttpInfo(param: AuthApiAuthV1PasswordResetHashChecksGetRequest, options?: Configuration): Promise<HttpInfo<PasswordChecksSchema>> {
        return this.api.authV1PasswordResetHashChecksGetWithHttpInfo(param.resetHash,  options).toPromise();
    }

    /**
     * 
     * Returns a list of password checks required for the password to be safe
     * @param param the request object
     */
    public authV1PasswordResetHashChecksGet(param: AuthApiAuthV1PasswordResetHashChecksGetRequest, options?: Configuration): Promise<PasswordChecksSchema> {
        return this.api.authV1PasswordResetHashChecksGet(param.resetHash,  options).toPromise();
    }

    /**
     * 
     * Changes password to a new one
     * @param param the request object
     */
    public authV1PasswordResetResetHashPutWithHttpInfo(param: AuthApiAuthV1PasswordResetResetHashPutRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.authV1PasswordResetResetHashPutWithHttpInfo(param.resetHash, param.resetPasswordSchema,  options).toPromise();
    }

    /**
     * 
     * Changes password to a new one
     * @param param the request object
     */
    public authV1PasswordResetResetHashPut(param: AuthApiAuthV1PasswordResetResetHashPutRequest, options?: Configuration): Promise<void> {
        return this.api.authV1PasswordResetResetHashPut(param.resetHash, param.resetPasswordSchema,  options).toPromise();
    }

    /**
     * 
     * Delete a referral_code
     * @param param the request object
     */
    public authV1ReferralCodesCodeDeleteWithHttpInfo(param: AuthApiAuthV1ReferralCodesCodeDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.authV1ReferralCodesCodeDeleteWithHttpInfo(param.appID, param.authToken, param.code,  options).toPromise();
    }

    /**
     * 
     * Delete a referral_code
     * @param param the request object
     */
    public authV1ReferralCodesCodeDelete(param: AuthApiAuthV1ReferralCodesCodeDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.authV1ReferralCodesCodeDelete(param.appID, param.authToken, param.code,  options).toPromise();
    }

    /**
     * 
     * Get a referral_code
     * @param param the request object
     */
    public authV1ReferralCodesCodeGetWithHttpInfo(param: AuthApiAuthV1ReferralCodesCodeGetRequest, options?: Configuration): Promise<HttpInfo<ReferralCodeSchema>> {
        return this.api.authV1ReferralCodesCodeGetWithHttpInfo(param.appID, param.authToken, param.code,  options).toPromise();
    }

    /**
     * 
     * Get a referral_code
     * @param param the request object
     */
    public authV1ReferralCodesCodeGet(param: AuthApiAuthV1ReferralCodesCodeGetRequest, options?: Configuration): Promise<ReferralCodeSchema> {
        return this.api.authV1ReferralCodesCodeGet(param.appID, param.authToken, param.code,  options).toPromise();
    }

    /**
     * 
     * Get all referral_codes
     * @param param the request object
     */
    public authV1ReferralCodesGetWithHttpInfo(param: AuthApiAuthV1ReferralCodesGetRequest, options?: Configuration): Promise<HttpInfo<ReferralCodesSchema>> {
        return this.api.authV1ReferralCodesGetWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     * 
     * Get all referral_codes
     * @param param the request object
     */
    public authV1ReferralCodesGet(param: AuthApiAuthV1ReferralCodesGetRequest, options?: Configuration): Promise<ReferralCodesSchema> {
        return this.api.authV1ReferralCodesGet(param.appID, param.authToken,  options).toPromise();
    }

    /**
     * 
     * Create a new referral_code
     * @param param the request object
     */
    public authV1ReferralCodesPostWithHttpInfo(param: AuthApiAuthV1ReferralCodesPostRequest, options?: Configuration): Promise<HttpInfo<ReferralCodeSchema>> {
        return this.api.authV1ReferralCodesPostWithHttpInfo(param.appID, param.authToken, param.referralCodeSchema,  options).toPromise();
    }

    /**
     * 
     * Create a new referral_code
     * @param param the request object
     */
    public authV1ReferralCodesPost(param: AuthApiAuthV1ReferralCodesPostRequest, options?: Configuration): Promise<ReferralCodeSchema> {
        return this.api.authV1ReferralCodesPost(param.appID, param.authToken, param.referralCodeSchema,  options).toPromise();
    }

    /**
     * 
     * Returns list of countries
     * @param param the request object
     */
    public authV1RegistrationsCountriesGetWithHttpInfo(param: AuthApiAuthV1RegistrationsCountriesGetRequest, options?: Configuration): Promise<HttpInfo<CountriesSchema>> {
        return this.api.authV1RegistrationsCountriesGetWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     * 
     * Returns list of countries
     * @param param the request object
     */
    public authV1RegistrationsCountriesGet(param: AuthApiAuthV1RegistrationsCountriesGetRequest, options?: Configuration): Promise<CountriesSchema> {
        return this.api.authV1RegistrationsCountriesGet(param.appID, param.authToken,  options).toPromise();
    }

    /**
     * 
     * Create a new registration
     * @param param the request object
     */
    public authV1RegistrationsPostWithHttpInfo(param: AuthApiAuthV1RegistrationsPostRequest, options?: Configuration): Promise<HttpInfo<RegistrationSchema>> {
        return this.api.authV1RegistrationsPostWithHttpInfo(param.registrationSchema,  options).toPromise();
    }

    /**
     * 
     * Create a new registration
     * @param param the request object
     */
    public authV1RegistrationsPost(param: AuthApiAuthV1RegistrationsPostRequest, options?: Configuration): Promise<RegistrationSchema> {
        return this.api.authV1RegistrationsPost(param.registrationSchema,  options).toPromise();
    }

    /**
     * 
     * Verify email address and create system domain from template is email address valid
     * @param param the request object
     */
    public authV1RegistrationsVerifyEmailHashPostWithHttpInfo(param: AuthApiAuthV1RegistrationsVerifyEmailHashPostRequest, options?: Configuration): Promise<HttpInfo<SystemDomainFromTemplateSchema>> {
        return this.api.authV1RegistrationsVerifyEmailHashPostWithHttpInfo(param.emailHash,  options).toPromise();
    }

    /**
     * 
     * Verify email address and create system domain from template is email address valid
     * @param param the request object
     */
    public authV1RegistrationsVerifyEmailHashPost(param: AuthApiAuthV1RegistrationsVerifyEmailHashPostRequest, options?: Configuration): Promise<SystemDomainFromTemplateSchema> {
        return this.api.authV1RegistrationsVerifyEmailHashPost(param.emailHash,  options).toPromise();
    }

    /**
     * 
     * List of system domains
     * @param param the request object
     */
    public authV1SystemDomainsGetWithHttpInfo(param: AuthApiAuthV1SystemDomainsGetRequest, options?: Configuration): Promise<HttpInfo<SystemDomainsSchema>> {
        return this.api.authV1SystemDomainsGetWithHttpInfo(param.appID, param.authToken, param.query, param.statuses,  options).toPromise();
    }

    /**
     * 
     * List of system domains
     * @param param the request object
     */
    public authV1SystemDomainsGet(param: AuthApiAuthV1SystemDomainsGetRequest, options?: Configuration): Promise<SystemDomainsSchema> {
        return this.api.authV1SystemDomainsGet(param.appID, param.authToken, param.query, param.statuses,  options).toPromise();
    }

    /**
     * 
     * Create a new system domain
     * @param param the request object
     */
    public authV1SystemDomainsPostWithHttpInfo(param: AuthApiAuthV1SystemDomainsPostRequest, options?: Configuration): Promise<HttpInfo<SystemDomainSchema>> {
        return this.api.authV1SystemDomainsPostWithHttpInfo(param.appID, param.authToken, param.systemDomainSchema,  options).toPromise();
    }

    /**
     * 
     * Create a new system domain
     * @param param the request object
     */
    public authV1SystemDomainsPost(param: AuthApiAuthV1SystemDomainsPostRequest, options?: Configuration): Promise<SystemDomainSchema> {
        return this.api.authV1SystemDomainsPost(param.appID, param.authToken, param.systemDomainSchema,  options).toPromise();
    }

    /**
     * 
     * Create a new system domain from a referral code (That is associated to your domain)
     * @param param the request object
     */
    public authV1SystemDomainsReferralCodeReferralCodePostWithHttpInfo(param: AuthApiAuthV1SystemDomainsReferralCodeReferralCodePostRequest, options?: Configuration): Promise<HttpInfo<SystemDomainFromTemplateSchema>> {
        return this.api.authV1SystemDomainsReferralCodeReferralCodePostWithHttpInfo(param.appID, param.authToken, param.referralCode, param.systemDomainFromReferralCodeSchema,  options).toPromise();
    }

    /**
     * 
     * Create a new system domain from a referral code (That is associated to your domain)
     * @param param the request object
     */
    public authV1SystemDomainsReferralCodeReferralCodePost(param: AuthApiAuthV1SystemDomainsReferralCodeReferralCodePostRequest, options?: Configuration): Promise<SystemDomainFromTemplateSchema> {
        return this.api.authV1SystemDomainsReferralCodeReferralCodePost(param.appID, param.authToken, param.referralCode, param.systemDomainFromReferralCodeSchema,  options).toPromise();
    }

    /**
     * 
     * Delete a particular system_domain by id
     * @param param the request object
     */
    public authV1SystemDomainsSystemDomainIdDeleteWithHttpInfo(param: AuthApiAuthV1SystemDomainsSystemDomainIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.authV1SystemDomainsSystemDomainIdDeleteWithHttpInfo(param.appID, param.authToken, param.systemDomainId,  options).toPromise();
    }

    /**
     * 
     * Delete a particular system_domain by id
     * @param param the request object
     */
    public authV1SystemDomainsSystemDomainIdDelete(param: AuthApiAuthV1SystemDomainsSystemDomainIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.authV1SystemDomainsSystemDomainIdDelete(param.appID, param.authToken, param.systemDomainId,  options).toPromise();
    }

    /**
     * (For internal use. Should not be displayed in Swagger docs)
     * Delete a particular system_domain by id.
     * @param param the request object
     */
    public authV1SystemDomainsSystemDomainIdE2eDeleteWithHttpInfo(param: AuthApiAuthV1SystemDomainsSystemDomainIdE2eDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.authV1SystemDomainsSystemDomainIdE2eDeleteWithHttpInfo(param.appID, param.authToken, param.systemDomainId,  options).toPromise();
    }

    /**
     * (For internal use. Should not be displayed in Swagger docs)
     * Delete a particular system_domain by id.
     * @param param the request object
     */
    public authV1SystemDomainsSystemDomainIdE2eDelete(param: AuthApiAuthV1SystemDomainsSystemDomainIdE2eDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.authV1SystemDomainsSystemDomainIdE2eDelete(param.appID, param.authToken, param.systemDomainId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_system_domains 
     * Returns a particular system domain by id
     * @param param the request object
     */
    public authV1SystemDomainsSystemDomainIdGetWithHttpInfo(param: AuthApiAuthV1SystemDomainsSystemDomainIdGetRequest, options?: Configuration): Promise<HttpInfo<SystemDomainSchema>> {
        return this.api.authV1SystemDomainsSystemDomainIdGetWithHttpInfo(param.appID, param.authToken, param.systemDomainId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_system_domains 
     * Returns a particular system domain by id
     * @param param the request object
     */
    public authV1SystemDomainsSystemDomainIdGet(param: AuthApiAuthV1SystemDomainsSystemDomainIdGetRequest, options?: Configuration): Promise<SystemDomainSchema> {
        return this.api.authV1SystemDomainsSystemDomainIdGet(param.appID, param.authToken, param.systemDomainId,  options).toPromise();
    }

    /**
     * 
     * Delete system domain logo image.
     * @param param the request object
     */
    public authV1SystemDomainsSystemDomainIdLogoDeleteWithHttpInfo(param: AuthApiAuthV1SystemDomainsSystemDomainIdLogoDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.authV1SystemDomainsSystemDomainIdLogoDeleteWithHttpInfo(param.appID, param.authToken, param.systemDomainId,  options).toPromise();
    }

    /**
     * 
     * Delete system domain logo image.
     * @param param the request object
     */
    public authV1SystemDomainsSystemDomainIdLogoDelete(param: AuthApiAuthV1SystemDomainsSystemDomainIdLogoDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.authV1SystemDomainsSystemDomainIdLogoDelete(param.appID, param.authToken, param.systemDomainId,  options).toPromise();
    }

    /**
     * 
     * Upload system domain logo image.
     * @param param the request object
     */
    public authV1SystemDomainsSystemDomainIdLogoPostWithHttpInfo(param: AuthApiAuthV1SystemDomainsSystemDomainIdLogoPostRequest, options?: Configuration): Promise<HttpInfo<AuthV1SystemDomainsSystemDomainIdLogoPost201Response>> {
        return this.api.authV1SystemDomainsSystemDomainIdLogoPostWithHttpInfo(param.appID, param.authToken, param.systemDomainId, param.authV1SystemDomainsSystemDomainIdLogoPostRequest,  options).toPromise();
    }

    /**
     * 
     * Upload system domain logo image.
     * @param param the request object
     */
    public authV1SystemDomainsSystemDomainIdLogoPost(param: AuthApiAuthV1SystemDomainsSystemDomainIdLogoPostRequest, options?: Configuration): Promise<AuthV1SystemDomainsSystemDomainIdLogoPost201Response> {
        return this.api.authV1SystemDomainsSystemDomainIdLogoPost(param.appID, param.authToken, param.systemDomainId, param.authV1SystemDomainsSystemDomainIdLogoPostRequest,  options).toPromise();
    }

    /**
     * 
     * Update system domain
     * @param param the request object
     */
    public authV1SystemDomainsSystemDomainIdPatchWithHttpInfo(param: AuthApiAuthV1SystemDomainsSystemDomainIdPatchRequest, options?: Configuration): Promise<HttpInfo<SystemDomainSchema>> {
        return this.api.authV1SystemDomainsSystemDomainIdPatchWithHttpInfo(param.appID, param.authToken, param.systemDomainId, param.systemDomainSchema,  options).toPromise();
    }

    /**
     * 
     * Update system domain
     * @param param the request object
     */
    public authV1SystemDomainsSystemDomainIdPatch(param: AuthApiAuthV1SystemDomainsSystemDomainIdPatchRequest, options?: Configuration): Promise<SystemDomainSchema> {
        return this.api.authV1SystemDomainsSystemDomainIdPatch(param.appID, param.authToken, param.systemDomainId, param.systemDomainSchema,  options).toPromise();
    }

    /**
     * 
     * Update system domain
     * @param param the request object
     */
    public authV1SystemDomainsSystemDomainIdPutWithHttpInfo(param: AuthApiAuthV1SystemDomainsSystemDomainIdPutRequest, options?: Configuration): Promise<HttpInfo<SystemDomainSchema>> {
        return this.api.authV1SystemDomainsSystemDomainIdPutWithHttpInfo(param.appID, param.authToken, param.systemDomainId, param.systemDomainSchema,  options).toPromise();
    }

    /**
     * 
     * Update system domain
     * @param param the request object
     */
    public authV1SystemDomainsSystemDomainIdPut(param: AuthApiAuthV1SystemDomainsSystemDomainIdPutRequest, options?: Configuration): Promise<SystemDomainSchema> {
        return this.api.authV1SystemDomainsSystemDomainIdPut(param.appID, param.authToken, param.systemDomainId, param.systemDomainSchema,  options).toPromise();
    }

    /**
     * 
     * List of system domain templates
     * @param param the request object
     */
    public authV1SystemDomainsTemplatesGetWithHttpInfo(param: AuthApiAuthV1SystemDomainsTemplatesGetRequest, options?: Configuration): Promise<HttpInfo<SystemDomainsSchema>> {
        return this.api.authV1SystemDomainsTemplatesGetWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     * 
     * List of system domain templates
     * @param param the request object
     */
    public authV1SystemDomainsTemplatesGet(param: AuthApiAuthV1SystemDomainsTemplatesGetRequest, options?: Configuration): Promise<SystemDomainsSchema> {
        return this.api.authV1SystemDomainsTemplatesGet(param.appID, param.authToken,  options).toPromise();
    }

}

import { ObservableFilesApi } from "./ObservableAPI";
import { FilesApiRequestFactory, FilesApiResponseProcessor} from "../apis/FilesApi";

export interface FilesApiFilesV1AnalysisProfilesGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisProfilesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisProfilesGet
     */
    authToken: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1AnalysisProfilesGet
     */
    perPage?: number
    /**
     * ID of a last profile set on previous page
     * @type string
     * @memberof FilesApifilesV1AnalysisProfilesGet
     */
    lastId?: string
}

export interface FilesApiFilesV1AnalysisProfilesMediaTypeDefaultGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisProfilesMediaTypeDefaultGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisProfilesMediaTypeDefaultGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisProfilesMediaTypeDefaultGet
     */
    mediaType: string
}

export interface FilesApiFilesV1AnalysisProfilesPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisProfilesPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisProfilesPost
     */
    authToken: string
    /**
     * body
     * @type AnalysisProfileSchema
     * @memberof FilesApifilesV1AnalysisProfilesPost
     */
    analysisProfileSchema: AnalysisProfileSchema
}

export interface FilesApiFilesV1AnalysisProfilesProfileIdDefaultDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisProfilesProfileIdDefaultDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisProfilesProfileIdDefaultDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisProfilesProfileIdDefaultDelete
     */
    profileId: string
}

export interface FilesApiFilesV1AnalysisProfilesProfileIdDefaultPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisProfilesProfileIdDefaultPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisProfilesProfileIdDefaultPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisProfilesProfileIdDefaultPost
     */
    profileId: string
}

export interface FilesApiFilesV1AnalysisProfilesProfileIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisProfilesProfileIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisProfilesProfileIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisProfilesProfileIdDelete
     */
    profileId: string
}

export interface FilesApiFilesV1AnalysisProfilesProfileIdGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisProfilesProfileIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisProfilesProfileIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisProfilesProfileIdGet
     */
    profileId: string
}

export interface FilesApiFilesV1AnalysisProfilesProfileIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisProfilesProfileIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisProfilesProfileIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisProfilesProfileIdPatch
     */
    profileId: string
    /**
     * body
     * @type AnalysisProfileSchema
     * @memberof FilesApifilesV1AnalysisProfilesProfileIdPatch
     */
    analysisProfileSchema: AnalysisProfileSchema
}

export interface FilesApiFilesV1AnalysisProfilesProfileIdPutRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisProfilesProfileIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisProfilesProfileIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisProfilesProfileIdPut
     */
    profileId: string
    /**
     * body
     * @type AnalysisProfileSchema
     * @memberof FilesApifilesV1AnalysisProfilesProfileIdPut
     */
    analysisProfileSchema: AnalysisProfileSchema
}

export interface FilesApiFilesV1AnalysisServiceAccountsAnalysisServiceAccountIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisServiceAccountsAnalysisServiceAccountIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisServiceAccountsAnalysisServiceAccountIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisServiceAccountsAnalysisServiceAccountIdDelete
     */
    analysisServiceAccountId: string
}

export interface FilesApiFilesV1AnalysisServiceAccountsAnalysisServiceAccountIdGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisServiceAccountsAnalysisServiceAccountIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisServiceAccountsAnalysisServiceAccountIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisServiceAccountsAnalysisServiceAccountIdGet
     */
    analysisServiceAccountId: string
}

export interface FilesApiFilesV1AnalysisServiceAccountsAnalysisServiceAccountIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisServiceAccountsAnalysisServiceAccountIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisServiceAccountsAnalysisServiceAccountIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisServiceAccountsAnalysisServiceAccountIdPatch
     */
    analysisServiceAccountId: string
    /**
     * body
     * @type AnalysisServiceAccountSchema
     * @memberof FilesApifilesV1AnalysisServiceAccountsAnalysisServiceAccountIdPatch
     */
    analysisServiceAccountSchema: AnalysisServiceAccountSchema
}

export interface FilesApiFilesV1AnalysisServiceAccountsAnalysisServiceAccountIdPutRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisServiceAccountsAnalysisServiceAccountIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisServiceAccountsAnalysisServiceAccountIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisServiceAccountsAnalysisServiceAccountIdPut
     */
    analysisServiceAccountId: string
    /**
     * body
     * @type AnalysisServiceAccountSchema
     * @memberof FilesApifilesV1AnalysisServiceAccountsAnalysisServiceAccountIdPut
     */
    analysisServiceAccountSchema: AnalysisServiceAccountSchema
}

export interface FilesApiFilesV1AnalysisServiceAccountsGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisServiceAccountsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisServiceAccountsGet
     */
    authToken: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1AnalysisServiceAccountsGet
     */
    perPage?: number
    /**
     * ID of a last service account set on previous page
     * @type string
     * @memberof FilesApifilesV1AnalysisServiceAccountsGet
     */
    lastId?: string
}

export interface FilesApiFilesV1AnalysisServiceAccountsPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisServiceAccountsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AnalysisServiceAccountsPost
     */
    authToken: string
    /**
     * body
     * @type AnalysisServiceAccountSchema
     * @memberof FilesApifilesV1AnalysisServiceAccountsPost
     */
    analysisServiceAccountSchema: AnalysisServiceAccountSchema
}

export interface FilesApiFilesV1AssetsAssetIdCustomKeyframePostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdCustomKeyframePost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdCustomKeyframePost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdCustomKeyframePost
     */
    assetId: string
}

export interface FilesApiFilesV1AssetsAssetIdCustomKeyframePosterIdPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdCustomKeyframePosterIdPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdCustomKeyframePosterIdPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdCustomKeyframePosterIdPost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdCustomKeyframePosterIdPost
     */
    posterId: string
    /**
     * set to false to keep current custom_poster and custom_keyframe on asset
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdCustomKeyframePosterIdPost
     */
    overwrite?: boolean
}

export interface FilesApiFilesV1AssetsAssetIdExportLocationsExportLocationIdPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdExportLocationsExportLocationIdPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdExportLocationsExportLocationIdPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdExportLocationsExportLocationIdPost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdExportLocationsExportLocationIdPost
     */
    exportLocationId: string
    /**
     * body
     * @type AssetExportSchema
     * @memberof FilesApifilesV1AssetsAssetIdExportLocationsExportLocationIdPost
     */
    assetExportSchema: AssetExportSchema
    /**
     * Enable transfer through iconik host (creates egress)
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdExportLocationsExportLocationIdPost
     */
    allowHostTransfer?: boolean
}

export interface FilesApiFilesV1AssetsAssetIdFileSetsFileSetIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdDelete
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdDelete
     */
    fileSetId: string
    /**
     * If true, keep source objects
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdDelete
     */
    keepSource?: boolean
}

export interface FilesApiFilesV1AssetsAssetIdFileSetsFileSetIdFilesGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdFilesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdFilesGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdFilesGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdFilesGet
     */
    fileSetId: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdFilesGet
     */
    perPage?: number
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdFilesGet
     */
    lastId?: string
    /**
     * Set to false if you don\&#39;t need a URL, will speed things up
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdFilesGet
     */
    generateSignedUrl?: boolean
    /**
     * Set to true if you need a total amount of files in a file set
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdFilesGet
     */
    fileCount?: boolean
}

export interface FilesApiFilesV1AssetsAssetIdFileSetsFileSetIdGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdGet
     */
    fileSetId: string
}

export interface FilesApiFilesV1AssetsAssetIdFileSetsFileSetIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdPatch
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdPatch
     */
    fileSetId: string
    /**
     * body
     * @type FileSetSchema
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdPatch
     */
    fileSetSchema: FileSetSchema
}

export interface FilesApiFilesV1AssetsAssetIdFileSetsFileSetIdPurgeDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdPurgeDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdPurgeDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdPurgeDelete
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdPurgeDelete
     */
    fileSetId: string
}

export interface FilesApiFilesV1AssetsAssetIdFileSetsFileSetIdPutRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdPut
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdPut
     */
    fileSetId: string
    /**
     * body
     * @type FileSetSchema
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdPut
     */
    fileSetSchema: FileSetSchema
}

export interface FilesApiFilesV1AssetsAssetIdFileSetsFileSetIdRestorePutRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdRestorePut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdRestorePut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdRestorePut
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsFileSetIdRestorePut
     */
    fileSetId: string
}

export interface FilesApiFilesV1AssetsAssetIdFileSetsGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsGet
     */
    assetId: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsGet
     */
    perPage?: number
    /**
     * ID of a last file set on previous page
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsGet
     */
    lastId?: string
    /**
     * Set to true if you need a total amount of files in a file set
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsGet
     */
    fileCount?: boolean
}

export interface FilesApiFilesV1AssetsAssetIdFileSetsPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsPost
     */
    assetId: string
    /**
     * body
     * @type FileSetSchema
     * @memberof FilesApifilesV1AssetsAssetIdFileSetsPost
     */
    fileSetSchema: FileSetSchema
}

export interface FilesApiFilesV1AssetsAssetIdFilesFileIdCaptureMillisecondsPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdCaptureMillisecondsPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdCaptureMillisecondsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdCaptureMillisecondsPost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdCaptureMillisecondsPost
     */
    fileId: string
    /**
     * 
     * @type number
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdCaptureMillisecondsPost
     */
    milliseconds: number
    /**
     * body
     * @type TranscodeRequestSchema
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdCaptureMillisecondsPost
     */
    transcodeRequestSchema: TranscodeRequestSchema
}

export interface FilesApiFilesV1AssetsAssetIdFilesFileIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdDelete
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdDelete
     */
    fileId: string
}

export interface FilesApiFilesV1AssetsAssetIdFilesFileIdDownloadUrlGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdDownloadUrlGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdDownloadUrlGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdDownloadUrlGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdDownloadUrlGet
     */
    fileId: string
}

export interface FilesApiFilesV1AssetsAssetIdFilesFileIdEditProxiesPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdEditProxiesPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdEditProxiesPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdEditProxiesPost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdEditProxiesPost
     */
    fileId: string
    /**
     * body
     * @type EditProxySchema
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdEditProxiesPost
     */
    editProxySchema: EditProxySchema
}

export interface FilesApiFilesV1AssetsAssetIdFilesFileIdGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdGet
     */
    fileId: string
    /**
     * Set to true to get a new upload url for the file
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdGet
     */
    generateSignedPostUrl?: boolean
    /**
     * Set to attachment if you want a download link. Note that this will not create a asset history entry for the download
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdGet
     */
    contentDisposition?: string
    /**
     * Set to true to get a new url for the file rather than using a cached url
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdGet
     */
    bypassUrlCache?: boolean
}

export interface FilesApiFilesV1AssetsAssetIdFilesFileIdIsgHandlerUrlGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdIsgHandlerUrlGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdIsgHandlerUrlGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdIsgHandlerUrlGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdIsgHandlerUrlGet
     */
    fileId: string
}

export interface FilesApiFilesV1AssetsAssetIdFilesFileIdKeyframesPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdKeyframesPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdKeyframesPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdKeyframesPost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdKeyframesPost
     */
    fileId: string
    /**
     * body
     * @type TranscodeRequestSchema
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdKeyframesPost
     */
    transcodeRequestSchema: TranscodeRequestSchema
}

export interface FilesApiFilesV1AssetsAssetIdFilesFileIdMediainfoPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMediainfoPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMediainfoPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMediainfoPost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMediainfoPost
     */
    fileId: string
    /**
     * body
     * @type TranscodeRequestSchema
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMediainfoPost
     */
    transcodeRequestSchema: TranscodeRequestSchema
}

export interface FilesApiFilesV1AssetsAssetIdFilesFileIdMultipartB2CancelPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartB2CancelPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartB2CancelPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartB2CancelPost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartB2CancelPost
     */
    fileId: string
    /**
     * body
     * @type MultipartB2CancelUpload
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartB2CancelPost
     */
    multipartB2CancelUpload: MultipartB2CancelUpload
    /**
     * Use temporary file record
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartB2CancelPost
     */
    temporary?: boolean
}

export interface FilesApiFilesV1AssetsAssetIdFilesFileIdMultipartB2FinishPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartB2FinishPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartB2FinishPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartB2FinishPost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartB2FinishPost
     */
    fileId: string
    /**
     * body
     * @type MultipartB2FinishUpload
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartB2FinishPost
     */
    multipartB2FinishUpload: MultipartB2FinishUpload
    /**
     * Use temporary file record
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartB2FinishPost
     */
    temporary?: boolean
}

export interface FilesApiFilesV1AssetsAssetIdFilesFileIdMultipartB2StartPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartB2StartPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartB2StartPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartB2StartPost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartB2StartPost
     */
    fileId: string
    /**
     * Use temporary file record
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartB2StartPost
     */
    temporary?: boolean
    /**
     * body
     * @type MultipartB2StartUpload
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartB2StartPost
     */
    multipartB2StartUpload?: MultipartB2StartUpload
}

export interface FilesApiFilesV1AssetsAssetIdFilesFileIdMultipartCleanupPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartCleanupPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartCleanupPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartCleanupPost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartCleanupPost
     */
    fileId: string
    /**
     * body
     * @type MultipartUploadCleanupSchema
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartCleanupPost
     */
    multipartUploadCleanupSchema: MultipartUploadCleanupSchema
}

export interface FilesApiFilesV1AssetsAssetIdFilesFileIdMultipartGcsComposeUrlPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartGcsComposeUrlPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartGcsComposeUrlPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartGcsComposeUrlPost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartGcsComposeUrlPost
     */
    fileId: string
    /**
     * body
     * @type MultipartUploadComposeSchema
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartGcsComposeUrlPost
     */
    multipartUploadComposeSchema: MultipartUploadComposeSchema
    /**
     * Use temporary file record
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartGcsComposeUrlPost
     */
    temporary?: boolean
}

export interface FilesApiFilesV1AssetsAssetIdFilesFileIdMultipartPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartPost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartPost
     */
    fileId: string
    /**
     * body
     * @type MultipartUploadSchema
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartPost
     */
    multipartUploadSchema: MultipartUploadSchema
    /**
     * Use temporary file record
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartPost
     */
    temporary?: boolean
}

export interface FilesApiFilesV1AssetsAssetIdFilesFileIdMultipartUrlGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartUrlGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartUrlGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartUrlGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartUrlGet
     */
    fileId: string
    /**
     * Multipart UploadId
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartUrlGet
     */
    uploadId: string
    /**
     * List of multipart upload urls of required type
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartUrlGet
     */
    type?: string
    /**
     * Maximum PartNumber that multipart upload has
     * @type number
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartUrlGet
     */
    maxPartNumber?: number
    /**
     * Use temporary file record
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartUrlGet
     */
    temporary?: boolean
}

export interface FilesApiFilesV1AssetsAssetIdFilesFileIdMultipartUrlPartGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartUrlPartGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartUrlPartGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartUrlPartGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartUrlPartGet
     */
    fileId: string
    /**
     * Number of parts to upload
     * @type number
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartUrlPartGet
     */
    partsNum: number
    /**
     * Multipart UploadId
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartUrlPartGet
     */
    uploadId?: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartUrlPartGet
     */
    perPage?: number
    /**
     * Which page number to fetch
     * @type number
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartUrlPartGet
     */
    page?: number
    /**
     * Use temporary file record
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartUrlPartGet
     */
    temporary?: boolean
}

export interface FilesApiFilesV1AssetsAssetIdFilesFileIdMultipartUrlS3PartPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartUrlS3PartPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartUrlS3PartPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartUrlS3PartPost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartUrlS3PartPost
     */
    fileId: string
    /**
     * body
     * @type MultiPartS3UrlPartsSchema
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartUrlS3PartPost
     */
    multiPartS3UrlPartsSchema: MultiPartS3UrlPartsSchema
    /**
     * Use temporary file record
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdMultipartUrlS3PartPost
     */
    temporary?: boolean
}

export interface FilesApiFilesV1AssetsAssetIdFilesFileIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdPatch
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdPatch
     */
    fileId: string
    /**
     * body
     * @type FileSchema
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdPatch
     */
    fileSchema: FileSchema
}

export interface FilesApiFilesV1AssetsAssetIdFilesFileIdPutRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdPut
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdPut
     */
    fileId: string
    /**
     * body
     * @type FileSchema
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdPut
     */
    fileSchema: FileSchema
}

export interface FilesApiFilesV1AssetsAssetIdFilesFileIdReindexPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdReindexPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdReindexPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdReindexPost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdReindexPost
     */
    fileId: string
}

export interface FilesApiFilesV1AssetsAssetIdFilesFileIdSubtitlesPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdSubtitlesPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdSubtitlesPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdSubtitlesPost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdSubtitlesPost
     */
    fileId: string
    /**
     * body
     * @type SubtitleRequestSchema
     * @memberof FilesApifilesV1AssetsAssetIdFilesFileIdSubtitlesPost
     */
    subtitleRequestSchema?: SubtitleRequestSchema
}

export interface FilesApiFilesV1AssetsAssetIdFilesGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesGet
     */
    assetId: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1AssetsAssetIdFilesGet
     */
    perPage?: number
    /**
     * Set to True if you do need a URL, this makes the request slower.
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdFilesGet
     */
    generateSignedUrl?: boolean
    /**
     * Set to attachment if you want a download link. Note that this will not create a download in asset history
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesGet
     */
    contentDisposition?: string
    /**
     * ID of a last file on previous page
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesGet
     */
    lastId?: string
}

export interface FilesApiFilesV1AssetsAssetIdFilesPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFilesPost
     */
    assetId: string
    /**
     * body
     * @type FileCreateSchema
     * @memberof FilesApifilesV1AssetsAssetIdFilesPost
     */
    fileCreateSchema: FileCreateSchema
}

export interface FilesApiFilesV1AssetsAssetIdFormatsFormatIdArchiveDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdArchiveDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdArchiveDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdArchiveDelete
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdArchiveDelete
     */
    formatId: string
    /**
     * body
     * @type FormatDeleteArchiveSchema
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdArchiveDelete
     */
    formatDeleteArchiveSchema: FormatDeleteArchiveSchema
}

export interface FilesApiFilesV1AssetsAssetIdFormatsFormatIdArchivePostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdArchivePost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdArchivePost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdArchivePost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdArchivePost
     */
    formatId: string
    /**
     * body
     * @type FormatArchiveSchema
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdArchivePost
     */
    formatArchiveSchema: FormatArchiveSchema
}

export interface FilesApiFilesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdDelete
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdDelete
     */
    formatId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdDelete
     */
    componentId: string
}

export interface FilesApiFilesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdGet
     */
    formatId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdGet
     */
    componentId: string
}

export interface FilesApiFilesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdPutRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdPut
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdPut
     */
    formatId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdPut
     */
    componentId: string
}

export interface FilesApiFilesV1AssetsAssetIdFormatsFormatIdComponentsGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdComponentsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdComponentsGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdComponentsGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdComponentsGet
     */
    formatId: string
}

export interface FilesApiFilesV1AssetsAssetIdFormatsFormatIdComponentsPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdComponentsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdComponentsPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdComponentsPost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdComponentsPost
     */
    formatId: string
    /**
     * body
     * @type ComponentSchema
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdComponentsPost
     */
    componentSchema: ComponentSchema
}

export interface FilesApiFilesV1AssetsAssetIdFormatsFormatIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdDelete
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdDelete
     */
    formatId: string
    /**
     * Permanently delete format without sending it to the Recycle Bin
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdDelete
     */
    deleteImmediately?: boolean
}

export interface FilesApiFilesV1AssetsAssetIdFormatsFormatIdFileSetsGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdFileSetsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdFileSetsGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdFileSetsGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdFileSetsGet
     */
    formatId: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdFileSetsGet
     */
    perPage?: number
    /**
     * ID of a last file set on previous page
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdFileSetsGet
     */
    lastId?: string
}

export interface FilesApiFilesV1AssetsAssetIdFormatsFormatIdFileSetsSourcesGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdFileSetsSourcesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdFileSetsSourcesGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdFileSetsSourcesGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdFileSetsSourcesGet
     */
    formatId: string
}

export interface FilesApiFilesV1AssetsAssetIdFormatsFormatIdFileSetsSourcesStorageMethodGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdFileSetsSourcesStorageMethodGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdFileSetsSourcesStorageMethodGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdFileSetsSourcesStorageMethodGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdFileSetsSourcesStorageMethodGet
     */
    formatId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdFileSetsSourcesStorageMethodGet
     */
    storageMethod: string
}

export interface FilesApiFilesV1AssetsAssetIdFormatsFormatIdGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdGet
     */
    formatId: string
}

export interface FilesApiFilesV1AssetsAssetIdFormatsFormatIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdPatch
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdPatch
     */
    formatId: string
    /**
     * body
     * @type FormatSchema
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdPatch
     */
    formatSchema: FormatSchema
}

export interface FilesApiFilesV1AssetsAssetIdFormatsFormatIdPurgeDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdPurgeDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdPurgeDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdPurgeDelete
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdPurgeDelete
     */
    formatId: string
}

export interface FilesApiFilesV1AssetsAssetIdFormatsFormatIdPutRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdPut
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdPut
     */
    formatId: string
    /**
     * body
     * @type FormatSchema
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdPut
     */
    formatSchema: FormatSchema
}

export interface FilesApiFilesV1AssetsAssetIdFormatsFormatIdRestorePostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdRestorePost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdRestorePost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdRestorePost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdRestorePost
     */
    formatId: string
    /**
     * body
     * @type FormatRestoreSchema
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdRestorePost
     */
    formatRestoreSchema: FormatRestoreSchema
}

export interface FilesApiFilesV1AssetsAssetIdFormatsFormatIdRestorePutRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdRestorePut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdRestorePut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdRestorePut
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdRestorePut
     */
    formatId: string
}

export interface FilesApiFilesV1AssetsAssetIdFormatsFormatIdStoragesStorageIdFileSetsGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdStoragesStorageIdFileSetsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdStoragesStorageIdFileSetsGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdStoragesStorageIdFileSetsGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdStoragesStorageIdFileSetsGet
     */
    formatId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdStoragesStorageIdFileSetsGet
     */
    storageId: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdStoragesStorageIdFileSetsGet
     */
    perPage?: number
    /**
     * ID of a last file set on previous page
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsFormatIdStoragesStorageIdFileSetsGet
     */
    lastId?: string
}

export interface FilesApiFilesV1AssetsAssetIdFormatsGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsGet
     */
    assetId: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1AssetsAssetIdFormatsGet
     */
    perPage?: number
    /**
     * ID of a last format on previous page
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsGet
     */
    lastId?: string
}

export interface FilesApiFilesV1AssetsAssetIdFormatsNameGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsNameGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsNameGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsNameGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsNameGet
     */
    name: string
}

export interface FilesApiFilesV1AssetsAssetIdFormatsPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdFormatsPost
     */
    assetId: string
    /**
     * body
     * @type FormatSchema
     * @memberof FilesApifilesV1AssetsAssetIdFormatsPost
     */
    formatSchema: FormatSchema
}

export interface FilesApiFilesV1AssetsAssetIdKeyframesGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesGet
     */
    assetId: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesGet
     */
    perPage?: number
    /**
     * Set to false if you don\&#39;t need a URL, will speed things up
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesGet
     */
    generateSignedUrl?: boolean
    /**
     * Set to attachment if you do not want a download link
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesGet
     */
    contentDisposition?: string
    /**
     * ID of a last keyframe on previous page
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesGet
     */
    lastId?: string
    /**
     * If true return asset\&#39;s keyframes for all versions
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesGet
     */
    includeAllVersions?: boolean
}

export interface FilesApiFilesV1AssetsAssetIdKeyframesKeyframeIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesKeyframeIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesKeyframeIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesKeyframeIdDelete
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesKeyframeIdDelete
     */
    keyframeId: string
    /**
     * 
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesKeyframeIdDelete
     */
    keepPoster?: boolean
}

export interface FilesApiFilesV1AssetsAssetIdKeyframesKeyframeIdGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesKeyframeIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesKeyframeIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesKeyframeIdGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesKeyframeIdGet
     */
    keyframeId: string
    /**
     * Set to attachment if you do not want a download link
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesKeyframeIdGet
     */
    contentDisposition?: string
}

export interface FilesApiFilesV1AssetsAssetIdKeyframesKeyframeIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesKeyframeIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesKeyframeIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesKeyframeIdPatch
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesKeyframeIdPatch
     */
    keyframeId: string
    /**
     * body
     * @type KeyframeSchema
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesKeyframeIdPatch
     */
    keyframeSchema: KeyframeSchema
}

export interface FilesApiFilesV1AssetsAssetIdKeyframesKeyframeIdPublicDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesKeyframeIdPublicDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesKeyframeIdPublicDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesKeyframeIdPublicDelete
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesKeyframeIdPublicDelete
     */
    keyframeId: string
}

export interface FilesApiFilesV1AssetsAssetIdKeyframesKeyframeIdPublicPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesKeyframeIdPublicPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesKeyframeIdPublicPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesKeyframeIdPublicPost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesKeyframeIdPublicPost
     */
    keyframeId: string
}

export interface FilesApiFilesV1AssetsAssetIdKeyframesKeyframeIdPutRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesKeyframeIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesKeyframeIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesKeyframeIdPut
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesKeyframeIdPut
     */
    keyframeId: string
    /**
     * body
     * @type KeyframeSchema
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesKeyframeIdPut
     */
    keyframeSchema: KeyframeSchema
}

export interface FilesApiFilesV1AssetsAssetIdKeyframesPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesPost
     */
    assetId: string
    /**
     * body
     * @type KeyframeSchema
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesPost
     */
    keyframeSchema: KeyframeSchema
    /**
     * Set to True to get a google resumable upload link
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdKeyframesPost
     */
    useGoogleResumableUpload?: boolean
}

export interface FilesApiFilesV1AssetsAssetIdMethodStorageMethodKeyframesPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdMethodStorageMethodKeyframesPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdMethodStorageMethodKeyframesPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdMethodStorageMethodKeyframesPost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdMethodStorageMethodKeyframesPost
     */
    storageMethod: string
    /**
     * body
     * @type KeyframeSchema
     * @memberof FilesApifilesV1AssetsAssetIdMethodStorageMethodKeyframesPost
     */
    keyframeSchema: KeyframeSchema
    /**
     * Set to True to get a google resumable upload link
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdMethodStorageMethodKeyframesPost
     */
    useGoogleResumableUpload?: boolean
}

export interface FilesApiFilesV1AssetsAssetIdMethodStorageMethodProxiesPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdMethodStorageMethodProxiesPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdMethodStorageMethodProxiesPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdMethodStorageMethodProxiesPost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdMethodStorageMethodProxiesPost
     */
    storageMethod: string
    /**
     * body
     * @type ProxySchema
     * @memberof FilesApifilesV1AssetsAssetIdMethodStorageMethodProxiesPost
     */
    proxySchema: ProxySchema
}

export interface FilesApiFilesV1AssetsAssetIdProxiesGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesGet
     */
    assetId: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1AssetsAssetIdProxiesGet
     */
    perPage?: number
    /**
     * Set to false if you don\&#39;t need a URL, will speed things up
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdProxiesGet
     */
    generateSignedUrl?: boolean
    /**
     * Set to attachment if you want a download link
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesGet
     */
    contentDisposition?: string
    /**
     * ID of a last proxy on previous page
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesGet
     */
    lastId?: string
    /**
     * Set to true to get a new url for the file rather than using a cached url
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdProxiesGet
     */
    bypassUrlCache?: boolean
}

export interface FilesApiFilesV1AssetsAssetIdProxiesPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesPost
     */
    assetId: string
    /**
     * body
     * @type ProxySchema
     * @memberof FilesApifilesV1AssetsAssetIdProxiesPost
     */
    proxySchema: ProxySchema
}

export interface FilesApiFilesV1AssetsAssetIdProxiesProxyIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdDelete
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdDelete
     */
    proxyId: string
}

export interface FilesApiFilesV1AssetsAssetIdProxiesProxyIdDownloadUrlGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdDownloadUrlGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdDownloadUrlGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdDownloadUrlGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdDownloadUrlGet
     */
    proxyId: string
}

export interface FilesApiFilesV1AssetsAssetIdProxiesProxyIdGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdGet
     */
    proxyId: string
    /**
     * Set to attachment if you want a download link
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdGet
     */
    contentDisposition?: string
}

export interface FilesApiFilesV1AssetsAssetIdProxiesProxyIdKeyframesPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdKeyframesPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdKeyframesPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdKeyframesPost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdKeyframesPost
     */
    proxyId: string
    /**
     * body
     * @type TranscodeRequestSchema
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdKeyframesPost
     */
    transcodeRequestSchema: TranscodeRequestSchema
}

export interface FilesApiFilesV1AssetsAssetIdProxiesProxyIdMultipartCleanupPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdMultipartCleanupPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdMultipartCleanupPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdMultipartCleanupPost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdMultipartCleanupPost
     */
    proxyId: string
    /**
     * body
     * @type MultipartUploadProxyCleanupSchema
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdMultipartCleanupPost
     */
    multipartUploadProxyCleanupSchema: MultipartUploadProxyCleanupSchema
}

export interface FilesApiFilesV1AssetsAssetIdProxiesProxyIdMultipartUrlGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdMultipartUrlGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdMultipartUrlGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdMultipartUrlGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdMultipartUrlGet
     */
    proxyId: string
    /**
     * Multipart UploadId
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdMultipartUrlGet
     */
    uploadId: string
    /**
     * List of multipart upload urls of required type
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdMultipartUrlGet
     */
    type?: string
    /**
     * Maximum PartNumber that multipart upload has
     * @type number
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdMultipartUrlGet
     */
    maxPartNumber?: number
}

export interface FilesApiFilesV1AssetsAssetIdProxiesProxyIdMultipartUrlPartGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdMultipartUrlPartGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdMultipartUrlPartGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdMultipartUrlPartGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdMultipartUrlPartGet
     */
    proxyId: string
    /**
     * Number of parts to upload
     * @type number
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdMultipartUrlPartGet
     */
    partsNum: number
    /**
     * Multipart UploadId
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdMultipartUrlPartGet
     */
    uploadId?: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdMultipartUrlPartGet
     */
    perPage?: number
    /**
     * Which page number to fetch
     * @type number
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdMultipartUrlPartGet
     */
    page?: number
}

export interface FilesApiFilesV1AssetsAssetIdProxiesProxyIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdPatch
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdPatch
     */
    proxyId: string
    /**
     * body
     * @type ProxySchema
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdPatch
     */
    proxySchema: ProxySchema
}

export interface FilesApiFilesV1AssetsAssetIdProxiesProxyIdPublicDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdPublicDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdPublicDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdPublicDelete
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdPublicDelete
     */
    proxyId: string
}

export interface FilesApiFilesV1AssetsAssetIdProxiesProxyIdPublicPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdPublicPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdPublicPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdPublicPost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdPublicPost
     */
    proxyId: string
}

export interface FilesApiFilesV1AssetsAssetIdProxiesProxyIdPutRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdPut
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdPut
     */
    proxyId: string
    /**
     * body
     * @type ProxySchema
     * @memberof FilesApifilesV1AssetsAssetIdProxiesProxyIdPut
     */
    proxySchema: ProxySchema
}

export interface FilesApiFilesV1AssetsAssetIdSubtitlesGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesGet
     */
    assetId: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesGet
     */
    perPage?: number
    /**
     * ID of a last subtitle on previous page
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesGet
     */
    lastId?: string
}

export interface FilesApiFilesV1AssetsAssetIdSubtitlesLanguageCcGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesLanguageCcGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesLanguageCcGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesLanguageCcGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesLanguageCcGet
     */
    language: string
}

export interface FilesApiFilesV1AssetsAssetIdSubtitlesLanguageCcWebvttGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesLanguageCcWebvttGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesLanguageCcWebvttGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesLanguageCcWebvttGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesLanguageCcWebvttGet
     */
    language: string
}

export interface FilesApiFilesV1AssetsAssetIdSubtitlesLanguageGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesLanguageGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesLanguageGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesLanguageGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesLanguageGet
     */
    language: string
}

export interface FilesApiFilesV1AssetsAssetIdSubtitlesLanguageWebvttGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesLanguageWebvttGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesLanguageWebvttGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesLanguageWebvttGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesLanguageWebvttGet
     */
    language: string
}

export interface FilesApiFilesV1AssetsAssetIdSubtitlesPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesPost
     */
    assetId: string
    /**
     * body
     * @type SubtitleSchema
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesPost
     */
    subtitleSchema: SubtitleSchema
}

export interface FilesApiFilesV1AssetsAssetIdSubtitlesSubtitleIdCcDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesSubtitleIdCcDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesSubtitleIdCcDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesSubtitleIdCcDelete
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesSubtitleIdCcDelete
     */
    subtitleId: string
}

export interface FilesApiFilesV1AssetsAssetIdSubtitlesSubtitleIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesSubtitleIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesSubtitleIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesSubtitleIdDelete
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesSubtitleIdDelete
     */
    subtitleId: string
}

export interface FilesApiFilesV1AssetsAssetIdSubtitlesSubtitleIdGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesSubtitleIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesSubtitleIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesSubtitleIdGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesSubtitleIdGet
     */
    subtitleId: string
}

export interface FilesApiFilesV1AssetsAssetIdSubtitlesSubtitleIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesSubtitleIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesSubtitleIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesSubtitleIdPatch
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesSubtitleIdPatch
     */
    subtitleId: string
    /**
     * body
     * @type SubtitleSchema
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesSubtitleIdPatch
     */
    subtitleSchema: SubtitleSchema
}

export interface FilesApiFilesV1AssetsAssetIdSubtitlesSubtitleIdPutRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesSubtitleIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesSubtitleIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesSubtitleIdPut
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesSubtitleIdPut
     */
    subtitleId: string
    /**
     * body
     * @type SubtitleSchema
     * @memberof FilesApifilesV1AssetsAssetIdSubtitlesSubtitleIdPut
     */
    subtitleSchema: SubtitleSchema
}

export interface FilesApiFilesV1AssetsAssetIdTemporaryFileSetsFileSetIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdTemporaryFileSetsFileSetIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdTemporaryFileSetsFileSetIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdTemporaryFileSetsFileSetIdDelete
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdTemporaryFileSetsFileSetIdDelete
     */
    fileSetId: string
    /**
     * 
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdTemporaryFileSetsFileSetIdDelete
     */
    deleteCloudObjects?: boolean
}

export interface FilesApiFilesV1AssetsAssetIdTemporaryFileSetsFileSetIdFilesGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdTemporaryFileSetsFileSetIdFilesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdTemporaryFileSetsFileSetIdFilesGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdTemporaryFileSetsFileSetIdFilesGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdTemporaryFileSetsFileSetIdFilesGet
     */
    fileSetId: string
    /**
     * Set to false if you don\&#39;t need a URL, will speed things up
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdTemporaryFileSetsFileSetIdFilesGet
     */
    generateSignedUrl?: boolean
}

export interface FilesApiFilesV1AssetsAssetIdTemporaryFileSetsPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdTemporaryFileSetsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdTemporaryFileSetsPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdTemporaryFileSetsPost
     */
    assetId: string
    /**
     * body
     * @type TemporaryFileSetSchema
     * @memberof FilesApifilesV1AssetsAssetIdTemporaryFileSetsPost
     */
    temporaryFileSetSchema: TemporaryFileSetSchema
}

export interface FilesApiFilesV1AssetsAssetIdTemporaryFilesFileIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdTemporaryFilesFileIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdTemporaryFilesFileIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdTemporaryFilesFileIdPatch
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdTemporaryFilesFileIdPatch
     */
    fileId: string
    /**
     * body
     * @type FileSchema
     * @memberof FilesApifilesV1AssetsAssetIdTemporaryFilesFileIdPatch
     */
    fileSchema: FileSchema
}

export interface FilesApiFilesV1AssetsAssetIdTemporaryFilesFileIdPutRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdTemporaryFilesFileIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdTemporaryFilesFileIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdTemporaryFilesFileIdPut
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdTemporaryFilesFileIdPut
     */
    fileId: string
    /**
     * body
     * @type FileSchema
     * @memberof FilesApifilesV1AssetsAssetIdTemporaryFilesFileIdPut
     */
    fileSchema: FileSchema
}

export interface FilesApiFilesV1AssetsAssetIdTemporaryFilesPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdTemporaryFilesPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdTemporaryFilesPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdTemporaryFilesPost
     */
    assetId: string
    /**
     * body
     * @type FileSchema
     * @memberof FilesApifilesV1AssetsAssetIdTemporaryFilesPost
     */
    fileSchema: FileSchema
    /**
     * 
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdTemporaryFilesPost
     */
    store?: boolean
}

export interface FilesApiFilesV1AssetsAssetIdVersionsAllFileSetsDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsAllFileSetsDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsAllFileSetsDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsAllFileSetsDelete
     */
    assetId: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1AssetsAssetIdVersionsAllFileSetsDelete
     */
    perPage?: number
    /**
     * ID of a last file set on previous page
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsAllFileSetsDelete
     */
    lastId?: string
}

export interface FilesApiFilesV1AssetsAssetIdVersionsAllFilesDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsAllFilesDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsAllFilesDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsAllFilesDelete
     */
    assetId: string
}

export interface FilesApiFilesV1AssetsAssetIdVersionsAllFormatsDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsAllFormatsDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsAllFormatsDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsAllFormatsDelete
     */
    assetId: string
}

export interface FilesApiFilesV1AssetsAssetIdVersionsAllKeyframesDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsAllKeyframesDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsAllKeyframesDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsAllKeyframesDelete
     */
    assetId: string
}

export interface FilesApiFilesV1AssetsAssetIdVersionsAllProxiesDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsAllProxiesDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsAllProxiesDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsAllProxiesDelete
     */
    assetId: string
}

export interface FilesApiFilesV1AssetsAssetIdVersionsAllSubtitlesDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsAllSubtitlesDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsAllSubtitlesDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsAllSubtitlesDelete
     */
    assetId: string
}

export interface FilesApiFilesV1AssetsAssetIdVersionsVersionIdFileSetsDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFileSetsDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFileSetsDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFileSetsDelete
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFileSetsDelete
     */
    versionId: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFileSetsDelete
     */
    perPage?: number
    /**
     * ID of a last file set on previous page
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFileSetsDelete
     */
    lastId?: string
}

export interface FilesApiFilesV1AssetsAssetIdVersionsVersionIdFileSetsGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFileSetsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFileSetsGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFileSetsGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFileSetsGet
     */
    versionId: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFileSetsGet
     */
    perPage?: number
    /**
     * ID of a last file set on previous page
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFileSetsGet
     */
    lastId?: string
    /**
     * Set to true if you need a total amount of files in a file set
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFileSetsGet
     */
    fileCount?: boolean
}

export interface FilesApiFilesV1AssetsAssetIdVersionsVersionIdFilesDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFilesDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFilesDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFilesDelete
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFilesDelete
     */
    versionId: string
}

export interface FilesApiFilesV1AssetsAssetIdVersionsVersionIdFilesGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFilesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFilesGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFilesGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFilesGet
     */
    versionId: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFilesGet
     */
    perPage?: number
    /**
     * Set to False if you do not need a URL, will slow things down otherwise
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFilesGet
     */
    generateSignedUrl?: boolean
    /**
     * Set to attachment if you want a download link. Note that this will not create a download in asset history
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFilesGet
     */
    contentDisposition?: string
    /**
     * ID of a last file on previous page
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFilesGet
     */
    lastId?: string
}

export interface FilesApiFilesV1AssetsAssetIdVersionsVersionIdFormatsDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFormatsDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFormatsDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFormatsDelete
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFormatsDelete
     */
    versionId: string
}

export interface FilesApiFilesV1AssetsAssetIdVersionsVersionIdFormatsGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFormatsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFormatsGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFormatsGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFormatsGet
     */
    versionId: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFormatsGet
     */
    perPage?: number
    /**
     * ID of a last format on previous page
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdFormatsGet
     */
    lastId?: string
}

export interface FilesApiFilesV1AssetsAssetIdVersionsVersionIdKeyframesDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdKeyframesDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdKeyframesDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdKeyframesDelete
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdKeyframesDelete
     */
    versionId: string
    /**
     * 
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdKeyframesDelete
     */
    keepPoster?: boolean
}

export interface FilesApiFilesV1AssetsAssetIdVersionsVersionIdKeyframesGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdKeyframesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdKeyframesGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdKeyframesGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdKeyframesGet
     */
    versionId: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdKeyframesGet
     */
    perPage?: number
    /**
     * Set to false if you don\&#39;t need a URL, will speed things up
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdKeyframesGet
     */
    generateSignedUrl?: boolean
    /**
     * Set to attachment if you do not want a download link
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdKeyframesGet
     */
    contentDisposition?: string
    /**
     * ID of a last keyframe on previous page
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdKeyframesGet
     */
    lastId?: string
}

export interface FilesApiFilesV1AssetsAssetIdVersionsVersionIdProxiesDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdProxiesDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdProxiesDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdProxiesDelete
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdProxiesDelete
     */
    versionId: string
}

export interface FilesApiFilesV1AssetsAssetIdVersionsVersionIdProxiesGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdProxiesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdProxiesGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdProxiesGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdProxiesGet
     */
    versionId: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdProxiesGet
     */
    perPage?: number
    /**
     * Set to false if you don\&#39;t need a URL, will speed things up
     * @type boolean
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdProxiesGet
     */
    generateSignedUrl?: boolean
    /**
     * Set to attachment if you want a download link
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdProxiesGet
     */
    contentDisposition?: string
    /**
     * ID of a last proxy on previous page
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdProxiesGet
     */
    lastId?: string
}

export interface FilesApiFilesV1AssetsAssetIdVersionsVersionIdSubtitlesDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdSubtitlesDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdSubtitlesDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdSubtitlesDelete
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdSubtitlesDelete
     */
    versionId: string
}

export interface FilesApiFilesV1AssetsAssetIdVersionsVersionIdSubtitlesGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdSubtitlesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdSubtitlesGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdSubtitlesGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdSubtitlesGet
     */
    versionId: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdSubtitlesGet
     */
    perPage?: number
    /**
     * ID of a last subtitle on previous page
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdSubtitlesGet
     */
    lastId?: string
}

export interface FilesApiFilesV1AssetsAssetIdVersionsVersionIdSubtitlesLanguageCcWebvttGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdSubtitlesLanguageCcWebvttGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdSubtitlesLanguageCcWebvttGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdSubtitlesLanguageCcWebvttGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdSubtitlesLanguageCcWebvttGet
     */
    versionId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdSubtitlesLanguageCcWebvttGet
     */
    language: string
}

export interface FilesApiFilesV1AssetsAssetIdVersionsVersionIdSubtitlesLanguageWebvttGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdSubtitlesLanguageWebvttGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdSubtitlesLanguageWebvttGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdSubtitlesLanguageWebvttGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdSubtitlesLanguageWebvttGet
     */
    versionId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsAssetIdVersionsVersionIdSubtitlesLanguageWebvttGet
     */
    language: string
}

export interface FilesApiFilesV1AssetsBulkKeyframesPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsBulkKeyframesPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsBulkKeyframesPost
     */
    appID: string
    /**
     * body
     * @type BulkTranscodeSchema
     * @memberof FilesApifilesV1AssetsBulkKeyframesPost
     */
    bulkTranscodeSchema: BulkTranscodeSchema
}

export interface FilesApiFilesV1AssetsExportLocationsExportLocationIdPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsExportLocationsExportLocationIdPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1AssetsExportLocationsExportLocationIdPost
     */
    exportLocationId: string
    /**
     * body
     * @type AssetBatchExportSchema
     * @memberof FilesApifilesV1AssetsExportLocationsExportLocationIdPost
     */
    assetBatchExportSchema: AssetBatchExportSchema
    /**
     * Enable transfer through iconik host (creates egress)
     * @type boolean
     * @memberof FilesApifilesV1AssetsExportLocationsExportLocationIdPost
     */
    allowHostTransfer?: boolean
}

export interface FilesApiFilesV1CollectionsCollectionIdCustomKeyframePosterIdPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1CollectionsCollectionIdCustomKeyframePosterIdPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1CollectionsCollectionIdCustomKeyframePosterIdPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1CollectionsCollectionIdCustomKeyframePosterIdPost
     */
    collectionId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1CollectionsCollectionIdCustomKeyframePosterIdPost
     */
    posterId: string
    /**
     * set to false to keep current custom_poster and custom_keyframe on asset
     * @type boolean
     * @memberof FilesApifilesV1CollectionsCollectionIdCustomKeyframePosterIdPost
     */
    overwrite?: boolean
}

export interface FilesApiFilesV1CollectionsCollectionIdExportLocationsExportLocationIdPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1CollectionsCollectionIdExportLocationsExportLocationIdPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1CollectionsCollectionIdExportLocationsExportLocationIdPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1CollectionsCollectionIdExportLocationsExportLocationIdPost
     */
    collectionId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1CollectionsCollectionIdExportLocationsExportLocationIdPost
     */
    exportLocationId: string
    /**
     * body
     * @type CollectionExportSchema
     * @memberof FilesApifilesV1CollectionsCollectionIdExportLocationsExportLocationIdPost
     */
    collectionExportSchema: CollectionExportSchema
    /**
     * Enable transfer through iconik host (creates egress)
     * @type boolean
     * @memberof FilesApifilesV1CollectionsCollectionIdExportLocationsExportLocationIdPost
     */
    allowHostTransfer?: boolean
}

export interface FilesApiFilesV1CollectionsCollectionIdKeyframesGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1CollectionsCollectionIdKeyframesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1CollectionsCollectionIdKeyframesGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1CollectionsCollectionIdKeyframesGet
     */
    collectionId: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1CollectionsCollectionIdKeyframesGet
     */
    perPage?: number
    /**
     * Set to false if you don\&#39;t need a URL, will speed things up
     * @type boolean
     * @memberof FilesApifilesV1CollectionsCollectionIdKeyframesGet
     */
    generateSignedUrl?: boolean
    /**
     * ID of a last collection keyframe on previous page
     * @type string
     * @memberof FilesApifilesV1CollectionsCollectionIdKeyframesGet
     */
    lastId?: string
}

export interface FilesApiFilesV1CollectionsCollectionIdKeyframesKeyframeIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1CollectionsCollectionIdKeyframesKeyframeIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1CollectionsCollectionIdKeyframesKeyframeIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1CollectionsCollectionIdKeyframesKeyframeIdDelete
     */
    collectionId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1CollectionsCollectionIdKeyframesKeyframeIdDelete
     */
    keyframeId: string
    /**
     * set to true to force a regeneration of default keyframes
     * @type boolean
     * @memberof FilesApifilesV1CollectionsCollectionIdKeyframesKeyframeIdDelete
     */
    regenerateKeyframes?: boolean
}

export interface FilesApiFilesV1CollectionsCollectionIdKeyframesKeyframeIdGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1CollectionsCollectionIdKeyframesKeyframeIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1CollectionsCollectionIdKeyframesKeyframeIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1CollectionsCollectionIdKeyframesKeyframeIdGet
     */
    collectionId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1CollectionsCollectionIdKeyframesKeyframeIdGet
     */
    keyframeId: string
}

export interface FilesApiFilesV1CollectionsCollectionIdKeyframesKeyframeIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1CollectionsCollectionIdKeyframesKeyframeIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1CollectionsCollectionIdKeyframesKeyframeIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1CollectionsCollectionIdKeyframesKeyframeIdPatch
     */
    collectionId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1CollectionsCollectionIdKeyframesKeyframeIdPatch
     */
    keyframeId: string
    /**
     * body
     * @type CollectionKeyframeSchema
     * @memberof FilesApifilesV1CollectionsCollectionIdKeyframesKeyframeIdPatch
     */
    collectionKeyframeSchema: CollectionKeyframeSchema
}

export interface FilesApiFilesV1CollectionsCollectionIdKeyframesKeyframeIdPutRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1CollectionsCollectionIdKeyframesKeyframeIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1CollectionsCollectionIdKeyframesKeyframeIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1CollectionsCollectionIdKeyframesKeyframeIdPut
     */
    collectionId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1CollectionsCollectionIdKeyframesKeyframeIdPut
     */
    keyframeId: string
    /**
     * body
     * @type CollectionKeyframeSchema
     * @memberof FilesApifilesV1CollectionsCollectionIdKeyframesKeyframeIdPut
     */
    collectionKeyframeSchema: CollectionKeyframeSchema
}

export interface FilesApiFilesV1CollectionsCollectionIdKeyframesPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1CollectionsCollectionIdKeyframesPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1CollectionsCollectionIdKeyframesPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1CollectionsCollectionIdKeyframesPost
     */
    collectionId: string
    /**
     * body
     * @type CollectionKeyframeSchema
     * @memberof FilesApifilesV1CollectionsCollectionIdKeyframesPost
     */
    collectionKeyframeSchema: CollectionKeyframeSchema
}

export interface FilesApiFilesV1DeleteQueueFileSetsDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1DeleteQueueFileSetsDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1DeleteQueueFileSetsDelete
     */
    authToken: string
    /**
     * body
     * @type DeleteQueueSchema
     * @memberof FilesApifilesV1DeleteQueueFileSetsDelete
     */
    deleteQueueSchema: DeleteQueueSchema
}

export interface FilesApiFilesV1DeleteQueueFileSetsGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1DeleteQueueFileSetsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1DeleteQueueFileSetsGet
     */
    authToken: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1DeleteQueueFileSetsGet
     */
    perPage?: number
    /**
     * Which page number to fetch
     * @type number
     * @memberof FilesApifilesV1DeleteQueueFileSetsGet
     */
    page?: number
    /**
     * A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc
     * @type string
     * @memberof FilesApifilesV1DeleteQueueFileSetsGet
     */
    sort?: string
    /**
     * Search using query
     * @type string
     * @memberof FilesApifilesV1DeleteQueueFileSetsGet
     */
    query?: string
    /**
     * filter by field_name
     * @type string
     * @memberof FilesApifilesV1DeleteQueueFileSetsGet
     */
    fieldName?: string
}

export interface FilesApiFilesV1DeleteQueueFileSetsPurgeAllPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1DeleteQueueFileSetsPurgeAllPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1DeleteQueueFileSetsPurgeAllPost
     */
    authToken: string
}

export interface FilesApiFilesV1DeleteQueueFileSetsPurgePostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1DeleteQueueFileSetsPurgePost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1DeleteQueueFileSetsPurgePost
     */
    authToken: string
    /**
     * body
     * @type DeleteQueueSchema
     * @memberof FilesApifilesV1DeleteQueueFileSetsPurgePost
     */
    deleteQueueSchema: DeleteQueueSchema
}

export interface FilesApiFilesV1DeleteQueueFormatsDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1DeleteQueueFormatsDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1DeleteQueueFormatsDelete
     */
    authToken: string
    /**
     * body
     * @type DeleteQueueSchema
     * @memberof FilesApifilesV1DeleteQueueFormatsDelete
     */
    deleteQueueSchema: DeleteQueueSchema
}

export interface FilesApiFilesV1DeleteQueueFormatsGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1DeleteQueueFormatsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1DeleteQueueFormatsGet
     */
    authToken: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1DeleteQueueFormatsGet
     */
    perPage?: number
    /**
     * Which page number to fetch
     * @type number
     * @memberof FilesApifilesV1DeleteQueueFormatsGet
     */
    page?: number
    /**
     * A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc
     * @type string
     * @memberof FilesApifilesV1DeleteQueueFormatsGet
     */
    sort?: string
    /**
     * Search using query
     * @type string
     * @memberof FilesApifilesV1DeleteQueueFormatsGet
     */
    query?: string
    /**
     * filter by field_name
     * @type string
     * @memberof FilesApifilesV1DeleteQueueFormatsGet
     */
    fieldName?: string
}

export interface FilesApiFilesV1DeleteQueueFormatsPurgeAllPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1DeleteQueueFormatsPurgeAllPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1DeleteQueueFormatsPurgeAllPost
     */
    authToken: string
}

export interface FilesApiFilesV1DeleteQueueFormatsPurgePostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1DeleteQueueFormatsPurgePost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1DeleteQueueFormatsPurgePost
     */
    authToken: string
    /**
     * body
     * @type DeleteQueueSchema
     * @memberof FilesApifilesV1DeleteQueueFormatsPurgePost
     */
    deleteQueueSchema: DeleteQueueSchema
}

export interface FilesApiFilesV1ExportLocationsExportLocationIdBulkExportPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1ExportLocationsExportLocationIdBulkExportPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1ExportLocationsExportLocationIdBulkExportPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1ExportLocationsExportLocationIdBulkExportPost
     */
    exportLocationId: string
    /**
     * body
     * @type BulkFilesetExportSchema
     * @memberof FilesApifilesV1ExportLocationsExportLocationIdBulkExportPost
     */
    bulkFilesetExportSchema: BulkFilesetExportSchema
    /**
     * Enable transfer through iconik host (creates egress)
     * @type boolean
     * @memberof FilesApifilesV1ExportLocationsExportLocationIdBulkExportPost
     */
    allowHostTransfer?: boolean
}

export interface FilesApiFilesV1ExportLocationsExportLocationIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1ExportLocationsExportLocationIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1ExportLocationsExportLocationIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1ExportLocationsExportLocationIdDelete
     */
    exportLocationId: string
}

export interface FilesApiFilesV1ExportLocationsExportLocationIdGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1ExportLocationsExportLocationIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1ExportLocationsExportLocationIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1ExportLocationsExportLocationIdGet
     */
    exportLocationId: string
}

export interface FilesApiFilesV1ExportLocationsExportLocationIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1ExportLocationsExportLocationIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1ExportLocationsExportLocationIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1ExportLocationsExportLocationIdPatch
     */
    exportLocationId: string
    /**
     * body
     * @type ExportLocationSchema
     * @memberof FilesApifilesV1ExportLocationsExportLocationIdPatch
     */
    exportLocationSchema: ExportLocationSchema
}

export interface FilesApiFilesV1ExportLocationsExportLocationIdPutRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1ExportLocationsExportLocationIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1ExportLocationsExportLocationIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1ExportLocationsExportLocationIdPut
     */
    exportLocationId: string
    /**
     * body
     * @type ExportLocationSchema
     * @memberof FilesApifilesV1ExportLocationsExportLocationIdPut
     */
    exportLocationSchema: ExportLocationSchema
}

export interface FilesApiFilesV1ExportLocationsExportLocationIdReindexPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1ExportLocationsExportLocationIdReindexPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1ExportLocationsExportLocationIdReindexPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1ExportLocationsExportLocationIdReindexPost
     */
    exportLocationId: string
}

export interface FilesApiFilesV1ExportLocationsGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1ExportLocationsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1ExportLocationsGet
     */
    authToken: string
    /**
     * Search query
     * @type string
     * @memberof FilesApifilesV1ExportLocationsGet
     */
    query?: string
    /**
     * Filter list of id:s (comma separated)
     * @type string
     * @memberof FilesApifilesV1ExportLocationsGet
     */
    ids?: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1ExportLocationsGet
     */
    perPage?: number
    /**
     * ID of a last export_location on previous page
     * @type string
     * @memberof FilesApifilesV1ExportLocationsGet
     */
    lastId?: string
    /**
     * A comma separated list of fieldnames with order. For example - name,asc;id,desc
     * @type string
     * @memberof FilesApifilesV1ExportLocationsGet
     */
    sort?: string
}

export interface FilesApiFilesV1ExportLocationsPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1ExportLocationsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1ExportLocationsPost
     */
    authToken: string
    /**
     * body
     * @type ExportLocationSchema
     * @memberof FilesApifilesV1ExportLocationsPost
     */
    exportLocationSchema: ExportLocationSchema
}

export interface FilesApiFilesV1ExportsTemporaryFileSetsFileSetIdStoragesStorageIdPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1ExportsTemporaryFileSetsFileSetIdStoragesStorageIdPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1ExportsTemporaryFileSetsFileSetIdStoragesStorageIdPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1ExportsTemporaryFileSetsFileSetIdStoragesStorageIdPost
     */
    fileSetId: string
    /**
     * Destination storage_id
     * @type string
     * @memberof FilesApifilesV1ExportsTemporaryFileSetsFileSetIdStoragesStorageIdPost
     */
    storageId: string
    /**
     * body
     * @type CompleteExportToLocalStorageSchema
     * @memberof FilesApifilesV1ExportsTemporaryFileSetsFileSetIdStoragesStorageIdPost
     */
    completeExportToLocalStorageSchema: CompleteExportToLocalStorageSchema
}

export interface FilesApiFilesV1FileSetsFileSetIdFilesGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FileSetsFileSetIdFilesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FileSetsFileSetIdFilesGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FileSetsFileSetIdFilesGet
     */
    fileSetId: string
    /**
     * Set to false if you don\&#39;t need a URL, will speed things up
     * @type boolean
     * @memberof FilesApifilesV1FileSetsFileSetIdFilesGet
     */
    generateSignedUrl?: boolean
}

export interface FilesApiFilesV1FileSetsFileSetIdStoragesStorageIdPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FileSetsFileSetIdStoragesStorageIdPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FileSetsFileSetIdStoragesStorageIdPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FileSetsFileSetIdStoragesStorageIdPost
     */
    fileSetId: string
    /**
     * Destination storage_id
     * @type string
     * @memberof FilesApifilesV1FileSetsFileSetIdStoragesStorageIdPost
     */
    storageId: string
    /**
     * body
     * @type TransferFromStorageSchema
     * @memberof FilesApifilesV1FileSetsFileSetIdStoragesStorageIdPost
     */
    transferFromStorageSchema: TransferFromStorageSchema
    /**
     * Enable transfer through iconik host (creates egress)
     * @type boolean
     * @memberof FilesApifilesV1FileSetsFileSetIdStoragesStorageIdPost
     */
    allowHostTransfer?: boolean
}

export interface FilesApiFilesV1FileSetsFileSetIdTransfersFromStorageIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FileSetsFileSetIdTransfersFromStorageIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FileSetsFileSetIdTransfersFromStorageIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FileSetsFileSetIdTransfersFromStorageIdDelete
     */
    fileSetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FileSetsFileSetIdTransfersFromStorageIdDelete
     */
    storageId: string
    /**
     * 
     * @type boolean
     * @memberof FilesApifilesV1FileSetsFileSetIdTransfersFromStorageIdDelete
     */
    failed?: boolean
}

export interface FilesApiFilesV1FileSetsFileSetIdTransfersToStorageIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FileSetsFileSetIdTransfersToStorageIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FileSetsFileSetIdTransfersToStorageIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FileSetsFileSetIdTransfersToStorageIdDelete
     */
    fileSetId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FileSetsFileSetIdTransfersToStorageIdDelete
     */
    storageId: string
    /**
     * 
     * @type boolean
     * @memberof FilesApifilesV1FileSetsFileSetIdTransfersToStorageIdDelete
     */
    failed?: boolean
}

export interface FilesApiFilesV1FilesChecksumChecksumGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FilesChecksumChecksumGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FilesChecksumChecksumGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FilesChecksumChecksumGet
     */
    checksum: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1FilesChecksumChecksumGet
     */
    perPage?: number
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FilesChecksumChecksumGet
     */
    lastId?: string
}

export interface FilesApiFilesV1FilesFileIdDeletionsFromStorageIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FilesFileIdDeletionsFromStorageIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FilesFileIdDeletionsFromStorageIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FilesFileIdDeletionsFromStorageIdDelete
     */
    fileId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FilesFileIdDeletionsFromStorageIdDelete
     */
    storageId: string
}

export interface FilesApiFilesV1FilesMissingStoragesStorageIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FilesMissingStoragesStorageIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FilesMissingStoragesStorageIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FilesMissingStoragesStorageIdDelete
     */
    storageId: string
    /**
     * 
     * @type boolean
     * @memberof FilesApifilesV1FilesMissingStoragesStorageIdDelete
     */
    removeAssets?: boolean
}

export interface FilesApiFilesV1FilesStoragesStorageIdPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FilesStoragesStorageIdPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FilesStoragesStorageIdPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FilesStoragesStorageIdPost
     */
    storageId: string
    /**
     * body
     * @type FileExistenceCheckSchema
     * @memberof FilesApifilesV1FilesStoragesStorageIdPost
     */
    fileExistenceCheckSchema: FileExistenceCheckSchema
    /**
     * 
     * @type boolean
     * @memberof FilesApifilesV1FilesStoragesStorageIdPost
     */
    getFileSize?: boolean
}

export interface FilesApiFilesV1FormatsFormatIdStoragesStorageIdPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FormatsFormatIdStoragesStorageIdPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FormatsFormatIdStoragesStorageIdPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FormatsFormatIdStoragesStorageIdPost
     */
    formatId: string
    /**
     * Destination storage_id
     * @type string
     * @memberof FilesApifilesV1FormatsFormatIdStoragesStorageIdPost
     */
    storageId: string
    /**
     * body
     * @type TransferFromStorageSchema
     * @memberof FilesApifilesV1FormatsFormatIdStoragesStorageIdPost
     */
    transferFromStorageSchema: TransferFromStorageSchema
}

export interface FilesApiFilesV1FormatsFormatNameArchiveBulkPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FormatsFormatNameArchiveBulkPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FormatsFormatNameArchiveBulkPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FormatsFormatNameArchiveBulkPost
     */
    formatName: string
    /**
     * body
     * @type BulkFilesetArchiveSchema
     * @memberof FilesApifilesV1FormatsFormatNameArchiveBulkPost
     */
    bulkFilesetArchiveSchema: BulkFilesetArchiveSchema
}

export interface FilesApiFilesV1FormatsFormatNameRestoreBulkPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FormatsFormatNameRestoreBulkPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FormatsFormatNameRestoreBulkPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1FormatsFormatNameRestoreBulkPost
     */
    formatName: string
    /**
     * body
     * @type BulkFilesetRestoreSchema
     * @memberof FilesApifilesV1FormatsFormatNameRestoreBulkPost
     */
    bulkFilesetRestoreSchema: BulkFilesetRestoreSchema
}

export interface FilesApiFilesV1SharesStoragesStorageIdFilesGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1SharesStoragesStorageIdFilesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1SharesStoragesStorageIdFilesGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1SharesStoragesStorageIdFilesGet
     */
    storageId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1SharesStoragesStorageIdFilesGet
     */
    directoryPath: string
    /**
     * Filter by name
     * @type string
     * @memberof FilesApifilesV1SharesStoragesStorageIdFilesGet
     */
    name: string
}

export interface FilesApiFilesV1StoragesFilesReindexPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesFilesReindexPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesFilesReindexPost
     */
    authToken: string
}

export interface FilesApiFilesV1StoragesGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesGet
     */
    authToken: string
    /**
     * Which page number to fetch
     * @type number
     * @memberof FilesApifilesV1StoragesGet
     */
    page?: number
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1StoragesGet
     */
    perPage?: number
    /**
     * A comma separated list of fieldnames with order. For example - status,asc;last_scanned,desc
     * @type string
     * @memberof FilesApifilesV1StoragesGet
     */
    sort?: string
    /**
     * Filter by id
     * @type string
     * @memberof FilesApifilesV1StoragesGet
     */
    id?: string
    /**
     * Filter by name
     * @type string
     * @memberof FilesApifilesV1StoragesGet
     */
    name?: string
    /**
     * Filter by method
     * @type string
     * @memberof FilesApifilesV1StoragesGet
     */
    method?: string
    /**
     * Filter by status
     * @type string
     * @memberof FilesApifilesV1StoragesGet
     */
    status?: string
    /**
     * Filter by purpose
     * @type string
     * @memberof FilesApifilesV1StoragesGet
     */
    purpose?: string
    /**
     * Filter by last_scanned
     * @type string
     * @memberof FilesApifilesV1StoragesGet
     */
    lastScanned?: string
    /**
     * Filter by scanner_status
     * @type string
     * @memberof FilesApifilesV1StoragesGet
     */
    scannerStatus?: string
    /**
     * Filter by any of the above with wildcard support
     * @type string
     * @memberof FilesApifilesV1StoragesGet
     */
    query?: string
    /**
     * Filter list of id:s (comma separated)
     * @type string
     * @memberof FilesApifilesV1StoragesGet
     */
    ids?: string
}

export interface FilesApiFilesV1StoragesIsgLatestVersionGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesIsgLatestVersionGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesIsgLatestVersionGet
     */
    authToken: string
}

export interface FilesApiFilesV1StoragesMatchingPurposeGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesMatchingPurposeGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesMatchingPurposeGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesMatchingPurposeGet
     */
    purpose: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesMatchingPurposeGet
     */
    storageId?: string
}

export interface FilesApiFilesV1StoragesMatchingPurposeMethodMethodGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesMatchingPurposeMethodMethodGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesMatchingPurposeMethodMethodGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesMatchingPurposeMethodMethodGet
     */
    purpose: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesMatchingPurposeMethodMethodGet
     */
    method: string
}

export interface FilesApiFilesV1StoragesPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesPost
     */
    authToken: string
    /**
     * body
     * @type StorageSchema
     * @memberof FilesApifilesV1StoragesPost
     */
    storageSchema: StorageSchema
}

export interface FilesApiFilesV1StoragesPurposeDefaultGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesPurposeDefaultGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesPurposeDefaultGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesPurposeDefaultGet
     */
    purpose: string
}

export interface FilesApiFilesV1StoragesReindexPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesReindexPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesReindexPost
     */
    authToken: string
}

export interface FilesApiFilesV1StoragesStorageIdAutoScanDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdAutoScanDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdAutoScanDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdAutoScanDelete
     */
    storageId: string
}

export interface FilesApiFilesV1StoragesStorageIdAutoScanGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdAutoScanGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdAutoScanGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdAutoScanGet
     */
    storageId: string
}

export interface FilesApiFilesV1StoragesStorageIdAutoScanPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdAutoScanPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdAutoScanPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdAutoScanPost
     */
    storageId: string
    /**
     * body
     * @type StorageAutoScanSchema
     * @memberof FilesApifilesV1StoragesStorageIdAutoScanPost
     */
    storageAutoScanSchema: StorageAutoScanSchema
}

export interface FilesApiFilesV1StoragesStorageIdBulkPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdBulkPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdBulkPost
     */
    appID: string
    /**
     * Destination storage_id
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdBulkPost
     */
    storageId: string
    /**
     * body
     * @type BulkTransferToStorageSchema
     * @memberof FilesApifilesV1StoragesStorageIdBulkPost
     */
    bulkTransferToStorageSchema: BulkTransferToStorageSchema
    /**
     * Enable transfer through iconik host (creates egress)
     * @type boolean
     * @memberof FilesApifilesV1StoragesStorageIdBulkPost
     */
    allowHostTransfer?: boolean
}

export interface FilesApiFilesV1StoragesStorageIdDefaultDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdDefaultDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdDefaultDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdDefaultDelete
     */
    storageId: string
}

export interface FilesApiFilesV1StoragesStorageIdDefaultPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdDefaultPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdDefaultPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdDefaultPost
     */
    storageId: string
}

export interface FilesApiFilesV1StoragesStorageIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdDelete
     */
    storageId: string
}

export interface FilesApiFilesV1StoragesStorageIdDeletionsDeletionIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdDeletionsDeletionIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdDeletionsDeletionIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdDeletionsDeletionIdDelete
     */
    storageId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdDeletionsDeletionIdDelete
     */
    deletionId: string
}

export interface FilesApiFilesV1StoragesStorageIdDeletionsFromGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdDeletionsFromGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdDeletionsFromGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdDeletionsFromGet
     */
    storageId: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1StoragesStorageIdDeletionsFromGet
     */
    perPage?: number
    /**
     * ID of a last file deletion entity on previous page
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdDeletionsFromGet
     */
    lastId?: string
}

export interface FilesApiFilesV1StoragesStorageIdDeletionsGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdDeletionsGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdDeletionsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdDeletionsGet
     */
    storageId: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1StoragesStorageIdDeletionsGet
     */
    perPage?: number
    /**
     * ID of a last file deletion entity on previous page
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdDeletionsGet
     */
    lastId?: string
}

export interface FilesApiFilesV1StoragesStorageIdFilesDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesDelete
     */
    storageId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesDelete
     */
    path?: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesDelete
     */
    pathSeparator?: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesDelete
     */
    directoryPath?: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesDelete
     */
    checksum?: string
    /**
     * Filter by id
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesDelete
     */
    id?: string
    /**
     * Filter by name
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesDelete
     */
    name?: string
    /**
     * Filter by type
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesDelete
     */
    type?: string
    /**
     * Filter by status
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesDelete
     */
    status?: string
    /**
     * Filter by date_created
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesDelete
     */
    dateCreated?: string
    /**
     * Filter by date_modified
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesDelete
     */
    dateModified?: string
}

export interface FilesApiFilesV1StoragesStorageIdFilesFileIdReindexPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesFileIdReindexPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesFileIdReindexPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesFileIdReindexPost
     */
    storageId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesFileIdReindexPost
     */
    fileId: string
}

export interface FilesApiFilesV1StoragesStorageIdFilesGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesGet
     */
    storageId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesGet
     */
    path?: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesGet
     */
    pathSeparator?: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesGet
     */
    directoryPath?: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesGet
     */
    checksum?: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1StoragesStorageIdFilesGet
     */
    perPage?: number
    /**
     * Which page number to fetch
     * @type number
     * @memberof FilesApifilesV1StoragesStorageIdFilesGet
     */
    page?: number
    /**
     * If true passed then uses scroll pagination instead of default one
     * @type boolean
     * @memberof FilesApifilesV1StoragesStorageIdFilesGet
     */
    scroll?: boolean
    /**
     * In order to get next batch of results using scroll pagination the scroll_id is required
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesGet
     */
    scrollId?: string
    /**
     * A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesGet
     */
    sort?: string
    /**
     * Filter by id
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesGet
     */
    id?: string
    /**
     * Filter by name
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesGet
     */
    name?: string
    /**
     * Filter by type
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesGet
     */
    type?: string
    /**
     * Filter by status
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesGet
     */
    status?: string
    /**
     * Filter by date_created
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesGet
     */
    dateCreated?: string
    /**
     * Filter by date_modified
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesGet
     */
    dateModified?: string
}

export interface FilesApiFilesV1StoragesStorageIdFilesPatchRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesPatch
     */
    storageId: string
    /**
     * body
     * @type FileBaseSchema
     * @memberof FilesApifilesV1StoragesStorageIdFilesPatch
     */
    fileBaseSchema: FileBaseSchema
}

export interface FilesApiFilesV1StoragesStorageIdFilesPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesPost
     */
    storageId: string
    /**
     * body
     * @type FileBaseSchema
     * @memberof FilesApifilesV1StoragesStorageIdFilesPost
     */
    fileBaseSchema: FileBaseSchema
}

export interface FilesApiFilesV1StoragesStorageIdFilesPutRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesPut
     */
    storageId: string
    /**
     * body
     * @type FileBaseSchema
     * @memberof FilesApifilesV1StoragesStorageIdFilesPut
     */
    fileBaseSchema: FileBaseSchema
}

export interface FilesApiFilesV1StoragesStorageIdFilesReindexPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesReindexPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesReindexPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdFilesReindexPost
     */
    storageId: string
}

export interface FilesApiFilesV1StoragesStorageIdGatewayEventsEventIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdGatewayEventsEventIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdGatewayEventsEventIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdGatewayEventsEventIdDelete
     */
    storageId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdGatewayEventsEventIdDelete
     */
    eventId: string
}

export interface FilesApiFilesV1StoragesStorageIdGatewayEventsGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdGatewayEventsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdGatewayEventsGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdGatewayEventsGet
     */
    storageId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdGatewayEventsGet
     */
    lastId: string
}

export interface FilesApiFilesV1StoragesStorageIdGatewayEventsPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdGatewayEventsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdGatewayEventsPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdGatewayEventsPost
     */
    storageId: string
    /**
     * body
     * @type IconikStorageGatewayEventSchema
     * @memberof FilesApifilesV1StoragesStorageIdGatewayEventsPost
     */
    iconikStorageGatewayEventSchema: IconikStorageGatewayEventSchema
}

export interface FilesApiFilesV1StoragesStorageIdGatewayEventsPurgePostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdGatewayEventsPurgePost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdGatewayEventsPurgePost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdGatewayEventsPurgePost
     */
    storageId: string
    /**
     * body
     * @type IconikStorageGatewayEventsPurgeSchema
     * @memberof FilesApifilesV1StoragesStorageIdGatewayEventsPurgePost
     */
    iconikStorageGatewayEventsPurgeSchema: IconikStorageGatewayEventsPurgeSchema
}

export interface FilesApiFilesV1StoragesStorageIdGatewayReportGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdGatewayReportGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdGatewayReportGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdGatewayReportGet
     */
    storageId: string
}

export interface FilesApiFilesV1StoragesStorageIdGatewayReportPutRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdGatewayReportPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdGatewayReportPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdGatewayReportPut
     */
    storageId: string
    /**
     * body
     * @type GatewayReportSchema
     * @memberof FilesApifilesV1StoragesStorageIdGatewayReportPut
     */
    gatewayReportSchema: GatewayReportSchema
}

export interface FilesApiFilesV1StoragesStorageIdGatewayStatusPutRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdGatewayStatusPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdGatewayStatusPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdGatewayStatusPut
     */
    storageId: string
    /**
     * body
     * @type GatewayStatusSchema
     * @memberof FilesApifilesV1StoragesStorageIdGatewayStatusPut
     */
    gatewayStatusSchema: GatewayStatusSchema
}

export interface FilesApiFilesV1StoragesStorageIdGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdGet
     */
    storageId: string
}

export interface FilesApiFilesV1StoragesStorageIdLogsPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdLogsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdLogsPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdLogsPost
     */
    storageId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdLogsPost
     */
    filename: string
}

export interface FilesApiFilesV1StoragesStorageIdObjectTypeFilesDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdObjectTypeFilesDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdObjectTypeFilesDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdObjectTypeFilesDelete
     */
    storageId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdObjectTypeFilesDelete
     */
    objectType: string
    /**
     * body
     * @type StorageFilesDeleteBulkSchema
     * @memberof FilesApifilesV1StoragesStorageIdObjectTypeFilesDelete
     */
    storageFilesDeleteBulkSchema: StorageFilesDeleteBulkSchema
}

export interface FilesApiFilesV1StoragesStorageIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdPatch
     */
    storageId: string
    /**
     * body
     * @type StorageSchema
     * @memberof FilesApifilesV1StoragesStorageIdPatch
     */
    storageSchema: StorageSchema
}

export interface FilesApiFilesV1StoragesStorageIdPutRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdPut
     */
    storageId: string
    /**
     * body
     * @type StorageSchema
     * @memberof FilesApifilesV1StoragesStorageIdPut
     */
    storageSchema: StorageSchema
}

export interface FilesApiFilesV1StoragesStorageIdReindexPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdReindexPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdReindexPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdReindexPost
     */
    storageId: string
}

export interface FilesApiFilesV1StoragesStorageIdScanPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdScanPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdScanPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdScanPost
     */
    storageId: string
    /**
     * body
     * @type StorageScanSchema
     * @memberof FilesApifilesV1StoragesStorageIdScanPost
     */
    storageScanSchema: StorageScanSchema
}

export interface FilesApiFilesV1StoragesStorageIdSearchDocumentPutRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdSearchDocumentPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdSearchDocumentPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdSearchDocumentPut
     */
    storageId: string
    /**
     * body
     * @type StorageSchema
     * @memberof FilesApifilesV1StoragesStorageIdSearchDocumentPut
     */
    storageSchema: StorageSchema
}

export interface FilesApiFilesV1StoragesStorageIdTemporaryFilesGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTemporaryFilesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTemporaryFilesGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTemporaryFilesGet
     */
    storageId: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1StoragesStorageIdTemporaryFilesGet
     */
    perPage?: number
    /**
     * ID of a last file on previous page
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTemporaryFilesGet
     */
    lastId?: string
}

export interface FilesApiFilesV1StoragesStorageIdTranscodersGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTranscodersGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTranscodersGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTranscodersGet
     */
    storageId: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1StoragesStorageIdTranscodersGet
     */
    perPage?: number
    /**
     * ID of a last transcoder on previous page
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTranscodersGet
     */
    lastId?: string
}

export interface FilesApiFilesV1StoragesStorageIdTranscodersTranscoderIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTranscodersTranscoderIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTranscodersTranscoderIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTranscodersTranscoderIdDelete
     */
    storageId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTranscodersTranscoderIdDelete
     */
    transcoderId: string
}

export interface FilesApiFilesV1StoragesStorageIdTranscodersTranscoderIdPutRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTranscodersTranscoderIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTranscodersTranscoderIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTranscodersTranscoderIdPut
     */
    storageId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTranscodersTranscoderIdPut
     */
    transcoderId: string
}

export interface FilesApiFilesV1StoragesStorageIdTransfersFromGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTransfersFromGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTransfersFromGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTransfersFromGet
     */
    storageId: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1StoragesStorageIdTransfersFromGet
     */
    perPage?: number
    /**
     * ID of a last transfer on previous page
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTransfersFromGet
     */
    lastId?: string
}

export interface FilesApiFilesV1StoragesStorageIdTransfersFromTransferIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTransfersFromTransferIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTransfersFromTransferIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTransfersFromTransferIdDelete
     */
    storageId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTransfersFromTransferIdDelete
     */
    transferId: string
    /**
     * 
     * @type boolean
     * @memberof FilesApifilesV1StoragesStorageIdTransfersFromTransferIdDelete
     */
    failed?: boolean
    /**
     * 
     * @type boolean
     * @memberof FilesApifilesV1StoragesStorageIdTransfersFromTransferIdDelete
     */
    completed?: boolean
}

export interface FilesApiFilesV1StoragesStorageIdTransfersFromTransferIdGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTransfersFromTransferIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTransfersFromTransferIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTransfersFromTransferIdGet
     */
    storageId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTransfersFromTransferIdGet
     */
    transferId: string
}

export interface FilesApiFilesV1StoragesStorageIdTransfersToGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTransfersToGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTransfersToGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTransfersToGet
     */
    storageId: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1StoragesStorageIdTransfersToGet
     */
    perPage?: number
    /**
     * ID of a last transfer on previous page
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTransfersToGet
     */
    lastId?: string
}

export interface FilesApiFilesV1StoragesStorageIdTransfersToTransferIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTransfersToTransferIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTransfersToTransferIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTransfersToTransferIdDelete
     */
    storageId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTransfersToTransferIdDelete
     */
    transferId: string
    /**
     * 
     * @type boolean
     * @memberof FilesApifilesV1StoragesStorageIdTransfersToTransferIdDelete
     */
    failed?: boolean
    /**
     * 
     * @type boolean
     * @memberof FilesApifilesV1StoragesStorageIdTransfersToTransferIdDelete
     */
    completed?: boolean
}

export interface FilesApiFilesV1StoragesStorageIdTransfersToTransferIdGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTransfersToTransferIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTransfersToTransferIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTransfersToTransferIdGet
     */
    storageId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdTransfersToTransferIdGet
     */
    transferId: string
}

export interface FilesApiFilesV1StoragesStorageIdVerificationsAccessGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdVerificationsAccessGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdVerificationsAccessGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdVerificationsAccessGet
     */
    storageId: string
}

export interface FilesApiFilesV1StoragesStorageIdVerificationsPermissionsGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdVerificationsPermissionsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdVerificationsPermissionsGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1StoragesStorageIdVerificationsPermissionsGet
     */
    storageId: string
}

export interface FilesApiFilesV1TranscodersGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TranscodersGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TranscodersGet
     */
    authToken: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1TranscodersGet
     */
    perPage?: number
    /**
     * Which page number to fetch
     * @type number
     * @memberof FilesApifilesV1TranscodersGet
     */
    page?: number
    /**
     * Search query
     * @type string
     * @memberof FilesApifilesV1TranscodersGet
     */
    query?: string
    /**
     * Filter list of id:s (comma separated)
     * @type string
     * @memberof FilesApifilesV1TranscodersGet
     */
    ids?: string
    /**
     * A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc
     * @type string
     * @memberof FilesApifilesV1TranscodersGet
     */
    sort?: string
}

export interface FilesApiFilesV1TranscodersPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TranscodersPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TranscodersPost
     */
    authToken: string
    /**
     * body
     * @type TranscoderSchema
     * @memberof FilesApifilesV1TranscodersPost
     */
    transcoderSchema: TranscoderSchema
}

export interface FilesApiFilesV1TranscodersTranscoderIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TranscodersTranscoderIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TranscodersTranscoderIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TranscodersTranscoderIdDelete
     */
    transcoderId: string
}

export interface FilesApiFilesV1TranscodersTranscoderIdGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TranscodersTranscoderIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TranscodersTranscoderIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TranscodersTranscoderIdGet
     */
    transcoderId: string
}

export interface FilesApiFilesV1TranscodersTranscoderIdLogsPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TranscodersTranscoderIdLogsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TranscodersTranscoderIdLogsPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TranscodersTranscoderIdLogsPost
     */
    transcoderId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TranscodersTranscoderIdLogsPost
     */
    filename: string
}

export interface FilesApiFilesV1TranscodersTranscoderIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TranscodersTranscoderIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TranscodersTranscoderIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TranscodersTranscoderIdPatch
     */
    transcoderId: string
    /**
     * body
     * @type TranscoderSchema
     * @memberof FilesApifilesV1TranscodersTranscoderIdPatch
     */
    transcoderSchema: TranscoderSchema
}

export interface FilesApiFilesV1TranscodersTranscoderIdPutRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TranscodersTranscoderIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TranscodersTranscoderIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TranscodersTranscoderIdPut
     */
    transcoderId: string
    /**
     * body
     * @type TranscoderSchema
     * @memberof FilesApifilesV1TranscodersTranscoderIdPut
     */
    transcoderSchema: TranscoderSchema
}

export interface FilesApiFilesV1TranscodersTranscoderIdReindexPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TranscodersTranscoderIdReindexPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TranscodersTranscoderIdReindexPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TranscodersTranscoderIdReindexPost
     */
    transcoderId: string
}

export interface FilesApiFilesV1TranscodersTranscoderIdStoragesGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TranscodersTranscoderIdStoragesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TranscodersTranscoderIdStoragesGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TranscodersTranscoderIdStoragesGet
     */
    transcoderId: string
    /**
     * The number of items for each page
     * @type number
     * @memberof FilesApifilesV1TranscodersTranscoderIdStoragesGet
     */
    perPage?: number
    /**
     * ID of a last storage on previous page
     * @type string
     * @memberof FilesApifilesV1TranscodersTranscoderIdStoragesGet
     */
    lastId?: string
}

export interface FilesApiFilesV1TransfersTransferIdUrlsPostRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TransfersTransferIdUrlsPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TransfersTransferIdUrlsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TransfersTransferIdUrlsPost
     */
    transferId: string
}

export interface FilesApiFilesV1TransfersTransferIdUrlsVerifyGetRequest {
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TransfersTransferIdUrlsVerifyGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TransfersTransferIdUrlsVerifyGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TransfersTransferIdUrlsVerifyGet
     */
    transferId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TransfersTransferIdUrlsVerifyGet
     */
    userId: string
    /**
     * 
     * @type string
     * @memberof FilesApifilesV1TransfersTransferIdUrlsVerifyGet
     */
    signature: string
}

export class ObjectFilesApi {
    private api: ObservableFilesApi

    public constructor(configuration: Configuration, requestFactory?: FilesApiRequestFactory, responseProcessor?: FilesApiResponseProcessor) {
        this.api = new ObservableFilesApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * 
     * Get analysis profiles
     * @param param the request object
     */
    public filesV1AnalysisProfilesGetWithHttpInfo(param: FilesApiFilesV1AnalysisProfilesGetRequest, options?: Configuration): Promise<HttpInfo<AnalysisProfilesSchema>> {
        return this.api.filesV1AnalysisProfilesGetWithHttpInfo(param.appID, param.authToken, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     * 
     * Get analysis profiles
     * @param param the request object
     */
    public filesV1AnalysisProfilesGet(param: FilesApiFilesV1AnalysisProfilesGetRequest, options?: Configuration): Promise<AnalysisProfilesSchema> {
        return this.api.filesV1AnalysisProfilesGet(param.appID, param.authToken, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     * 
     * Get a default analysis profile
     * @param param the request object
     */
    public filesV1AnalysisProfilesMediaTypeDefaultGetWithHttpInfo(param: FilesApiFilesV1AnalysisProfilesMediaTypeDefaultGetRequest, options?: Configuration): Promise<HttpInfo<AnalysisProfileSchema>> {
        return this.api.filesV1AnalysisProfilesMediaTypeDefaultGetWithHttpInfo(param.appID, param.authToken, param.mediaType,  options).toPromise();
    }

    /**
     * 
     * Get a default analysis profile
     * @param param the request object
     */
    public filesV1AnalysisProfilesMediaTypeDefaultGet(param: FilesApiFilesV1AnalysisProfilesMediaTypeDefaultGetRequest, options?: Configuration): Promise<AnalysisProfileSchema> {
        return this.api.filesV1AnalysisProfilesMediaTypeDefaultGet(param.appID, param.authToken, param.mediaType,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_analysis_profiles 
     * Create a new analysis profile
     * @param param the request object
     */
    public filesV1AnalysisProfilesPostWithHttpInfo(param: FilesApiFilesV1AnalysisProfilesPostRequest, options?: Configuration): Promise<HttpInfo<AnalysisProfileSchema>> {
        return this.api.filesV1AnalysisProfilesPostWithHttpInfo(param.appID, param.authToken, param.analysisProfileSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_analysis_profiles 
     * Create a new analysis profile
     * @param param the request object
     */
    public filesV1AnalysisProfilesPost(param: FilesApiFilesV1AnalysisProfilesPostRequest, options?: Configuration): Promise<AnalysisProfileSchema> {
        return this.api.filesV1AnalysisProfilesPost(param.appID, param.authToken, param.analysisProfileSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_analysis_profiles 
     * Removes the default flag on an analysis profile
     * @param param the request object
     */
    public filesV1AnalysisProfilesProfileIdDefaultDeleteWithHttpInfo(param: FilesApiFilesV1AnalysisProfilesProfileIdDefaultDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AnalysisProfilesProfileIdDefaultDeleteWithHttpInfo(param.appID, param.authToken, param.profileId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_analysis_profiles 
     * Removes the default flag on an analysis profile
     * @param param the request object
     */
    public filesV1AnalysisProfilesProfileIdDefaultDelete(param: FilesApiFilesV1AnalysisProfilesProfileIdDefaultDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AnalysisProfilesProfileIdDefaultDelete(param.appID, param.authToken, param.profileId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_analysis_profiles 
     * Set an analysis profile to the default of its media type
     * @param param the request object
     */
    public filesV1AnalysisProfilesProfileIdDefaultPostWithHttpInfo(param: FilesApiFilesV1AnalysisProfilesProfileIdDefaultPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AnalysisProfilesProfileIdDefaultPostWithHttpInfo(param.appID, param.authToken, param.profileId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_analysis_profiles 
     * Set an analysis profile to the default of its media type
     * @param param the request object
     */
    public filesV1AnalysisProfilesProfileIdDefaultPost(param: FilesApiFilesV1AnalysisProfilesProfileIdDefaultPostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AnalysisProfilesProfileIdDefaultPost(param.appID, param.authToken, param.profileId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_analysis_profiles 
     * Delete an analysis profile
     * @param param the request object
     */
    public filesV1AnalysisProfilesProfileIdDeleteWithHttpInfo(param: FilesApiFilesV1AnalysisProfilesProfileIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AnalysisProfilesProfileIdDeleteWithHttpInfo(param.appID, param.authToken, param.profileId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_analysis_profiles 
     * Delete an analysis profile
     * @param param the request object
     */
    public filesV1AnalysisProfilesProfileIdDelete(param: FilesApiFilesV1AnalysisProfilesProfileIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AnalysisProfilesProfileIdDelete(param.appID, param.authToken, param.profileId,  options).toPromise();
    }

    /**
     * 
     * Get an analysis profile
     * @param param the request object
     */
    public filesV1AnalysisProfilesProfileIdGetWithHttpInfo(param: FilesApiFilesV1AnalysisProfilesProfileIdGetRequest, options?: Configuration): Promise<HttpInfo<AnalysisProfileSchema>> {
        return this.api.filesV1AnalysisProfilesProfileIdGetWithHttpInfo(param.appID, param.authToken, param.profileId,  options).toPromise();
    }

    /**
     * 
     * Get an analysis profile
     * @param param the request object
     */
    public filesV1AnalysisProfilesProfileIdGet(param: FilesApiFilesV1AnalysisProfilesProfileIdGetRequest, options?: Configuration): Promise<AnalysisProfileSchema> {
        return this.api.filesV1AnalysisProfilesProfileIdGet(param.appID, param.authToken, param.profileId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_analysis_profiles 
     * Update an analysis profile information
     * @param param the request object
     */
    public filesV1AnalysisProfilesProfileIdPatchWithHttpInfo(param: FilesApiFilesV1AnalysisProfilesProfileIdPatchRequest, options?: Configuration): Promise<HttpInfo<AnalysisProfileSchema>> {
        return this.api.filesV1AnalysisProfilesProfileIdPatchWithHttpInfo(param.appID, param.authToken, param.profileId, param.analysisProfileSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_analysis_profiles 
     * Update an analysis profile information
     * @param param the request object
     */
    public filesV1AnalysisProfilesProfileIdPatch(param: FilesApiFilesV1AnalysisProfilesProfileIdPatchRequest, options?: Configuration): Promise<AnalysisProfileSchema> {
        return this.api.filesV1AnalysisProfilesProfileIdPatch(param.appID, param.authToken, param.profileId, param.analysisProfileSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_analysis_profiles 
     * Update an analysis profile information
     * @param param the request object
     */
    public filesV1AnalysisProfilesProfileIdPutWithHttpInfo(param: FilesApiFilesV1AnalysisProfilesProfileIdPutRequest, options?: Configuration): Promise<HttpInfo<AnalysisProfileSchema>> {
        return this.api.filesV1AnalysisProfilesProfileIdPutWithHttpInfo(param.appID, param.authToken, param.profileId, param.analysisProfileSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_analysis_profiles 
     * Update an analysis profile information
     * @param param the request object
     */
    public filesV1AnalysisProfilesProfileIdPut(param: FilesApiFilesV1AnalysisProfilesProfileIdPutRequest, options?: Configuration): Promise<AnalysisProfileSchema> {
        return this.api.filesV1AnalysisProfilesProfileIdPut(param.appID, param.authToken, param.profileId, param.analysisProfileSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_analysis_service_accounts 
     * Delete an analysis service account
     * @param param the request object
     */
    public filesV1AnalysisServiceAccountsAnalysisServiceAccountIdDeleteWithHttpInfo(param: FilesApiFilesV1AnalysisServiceAccountsAnalysisServiceAccountIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AnalysisServiceAccountsAnalysisServiceAccountIdDeleteWithHttpInfo(param.appID, param.authToken, param.analysisServiceAccountId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_analysis_service_accounts 
     * Delete an analysis service account
     * @param param the request object
     */
    public filesV1AnalysisServiceAccountsAnalysisServiceAccountIdDelete(param: FilesApiFilesV1AnalysisServiceAccountsAnalysisServiceAccountIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AnalysisServiceAccountsAnalysisServiceAccountIdDelete(param.appID, param.authToken, param.analysisServiceAccountId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_analysis_service_accounts 
     * Get an analysis service account
     * @param param the request object
     */
    public filesV1AnalysisServiceAccountsAnalysisServiceAccountIdGetWithHttpInfo(param: FilesApiFilesV1AnalysisServiceAccountsAnalysisServiceAccountIdGetRequest, options?: Configuration): Promise<HttpInfo<AnalysisServiceAccountReadSchema>> {
        return this.api.filesV1AnalysisServiceAccountsAnalysisServiceAccountIdGetWithHttpInfo(param.appID, param.authToken, param.analysisServiceAccountId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_analysis_service_accounts 
     * Get an analysis service account
     * @param param the request object
     */
    public filesV1AnalysisServiceAccountsAnalysisServiceAccountIdGet(param: FilesApiFilesV1AnalysisServiceAccountsAnalysisServiceAccountIdGetRequest, options?: Configuration): Promise<AnalysisServiceAccountReadSchema> {
        return this.api.filesV1AnalysisServiceAccountsAnalysisServiceAccountIdGet(param.appID, param.authToken, param.analysisServiceAccountId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_analysis_service_accounts 
     * Update an analysis service account information
     * @param param the request object
     */
    public filesV1AnalysisServiceAccountsAnalysisServiceAccountIdPatchWithHttpInfo(param: FilesApiFilesV1AnalysisServiceAccountsAnalysisServiceAccountIdPatchRequest, options?: Configuration): Promise<HttpInfo<AnalysisServiceAccountSchema>> {
        return this.api.filesV1AnalysisServiceAccountsAnalysisServiceAccountIdPatchWithHttpInfo(param.appID, param.authToken, param.analysisServiceAccountId, param.analysisServiceAccountSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_analysis_service_accounts 
     * Update an analysis service account information
     * @param param the request object
     */
    public filesV1AnalysisServiceAccountsAnalysisServiceAccountIdPatch(param: FilesApiFilesV1AnalysisServiceAccountsAnalysisServiceAccountIdPatchRequest, options?: Configuration): Promise<AnalysisServiceAccountSchema> {
        return this.api.filesV1AnalysisServiceAccountsAnalysisServiceAccountIdPatch(param.appID, param.authToken, param.analysisServiceAccountId, param.analysisServiceAccountSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_analysis_service_accounts 
     * Update an analysis service account information
     * @param param the request object
     */
    public filesV1AnalysisServiceAccountsAnalysisServiceAccountIdPutWithHttpInfo(param: FilesApiFilesV1AnalysisServiceAccountsAnalysisServiceAccountIdPutRequest, options?: Configuration): Promise<HttpInfo<AnalysisServiceAccountSchema>> {
        return this.api.filesV1AnalysisServiceAccountsAnalysisServiceAccountIdPutWithHttpInfo(param.appID, param.authToken, param.analysisServiceAccountId, param.analysisServiceAccountSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_analysis_service_accounts 
     * Update an analysis service account information
     * @param param the request object
     */
    public filesV1AnalysisServiceAccountsAnalysisServiceAccountIdPut(param: FilesApiFilesV1AnalysisServiceAccountsAnalysisServiceAccountIdPutRequest, options?: Configuration): Promise<AnalysisServiceAccountSchema> {
        return this.api.filesV1AnalysisServiceAccountsAnalysisServiceAccountIdPut(param.appID, param.authToken, param.analysisServiceAccountId, param.analysisServiceAccountSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_analysis_service_accounts 
     * Get analysis service accounts
     * @param param the request object
     */
    public filesV1AnalysisServiceAccountsGetWithHttpInfo(param: FilesApiFilesV1AnalysisServiceAccountsGetRequest, options?: Configuration): Promise<HttpInfo<AnalysisServiceAccountsSchema>> {
        return this.api.filesV1AnalysisServiceAccountsGetWithHttpInfo(param.appID, param.authToken, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_analysis_service_accounts 
     * Get analysis service accounts
     * @param param the request object
     */
    public filesV1AnalysisServiceAccountsGet(param: FilesApiFilesV1AnalysisServiceAccountsGetRequest, options?: Configuration): Promise<AnalysisServiceAccountsSchema> {
        return this.api.filesV1AnalysisServiceAccountsGet(param.appID, param.authToken, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_analysis_service_accounts 
     * Create a new analysis service account
     * @param param the request object
     */
    public filesV1AnalysisServiceAccountsPostWithHttpInfo(param: FilesApiFilesV1AnalysisServiceAccountsPostRequest, options?: Configuration): Promise<HttpInfo<AnalysisServiceAccountReadSchema>> {
        return this.api.filesV1AnalysisServiceAccountsPostWithHttpInfo(param.appID, param.authToken, param.analysisServiceAccountSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_analysis_service_accounts 
     * Create a new analysis service account
     * @param param the request object
     */
    public filesV1AnalysisServiceAccountsPost(param: FilesApiFilesV1AnalysisServiceAccountsPostRequest, options?: Configuration): Promise<AnalysisServiceAccountReadSchema> {
        return this.api.filesV1AnalysisServiceAccountsPost(param.appID, param.authToken, param.analysisServiceAccountSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Create keyframe of type poster for asset
     * @param param the request object
     */
    public filesV1AssetsAssetIdCustomKeyframePostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdCustomKeyframePostRequest, options?: Configuration): Promise<HttpInfo<KeyframeSchema>> {
        return this.api.filesV1AssetsAssetIdCustomKeyframePostWithHttpInfo(param.appID, param.authToken, param.assetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Create keyframe of type poster for asset
     * @param param the request object
     */
    public filesV1AssetsAssetIdCustomKeyframePost(param: FilesApiFilesV1AssetsAssetIdCustomKeyframePostRequest, options?: Configuration): Promise<KeyframeSchema> {
        return this.api.filesV1AssetsAssetIdCustomKeyframePost(param.appID, param.authToken, param.assetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Set keyframe of type poster as asset keyframe
     * @param param the request object
     */
    public filesV1AssetsAssetIdCustomKeyframePosterIdPostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdCustomKeyframePosterIdPostRequest, options?: Configuration): Promise<HttpInfo<KeyframeSchema>> {
        return this.api.filesV1AssetsAssetIdCustomKeyframePosterIdPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.posterId, param.overwrite,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Set keyframe of type poster as asset keyframe
     * @param param the request object
     */
    public filesV1AssetsAssetIdCustomKeyframePosterIdPost(param: FilesApiFilesV1AssetsAssetIdCustomKeyframePosterIdPostRequest, options?: Configuration): Promise<KeyframeSchema> {
        return this.api.filesV1AssetsAssetIdCustomKeyframePosterIdPost(param.appID, param.authToken, param.assetId, param.posterId, param.overwrite,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_exports 
     * Export asset to export location
     * @param param the request object
     */
    public filesV1AssetsAssetIdExportLocationsExportLocationIdPostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdExportLocationsExportLocationIdPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdExportLocationsExportLocationIdPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.exportLocationId, param.assetExportSchema, param.allowHostTransfer,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_exports 
     * Export asset to export location
     * @param param the request object
     */
    public filesV1AssetsAssetIdExportLocationsExportLocationIdPost(param: FilesApiFilesV1AssetsAssetIdExportLocationsExportLocationIdPostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdExportLocationsExportLocationIdPost(param.appID, param.authToken, param.assetId, param.exportLocationId, param.assetExportSchema, param.allowHostTransfer,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_files 
     * Delete asset\'s file set, file entries, and actual files
     * @param param the request object
     */
    public filesV1AssetsAssetIdFileSetsFileSetIdDeleteWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFileSetsFileSetIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdFileSetsFileSetIdDeleteWithHttpInfo(param.appID, param.authToken, param.assetId, param.fileSetId, param.keepSource,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_files 
     * Delete asset\'s file set, file entries, and actual files
     * @param param the request object
     */
    public filesV1AssetsAssetIdFileSetsFileSetIdDelete(param: FilesApiFilesV1AssetsAssetIdFileSetsFileSetIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdFileSetsFileSetIdDelete(param.appID, param.authToken, param.assetId, param.fileSetId, param.keepSource,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get files from a file set
     * @param param the request object
     */
    public filesV1AssetsAssetIdFileSetsFileSetIdFilesGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFileSetsFileSetIdFilesGetRequest, options?: Configuration): Promise<HttpInfo<FilesSchema>> {
        return this.api.filesV1AssetsAssetIdFileSetsFileSetIdFilesGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.fileSetId, param.perPage, param.lastId, param.generateSignedUrl, param.fileCount,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get files from a file set
     * @param param the request object
     */
    public filesV1AssetsAssetIdFileSetsFileSetIdFilesGet(param: FilesApiFilesV1AssetsAssetIdFileSetsFileSetIdFilesGetRequest, options?: Configuration): Promise<FilesSchema> {
        return this.api.filesV1AssetsAssetIdFileSetsFileSetIdFilesGet(param.appID, param.authToken, param.assetId, param.fileSetId, param.perPage, param.lastId, param.generateSignedUrl, param.fileCount,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get asset\'s file set
     * @param param the request object
     */
    public filesV1AssetsAssetIdFileSetsFileSetIdGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFileSetsFileSetIdGetRequest, options?: Configuration): Promise<HttpInfo<FileSetSchema>> {
        return this.api.filesV1AssetsAssetIdFileSetsFileSetIdGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.fileSetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get asset\'s file set
     * @param param the request object
     */
    public filesV1AssetsAssetIdFileSetsFileSetIdGet(param: FilesApiFilesV1AssetsAssetIdFileSetsFileSetIdGetRequest, options?: Configuration): Promise<FileSetSchema> {
        return this.api.filesV1AssetsAssetIdFileSetsFileSetIdGet(param.appID, param.authToken, param.assetId, param.fileSetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Update file set information
     * @param param the request object
     */
    public filesV1AssetsAssetIdFileSetsFileSetIdPatchWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFileSetsFileSetIdPatchRequest, options?: Configuration): Promise<HttpInfo<FileSetSchema>> {
        return this.api.filesV1AssetsAssetIdFileSetsFileSetIdPatchWithHttpInfo(param.appID, param.authToken, param.assetId, param.fileSetId, param.fileSetSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Update file set information
     * @param param the request object
     */
    public filesV1AssetsAssetIdFileSetsFileSetIdPatch(param: FilesApiFilesV1AssetsAssetIdFileSetsFileSetIdPatchRequest, options?: Configuration): Promise<FileSetSchema> {
        return this.api.filesV1AssetsAssetIdFileSetsFileSetIdPatch(param.appID, param.authToken, param.assetId, param.fileSetId, param.fileSetSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_files 
     * Purge deleted asset\'s file set, file entries, and actual files.
     * @param param the request object
     */
    public filesV1AssetsAssetIdFileSetsFileSetIdPurgeDeleteWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFileSetsFileSetIdPurgeDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdFileSetsFileSetIdPurgeDeleteWithHttpInfo(param.appID, param.authToken, param.assetId, param.fileSetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_files 
     * Purge deleted asset\'s file set, file entries, and actual files.
     * @param param the request object
     */
    public filesV1AssetsAssetIdFileSetsFileSetIdPurgeDelete(param: FilesApiFilesV1AssetsAssetIdFileSetsFileSetIdPurgeDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdFileSetsFileSetIdPurgeDelete(param.appID, param.authToken, param.assetId, param.fileSetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Update file set information
     * @param param the request object
     */
    public filesV1AssetsAssetIdFileSetsFileSetIdPutWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFileSetsFileSetIdPutRequest, options?: Configuration): Promise<HttpInfo<FileSetSchema>> {
        return this.api.filesV1AssetsAssetIdFileSetsFileSetIdPutWithHttpInfo(param.appID, param.authToken, param.assetId, param.fileSetId, param.fileSetSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Update file set information
     * @param param the request object
     */
    public filesV1AssetsAssetIdFileSetsFileSetIdPut(param: FilesApiFilesV1AssetsAssetIdFileSetsFileSetIdPutRequest, options?: Configuration): Promise<FileSetSchema> {
        return this.api.filesV1AssetsAssetIdFileSetsFileSetIdPut(param.appID, param.authToken, param.assetId, param.fileSetId, param.fileSetSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Restore delete asset\'s file set
     * @param param the request object
     */
    public filesV1AssetsAssetIdFileSetsFileSetIdRestorePutWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFileSetsFileSetIdRestorePutRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdFileSetsFileSetIdRestorePutWithHttpInfo(param.appID, param.authToken, param.assetId, param.fileSetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Restore delete asset\'s file set
     * @param param the request object
     */
    public filesV1AssetsAssetIdFileSetsFileSetIdRestorePut(param: FilesApiFilesV1AssetsAssetIdFileSetsFileSetIdRestorePutRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdFileSetsFileSetIdRestorePut(param.appID, param.authToken, param.assetId, param.fileSetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get all asset\'s file sets
     * @param param the request object
     */
    public filesV1AssetsAssetIdFileSetsGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFileSetsGetRequest, options?: Configuration): Promise<HttpInfo<FileSetsSchema>> {
        return this.api.filesV1AssetsAssetIdFileSetsGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.perPage, param.lastId, param.fileCount,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get all asset\'s file sets
     * @param param the request object
     */
    public filesV1AssetsAssetIdFileSetsGet(param: FilesApiFilesV1AssetsAssetIdFileSetsGetRequest, options?: Configuration): Promise<FileSetsSchema> {
        return this.api.filesV1AssetsAssetIdFileSetsGet(param.appID, param.authToken, param.assetId, param.perPage, param.lastId, param.fileCount,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Create file set and associate to asset
     * @param param the request object
     */
    public filesV1AssetsAssetIdFileSetsPostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFileSetsPostRequest, options?: Configuration): Promise<HttpInfo<FileSetSchema>> {
        return this.api.filesV1AssetsAssetIdFileSetsPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.fileSetSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Create file set and associate to asset
     * @param param the request object
     */
    public filesV1AssetsAssetIdFileSetsPost(param: FilesApiFilesV1AssetsAssetIdFileSetsPostRequest, options?: Configuration): Promise<FileSetSchema> {
        return this.api.filesV1AssetsAssetIdFileSetsPost(param.appID, param.authToken, param.assetId, param.fileSetSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_poster 
     * Create a transcode job for creating still keyframe
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdCaptureMillisecondsPostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFilesFileIdCaptureMillisecondsPostRequest, options?: Configuration): Promise<HttpInfo<TranscodeResponseSchema>> {
        return this.api.filesV1AssetsAssetIdFilesFileIdCaptureMillisecondsPostWithHttpInfo(param.authToken, param.appID, param.assetId, param.fileId, param.milliseconds, param.transcodeRequestSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_poster 
     * Create a transcode job for creating still keyframe
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdCaptureMillisecondsPost(param: FilesApiFilesV1AssetsAssetIdFilesFileIdCaptureMillisecondsPostRequest, options?: Configuration): Promise<TranscodeResponseSchema> {
        return this.api.filesV1AssetsAssetIdFilesFileIdCaptureMillisecondsPost(param.authToken, param.appID, param.assetId, param.fileId, param.milliseconds, param.transcodeRequestSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_files 
     * Delete asset\'s file entry (Not the actual file, use DELETE file_set for that)
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdDeleteWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFilesFileIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdFilesFileIdDeleteWithHttpInfo(param.appID, param.authToken, param.assetId, param.fileId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_files 
     * Delete asset\'s file entry (Not the actual file, use DELETE file_set for that)
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdDelete(param: FilesApiFilesV1AssetsAssetIdFilesFileIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdFilesFileIdDelete(param.appID, param.authToken, param.assetId, param.fileId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get asset\'s file download URL
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdDownloadUrlGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFilesFileIdDownloadUrlGetRequest, options?: Configuration): Promise<HttpInfo<FileDownloadURLSchema>> {
        return this.api.filesV1AssetsAssetIdFilesFileIdDownloadUrlGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.fileId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get asset\'s file download URL
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdDownloadUrlGet(param: FilesApiFilesV1AssetsAssetIdFilesFileIdDownloadUrlGetRequest, options?: Configuration): Promise<FileDownloadURLSchema> {
        return this.api.filesV1AssetsAssetIdFilesFileIdDownloadUrlGet(param.appID, param.authToken, param.assetId, param.fileId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_transcode_jobs - can_write_files 
     * Create format, file_set, and file for edit proxy if storage has edit proxy transcoder configured
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdEditProxiesPostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFilesFileIdEditProxiesPostRequest, options?: Configuration): Promise<HttpInfo<void | EditProxyResponseSchema>> {
        return this.api.filesV1AssetsAssetIdFilesFileIdEditProxiesPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.fileId, param.editProxySchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_transcode_jobs - can_write_files 
     * Create format, file_set, and file for edit proxy if storage has edit proxy transcoder configured
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdEditProxiesPost(param: FilesApiFilesV1AssetsAssetIdFilesFileIdEditProxiesPostRequest, options?: Configuration): Promise<void | EditProxyResponseSchema> {
        return this.api.filesV1AssetsAssetIdFilesFileIdEditProxiesPost(param.appID, param.authToken, param.assetId, param.fileId, param.editProxySchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get asset\'s file
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFilesFileIdGetRequest, options?: Configuration): Promise<HttpInfo<FileSchema>> {
        return this.api.filesV1AssetsAssetIdFilesFileIdGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.fileId, param.generateSignedPostUrl, param.contentDisposition, param.bypassUrlCache,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get asset\'s file
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdGet(param: FilesApiFilesV1AssetsAssetIdFilesFileIdGetRequest, options?: Configuration): Promise<FileSchema> {
        return this.api.filesV1AssetsAssetIdFilesFileIdGet(param.appID, param.authToken, param.assetId, param.fileId, param.generateSignedPostUrl, param.contentDisposition, param.bypassUrlCache,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get asset\'s file handler URL for ISG
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdIsgHandlerUrlGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFilesFileIdIsgHandlerUrlGetRequest, options?: Configuration): Promise<HttpInfo<ISGHandlerURLSchema>> {
        return this.api.filesV1AssetsAssetIdFilesFileIdIsgHandlerUrlGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.fileId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get asset\'s file handler URL for ISG
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdIsgHandlerUrlGet(param: FilesApiFilesV1AssetsAssetIdFilesFileIdIsgHandlerUrlGetRequest, options?: Configuration): Promise<ISGHandlerURLSchema> {
        return this.api.filesV1AssetsAssetIdFilesFileIdIsgHandlerUrlGet(param.appID, param.authToken, param.assetId, param.fileId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_transcode_jobs 
     * Create a transcode job for proxy and keyframes
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdKeyframesPostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFilesFileIdKeyframesPostRequest, options?: Configuration): Promise<HttpInfo<void | TranscodeResponseSchema>> {
        return this.api.filesV1AssetsAssetIdFilesFileIdKeyframesPostWithHttpInfo(param.authToken, param.appID, param.assetId, param.fileId, param.transcodeRequestSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_transcode_jobs 
     * Create a transcode job for proxy and keyframes
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdKeyframesPost(param: FilesApiFilesV1AssetsAssetIdFilesFileIdKeyframesPostRequest, options?: Configuration): Promise<void | TranscodeResponseSchema> {
        return this.api.filesV1AssetsAssetIdFilesFileIdKeyframesPost(param.authToken, param.appID, param.assetId, param.fileId, param.transcodeRequestSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_transcode_jobs 
     * Create a job for extracting mediainfo
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdMediainfoPostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFilesFileIdMediainfoPostRequest, options?: Configuration): Promise<HttpInfo<TranscodeResponseSchema>> {
        return this.api.filesV1AssetsAssetIdFilesFileIdMediainfoPostWithHttpInfo(param.authToken, param.appID, param.assetId, param.fileId, param.transcodeRequestSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_transcode_jobs 
     * Create a job for extracting mediainfo
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdMediainfoPost(param: FilesApiFilesV1AssetsAssetIdFilesFileIdMediainfoPostRequest, options?: Configuration): Promise<TranscodeResponseSchema> {
        return this.api.filesV1AssetsAssetIdFilesFileIdMediainfoPost(param.authToken, param.appID, param.assetId, param.fileId, param.transcodeRequestSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Cancel Backblaze B2 multipart upload.
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdMultipartB2CancelPostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFilesFileIdMultipartB2CancelPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdFilesFileIdMultipartB2CancelPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.fileId, param.multipartB2CancelUpload, param.temporary,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Cancel Backblaze B2 multipart upload.
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdMultipartB2CancelPost(param: FilesApiFilesV1AssetsAssetIdFilesFileIdMultipartB2CancelPostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdFilesFileIdMultipartB2CancelPost(param.appID, param.authToken, param.assetId, param.fileId, param.multipartB2CancelUpload, param.temporary,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Complete Backblaze B2 multipart upload.
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdMultipartB2FinishPostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFilesFileIdMultipartB2FinishPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdFilesFileIdMultipartB2FinishPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.fileId, param.multipartB2FinishUpload, param.temporary,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Complete Backblaze B2 multipart upload.
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdMultipartB2FinishPost(param: FilesApiFilesV1AssetsAssetIdFilesFileIdMultipartB2FinishPostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdFilesFileIdMultipartB2FinishPost(param.appID, param.authToken, param.assetId, param.fileId, param.multipartB2FinishUpload, param.temporary,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Start Backblaze B2 multipart upload.
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdMultipartB2StartPostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFilesFileIdMultipartB2StartPostRequest, options?: Configuration): Promise<HttpInfo<MultipartB2StartUpload>> {
        return this.api.filesV1AssetsAssetIdFilesFileIdMultipartB2StartPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.fileId, param.temporary, param.multipartB2StartUpload,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Start Backblaze B2 multipart upload.
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdMultipartB2StartPost(param: FilesApiFilesV1AssetsAssetIdFilesFileIdMultipartB2StartPostRequest, options?: Configuration): Promise<MultipartB2StartUpload> {
        return this.api.filesV1AssetsAssetIdFilesFileIdMultipartB2StartPost(param.appID, param.authToken, param.assetId, param.fileId, param.temporary, param.multipartB2StartUpload,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Cleanup multipart upload (GCS, S3).
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdMultipartCleanupPostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFilesFileIdMultipartCleanupPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdFilesFileIdMultipartCleanupPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.fileId, param.multipartUploadCleanupSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Cleanup multipart upload (GCS, S3).
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdMultipartCleanupPost(param: FilesApiFilesV1AssetsAssetIdFilesFileIdMultipartCleanupPostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdFilesFileIdMultipartCleanupPost(param.appID, param.authToken, param.assetId, param.fileId, param.multipartUploadCleanupSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Get object compose url for GCS parallel upload.
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdMultipartGcsComposeUrlPostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFilesFileIdMultipartGcsComposeUrlPostRequest, options?: Configuration): Promise<HttpInfo<MultiPartUploadComposeURLSchema>> {
        return this.api.filesV1AssetsAssetIdFilesFileIdMultipartGcsComposeUrlPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.fileId, param.multipartUploadComposeSchema, param.temporary,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Get object compose url for GCS parallel upload.
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdMultipartGcsComposeUrlPost(param: FilesApiFilesV1AssetsAssetIdFilesFileIdMultipartGcsComposeUrlPostRequest, options?: Configuration): Promise<MultiPartUploadComposeURLSchema> {
        return this.api.filesV1AssetsAssetIdFilesFileIdMultipartGcsComposeUrlPost(param.appID, param.authToken, param.assetId, param.fileId, param.multipartUploadComposeSchema, param.temporary,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Complete multipart upload (GCS).
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdMultipartPostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFilesFileIdMultipartPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdFilesFileIdMultipartPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.fileId, param.multipartUploadSchema, param.temporary,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Complete multipart upload (GCS).
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdMultipartPost(param: FilesApiFilesV1AssetsAssetIdFilesFileIdMultipartPostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdFilesFileIdMultipartPost(param.appID, param.authToken, param.assetId, param.fileId, param.multipartUploadSchema, param.temporary,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Get presigned urls for multipart upload (S3).
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdMultipartUrlGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFilesFileIdMultipartUrlGetRequest, options?: Configuration): Promise<HttpInfo<MultiPartURLsSchema>> {
        return this.api.filesV1AssetsAssetIdFilesFileIdMultipartUrlGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.fileId, param.uploadId, param.type, param.maxPartNumber, param.temporary,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Get presigned urls for multipart upload (S3).
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdMultipartUrlGet(param: FilesApiFilesV1AssetsAssetIdFilesFileIdMultipartUrlGetRequest, options?: Configuration): Promise<MultiPartURLsSchema> {
        return this.api.filesV1AssetsAssetIdFilesFileIdMultipartUrlGet(param.appID, param.authToken, param.assetId, param.fileId, param.uploadId, param.type, param.maxPartNumber, param.temporary,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Get presigned urls for multipart part upload (S3 & GCS).
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdMultipartUrlPartGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFilesFileIdMultipartUrlPartGetRequest, options?: Configuration): Promise<HttpInfo<MultiPartUploadURLsSchema>> {
        return this.api.filesV1AssetsAssetIdFilesFileIdMultipartUrlPartGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.fileId, param.partsNum, param.uploadId, param.perPage, param.page, param.temporary,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Get presigned urls for multipart part upload (S3 & GCS).
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdMultipartUrlPartGet(param: FilesApiFilesV1AssetsAssetIdFilesFileIdMultipartUrlPartGetRequest, options?: Configuration): Promise<MultiPartUploadURLsSchema> {
        return this.api.filesV1AssetsAssetIdFilesFileIdMultipartUrlPartGet(param.appID, param.authToken, param.assetId, param.fileId, param.partsNum, param.uploadId, param.perPage, param.page, param.temporary,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Create presigned urls for multipart part S3 upload.
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdMultipartUrlS3PartPostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFilesFileIdMultipartUrlS3PartPostRequest, options?: Configuration): Promise<HttpInfo<MultiPartS3UrlPartsSchema>> {
        return this.api.filesV1AssetsAssetIdFilesFileIdMultipartUrlS3PartPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.fileId, param.multiPartS3UrlPartsSchema, param.temporary,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Create presigned urls for multipart part S3 upload.
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdMultipartUrlS3PartPost(param: FilesApiFilesV1AssetsAssetIdFilesFileIdMultipartUrlS3PartPostRequest, options?: Configuration): Promise<MultiPartS3UrlPartsSchema> {
        return this.api.filesV1AssetsAssetIdFilesFileIdMultipartUrlS3PartPost(param.appID, param.authToken, param.assetId, param.fileId, param.multiPartS3UrlPartsSchema, param.temporary,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Update file information
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdPatchWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFilesFileIdPatchRequest, options?: Configuration): Promise<HttpInfo<FileSchema>> {
        return this.api.filesV1AssetsAssetIdFilesFileIdPatchWithHttpInfo(param.appID, param.authToken, param.assetId, param.fileId, param.fileSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Update file information
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdPatch(param: FilesApiFilesV1AssetsAssetIdFilesFileIdPatchRequest, options?: Configuration): Promise<FileSchema> {
        return this.api.filesV1AssetsAssetIdFilesFileIdPatch(param.appID, param.authToken, param.assetId, param.fileId, param.fileSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Update file information
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdPutWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFilesFileIdPutRequest, options?: Configuration): Promise<HttpInfo<FileSchema>> {
        return this.api.filesV1AssetsAssetIdFilesFileIdPutWithHttpInfo(param.appID, param.authToken, param.assetId, param.fileId, param.fileSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Update file information
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdPut(param: FilesApiFilesV1AssetsAssetIdFilesFileIdPutRequest, options?: Configuration): Promise<FileSchema> {
        return this.api.filesV1AssetsAssetIdFilesFileIdPut(param.appID, param.authToken, param.assetId, param.fileId, param.fileSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_storages 
     * Trigger reindexing of a file
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdReindexPostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFilesFileIdReindexPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdFilesFileIdReindexPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.fileId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_storages 
     * Trigger reindexing of a file
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdReindexPost(param: FilesApiFilesV1AssetsAssetIdFilesFileIdReindexPostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdFilesFileIdReindexPost(param.appID, param.authToken, param.assetId, param.fileId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_transcode_jobs 
     * Create a transcode job for subtitle files
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdSubtitlesPostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFilesFileIdSubtitlesPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdFilesFileIdSubtitlesPostWithHttpInfo(param.authToken, param.appID, param.assetId, param.fileId, param.subtitleRequestSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_transcode_jobs 
     * Create a transcode job for subtitle files
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesFileIdSubtitlesPost(param: FilesApiFilesV1AssetsAssetIdFilesFileIdSubtitlesPostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdFilesFileIdSubtitlesPost(param.authToken, param.appID, param.assetId, param.fileId, param.subtitleRequestSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get all asset\'s files
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFilesGetRequest, options?: Configuration): Promise<HttpInfo<FilesSchema>> {
        return this.api.filesV1AssetsAssetIdFilesGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.perPage, param.generateSignedUrl, param.contentDisposition, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get all asset\'s files
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesGet(param: FilesApiFilesV1AssetsAssetIdFilesGetRequest, options?: Configuration): Promise<FilesSchema> {
        return this.api.filesV1AssetsAssetIdFilesGet(param.appID, param.authToken, param.assetId, param.perPage, param.generateSignedUrl, param.contentDisposition, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Create file and associate to asset
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesPostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFilesPostRequest, options?: Configuration): Promise<HttpInfo<FileSchema>> {
        return this.api.filesV1AssetsAssetIdFilesPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.fileCreateSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Create file and associate to asset
     * @param param the request object
     */
    public filesV1AssetsAssetIdFilesPost(param: FilesApiFilesV1AssetsAssetIdFilesPostRequest, options?: Configuration): Promise<FileSchema> {
        return this.api.filesV1AssetsAssetIdFilesPost(param.appID, param.authToken, param.assetId, param.fileCreateSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_archived_formats 
     * Delete archived format
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdArchiveDeleteWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdArchiveDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdArchiveDeleteWithHttpInfo(param.appID, param.authToken, param.assetId, param.formatId, param.formatDeleteArchiveSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_archived_formats 
     * Delete archived format
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdArchiveDelete(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdArchiveDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdArchiveDelete(param.appID, param.authToken, param.assetId, param.formatId, param.formatDeleteArchiveSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_archive_formats 
     * Archive format
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdArchivePostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdArchivePostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdArchivePostWithHttpInfo(param.appID, param.authToken, param.assetId, param.formatId, param.formatArchiveSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_archive_formats 
     * Archive format
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdArchivePost(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdArchivePostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdArchivePost(param.appID, param.authToken, param.assetId, param.formatId, param.formatArchiveSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_formats 
     * Delete a component in a format
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdDeleteWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdDeleteRequest, options?: Configuration): Promise<HttpInfo<ComponentsSchema>> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdDeleteWithHttpInfo(param.appID, param.authToken, param.assetId, param.formatId, param.componentId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_formats 
     * Delete a component in a format
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdDelete(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdDeleteRequest, options?: Configuration): Promise<ComponentsSchema> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdDelete(param.appID, param.authToken, param.assetId, param.formatId, param.componentId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_formats 
     * Get a component for a format in an asset
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdGetRequest, options?: Configuration): Promise<HttpInfo<ComponentsSchema>> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.formatId, param.componentId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_formats 
     * Get a component for a format in an asset
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdGet(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdGetRequest, options?: Configuration): Promise<ComponentsSchema> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdGet(param.appID, param.authToken, param.assetId, param.formatId, param.componentId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_formats 
     * Update a component in a format
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdPutWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdPutRequest, options?: Configuration): Promise<HttpInfo<ComponentsSchema>> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdPutWithHttpInfo(param.appID, param.authToken, param.assetId, param.formatId, param.componentId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_formats 
     * Update a component in a format
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdPut(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdPutRequest, options?: Configuration): Promise<ComponentsSchema> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdComponentsComponentIdPut(param.appID, param.authToken, param.assetId, param.formatId, param.componentId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_formats 
     * Get all components for a format in an asset
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdComponentsGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdComponentsGetRequest, options?: Configuration): Promise<HttpInfo<ComponentsSchema>> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdComponentsGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.formatId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_formats 
     * Get all components for a format in an asset
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdComponentsGet(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdComponentsGetRequest, options?: Configuration): Promise<ComponentsSchema> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdComponentsGet(param.appID, param.authToken, param.assetId, param.formatId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_formats 
     * Add a new format component
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdComponentsPostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdComponentsPostRequest, options?: Configuration): Promise<HttpInfo<ComponentsSchema>> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdComponentsPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.formatId, param.componentSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_formats 
     * Add a new format component
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdComponentsPost(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdComponentsPostRequest, options?: Configuration): Promise<ComponentsSchema> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdComponentsPost(param.appID, param.authToken, param.assetId, param.formatId, param.componentSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_formats 
     * Delete asset\'s format
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdDeleteWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdDeleteWithHttpInfo(param.appID, param.authToken, param.assetId, param.formatId, param.deleteImmediately,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_formats 
     * Delete asset\'s format
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdDelete(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdDelete(param.appID, param.authToken, param.assetId, param.formatId, param.deleteImmediately,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get all asset\'s file sets in a specific format
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdFileSetsGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdFileSetsGetRequest, options?: Configuration): Promise<HttpInfo<FileSetsSchema>> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdFileSetsGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.formatId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get all asset\'s file sets in a specific format
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdFileSetsGet(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdFileSetsGetRequest, options?: Configuration): Promise<FileSetsSchema> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdFileSetsGet(param.appID, param.authToken, param.assetId, param.formatId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get all file sets with matching format and storage method
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdFileSetsSourcesGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdFileSetsSourcesGetRequest, options?: Configuration): Promise<HttpInfo<FileSetSourcesSchema>> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdFileSetsSourcesGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.formatId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get all file sets with matching format and storage method
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdFileSetsSourcesGet(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdFileSetsSourcesGetRequest, options?: Configuration): Promise<FileSetSourcesSchema> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdFileSetsSourcesGet(param.appID, param.authToken, param.assetId, param.formatId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get all file sets with matching format and storage method
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdFileSetsSourcesStorageMethodGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdFileSetsSourcesStorageMethodGetRequest, options?: Configuration): Promise<HttpInfo<FileSetsSchema>> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdFileSetsSourcesStorageMethodGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.formatId, param.storageMethod,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get all file sets with matching format and storage method
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdFileSetsSourcesStorageMethodGet(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdFileSetsSourcesStorageMethodGetRequest, options?: Configuration): Promise<FileSetsSchema> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdFileSetsSourcesStorageMethodGet(param.appID, param.authToken, param.assetId, param.formatId, param.storageMethod,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_formats 
     * Get asset\'s format
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdGetRequest, options?: Configuration): Promise<HttpInfo<FormatSchema>> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.formatId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_formats 
     * Get asset\'s format
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdGet(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdGetRequest, options?: Configuration): Promise<FormatSchema> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdGet(param.appID, param.authToken, param.assetId, param.formatId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_formats 
     * Update format information
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdPatchWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdPatchRequest, options?: Configuration): Promise<HttpInfo<FormatSchema>> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdPatchWithHttpInfo(param.appID, param.authToken, param.assetId, param.formatId, param.formatSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_formats 
     * Update format information
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdPatch(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdPatchRequest, options?: Configuration): Promise<FormatSchema> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdPatch(param.appID, param.authToken, param.assetId, param.formatId, param.formatSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_formats 
     * Purge deleted asset\'s format
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdPurgeDeleteWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdPurgeDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdPurgeDeleteWithHttpInfo(param.appID, param.authToken, param.assetId, param.formatId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_formats 
     * Purge deleted asset\'s format
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdPurgeDelete(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdPurgeDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdPurgeDelete(param.appID, param.authToken, param.assetId, param.formatId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_formats 
     * Update format information
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdPutWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdPutRequest, options?: Configuration): Promise<HttpInfo<FormatSchema>> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdPutWithHttpInfo(param.appID, param.authToken, param.assetId, param.formatId, param.formatSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_formats 
     * Update format information
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdPut(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdPutRequest, options?: Configuration): Promise<FormatSchema> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdPut(param.appID, param.authToken, param.assetId, param.formatId, param.formatSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_restore_archived_formats 
     * Restore archived format
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdRestorePostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdRestorePostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdRestorePostWithHttpInfo(param.appID, param.authToken, param.assetId, param.formatId, param.formatRestoreSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_restore_archived_formats 
     * Restore archived format
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdRestorePost(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdRestorePostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdRestorePost(param.appID, param.authToken, param.assetId, param.formatId, param.formatRestoreSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_formats 
     * Restore deleted asset\'s format
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdRestorePutWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdRestorePutRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdRestorePutWithHttpInfo(param.appID, param.authToken, param.assetId, param.formatId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_formats 
     * Restore deleted asset\'s format
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdRestorePut(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdRestorePutRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdRestorePut(param.appID, param.authToken, param.assetId, param.formatId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get all asset\'s file sets in a specific format on a specific storage
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdStoragesStorageIdFileSetsGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdStoragesStorageIdFileSetsGetRequest, options?: Configuration): Promise<HttpInfo<FileSetsSchema>> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdStoragesStorageIdFileSetsGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.formatId, param.storageId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get all asset\'s file sets in a specific format on a specific storage
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsFormatIdStoragesStorageIdFileSetsGet(param: FilesApiFilesV1AssetsAssetIdFormatsFormatIdStoragesStorageIdFileSetsGetRequest, options?: Configuration): Promise<FileSetsSchema> {
        return this.api.filesV1AssetsAssetIdFormatsFormatIdStoragesStorageIdFileSetsGet(param.appID, param.authToken, param.assetId, param.formatId, param.storageId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_formats 
     * Get all asset\'s formats
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFormatsGetRequest, options?: Configuration): Promise<HttpInfo<FormatsSchema>> {
        return this.api.filesV1AssetsAssetIdFormatsGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_formats 
     * Get all asset\'s formats
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsGet(param: FilesApiFilesV1AssetsAssetIdFormatsGetRequest, options?: Configuration): Promise<FormatsSchema> {
        return this.api.filesV1AssetsAssetIdFormatsGet(param.appID, param.authToken, param.assetId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_formats 
     * Get asset\'s format
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsNameGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFormatsNameGetRequest, options?: Configuration): Promise<HttpInfo<FormatSchema>> {
        return this.api.filesV1AssetsAssetIdFormatsNameGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.name,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_formats 
     * Get asset\'s format
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsNameGet(param: FilesApiFilesV1AssetsAssetIdFormatsNameGetRequest, options?: Configuration): Promise<FormatSchema> {
        return this.api.filesV1AssetsAssetIdFormatsNameGet(param.appID, param.authToken, param.assetId, param.name,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_formats 
     * Create format and associate to asset
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsPostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdFormatsPostRequest, options?: Configuration): Promise<HttpInfo<FormatSchema>> {
        return this.api.filesV1AssetsAssetIdFormatsPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.formatSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_formats 
     * Create format and associate to asset
     * @param param the request object
     */
    public filesV1AssetsAssetIdFormatsPost(param: FilesApiFilesV1AssetsAssetIdFormatsPostRequest, options?: Configuration): Promise<FormatSchema> {
        return this.api.filesV1AssetsAssetIdFormatsPost(param.appID, param.authToken, param.assetId, param.formatSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_assets 
     * Get all asset\'s keyframes
     * @param param the request object
     */
    public filesV1AssetsAssetIdKeyframesGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdKeyframesGetRequest, options?: Configuration): Promise<HttpInfo<KeyframesSchema>> {
        return this.api.filesV1AssetsAssetIdKeyframesGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.perPage, param.generateSignedUrl, param.contentDisposition, param.lastId, param.includeAllVersions,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_assets 
     * Get all asset\'s keyframes
     * @param param the request object
     */
    public filesV1AssetsAssetIdKeyframesGet(param: FilesApiFilesV1AssetsAssetIdKeyframesGetRequest, options?: Configuration): Promise<KeyframesSchema> {
        return this.api.filesV1AssetsAssetIdKeyframesGet(param.appID, param.authToken, param.assetId, param.perPage, param.generateSignedUrl, param.contentDisposition, param.lastId, param.includeAllVersions,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Delete asset\'s keyframe
     * @param param the request object
     */
    public filesV1AssetsAssetIdKeyframesKeyframeIdDeleteWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdKeyframesKeyframeIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdKeyframesKeyframeIdDeleteWithHttpInfo(param.appID, param.authToken, param.assetId, param.keyframeId, param.keepPoster,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Delete asset\'s keyframe
     * @param param the request object
     */
    public filesV1AssetsAssetIdKeyframesKeyframeIdDelete(param: FilesApiFilesV1AssetsAssetIdKeyframesKeyframeIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdKeyframesKeyframeIdDelete(param.appID, param.authToken, param.assetId, param.keyframeId, param.keepPoster,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_assets 
     * Get asset\'s proxy
     * @param param the request object
     */
    public filesV1AssetsAssetIdKeyframesKeyframeIdGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdKeyframesKeyframeIdGetRequest, options?: Configuration): Promise<HttpInfo<FileSchema>> {
        return this.api.filesV1AssetsAssetIdKeyframesKeyframeIdGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.keyframeId, param.contentDisposition,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_assets 
     * Get asset\'s proxy
     * @param param the request object
     */
    public filesV1AssetsAssetIdKeyframesKeyframeIdGet(param: FilesApiFilesV1AssetsAssetIdKeyframesKeyframeIdGetRequest, options?: Configuration): Promise<FileSchema> {
        return this.api.filesV1AssetsAssetIdKeyframesKeyframeIdGet(param.appID, param.authToken, param.assetId, param.keyframeId, param.contentDisposition,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Update keyframe information
     * @param param the request object
     */
    public filesV1AssetsAssetIdKeyframesKeyframeIdPatchWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdKeyframesKeyframeIdPatchRequest, options?: Configuration): Promise<HttpInfo<KeyframeSchema>> {
        return this.api.filesV1AssetsAssetIdKeyframesKeyframeIdPatchWithHttpInfo(param.appID, param.authToken, param.assetId, param.keyframeId, param.keyframeSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Update keyframe information
     * @param param the request object
     */
    public filesV1AssetsAssetIdKeyframesKeyframeIdPatch(param: FilesApiFilesV1AssetsAssetIdKeyframesKeyframeIdPatchRequest, options?: Configuration): Promise<KeyframeSchema> {
        return this.api.filesV1AssetsAssetIdKeyframesKeyframeIdPatch(param.appID, param.authToken, param.assetId, param.keyframeId, param.keyframeSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Make the keyframe link private
     * @param param the request object
     */
    public filesV1AssetsAssetIdKeyframesKeyframeIdPublicDeleteWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdKeyframesKeyframeIdPublicDeleteRequest, options?: Configuration): Promise<HttpInfo<KeyframeSchema>> {
        return this.api.filesV1AssetsAssetIdKeyframesKeyframeIdPublicDeleteWithHttpInfo(param.appID, param.authToken, param.assetId, param.keyframeId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Make the keyframe link private
     * @param param the request object
     */
    public filesV1AssetsAssetIdKeyframesKeyframeIdPublicDelete(param: FilesApiFilesV1AssetsAssetIdKeyframesKeyframeIdPublicDeleteRequest, options?: Configuration): Promise<KeyframeSchema> {
        return this.api.filesV1AssetsAssetIdKeyframesKeyframeIdPublicDelete(param.appID, param.authToken, param.assetId, param.keyframeId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Make the keyframe link public
     * @param param the request object
     */
    public filesV1AssetsAssetIdKeyframesKeyframeIdPublicPostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdKeyframesKeyframeIdPublicPostRequest, options?: Configuration): Promise<HttpInfo<KeyframeSchema>> {
        return this.api.filesV1AssetsAssetIdKeyframesKeyframeIdPublicPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.keyframeId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Make the keyframe link public
     * @param param the request object
     */
    public filesV1AssetsAssetIdKeyframesKeyframeIdPublicPost(param: FilesApiFilesV1AssetsAssetIdKeyframesKeyframeIdPublicPostRequest, options?: Configuration): Promise<KeyframeSchema> {
        return this.api.filesV1AssetsAssetIdKeyframesKeyframeIdPublicPost(param.appID, param.authToken, param.assetId, param.keyframeId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Update keyframe information
     * @param param the request object
     */
    public filesV1AssetsAssetIdKeyframesKeyframeIdPutWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdKeyframesKeyframeIdPutRequest, options?: Configuration): Promise<HttpInfo<KeyframeSchema>> {
        return this.api.filesV1AssetsAssetIdKeyframesKeyframeIdPutWithHttpInfo(param.appID, param.authToken, param.assetId, param.keyframeId, param.keyframeSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Update keyframe information
     * @param param the request object
     */
    public filesV1AssetsAssetIdKeyframesKeyframeIdPut(param: FilesApiFilesV1AssetsAssetIdKeyframesKeyframeIdPutRequest, options?: Configuration): Promise<KeyframeSchema> {
        return this.api.filesV1AssetsAssetIdKeyframesKeyframeIdPut(param.appID, param.authToken, param.assetId, param.keyframeId, param.keyframeSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Create keyframe and associate to asset
     * @param param the request object
     */
    public filesV1AssetsAssetIdKeyframesPostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdKeyframesPostRequest, options?: Configuration): Promise<HttpInfo<KeyframeCreateSchema>> {
        return this.api.filesV1AssetsAssetIdKeyframesPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.keyframeSchema, param.useGoogleResumableUpload,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Create keyframe and associate to asset
     * @param param the request object
     */
    public filesV1AssetsAssetIdKeyframesPost(param: FilesApiFilesV1AssetsAssetIdKeyframesPostRequest, options?: Configuration): Promise<KeyframeCreateSchema> {
        return this.api.filesV1AssetsAssetIdKeyframesPost(param.appID, param.authToken, param.assetId, param.keyframeSchema, param.useGoogleResumableUpload,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Create keyframe and associate to asset
     * @param param the request object
     */
    public filesV1AssetsAssetIdMethodStorageMethodKeyframesPostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdMethodStorageMethodKeyframesPostRequest, options?: Configuration): Promise<HttpInfo<KeyframeCreateSchema>> {
        return this.api.filesV1AssetsAssetIdMethodStorageMethodKeyframesPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.storageMethod, param.keyframeSchema, param.useGoogleResumableUpload,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Create keyframe and associate to asset
     * @param param the request object
     */
    public filesV1AssetsAssetIdMethodStorageMethodKeyframesPost(param: FilesApiFilesV1AssetsAssetIdMethodStorageMethodKeyframesPostRequest, options?: Configuration): Promise<KeyframeCreateSchema> {
        return this.api.filesV1AssetsAssetIdMethodStorageMethodKeyframesPost(param.appID, param.authToken, param.assetId, param.storageMethod, param.keyframeSchema, param.useGoogleResumableUpload,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_proxies 
     * Create proxy and associate to asset
     * @param param the request object
     */
    public filesV1AssetsAssetIdMethodStorageMethodProxiesPostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdMethodStorageMethodProxiesPostRequest, options?: Configuration): Promise<HttpInfo<ProxyCreateSchema>> {
        return this.api.filesV1AssetsAssetIdMethodStorageMethodProxiesPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.storageMethod, param.proxySchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_proxies 
     * Create proxy and associate to asset
     * @param param the request object
     */
    public filesV1AssetsAssetIdMethodStorageMethodProxiesPost(param: FilesApiFilesV1AssetsAssetIdMethodStorageMethodProxiesPostRequest, options?: Configuration): Promise<ProxyCreateSchema> {
        return this.api.filesV1AssetsAssetIdMethodStorageMethodProxiesPost(param.appID, param.authToken, param.assetId, param.storageMethod, param.proxySchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_proxies 
     * Get all asset\'s proxies
     * @param param the request object
     */
    public filesV1AssetsAssetIdProxiesGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdProxiesGetRequest, options?: Configuration): Promise<HttpInfo<ProxiesSchema>> {
        return this.api.filesV1AssetsAssetIdProxiesGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.perPage, param.generateSignedUrl, param.contentDisposition, param.lastId, param.bypassUrlCache,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_proxies 
     * Get all asset\'s proxies
     * @param param the request object
     */
    public filesV1AssetsAssetIdProxiesGet(param: FilesApiFilesV1AssetsAssetIdProxiesGetRequest, options?: Configuration): Promise<ProxiesSchema> {
        return this.api.filesV1AssetsAssetIdProxiesGet(param.appID, param.authToken, param.assetId, param.perPage, param.generateSignedUrl, param.contentDisposition, param.lastId, param.bypassUrlCache,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_proxies 
     * Create proxy and associate to asset
     * @param param the request object
     */
    public filesV1AssetsAssetIdProxiesPostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdProxiesPostRequest, options?: Configuration): Promise<HttpInfo<ProxyCreateSchema>> {
        return this.api.filesV1AssetsAssetIdProxiesPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.proxySchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_proxies 
     * Create proxy and associate to asset
     * @param param the request object
     */
    public filesV1AssetsAssetIdProxiesPost(param: FilesApiFilesV1AssetsAssetIdProxiesPostRequest, options?: Configuration): Promise<ProxyCreateSchema> {
        return this.api.filesV1AssetsAssetIdProxiesPost(param.appID, param.authToken, param.assetId, param.proxySchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_proxies 
     * Delete asset\'s proxy
     * @param param the request object
     */
    public filesV1AssetsAssetIdProxiesProxyIdDeleteWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdProxiesProxyIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdProxiesProxyIdDeleteWithHttpInfo(param.appID, param.authToken, param.assetId, param.proxyId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_proxies 
     * Delete asset\'s proxy
     * @param param the request object
     */
    public filesV1AssetsAssetIdProxiesProxyIdDelete(param: FilesApiFilesV1AssetsAssetIdProxiesProxyIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdProxiesProxyIdDelete(param.appID, param.authToken, param.assetId, param.proxyId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_proxies 
     * Get asset\'s proxy download url
     * @param param the request object
     */
    public filesV1AssetsAssetIdProxiesProxyIdDownloadUrlGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdProxiesProxyIdDownloadUrlGetRequest, options?: Configuration): Promise<HttpInfo<ProxyDownloadURLSchema>> {
        return this.api.filesV1AssetsAssetIdProxiesProxyIdDownloadUrlGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.proxyId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_proxies 
     * Get asset\'s proxy download url
     * @param param the request object
     */
    public filesV1AssetsAssetIdProxiesProxyIdDownloadUrlGet(param: FilesApiFilesV1AssetsAssetIdProxiesProxyIdDownloadUrlGetRequest, options?: Configuration): Promise<ProxyDownloadURLSchema> {
        return this.api.filesV1AssetsAssetIdProxiesProxyIdDownloadUrlGet(param.appID, param.authToken, param.assetId, param.proxyId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_proxies 
     * Get asset\'s proxy
     * @param param the request object
     */
    public filesV1AssetsAssetIdProxiesProxyIdGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdProxiesProxyIdGetRequest, options?: Configuration): Promise<HttpInfo<ProxySchema>> {
        return this.api.filesV1AssetsAssetIdProxiesProxyIdGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.proxyId, param.contentDisposition,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_proxies 
     * Get asset\'s proxy
     * @param param the request object
     */
    public filesV1AssetsAssetIdProxiesProxyIdGet(param: FilesApiFilesV1AssetsAssetIdProxiesProxyIdGetRequest, options?: Configuration): Promise<ProxySchema> {
        return this.api.filesV1AssetsAssetIdProxiesProxyIdGet(param.appID, param.authToken, param.assetId, param.proxyId, param.contentDisposition,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_transcode_jobs 
     * Create a transcode job for keyframes from a proxy
     * @param param the request object
     */
    public filesV1AssetsAssetIdProxiesProxyIdKeyframesPostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdProxiesProxyIdKeyframesPostRequest, options?: Configuration): Promise<HttpInfo<TranscodeResponseSchema>> {
        return this.api.filesV1AssetsAssetIdProxiesProxyIdKeyframesPostWithHttpInfo(param.authToken, param.appID, param.assetId, param.proxyId, param.transcodeRequestSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_transcode_jobs 
     * Create a transcode job for keyframes from a proxy
     * @param param the request object
     */
    public filesV1AssetsAssetIdProxiesProxyIdKeyframesPost(param: FilesApiFilesV1AssetsAssetIdProxiesProxyIdKeyframesPostRequest, options?: Configuration): Promise<TranscodeResponseSchema> {
        return this.api.filesV1AssetsAssetIdProxiesProxyIdKeyframesPost(param.authToken, param.appID, param.assetId, param.proxyId, param.transcodeRequestSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_proxies 
     * Cleanup S3 multipart upload
     * @param param the request object
     */
    public filesV1AssetsAssetIdProxiesProxyIdMultipartCleanupPostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdProxiesProxyIdMultipartCleanupPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdProxiesProxyIdMultipartCleanupPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.proxyId, param.multipartUploadProxyCleanupSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_proxies 
     * Cleanup S3 multipart upload
     * @param param the request object
     */
    public filesV1AssetsAssetIdProxiesProxyIdMultipartCleanupPost(param: FilesApiFilesV1AssetsAssetIdProxiesProxyIdMultipartCleanupPostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdProxiesProxyIdMultipartCleanupPost(param.appID, param.authToken, param.assetId, param.proxyId, param.multipartUploadProxyCleanupSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_proxies 
     * Get presigned urls for S3 multipart upload.
     * @param param the request object
     */
    public filesV1AssetsAssetIdProxiesProxyIdMultipartUrlGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdProxiesProxyIdMultipartUrlGetRequest, options?: Configuration): Promise<HttpInfo<MultiPartURLsSchema>> {
        return this.api.filesV1AssetsAssetIdProxiesProxyIdMultipartUrlGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.proxyId, param.uploadId, param.type, param.maxPartNumber,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_proxies 
     * Get presigned urls for S3 multipart upload.
     * @param param the request object
     */
    public filesV1AssetsAssetIdProxiesProxyIdMultipartUrlGet(param: FilesApiFilesV1AssetsAssetIdProxiesProxyIdMultipartUrlGetRequest, options?: Configuration): Promise<MultiPartURLsSchema> {
        return this.api.filesV1AssetsAssetIdProxiesProxyIdMultipartUrlGet(param.appID, param.authToken, param.assetId, param.proxyId, param.uploadId, param.type, param.maxPartNumber,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_proxies 
     * Get presigned urls for S3 multipart part upload.
     * @param param the request object
     */
    public filesV1AssetsAssetIdProxiesProxyIdMultipartUrlPartGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdProxiesProxyIdMultipartUrlPartGetRequest, options?: Configuration): Promise<HttpInfo<MultiPartUploadURLsSchema>> {
        return this.api.filesV1AssetsAssetIdProxiesProxyIdMultipartUrlPartGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.proxyId, param.partsNum, param.uploadId, param.perPage, param.page,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_proxies 
     * Get presigned urls for S3 multipart part upload.
     * @param param the request object
     */
    public filesV1AssetsAssetIdProxiesProxyIdMultipartUrlPartGet(param: FilesApiFilesV1AssetsAssetIdProxiesProxyIdMultipartUrlPartGetRequest, options?: Configuration): Promise<MultiPartUploadURLsSchema> {
        return this.api.filesV1AssetsAssetIdProxiesProxyIdMultipartUrlPartGet(param.appID, param.authToken, param.assetId, param.proxyId, param.partsNum, param.uploadId, param.perPage, param.page,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_proxies 
     * Update proxy information
     * @param param the request object
     */
    public filesV1AssetsAssetIdProxiesProxyIdPatchWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdProxiesProxyIdPatchRequest, options?: Configuration): Promise<HttpInfo<ProxySchema>> {
        return this.api.filesV1AssetsAssetIdProxiesProxyIdPatchWithHttpInfo(param.appID, param.authToken, param.assetId, param.proxyId, param.proxySchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_proxies 
     * Update proxy information
     * @param param the request object
     */
    public filesV1AssetsAssetIdProxiesProxyIdPatch(param: FilesApiFilesV1AssetsAssetIdProxiesProxyIdPatchRequest, options?: Configuration): Promise<ProxySchema> {
        return this.api.filesV1AssetsAssetIdProxiesProxyIdPatch(param.appID, param.authToken, param.assetId, param.proxyId, param.proxySchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_proxies 
     * Make the proxy link private
     * @param param the request object
     */
    public filesV1AssetsAssetIdProxiesProxyIdPublicDeleteWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdProxiesProxyIdPublicDeleteRequest, options?: Configuration): Promise<HttpInfo<ProxySchema>> {
        return this.api.filesV1AssetsAssetIdProxiesProxyIdPublicDeleteWithHttpInfo(param.appID, param.authToken, param.assetId, param.proxyId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_proxies 
     * Make the proxy link private
     * @param param the request object
     */
    public filesV1AssetsAssetIdProxiesProxyIdPublicDelete(param: FilesApiFilesV1AssetsAssetIdProxiesProxyIdPublicDeleteRequest, options?: Configuration): Promise<ProxySchema> {
        return this.api.filesV1AssetsAssetIdProxiesProxyIdPublicDelete(param.appID, param.authToken, param.assetId, param.proxyId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_proxies 
     * Make the proxy link public
     * @param param the request object
     */
    public filesV1AssetsAssetIdProxiesProxyIdPublicPostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdProxiesProxyIdPublicPostRequest, options?: Configuration): Promise<HttpInfo<ProxySchema>> {
        return this.api.filesV1AssetsAssetIdProxiesProxyIdPublicPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.proxyId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_proxies 
     * Make the proxy link public
     * @param param the request object
     */
    public filesV1AssetsAssetIdProxiesProxyIdPublicPost(param: FilesApiFilesV1AssetsAssetIdProxiesProxyIdPublicPostRequest, options?: Configuration): Promise<ProxySchema> {
        return this.api.filesV1AssetsAssetIdProxiesProxyIdPublicPost(param.appID, param.authToken, param.assetId, param.proxyId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_proxies 
     * Update proxy information
     * @param param the request object
     */
    public filesV1AssetsAssetIdProxiesProxyIdPutWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdProxiesProxyIdPutRequest, options?: Configuration): Promise<HttpInfo<ProxySchema>> {
        return this.api.filesV1AssetsAssetIdProxiesProxyIdPutWithHttpInfo(param.appID, param.authToken, param.assetId, param.proxyId, param.proxySchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_proxies 
     * Update proxy information
     * @param param the request object
     */
    public filesV1AssetsAssetIdProxiesProxyIdPut(param: FilesApiFilesV1AssetsAssetIdProxiesProxyIdPutRequest, options?: Configuration): Promise<ProxySchema> {
        return this.api.filesV1AssetsAssetIdProxiesProxyIdPut(param.appID, param.authToken, param.assetId, param.proxyId, param.proxySchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_asset_subtitles 
     * Get all asset\'s subtitles
     * @param param the request object
     */
    public filesV1AssetsAssetIdSubtitlesGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdSubtitlesGetRequest, options?: Configuration): Promise<HttpInfo<SubtitlesSchema>> {
        return this.api.filesV1AssetsAssetIdSubtitlesGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_asset_subtitles 
     * Get all asset\'s subtitles
     * @param param the request object
     */
    public filesV1AssetsAssetIdSubtitlesGet(param: FilesApiFilesV1AssetsAssetIdSubtitlesGetRequest, options?: Configuration): Promise<SubtitlesSchema> {
        return this.api.filesV1AssetsAssetIdSubtitlesGet(param.appID, param.authToken, param.assetId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_asset_subtitles 
     * Get asset\'s closed captions subtitle for a particular language
     * @param param the request object
     */
    public filesV1AssetsAssetIdSubtitlesLanguageCcGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdSubtitlesLanguageCcGetRequest, options?: Configuration): Promise<HttpInfo<SubtitleSchema>> {
        return this.api.filesV1AssetsAssetIdSubtitlesLanguageCcGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.language,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_asset_subtitles 
     * Get asset\'s closed captions subtitle for a particular language
     * @param param the request object
     */
    public filesV1AssetsAssetIdSubtitlesLanguageCcGet(param: FilesApiFilesV1AssetsAssetIdSubtitlesLanguageCcGetRequest, options?: Configuration): Promise<SubtitleSchema> {
        return this.api.filesV1AssetsAssetIdSubtitlesLanguageCcGet(param.appID, param.authToken, param.assetId, param.language,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_asset_subtitles 
     * Get asset\'s closed captions subtitle file for a particular language
     * @param param the request object
     */
    public filesV1AssetsAssetIdSubtitlesLanguageCcWebvttGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdSubtitlesLanguageCcWebvttGetRequest, options?: Configuration): Promise<HttpInfo<string>> {
        return this.api.filesV1AssetsAssetIdSubtitlesLanguageCcWebvttGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.language,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_asset_subtitles 
     * Get asset\'s closed captions subtitle file for a particular language
     * @param param the request object
     */
    public filesV1AssetsAssetIdSubtitlesLanguageCcWebvttGet(param: FilesApiFilesV1AssetsAssetIdSubtitlesLanguageCcWebvttGetRequest, options?: Configuration): Promise<string> {
        return this.api.filesV1AssetsAssetIdSubtitlesLanguageCcWebvttGet(param.appID, param.authToken, param.assetId, param.language,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_asset_subtitles 
     * Get asset\'s subtitle for a particular language
     * @param param the request object
     */
    public filesV1AssetsAssetIdSubtitlesLanguageGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdSubtitlesLanguageGetRequest, options?: Configuration): Promise<HttpInfo<SubtitleSchema>> {
        return this.api.filesV1AssetsAssetIdSubtitlesLanguageGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.language,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_asset_subtitles 
     * Get asset\'s subtitle for a particular language
     * @param param the request object
     */
    public filesV1AssetsAssetIdSubtitlesLanguageGet(param: FilesApiFilesV1AssetsAssetIdSubtitlesLanguageGetRequest, options?: Configuration): Promise<SubtitleSchema> {
        return this.api.filesV1AssetsAssetIdSubtitlesLanguageGet(param.appID, param.authToken, param.assetId, param.language,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_asset_subtitles 
     * Get asset\'s subtitle file for a particular language
     * @param param the request object
     */
    public filesV1AssetsAssetIdSubtitlesLanguageWebvttGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdSubtitlesLanguageWebvttGetRequest, options?: Configuration): Promise<HttpInfo<string>> {
        return this.api.filesV1AssetsAssetIdSubtitlesLanguageWebvttGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.language,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_asset_subtitles 
     * Get asset\'s subtitle file for a particular language
     * @param param the request object
     */
    public filesV1AssetsAssetIdSubtitlesLanguageWebvttGet(param: FilesApiFilesV1AssetsAssetIdSubtitlesLanguageWebvttGetRequest, options?: Configuration): Promise<string> {
        return this.api.filesV1AssetsAssetIdSubtitlesLanguageWebvttGet(param.appID, param.authToken, param.assetId, param.language,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_asset_subtitles 
     * Create subtitle proxy and associate to asset
     * @param param the request object
     */
    public filesV1AssetsAssetIdSubtitlesPostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdSubtitlesPostRequest, options?: Configuration): Promise<HttpInfo<SubtitleSchema>> {
        return this.api.filesV1AssetsAssetIdSubtitlesPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.subtitleSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_asset_subtitles 
     * Create subtitle proxy and associate to asset
     * @param param the request object
     */
    public filesV1AssetsAssetIdSubtitlesPost(param: FilesApiFilesV1AssetsAssetIdSubtitlesPostRequest, options?: Configuration): Promise<SubtitleSchema> {
        return this.api.filesV1AssetsAssetIdSubtitlesPost(param.appID, param.authToken, param.assetId, param.subtitleSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_assets 
     * Delete asset\'s subtitle
     * @param param the request object
     */
    public filesV1AssetsAssetIdSubtitlesSubtitleIdCcDeleteWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdSubtitlesSubtitleIdCcDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdSubtitlesSubtitleIdCcDeleteWithHttpInfo(param.appID, param.authToken, param.assetId, param.subtitleId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_assets 
     * Delete asset\'s subtitle
     * @param param the request object
     */
    public filesV1AssetsAssetIdSubtitlesSubtitleIdCcDelete(param: FilesApiFilesV1AssetsAssetIdSubtitlesSubtitleIdCcDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdSubtitlesSubtitleIdCcDelete(param.appID, param.authToken, param.assetId, param.subtitleId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_assets 
     * Delete asset\'s subtitle
     * @param param the request object
     */
    public filesV1AssetsAssetIdSubtitlesSubtitleIdDeleteWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdSubtitlesSubtitleIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdSubtitlesSubtitleIdDeleteWithHttpInfo(param.appID, param.authToken, param.assetId, param.subtitleId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_assets 
     * Delete asset\'s subtitle
     * @param param the request object
     */
    public filesV1AssetsAssetIdSubtitlesSubtitleIdDelete(param: FilesApiFilesV1AssetsAssetIdSubtitlesSubtitleIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdSubtitlesSubtitleIdDelete(param.appID, param.authToken, param.assetId, param.subtitleId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_asset_subtitles 
     * Get asset\'s subtitle for a language
     * @param param the request object
     */
    public filesV1AssetsAssetIdSubtitlesSubtitleIdGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdSubtitlesSubtitleIdGetRequest, options?: Configuration): Promise<HttpInfo<SubtitleSchema>> {
        return this.api.filesV1AssetsAssetIdSubtitlesSubtitleIdGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.subtitleId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_asset_subtitles 
     * Get asset\'s subtitle for a language
     * @param param the request object
     */
    public filesV1AssetsAssetIdSubtitlesSubtitleIdGet(param: FilesApiFilesV1AssetsAssetIdSubtitlesSubtitleIdGetRequest, options?: Configuration): Promise<SubtitleSchema> {
        return this.api.filesV1AssetsAssetIdSubtitlesSubtitleIdGet(param.appID, param.authToken, param.assetId, param.subtitleId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_asset_subtitles 
     * Update subtitle information
     * @param param the request object
     */
    public filesV1AssetsAssetIdSubtitlesSubtitleIdPatchWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdSubtitlesSubtitleIdPatchRequest, options?: Configuration): Promise<HttpInfo<SubtitleSchema>> {
        return this.api.filesV1AssetsAssetIdSubtitlesSubtitleIdPatchWithHttpInfo(param.appID, param.authToken, param.assetId, param.subtitleId, param.subtitleSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_asset_subtitles 
     * Update subtitle information
     * @param param the request object
     */
    public filesV1AssetsAssetIdSubtitlesSubtitleIdPatch(param: FilesApiFilesV1AssetsAssetIdSubtitlesSubtitleIdPatchRequest, options?: Configuration): Promise<SubtitleSchema> {
        return this.api.filesV1AssetsAssetIdSubtitlesSubtitleIdPatch(param.appID, param.authToken, param.assetId, param.subtitleId, param.subtitleSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_asset_subtitles 
     * Update subtitle information
     * @param param the request object
     */
    public filesV1AssetsAssetIdSubtitlesSubtitleIdPutWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdSubtitlesSubtitleIdPutRequest, options?: Configuration): Promise<HttpInfo<SubtitleSchema>> {
        return this.api.filesV1AssetsAssetIdSubtitlesSubtitleIdPutWithHttpInfo(param.appID, param.authToken, param.assetId, param.subtitleId, param.subtitleSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_asset_subtitles 
     * Update subtitle information
     * @param param the request object
     */
    public filesV1AssetsAssetIdSubtitlesSubtitleIdPut(param: FilesApiFilesV1AssetsAssetIdSubtitlesSubtitleIdPutRequest, options?: Configuration): Promise<SubtitleSchema> {
        return this.api.filesV1AssetsAssetIdSubtitlesSubtitleIdPut(param.appID, param.authToken, param.assetId, param.subtitleId, param.subtitleSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_files 
     * Delete temporary file set with files
     * @param param the request object
     */
    public filesV1AssetsAssetIdTemporaryFileSetsFileSetIdDeleteWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdTemporaryFileSetsFileSetIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdTemporaryFileSetsFileSetIdDeleteWithHttpInfo(param.appID, param.authToken, param.assetId, param.fileSetId, param.deleteCloudObjects,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_files 
     * Delete temporary file set with files
     * @param param the request object
     */
    public filesV1AssetsAssetIdTemporaryFileSetsFileSetIdDelete(param: FilesApiFilesV1AssetsAssetIdTemporaryFileSetsFileSetIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdTemporaryFileSetsFileSetIdDelete(param.appID, param.authToken, param.assetId, param.fileSetId, param.deleteCloudObjects,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get files from a temporary file set
     * @param param the request object
     */
    public filesV1AssetsAssetIdTemporaryFileSetsFileSetIdFilesGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdTemporaryFileSetsFileSetIdFilesGetRequest, options?: Configuration): Promise<HttpInfo<FilesSchema>> {
        return this.api.filesV1AssetsAssetIdTemporaryFileSetsFileSetIdFilesGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.fileSetId, param.generateSignedUrl,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get files from a temporary file set
     * @param param the request object
     */
    public filesV1AssetsAssetIdTemporaryFileSetsFileSetIdFilesGet(param: FilesApiFilesV1AssetsAssetIdTemporaryFileSetsFileSetIdFilesGetRequest, options?: Configuration): Promise<FilesSchema> {
        return this.api.filesV1AssetsAssetIdTemporaryFileSetsFileSetIdFilesGet(param.appID, param.authToken, param.assetId, param.fileSetId, param.generateSignedUrl,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Create temporary file set and associate to asset
     * @param param the request object
     */
    public filesV1AssetsAssetIdTemporaryFileSetsPostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdTemporaryFileSetsPostRequest, options?: Configuration): Promise<HttpInfo<TemporaryFileSetSchema>> {
        return this.api.filesV1AssetsAssetIdTemporaryFileSetsPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.temporaryFileSetSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Create temporary file set and associate to asset
     * @param param the request object
     */
    public filesV1AssetsAssetIdTemporaryFileSetsPost(param: FilesApiFilesV1AssetsAssetIdTemporaryFileSetsPostRequest, options?: Configuration): Promise<TemporaryFileSetSchema> {
        return this.api.filesV1AssetsAssetIdTemporaryFileSetsPost(param.appID, param.authToken, param.assetId, param.temporaryFileSetSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Update temporary file\'s info
     * @param param the request object
     */
    public filesV1AssetsAssetIdTemporaryFilesFileIdPatchWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdTemporaryFilesFileIdPatchRequest, options?: Configuration): Promise<HttpInfo<FileSchema>> {
        return this.api.filesV1AssetsAssetIdTemporaryFilesFileIdPatchWithHttpInfo(param.appID, param.authToken, param.assetId, param.fileId, param.fileSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Update temporary file\'s info
     * @param param the request object
     */
    public filesV1AssetsAssetIdTemporaryFilesFileIdPatch(param: FilesApiFilesV1AssetsAssetIdTemporaryFilesFileIdPatchRequest, options?: Configuration): Promise<FileSchema> {
        return this.api.filesV1AssetsAssetIdTemporaryFilesFileIdPatch(param.appID, param.authToken, param.assetId, param.fileId, param.fileSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Update temporary file\'s info
     * @param param the request object
     */
    public filesV1AssetsAssetIdTemporaryFilesFileIdPutWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdTemporaryFilesFileIdPutRequest, options?: Configuration): Promise<HttpInfo<FileSchema>> {
        return this.api.filesV1AssetsAssetIdTemporaryFilesFileIdPutWithHttpInfo(param.appID, param.authToken, param.assetId, param.fileId, param.fileSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Update temporary file\'s info
     * @param param the request object
     */
    public filesV1AssetsAssetIdTemporaryFilesFileIdPut(param: FilesApiFilesV1AssetsAssetIdTemporaryFilesFileIdPutRequest, options?: Configuration): Promise<FileSchema> {
        return this.api.filesV1AssetsAssetIdTemporaryFilesFileIdPut(param.appID, param.authToken, param.assetId, param.fileId, param.fileSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Create temporary transfer file for FILE storage transfers
     * @param param the request object
     */
    public filesV1AssetsAssetIdTemporaryFilesPostWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdTemporaryFilesPostRequest, options?: Configuration): Promise<HttpInfo<TemporaryFileCreateSchema>> {
        return this.api.filesV1AssetsAssetIdTemporaryFilesPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.fileSchema, param.store,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Create temporary transfer file for FILE storage transfers
     * @param param the request object
     */
    public filesV1AssetsAssetIdTemporaryFilesPost(param: FilesApiFilesV1AssetsAssetIdTemporaryFilesPostRequest, options?: Configuration): Promise<TemporaryFileCreateSchema> {
        return this.api.filesV1AssetsAssetIdTemporaryFilesPost(param.appID, param.authToken, param.assetId, param.fileSchema, param.store,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_files 
     * Delete asset\'s file sets
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsAllFileSetsDeleteWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdVersionsAllFileSetsDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdVersionsAllFileSetsDeleteWithHttpInfo(param.appID, param.authToken, param.assetId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_files 
     * Delete asset\'s file sets
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsAllFileSetsDelete(param: FilesApiFilesV1AssetsAssetIdVersionsAllFileSetsDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdVersionsAllFileSetsDelete(param.appID, param.authToken, param.assetId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_files 
     * Delete asset\'s files entries by version (Not the actual file, use DELETE file_set for that)
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsAllFilesDeleteWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdVersionsAllFilesDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdVersionsAllFilesDeleteWithHttpInfo(param.appID, param.authToken, param.assetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_files 
     * Delete asset\'s files entries by version (Not the actual file, use DELETE file_set for that)
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsAllFilesDelete(param: FilesApiFilesV1AssetsAssetIdVersionsAllFilesDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdVersionsAllFilesDelete(param.appID, param.authToken, param.assetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_formats 
     * Delete asset\'s formats all versions
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsAllFormatsDeleteWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdVersionsAllFormatsDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdVersionsAllFormatsDeleteWithHttpInfo(param.appID, param.authToken, param.assetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_formats 
     * Delete asset\'s formats all versions
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsAllFormatsDelete(param: FilesApiFilesV1AssetsAssetIdVersionsAllFormatsDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdVersionsAllFormatsDelete(param.appID, param.authToken, param.assetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Delete asset\'s keyframes all versions
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsAllKeyframesDeleteWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdVersionsAllKeyframesDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdVersionsAllKeyframesDeleteWithHttpInfo(param.appID, param.authToken, param.assetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Delete asset\'s keyframes all versions
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsAllKeyframesDelete(param: FilesApiFilesV1AssetsAssetIdVersionsAllKeyframesDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdVersionsAllKeyframesDelete(param.appID, param.authToken, param.assetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_proxies 
     * Delete asset\'s proxies all versions
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsAllProxiesDeleteWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdVersionsAllProxiesDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdVersionsAllProxiesDeleteWithHttpInfo(param.appID, param.authToken, param.assetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_proxies 
     * Delete asset\'s proxies all versions
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsAllProxiesDelete(param: FilesApiFilesV1AssetsAssetIdVersionsAllProxiesDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdVersionsAllProxiesDelete(param.appID, param.authToken, param.assetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_assets 
     * Delete asset\'s subtitles all versions
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsAllSubtitlesDeleteWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdVersionsAllSubtitlesDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdVersionsAllSubtitlesDeleteWithHttpInfo(param.appID, param.authToken, param.assetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_assets 
     * Delete asset\'s subtitles all versions
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsAllSubtitlesDelete(param: FilesApiFilesV1AssetsAssetIdVersionsAllSubtitlesDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdVersionsAllSubtitlesDelete(param.appID, param.authToken, param.assetId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_files 
     * Delete asset\'s file sets by version
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsVersionIdFileSetsDeleteWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdVersionsVersionIdFileSetsDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdVersionsVersionIdFileSetsDeleteWithHttpInfo(param.appID, param.authToken, param.assetId, param.versionId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_files 
     * Delete asset\'s file sets by version
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsVersionIdFileSetsDelete(param: FilesApiFilesV1AssetsAssetIdVersionsVersionIdFileSetsDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdVersionsVersionIdFileSetsDelete(param.appID, param.authToken, param.assetId, param.versionId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get all asset\'s file sets by version
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsVersionIdFileSetsGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdVersionsVersionIdFileSetsGetRequest, options?: Configuration): Promise<HttpInfo<FileSetsSchema>> {
        return this.api.filesV1AssetsAssetIdVersionsVersionIdFileSetsGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.versionId, param.perPage, param.lastId, param.fileCount,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get all asset\'s file sets by version
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsVersionIdFileSetsGet(param: FilesApiFilesV1AssetsAssetIdVersionsVersionIdFileSetsGetRequest, options?: Configuration): Promise<FileSetsSchema> {
        return this.api.filesV1AssetsAssetIdVersionsVersionIdFileSetsGet(param.appID, param.authToken, param.assetId, param.versionId, param.perPage, param.lastId, param.fileCount,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_files 
     * Delete asset\'s files entries by version (Not the actual file, use DELETE file_set for that)
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsVersionIdFilesDeleteWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdVersionsVersionIdFilesDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdVersionsVersionIdFilesDeleteWithHttpInfo(param.appID, param.authToken, param.assetId, param.versionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_files 
     * Delete asset\'s files entries by version (Not the actual file, use DELETE file_set for that)
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsVersionIdFilesDelete(param: FilesApiFilesV1AssetsAssetIdVersionsVersionIdFilesDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdVersionsVersionIdFilesDelete(param.appID, param.authToken, param.assetId, param.versionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get all asset\'s files by version
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsVersionIdFilesGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdVersionsVersionIdFilesGetRequest, options?: Configuration): Promise<HttpInfo<FilesSchema>> {
        return this.api.filesV1AssetsAssetIdVersionsVersionIdFilesGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.versionId, param.perPage, param.generateSignedUrl, param.contentDisposition, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get all asset\'s files by version
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsVersionIdFilesGet(param: FilesApiFilesV1AssetsAssetIdVersionsVersionIdFilesGetRequest, options?: Configuration): Promise<FilesSchema> {
        return this.api.filesV1AssetsAssetIdVersionsVersionIdFilesGet(param.appID, param.authToken, param.assetId, param.versionId, param.perPage, param.generateSignedUrl, param.contentDisposition, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_formats 
     * Delete asset\'s formats by version
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsVersionIdFormatsDeleteWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdVersionsVersionIdFormatsDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdVersionsVersionIdFormatsDeleteWithHttpInfo(param.appID, param.authToken, param.assetId, param.versionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_formats 
     * Delete asset\'s formats by version
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsVersionIdFormatsDelete(param: FilesApiFilesV1AssetsAssetIdVersionsVersionIdFormatsDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdVersionsVersionIdFormatsDelete(param.appID, param.authToken, param.assetId, param.versionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_formats 
     * Get all asset\'s formats by version
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsVersionIdFormatsGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdVersionsVersionIdFormatsGetRequest, options?: Configuration): Promise<HttpInfo<FormatsSchema>> {
        return this.api.filesV1AssetsAssetIdVersionsVersionIdFormatsGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.versionId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_formats 
     * Get all asset\'s formats by version
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsVersionIdFormatsGet(param: FilesApiFilesV1AssetsAssetIdVersionsVersionIdFormatsGetRequest, options?: Configuration): Promise<FormatsSchema> {
        return this.api.filesV1AssetsAssetIdVersionsVersionIdFormatsGet(param.appID, param.authToken, param.assetId, param.versionId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Delete asset\'s keyframes by version
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsVersionIdKeyframesDeleteWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdVersionsVersionIdKeyframesDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdVersionsVersionIdKeyframesDeleteWithHttpInfo(param.appID, param.authToken, param.assetId, param.versionId, param.keepPoster,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Delete asset\'s keyframes by version
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsVersionIdKeyframesDelete(param: FilesApiFilesV1AssetsAssetIdVersionsVersionIdKeyframesDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdVersionsVersionIdKeyframesDelete(param.appID, param.authToken, param.assetId, param.versionId, param.keepPoster,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_assets 
     * Get all asset\'s keyframes by version
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsVersionIdKeyframesGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdVersionsVersionIdKeyframesGetRequest, options?: Configuration): Promise<HttpInfo<KeyframesSchema>> {
        return this.api.filesV1AssetsAssetIdVersionsVersionIdKeyframesGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.versionId, param.perPage, param.generateSignedUrl, param.contentDisposition, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_assets 
     * Get all asset\'s keyframes by version
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsVersionIdKeyframesGet(param: FilesApiFilesV1AssetsAssetIdVersionsVersionIdKeyframesGetRequest, options?: Configuration): Promise<KeyframesSchema> {
        return this.api.filesV1AssetsAssetIdVersionsVersionIdKeyframesGet(param.appID, param.authToken, param.assetId, param.versionId, param.perPage, param.generateSignedUrl, param.contentDisposition, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_proxies 
     * Delete asset\'s proxies by version
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsVersionIdProxiesDeleteWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdVersionsVersionIdProxiesDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdVersionsVersionIdProxiesDeleteWithHttpInfo(param.appID, param.authToken, param.assetId, param.versionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_proxies 
     * Delete asset\'s proxies by version
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsVersionIdProxiesDelete(param: FilesApiFilesV1AssetsAssetIdVersionsVersionIdProxiesDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdVersionsVersionIdProxiesDelete(param.appID, param.authToken, param.assetId, param.versionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_proxies 
     * Get all asset\'s proxies by version
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsVersionIdProxiesGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdVersionsVersionIdProxiesGetRequest, options?: Configuration): Promise<HttpInfo<ProxiesSchema>> {
        return this.api.filesV1AssetsAssetIdVersionsVersionIdProxiesGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.versionId, param.perPage, param.generateSignedUrl, param.contentDisposition, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_proxies 
     * Get all asset\'s proxies by version
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsVersionIdProxiesGet(param: FilesApiFilesV1AssetsAssetIdVersionsVersionIdProxiesGetRequest, options?: Configuration): Promise<ProxiesSchema> {
        return this.api.filesV1AssetsAssetIdVersionsVersionIdProxiesGet(param.appID, param.authToken, param.assetId, param.versionId, param.perPage, param.generateSignedUrl, param.contentDisposition, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_assets 
     * Delete asset\'s subtitles by version
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsVersionIdSubtitlesDeleteWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdVersionsVersionIdSubtitlesDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsAssetIdVersionsVersionIdSubtitlesDeleteWithHttpInfo(param.appID, param.authToken, param.assetId, param.versionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_assets 
     * Delete asset\'s subtitles by version
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsVersionIdSubtitlesDelete(param: FilesApiFilesV1AssetsAssetIdVersionsVersionIdSubtitlesDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsAssetIdVersionsVersionIdSubtitlesDelete(param.appID, param.authToken, param.assetId, param.versionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_asset_subtitles 
     * Get all asset\'s subtitles by version
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsVersionIdSubtitlesGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdVersionsVersionIdSubtitlesGetRequest, options?: Configuration): Promise<HttpInfo<SubtitlesSchema>> {
        return this.api.filesV1AssetsAssetIdVersionsVersionIdSubtitlesGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.versionId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_asset_subtitles 
     * Get all asset\'s subtitles by version
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsVersionIdSubtitlesGet(param: FilesApiFilesV1AssetsAssetIdVersionsVersionIdSubtitlesGetRequest, options?: Configuration): Promise<SubtitlesSchema> {
        return this.api.filesV1AssetsAssetIdVersionsVersionIdSubtitlesGet(param.appID, param.authToken, param.assetId, param.versionId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_asset_subtitles 
     * Get asset\'s closed captions subtitle file for a particular language by version
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsVersionIdSubtitlesLanguageCcWebvttGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdVersionsVersionIdSubtitlesLanguageCcWebvttGetRequest, options?: Configuration): Promise<HttpInfo<string>> {
        return this.api.filesV1AssetsAssetIdVersionsVersionIdSubtitlesLanguageCcWebvttGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.versionId, param.language,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_asset_subtitles 
     * Get asset\'s closed captions subtitle file for a particular language by version
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsVersionIdSubtitlesLanguageCcWebvttGet(param: FilesApiFilesV1AssetsAssetIdVersionsVersionIdSubtitlesLanguageCcWebvttGetRequest, options?: Configuration): Promise<string> {
        return this.api.filesV1AssetsAssetIdVersionsVersionIdSubtitlesLanguageCcWebvttGet(param.appID, param.authToken, param.assetId, param.versionId, param.language,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_asset_subtitles 
     * Get asset\'s subtitle file for a particular language by version
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsVersionIdSubtitlesLanguageWebvttGetWithHttpInfo(param: FilesApiFilesV1AssetsAssetIdVersionsVersionIdSubtitlesLanguageWebvttGetRequest, options?: Configuration): Promise<HttpInfo<string>> {
        return this.api.filesV1AssetsAssetIdVersionsVersionIdSubtitlesLanguageWebvttGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.versionId, param.language,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_asset_subtitles 
     * Get asset\'s subtitle file for a particular language by version
     * @param param the request object
     */
    public filesV1AssetsAssetIdVersionsVersionIdSubtitlesLanguageWebvttGet(param: FilesApiFilesV1AssetsAssetIdVersionsVersionIdSubtitlesLanguageWebvttGetRequest, options?: Configuration): Promise<string> {
        return this.api.filesV1AssetsAssetIdVersionsVersionIdSubtitlesLanguageWebvttGet(param.appID, param.authToken, param.assetId, param.versionId, param.language,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_transcode_jobs 
     * Create a transcode job for proxy and keyframes generation of multiple assets
     * @param param the request object
     */
    public filesV1AssetsBulkKeyframesPostWithHttpInfo(param: FilesApiFilesV1AssetsBulkKeyframesPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsBulkKeyframesPostWithHttpInfo(param.authToken, param.appID, param.bulkTranscodeSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_transcode_jobs 
     * Create a transcode job for proxy and keyframes generation of multiple assets
     * @param param the request object
     */
    public filesV1AssetsBulkKeyframesPost(param: FilesApiFilesV1AssetsBulkKeyframesPostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsBulkKeyframesPost(param.authToken, param.appID, param.bulkTranscodeSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_exports 
     * Export multiple assets to export location
     * @param param the request object
     */
    public filesV1AssetsExportLocationsExportLocationIdPostWithHttpInfo(param: FilesApiFilesV1AssetsExportLocationsExportLocationIdPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1AssetsExportLocationsExportLocationIdPostWithHttpInfo(param.appID, param.exportLocationId, param.assetBatchExportSchema, param.allowHostTransfer,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_exports 
     * Export multiple assets to export location
     * @param param the request object
     */
    public filesV1AssetsExportLocationsExportLocationIdPost(param: FilesApiFilesV1AssetsExportLocationsExportLocationIdPostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1AssetsExportLocationsExportLocationIdPost(param.appID, param.exportLocationId, param.assetBatchExportSchema, param.allowHostTransfer,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Set keyframe of type poster as collection keyframe
     * @param param the request object
     */
    public filesV1CollectionsCollectionIdCustomKeyframePosterIdPostWithHttpInfo(param: FilesApiFilesV1CollectionsCollectionIdCustomKeyframePosterIdPostRequest, options?: Configuration): Promise<HttpInfo<CollectionKeyframeSchema>> {
        return this.api.filesV1CollectionsCollectionIdCustomKeyframePosterIdPostWithHttpInfo(param.appID, param.authToken, param.collectionId, param.posterId, param.overwrite,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Set keyframe of type poster as collection keyframe
     * @param param the request object
     */
    public filesV1CollectionsCollectionIdCustomKeyframePosterIdPost(param: FilesApiFilesV1CollectionsCollectionIdCustomKeyframePosterIdPostRequest, options?: Configuration): Promise<CollectionKeyframeSchema> {
        return this.api.filesV1CollectionsCollectionIdCustomKeyframePosterIdPost(param.appID, param.authToken, param.collectionId, param.posterId, param.overwrite,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_exports 
     * Export collection assets to export location
     * @param param the request object
     */
    public filesV1CollectionsCollectionIdExportLocationsExportLocationIdPostWithHttpInfo(param: FilesApiFilesV1CollectionsCollectionIdExportLocationsExportLocationIdPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1CollectionsCollectionIdExportLocationsExportLocationIdPostWithHttpInfo(param.appID, param.authToken, param.collectionId, param.exportLocationId, param.collectionExportSchema, param.allowHostTransfer,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_exports 
     * Export collection assets to export location
     * @param param the request object
     */
    public filesV1CollectionsCollectionIdExportLocationsExportLocationIdPost(param: FilesApiFilesV1CollectionsCollectionIdExportLocationsExportLocationIdPostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1CollectionsCollectionIdExportLocationsExportLocationIdPost(param.appID, param.authToken, param.collectionId, param.exportLocationId, param.collectionExportSchema, param.allowHostTransfer,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_collections 
     * Get all collection\'s keyframes
     * @param param the request object
     */
    public filesV1CollectionsCollectionIdKeyframesGetWithHttpInfo(param: FilesApiFilesV1CollectionsCollectionIdKeyframesGetRequest, options?: Configuration): Promise<HttpInfo<CollectionKeyframesSchema>> {
        return this.api.filesV1CollectionsCollectionIdKeyframesGetWithHttpInfo(param.appID, param.authToken, param.collectionId, param.perPage, param.generateSignedUrl, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_collections 
     * Get all collection\'s keyframes
     * @param param the request object
     */
    public filesV1CollectionsCollectionIdKeyframesGet(param: FilesApiFilesV1CollectionsCollectionIdKeyframesGetRequest, options?: Configuration): Promise<CollectionKeyframesSchema> {
        return this.api.filesV1CollectionsCollectionIdKeyframesGet(param.appID, param.authToken, param.collectionId, param.perPage, param.generateSignedUrl, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Delete collection\'s keyframe
     * @param param the request object
     */
    public filesV1CollectionsCollectionIdKeyframesKeyframeIdDeleteWithHttpInfo(param: FilesApiFilesV1CollectionsCollectionIdKeyframesKeyframeIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1CollectionsCollectionIdKeyframesKeyframeIdDeleteWithHttpInfo(param.appID, param.authToken, param.collectionId, param.keyframeId, param.regenerateKeyframes,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Delete collection\'s keyframe
     * @param param the request object
     */
    public filesV1CollectionsCollectionIdKeyframesKeyframeIdDelete(param: FilesApiFilesV1CollectionsCollectionIdKeyframesKeyframeIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1CollectionsCollectionIdKeyframesKeyframeIdDelete(param.appID, param.authToken, param.collectionId, param.keyframeId, param.regenerateKeyframes,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_collections 
     * Get collection\'s proxy
     * @param param the request object
     */
    public filesV1CollectionsCollectionIdKeyframesKeyframeIdGetWithHttpInfo(param: FilesApiFilesV1CollectionsCollectionIdKeyframesKeyframeIdGetRequest, options?: Configuration): Promise<HttpInfo<CollectionKeyframeSchema>> {
        return this.api.filesV1CollectionsCollectionIdKeyframesKeyframeIdGetWithHttpInfo(param.appID, param.authToken, param.collectionId, param.keyframeId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_collections 
     * Get collection\'s proxy
     * @param param the request object
     */
    public filesV1CollectionsCollectionIdKeyframesKeyframeIdGet(param: FilesApiFilesV1CollectionsCollectionIdKeyframesKeyframeIdGetRequest, options?: Configuration): Promise<CollectionKeyframeSchema> {
        return this.api.filesV1CollectionsCollectionIdKeyframesKeyframeIdGet(param.appID, param.authToken, param.collectionId, param.keyframeId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Update keyframe information
     * @param param the request object
     */
    public filesV1CollectionsCollectionIdKeyframesKeyframeIdPatchWithHttpInfo(param: FilesApiFilesV1CollectionsCollectionIdKeyframesKeyframeIdPatchRequest, options?: Configuration): Promise<HttpInfo<CollectionKeyframeSchema>> {
        return this.api.filesV1CollectionsCollectionIdKeyframesKeyframeIdPatchWithHttpInfo(param.appID, param.authToken, param.collectionId, param.keyframeId, param.collectionKeyframeSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Update keyframe information
     * @param param the request object
     */
    public filesV1CollectionsCollectionIdKeyframesKeyframeIdPatch(param: FilesApiFilesV1CollectionsCollectionIdKeyframesKeyframeIdPatchRequest, options?: Configuration): Promise<CollectionKeyframeSchema> {
        return this.api.filesV1CollectionsCollectionIdKeyframesKeyframeIdPatch(param.appID, param.authToken, param.collectionId, param.keyframeId, param.collectionKeyframeSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Update keyframe information
     * @param param the request object
     */
    public filesV1CollectionsCollectionIdKeyframesKeyframeIdPutWithHttpInfo(param: FilesApiFilesV1CollectionsCollectionIdKeyframesKeyframeIdPutRequest, options?: Configuration): Promise<HttpInfo<CollectionKeyframeSchema>> {
        return this.api.filesV1CollectionsCollectionIdKeyframesKeyframeIdPutWithHttpInfo(param.appID, param.authToken, param.collectionId, param.keyframeId, param.collectionKeyframeSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Update keyframe information
     * @param param the request object
     */
    public filesV1CollectionsCollectionIdKeyframesKeyframeIdPut(param: FilesApiFilesV1CollectionsCollectionIdKeyframesKeyframeIdPutRequest, options?: Configuration): Promise<CollectionKeyframeSchema> {
        return this.api.filesV1CollectionsCollectionIdKeyframesKeyframeIdPut(param.appID, param.authToken, param.collectionId, param.keyframeId, param.collectionKeyframeSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Create keyframe and associate to collection
     * @param param the request object
     */
    public filesV1CollectionsCollectionIdKeyframesPostWithHttpInfo(param: FilesApiFilesV1CollectionsCollectionIdKeyframesPostRequest, options?: Configuration): Promise<HttpInfo<CollectionKeyframeCreateSchema>> {
        return this.api.filesV1CollectionsCollectionIdKeyframesPostWithHttpInfo(param.appID, param.authToken, param.collectionId, param.collectionKeyframeSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_keyframes 
     * Create keyframe and associate to collection
     * @param param the request object
     */
    public filesV1CollectionsCollectionIdKeyframesPost(param: FilesApiFilesV1CollectionsCollectionIdKeyframesPostRequest, options?: Configuration): Promise<CollectionKeyframeCreateSchema> {
        return this.api.filesV1CollectionsCollectionIdKeyframesPost(param.appID, param.authToken, param.collectionId, param.collectionKeyframeSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Restore file sets from delete queue
     * @param param the request object
     */
    public filesV1DeleteQueueFileSetsDeleteWithHttpInfo(param: FilesApiFilesV1DeleteQueueFileSetsDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1DeleteQueueFileSetsDeleteWithHttpInfo(param.appID, param.authToken, param.deleteQueueSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Restore file sets from delete queue
     * @param param the request object
     */
    public filesV1DeleteQueueFileSetsDelete(param: FilesApiFilesV1DeleteQueueFileSetsDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1DeleteQueueFileSetsDelete(param.appID, param.authToken, param.deleteQueueSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get deleted file sets
     * @param param the request object
     */
    public filesV1DeleteQueueFileSetsGetWithHttpInfo(param: FilesApiFilesV1DeleteQueueFileSetsGetRequest, options?: Configuration): Promise<HttpInfo<FileSetsElasticSchema>> {
        return this.api.filesV1DeleteQueueFileSetsGetWithHttpInfo(param.appID, param.authToken, param.perPage, param.page, param.sort, param.query, param.fieldName,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get deleted file sets
     * @param param the request object
     */
    public filesV1DeleteQueueFileSetsGet(param: FilesApiFilesV1DeleteQueueFileSetsGetRequest, options?: Configuration): Promise<FileSetsElasticSchema> {
        return this.api.filesV1DeleteQueueFileSetsGet(param.appID, param.authToken, param.perPage, param.page, param.sort, param.query, param.fieldName,  options).toPromise();
    }

    /**
     *  Required roles:  - can_purge_files 
     * Purge all file sets from delete queue (Permanently delete)
     * @param param the request object
     */
    public filesV1DeleteQueueFileSetsPurgeAllPostWithHttpInfo(param: FilesApiFilesV1DeleteQueueFileSetsPurgeAllPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1DeleteQueueFileSetsPurgeAllPostWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_purge_files 
     * Purge all file sets from delete queue (Permanently delete)
     * @param param the request object
     */
    public filesV1DeleteQueueFileSetsPurgeAllPost(param: FilesApiFilesV1DeleteQueueFileSetsPurgeAllPostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1DeleteQueueFileSetsPurgeAllPost(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_purge_files 
     * Purge file sets from delete queue (Permanently delete)
     * @param param the request object
     */
    public filesV1DeleteQueueFileSetsPurgePostWithHttpInfo(param: FilesApiFilesV1DeleteQueueFileSetsPurgePostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1DeleteQueueFileSetsPurgePostWithHttpInfo(param.appID, param.authToken, param.deleteQueueSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_purge_files 
     * Purge file sets from delete queue (Permanently delete)
     * @param param the request object
     */
    public filesV1DeleteQueueFileSetsPurgePost(param: FilesApiFilesV1DeleteQueueFileSetsPurgePostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1DeleteQueueFileSetsPurgePost(param.appID, param.authToken, param.deleteQueueSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_formats 
     * Restore formats from delete queue
     * @param param the request object
     */
    public filesV1DeleteQueueFormatsDeleteWithHttpInfo(param: FilesApiFilesV1DeleteQueueFormatsDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1DeleteQueueFormatsDeleteWithHttpInfo(param.appID, param.authToken, param.deleteQueueSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_formats 
     * Restore formats from delete queue
     * @param param the request object
     */
    public filesV1DeleteQueueFormatsDelete(param: FilesApiFilesV1DeleteQueueFormatsDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1DeleteQueueFormatsDelete(param.appID, param.authToken, param.deleteQueueSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_formats 
     * Get deleted formats
     * @param param the request object
     */
    public filesV1DeleteQueueFormatsGetWithHttpInfo(param: FilesApiFilesV1DeleteQueueFormatsGetRequest, options?: Configuration): Promise<HttpInfo<FormatsElasticSchema>> {
        return this.api.filesV1DeleteQueueFormatsGetWithHttpInfo(param.appID, param.authToken, param.perPage, param.page, param.sort, param.query, param.fieldName,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_formats 
     * Get deleted formats
     * @param param the request object
     */
    public filesV1DeleteQueueFormatsGet(param: FilesApiFilesV1DeleteQueueFormatsGetRequest, options?: Configuration): Promise<FormatsElasticSchema> {
        return this.api.filesV1DeleteQueueFormatsGet(param.appID, param.authToken, param.perPage, param.page, param.sort, param.query, param.fieldName,  options).toPromise();
    }

    /**
     *  Required roles:  - can_purge_formats 
     * Purge all formats from delete queue (Permanently delete)
     * @param param the request object
     */
    public filesV1DeleteQueueFormatsPurgeAllPostWithHttpInfo(param: FilesApiFilesV1DeleteQueueFormatsPurgeAllPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1DeleteQueueFormatsPurgeAllPostWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_purge_formats 
     * Purge all formats from delete queue (Permanently delete)
     * @param param the request object
     */
    public filesV1DeleteQueueFormatsPurgeAllPost(param: FilesApiFilesV1DeleteQueueFormatsPurgeAllPostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1DeleteQueueFormatsPurgeAllPost(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_purge_formats 
     * Purge formats from delete queue (Permanently delete)
     * @param param the request object
     */
    public filesV1DeleteQueueFormatsPurgePostWithHttpInfo(param: FilesApiFilesV1DeleteQueueFormatsPurgePostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1DeleteQueueFormatsPurgePostWithHttpInfo(param.appID, param.authToken, param.deleteQueueSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_purge_formats 
     * Purge formats from delete queue (Permanently delete)
     * @param param the request object
     */
    public filesV1DeleteQueueFormatsPurgePost(param: FilesApiFilesV1DeleteQueueFormatsPurgePostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1DeleteQueueFormatsPurgePost(param.appID, param.authToken, param.deleteQueueSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_exports 
     * Export multiple objects to export location
     * @param param the request object
     */
    public filesV1ExportLocationsExportLocationIdBulkExportPostWithHttpInfo(param: FilesApiFilesV1ExportLocationsExportLocationIdBulkExportPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1ExportLocationsExportLocationIdBulkExportPostWithHttpInfo(param.appID, param.authToken, param.exportLocationId, param.bulkFilesetExportSchema, param.allowHostTransfer,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_exports 
     * Export multiple objects to export location
     * @param param the request object
     */
    public filesV1ExportLocationsExportLocationIdBulkExportPost(param: FilesApiFilesV1ExportLocationsExportLocationIdBulkExportPostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1ExportLocationsExportLocationIdBulkExportPost(param.appID, param.authToken, param.exportLocationId, param.bulkFilesetExportSchema, param.allowHostTransfer,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_export_locations 
     * Delete a particular export_location by id
     * @param param the request object
     */
    public filesV1ExportLocationsExportLocationIdDeleteWithHttpInfo(param: FilesApiFilesV1ExportLocationsExportLocationIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1ExportLocationsExportLocationIdDeleteWithHttpInfo(param.appID, param.authToken, param.exportLocationId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_export_locations 
     * Delete a particular export_location by id
     * @param param the request object
     */
    public filesV1ExportLocationsExportLocationIdDelete(param: FilesApiFilesV1ExportLocationsExportLocationIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1ExportLocationsExportLocationIdDelete(param.appID, param.authToken, param.exportLocationId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_export_locations 
     * Returns a particular export_location by id
     * @param param the request object
     */
    public filesV1ExportLocationsExportLocationIdGetWithHttpInfo(param: FilesApiFilesV1ExportLocationsExportLocationIdGetRequest, options?: Configuration): Promise<HttpInfo<ExportLocationSchema>> {
        return this.api.filesV1ExportLocationsExportLocationIdGetWithHttpInfo(param.appID, param.authToken, param.exportLocationId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_export_locations 
     * Returns a particular export_location by id
     * @param param the request object
     */
    public filesV1ExportLocationsExportLocationIdGet(param: FilesApiFilesV1ExportLocationsExportLocationIdGetRequest, options?: Configuration): Promise<ExportLocationSchema> {
        return this.api.filesV1ExportLocationsExportLocationIdGet(param.appID, param.authToken, param.exportLocationId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_export_locations 
     * Update export_location
     * @param param the request object
     */
    public filesV1ExportLocationsExportLocationIdPatchWithHttpInfo(param: FilesApiFilesV1ExportLocationsExportLocationIdPatchRequest, options?: Configuration): Promise<HttpInfo<ExportLocationSchema>> {
        return this.api.filesV1ExportLocationsExportLocationIdPatchWithHttpInfo(param.appID, param.authToken, param.exportLocationId, param.exportLocationSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_export_locations 
     * Update export_location
     * @param param the request object
     */
    public filesV1ExportLocationsExportLocationIdPatch(param: FilesApiFilesV1ExportLocationsExportLocationIdPatchRequest, options?: Configuration): Promise<ExportLocationSchema> {
        return this.api.filesV1ExportLocationsExportLocationIdPatch(param.appID, param.authToken, param.exportLocationId, param.exportLocationSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_export_locations 
     * Update export_location
     * @param param the request object
     */
    public filesV1ExportLocationsExportLocationIdPutWithHttpInfo(param: FilesApiFilesV1ExportLocationsExportLocationIdPutRequest, options?: Configuration): Promise<HttpInfo<ExportLocationSchema>> {
        return this.api.filesV1ExportLocationsExportLocationIdPutWithHttpInfo(param.appID, param.authToken, param.exportLocationId, param.exportLocationSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_export_locations 
     * Update export_location
     * @param param the request object
     */
    public filesV1ExportLocationsExportLocationIdPut(param: FilesApiFilesV1ExportLocationsExportLocationIdPutRequest, options?: Configuration): Promise<ExportLocationSchema> {
        return this.api.filesV1ExportLocationsExportLocationIdPut(param.appID, param.authToken, param.exportLocationId, param.exportLocationSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_export_locations 
     * Trigger reindexing of a export location
     * @param param the request object
     */
    public filesV1ExportLocationsExportLocationIdReindexPostWithHttpInfo(param: FilesApiFilesV1ExportLocationsExportLocationIdReindexPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1ExportLocationsExportLocationIdReindexPostWithHttpInfo(param.appID, param.authToken, param.exportLocationId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_export_locations 
     * Trigger reindexing of a export location
     * @param param the request object
     */
    public filesV1ExportLocationsExportLocationIdReindexPost(param: FilesApiFilesV1ExportLocationsExportLocationIdReindexPostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1ExportLocationsExportLocationIdReindexPost(param.appID, param.authToken, param.exportLocationId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_export_locations 
     * Get all export_locations
     * @param param the request object
     */
    public filesV1ExportLocationsGetWithHttpInfo(param: FilesApiFilesV1ExportLocationsGetRequest, options?: Configuration): Promise<HttpInfo<ExportLocationsSchema>> {
        return this.api.filesV1ExportLocationsGetWithHttpInfo(param.appID, param.authToken, param.query, param.ids, param.perPage, param.lastId, param.sort,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_export_locations 
     * Get all export_locations
     * @param param the request object
     */
    public filesV1ExportLocationsGet(param: FilesApiFilesV1ExportLocationsGetRequest, options?: Configuration): Promise<ExportLocationsSchema> {
        return this.api.filesV1ExportLocationsGet(param.appID, param.authToken, param.query, param.ids, param.perPage, param.lastId, param.sort,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_export_locations 
     * Create a new export_location
     * @param param the request object
     */
    public filesV1ExportLocationsPostWithHttpInfo(param: FilesApiFilesV1ExportLocationsPostRequest, options?: Configuration): Promise<HttpInfo<ExportLocationSchema>> {
        return this.api.filesV1ExportLocationsPostWithHttpInfo(param.appID, param.authToken, param.exportLocationSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_export_locations 
     * Create a new export_location
     * @param param the request object
     */
    public filesV1ExportLocationsPost(param: FilesApiFilesV1ExportLocationsPostRequest, options?: Configuration): Promise<ExportLocationSchema> {
        return this.api.filesV1ExportLocationsPost(param.appID, param.authToken, param.exportLocationSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files - can_write_transfers 
     * Queue export job completion between local storages
     * @param param the request object
     */
    public filesV1ExportsTemporaryFileSetsFileSetIdStoragesStorageIdPostWithHttpInfo(param: FilesApiFilesV1ExportsTemporaryFileSetsFileSetIdStoragesStorageIdPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1ExportsTemporaryFileSetsFileSetIdStoragesStorageIdPostWithHttpInfo(param.authToken, param.appID, param.fileSetId, param.storageId, param.completeExportToLocalStorageSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files - can_write_transfers 
     * Queue export job completion between local storages
     * @param param the request object
     */
    public filesV1ExportsTemporaryFileSetsFileSetIdStoragesStorageIdPost(param: FilesApiFilesV1ExportsTemporaryFileSetsFileSetIdStoragesStorageIdPostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1ExportsTemporaryFileSetsFileSetIdStoragesStorageIdPost(param.authToken, param.appID, param.fileSetId, param.storageId, param.completeExportToLocalStorageSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get files from a file set
     * @param param the request object
     */
    public filesV1FileSetsFileSetIdFilesGetWithHttpInfo(param: FilesApiFilesV1FileSetsFileSetIdFilesGetRequest, options?: Configuration): Promise<HttpInfo<FilesSchema>> {
        return this.api.filesV1FileSetsFileSetIdFilesGetWithHttpInfo(param.appID, param.authToken, param.fileSetId, param.generateSignedUrl,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get files from a file set
     * @param param the request object
     */
    public filesV1FileSetsFileSetIdFilesGet(param: FilesApiFilesV1FileSetsFileSetIdFilesGetRequest, options?: Configuration): Promise<FilesSchema> {
        return this.api.filesV1FileSetsFileSetIdFilesGet(param.appID, param.authToken, param.fileSetId, param.generateSignedUrl,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files - can_write_transfers 
     * Queue copying of a file set with files from one storage to another
     * @param param the request object
     */
    public filesV1FileSetsFileSetIdStoragesStorageIdPostWithHttpInfo(param: FilesApiFilesV1FileSetsFileSetIdStoragesStorageIdPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1FileSetsFileSetIdStoragesStorageIdPostWithHttpInfo(param.authToken, param.appID, param.fileSetId, param.storageId, param.transferFromStorageSchema, param.allowHostTransfer,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files - can_write_transfers 
     * Queue copying of a file set with files from one storage to another
     * @param param the request object
     */
    public filesV1FileSetsFileSetIdStoragesStorageIdPost(param: FilesApiFilesV1FileSetsFileSetIdStoragesStorageIdPostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1FileSetsFileSetIdStoragesStorageIdPost(param.authToken, param.appID, param.fileSetId, param.storageId, param.transferFromStorageSchema, param.allowHostTransfer,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transfers 
     * Delete file set transfer after handling it
     * @param param the request object
     */
    public filesV1FileSetsFileSetIdTransfersFromStorageIdDeleteWithHttpInfo(param: FilesApiFilesV1FileSetsFileSetIdTransfersFromStorageIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1FileSetsFileSetIdTransfersFromStorageIdDeleteWithHttpInfo(param.authToken, param.appID, param.fileSetId, param.storageId, param.failed,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transfers 
     * Delete file set transfer after handling it
     * @param param the request object
     */
    public filesV1FileSetsFileSetIdTransfersFromStorageIdDelete(param: FilesApiFilesV1FileSetsFileSetIdTransfersFromStorageIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1FileSetsFileSetIdTransfersFromStorageIdDelete(param.authToken, param.appID, param.fileSetId, param.storageId, param.failed,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transfers 
     * Delete file set transfer after handling it
     * @param param the request object
     */
    public filesV1FileSetsFileSetIdTransfersToStorageIdDeleteWithHttpInfo(param: FilesApiFilesV1FileSetsFileSetIdTransfersToStorageIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1FileSetsFileSetIdTransfersToStorageIdDeleteWithHttpInfo(param.authToken, param.appID, param.fileSetId, param.storageId, param.failed,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transfers 
     * Delete file set transfer after handling it
     * @param param the request object
     */
    public filesV1FileSetsFileSetIdTransfersToStorageIdDelete(param: FilesApiFilesV1FileSetsFileSetIdTransfersToStorageIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1FileSetsFileSetIdTransfersToStorageIdDelete(param.authToken, param.appID, param.fileSetId, param.storageId, param.failed,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get files by checksum
     * @param param the request object
     */
    public filesV1FilesChecksumChecksumGetWithHttpInfo(param: FilesApiFilesV1FilesChecksumChecksumGetRequest, options?: Configuration): Promise<HttpInfo<FilesSchema>> {
        return this.api.filesV1FilesChecksumChecksumGetWithHttpInfo(param.appID, param.authToken, param.checksum, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Get files by checksum
     * @param param the request object
     */
    public filesV1FilesChecksumChecksumGet(param: FilesApiFilesV1FilesChecksumChecksumGetRequest, options?: Configuration): Promise<FilesSchema> {
        return this.api.filesV1FilesChecksumChecksumGet(param.appID, param.authToken, param.checksum, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - is_storage_worker 
     * Delete file deletion job after handling it
     * @param param the request object
     */
    public filesV1FilesFileIdDeletionsFromStorageIdDeleteWithHttpInfo(param: FilesApiFilesV1FilesFileIdDeletionsFromStorageIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1FilesFileIdDeletionsFromStorageIdDeleteWithHttpInfo(param.authToken, param.appID, param.fileId, param.storageId,  options).toPromise();
    }

    /**
     *  Required roles:  - is_storage_worker 
     * Delete file deletion job after handling it
     * @param param the request object
     */
    public filesV1FilesFileIdDeletionsFromStorageIdDelete(param: FilesApiFilesV1FilesFileIdDeletionsFromStorageIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1FilesFileIdDeletionsFromStorageIdDelete(param.authToken, param.appID, param.fileId, param.storageId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_files 
     * Delete all missing files from storage
     * @param param the request object
     */
    public filesV1FilesMissingStoragesStorageIdDeleteWithHttpInfo(param: FilesApiFilesV1FilesMissingStoragesStorageIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1FilesMissingStoragesStorageIdDeleteWithHttpInfo(param.appID, param.authToken, param.storageId, param.removeAssets,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_files 
     * Delete all missing files from storage
     * @param param the request object
     */
    public filesV1FilesMissingStoragesStorageIdDelete(param: FilesApiFilesV1FilesMissingStoragesStorageIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1FilesMissingStoragesStorageIdDelete(param.appID, param.authToken, param.storageId, param.removeAssets,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Check file is on storage
     * @param param the request object
     */
    public filesV1FilesStoragesStorageIdPostWithHttpInfo(param: FilesApiFilesV1FilesStoragesStorageIdPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1FilesStoragesStorageIdPostWithHttpInfo(param.appID, param.authToken, param.storageId, param.fileExistenceCheckSchema, param.getFileSize,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files 
     * Check file is on storage
     * @param param the request object
     */
    public filesV1FilesStoragesStorageIdPost(param: FilesApiFilesV1FilesStoragesStorageIdPostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1FilesStoragesStorageIdPost(param.appID, param.authToken, param.storageId, param.fileExistenceCheckSchema, param.getFileSize,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_formats - can_write_transfers 
     * Queue copying of a formats file sets with files from one storage to another
     * @param param the request object
     */
    public filesV1FormatsFormatIdStoragesStorageIdPostWithHttpInfo(param: FilesApiFilesV1FormatsFormatIdStoragesStorageIdPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1FormatsFormatIdStoragesStorageIdPostWithHttpInfo(param.authToken, param.appID, param.formatId, param.storageId, param.transferFromStorageSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_formats - can_write_transfers 
     * Queue copying of a formats file sets with files from one storage to another
     * @param param the request object
     */
    public filesV1FormatsFormatIdStoragesStorageIdPost(param: FilesApiFilesV1FormatsFormatIdStoragesStorageIdPostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1FormatsFormatIdStoragesStorageIdPost(param.authToken, param.appID, param.formatId, param.storageId, param.transferFromStorageSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_archive_formats 
     * Queue bulk archiving of assets, collections and saved_searches
     * @param param the request object
     */
    public filesV1FormatsFormatNameArchiveBulkPostWithHttpInfo(param: FilesApiFilesV1FormatsFormatNameArchiveBulkPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1FormatsFormatNameArchiveBulkPostWithHttpInfo(param.authToken, param.appID, param.formatName, param.bulkFilesetArchiveSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_archive_formats 
     * Queue bulk archiving of assets, collections and saved_searches
     * @param param the request object
     */
    public filesV1FormatsFormatNameArchiveBulkPost(param: FilesApiFilesV1FormatsFormatNameArchiveBulkPostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1FormatsFormatNameArchiveBulkPost(param.authToken, param.appID, param.formatName, param.bulkFilesetArchiveSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_restore_archived_formats 
     * Queue bulk restore of previously archived assets, collections or saved_searches
     * @param param the request object
     */
    public filesV1FormatsFormatNameRestoreBulkPostWithHttpInfo(param: FilesApiFilesV1FormatsFormatNameRestoreBulkPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1FormatsFormatNameRestoreBulkPostWithHttpInfo(param.authToken, param.appID, param.formatName, param.bulkFilesetRestoreSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_restore_archived_formats 
     * Queue bulk restore of previously archived assets, collections or saved_searches
     * @param param the request object
     */
    public filesV1FormatsFormatNameRestoreBulkPost(param: FilesApiFilesV1FormatsFormatNameRestoreBulkPostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1FormatsFormatNameRestoreBulkPost(param.authToken, param.appID, param.formatName, param.bulkFilesetRestoreSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Check if a specific file is already on the storage for shares
     * @param param the request object
     */
    public filesV1SharesStoragesStorageIdFilesGetWithHttpInfo(param: FilesApiFilesV1SharesStoragesStorageIdFilesGetRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1SharesStoragesStorageIdFilesGetWithHttpInfo(param.appID, param.authToken, param.storageId, param.directoryPath, param.name,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Check if a specific file is already on the storage for shares
     * @param param the request object
     */
    public filesV1SharesStoragesStorageIdFilesGet(param: FilesApiFilesV1SharesStoragesStorageIdFilesGetRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1SharesStoragesStorageIdFilesGet(param.appID, param.authToken, param.storageId, param.directoryPath, param.name,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_storages 
     * Trigger reindexing of all files
     * @param param the request object
     */
    public filesV1StoragesFilesReindexPostWithHttpInfo(param: FilesApiFilesV1StoragesFilesReindexPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1StoragesFilesReindexPostWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_storages 
     * Trigger reindexing of all files
     * @param param the request object
     */
    public filesV1StoragesFilesReindexPost(param: FilesApiFilesV1StoragesFilesReindexPostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1StoragesFilesReindexPost(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_storages 
     * Get all storages
     * @param param the request object
     */
    public filesV1StoragesGetWithHttpInfo(param: FilesApiFilesV1StoragesGetRequest, options?: Configuration): Promise<HttpInfo<StoragesReadSchema>> {
        return this.api.filesV1StoragesGetWithHttpInfo(param.appID, param.authToken, param.page, param.perPage, param.sort, param.id, param.name, param.method, param.status, param.purpose, param.lastScanned, param.scannerStatus, param.query, param.ids,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_storages 
     * Get all storages
     * @param param the request object
     */
    public filesV1StoragesGet(param: FilesApiFilesV1StoragesGetRequest, options?: Configuration): Promise<StoragesReadSchema> {
        return this.api.filesV1StoragesGet(param.appID, param.authToken, param.page, param.perPage, param.sort, param.id, param.name, param.method, param.status, param.purpose, param.lastScanned, param.scannerStatus, param.query, param.ids,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_storages 
     * Get latest ISG version
     * @param param the request object
     */
    public filesV1StoragesIsgLatestVersionGetWithHttpInfo(param: FilesApiFilesV1StoragesIsgLatestVersionGetRequest, options?: Configuration): Promise<HttpInfo<FilesV1StoragesIsgLatestVersionGet200Response>> {
        return this.api.filesV1StoragesIsgLatestVersionGetWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_storages 
     * Get latest ISG version
     * @param param the request object
     */
    public filesV1StoragesIsgLatestVersionGet(param: FilesApiFilesV1StoragesIsgLatestVersionGetRequest, options?: Configuration): Promise<FilesV1StoragesIsgLatestVersionGet200Response> {
        return this.api.filesV1StoragesIsgLatestVersionGet(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_storages 
     * Returns a remote storage matching type
     * @param param the request object
     */
    public filesV1StoragesMatchingPurposeGetWithHttpInfo(param: FilesApiFilesV1StoragesMatchingPurposeGetRequest, options?: Configuration): Promise<HttpInfo<StorageSchema>> {
        return this.api.filesV1StoragesMatchingPurposeGetWithHttpInfo(param.appID, param.authToken, param.purpose, param.storageId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_storages 
     * Returns a remote storage matching type
     * @param param the request object
     */
    public filesV1StoragesMatchingPurposeGet(param: FilesApiFilesV1StoragesMatchingPurposeGetRequest, options?: Configuration): Promise<StorageSchema> {
        return this.api.filesV1StoragesMatchingPurposeGet(param.appID, param.authToken, param.purpose, param.storageId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_storages 
     * Returns a remote storage matching type and method
     * @param param the request object
     */
    public filesV1StoragesMatchingPurposeMethodMethodGetWithHttpInfo(param: FilesApiFilesV1StoragesMatchingPurposeMethodMethodGetRequest, options?: Configuration): Promise<HttpInfo<StorageSchema>> {
        return this.api.filesV1StoragesMatchingPurposeMethodMethodGetWithHttpInfo(param.appID, param.authToken, param.purpose, param.method,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_storages 
     * Returns a remote storage matching type and method
     * @param param the request object
     */
    public filesV1StoragesMatchingPurposeMethodMethodGet(param: FilesApiFilesV1StoragesMatchingPurposeMethodMethodGetRequest, options?: Configuration): Promise<StorageSchema> {
        return this.api.filesV1StoragesMatchingPurposeMethodMethodGet(param.appID, param.authToken, param.purpose, param.method,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_storages 
     * Create a new storage
     * @param param the request object
     */
    public filesV1StoragesPostWithHttpInfo(param: FilesApiFilesV1StoragesPostRequest, options?: Configuration): Promise<HttpInfo<StorageSchema>> {
        return this.api.filesV1StoragesPostWithHttpInfo(param.appID, param.authToken, param.storageSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_storages 
     * Create a new storage
     * @param param the request object
     */
    public filesV1StoragesPost(param: FilesApiFilesV1StoragesPostRequest, options?: Configuration): Promise<StorageSchema> {
        return this.api.filesV1StoragesPost(param.appID, param.authToken, param.storageSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_storages 
     * Get a purpose default storage
     * @param param the request object
     */
    public filesV1StoragesPurposeDefaultGetWithHttpInfo(param: FilesApiFilesV1StoragesPurposeDefaultGetRequest, options?: Configuration): Promise<HttpInfo<StorageSchema>> {
        return this.api.filesV1StoragesPurposeDefaultGetWithHttpInfo(param.appID, param.authToken, param.purpose,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_storages 
     * Get a purpose default storage
     * @param param the request object
     */
    public filesV1StoragesPurposeDefaultGet(param: FilesApiFilesV1StoragesPurposeDefaultGetRequest, options?: Configuration): Promise<StorageSchema> {
        return this.api.filesV1StoragesPurposeDefaultGet(param.appID, param.authToken, param.purpose,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_storages 
     * Trigger reindexing of all storages
     * @param param the request object
     */
    public filesV1StoragesReindexPostWithHttpInfo(param: FilesApiFilesV1StoragesReindexPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1StoragesReindexPostWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_storages 
     * Trigger reindexing of all storages
     * @param param the request object
     */
    public filesV1StoragesReindexPost(param: FilesApiFilesV1StoragesReindexPostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1StoragesReindexPost(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_scan_bucket 
     * Disable cloud storage auto scan
     * @param param the request object
     */
    public filesV1StoragesStorageIdAutoScanDeleteWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdAutoScanDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1StoragesStorageIdAutoScanDeleteWithHttpInfo(param.appID, param.authToken, param.storageId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_scan_bucket 
     * Disable cloud storage auto scan
     * @param param the request object
     */
    public filesV1StoragesStorageIdAutoScanDelete(param: FilesApiFilesV1StoragesStorageIdAutoScanDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1StoragesStorageIdAutoScanDelete(param.appID, param.authToken, param.storageId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_scan_bucket 
     * Get cloud storage auto scan settings
     * @param param the request object
     */
    public filesV1StoragesStorageIdAutoScanGetWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdAutoScanGetRequest, options?: Configuration): Promise<HttpInfo<StorageAutoScanSchema>> {
        return this.api.filesV1StoragesStorageIdAutoScanGetWithHttpInfo(param.appID, param.authToken, param.storageId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_scan_bucket 
     * Get cloud storage auto scan settings
     * @param param the request object
     */
    public filesV1StoragesStorageIdAutoScanGet(param: FilesApiFilesV1StoragesStorageIdAutoScanGetRequest, options?: Configuration): Promise<StorageAutoScanSchema> {
        return this.api.filesV1StoragesStorageIdAutoScanGet(param.appID, param.authToken, param.storageId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_scan_bucket 
     * Enable cloud storage auto scan
     * @param param the request object
     */
    public filesV1StoragesStorageIdAutoScanPostWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdAutoScanPostRequest, options?: Configuration): Promise<HttpInfo<StorageAutoScanSchema>> {
        return this.api.filesV1StoragesStorageIdAutoScanPostWithHttpInfo(param.appID, param.authToken, param.storageId, param.storageAutoScanSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_scan_bucket 
     * Enable cloud storage auto scan
     * @param param the request object
     */
    public filesV1StoragesStorageIdAutoScanPost(param: FilesApiFilesV1StoragesStorageIdAutoScanPostRequest, options?: Configuration): Promise<StorageAutoScanSchema> {
        return this.api.filesV1StoragesStorageIdAutoScanPost(param.appID, param.authToken, param.storageId, param.storageAutoScanSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files - can_write_transfers 
     * Queue copying of files from current storage to specified one
     * @param param the request object
     */
    public filesV1StoragesStorageIdBulkPostWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdBulkPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1StoragesStorageIdBulkPostWithHttpInfo(param.authToken, param.appID, param.storageId, param.bulkTransferToStorageSchema, param.allowHostTransfer,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_files - can_write_transfers 
     * Queue copying of files from current storage to specified one
     * @param param the request object
     */
    public filesV1StoragesStorageIdBulkPost(param: FilesApiFilesV1StoragesStorageIdBulkPostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1StoragesStorageIdBulkPost(param.authToken, param.appID, param.storageId, param.bulkTransferToStorageSchema, param.allowHostTransfer,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_storages 
     * Removes the default flag on a storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdDefaultDeleteWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdDefaultDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1StoragesStorageIdDefaultDeleteWithHttpInfo(param.appID, param.authToken, param.storageId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_storages 
     * Removes the default flag on a storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdDefaultDelete(param: FilesApiFilesV1StoragesStorageIdDefaultDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1StoragesStorageIdDefaultDelete(param.appID, param.authToken, param.storageId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_storages 
     * Set a storage to the default of its purpose
     * @param param the request object
     */
    public filesV1StoragesStorageIdDefaultPostWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdDefaultPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1StoragesStorageIdDefaultPostWithHttpInfo(param.appID, param.authToken, param.storageId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_storages 
     * Set a storage to the default of its purpose
     * @param param the request object
     */
    public filesV1StoragesStorageIdDefaultPost(param: FilesApiFilesV1StoragesStorageIdDefaultPostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1StoragesStorageIdDefaultPost(param.appID, param.authToken, param.storageId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_storages 
     * Delete a particular storage by id
     * @param param the request object
     */
    public filesV1StoragesStorageIdDeleteWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1StoragesStorageIdDeleteWithHttpInfo(param.appID, param.authToken, param.storageId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_storages 
     * Delete a particular storage by id
     * @param param the request object
     */
    public filesV1StoragesStorageIdDelete(param: FilesApiFilesV1StoragesStorageIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1StoragesStorageIdDelete(param.appID, param.authToken, param.storageId,  options).toPromise();
    }

    /**
     *  Required roles:  - is_storage_worker 
     * Delete file deletion job after handling it
     * @param param the request object
     */
    public filesV1StoragesStorageIdDeletionsDeletionIdDeleteWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdDeletionsDeletionIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1StoragesStorageIdDeletionsDeletionIdDeleteWithHttpInfo(param.authToken, param.appID, param.storageId, param.deletionId,  options).toPromise();
    }

    /**
     *  Required roles:  - is_storage_worker 
     * Delete file deletion job after handling it
     * @param param the request object
     */
    public filesV1StoragesStorageIdDeletionsDeletionIdDelete(param: FilesApiFilesV1StoragesStorageIdDeletionsDeletionIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1StoragesStorageIdDeletionsDeletionIdDelete(param.authToken, param.appID, param.storageId, param.deletionId,  options).toPromise();
    }

    /**
     *  Required roles:  - is_storage_worker 
     * Get pending deletions of files from a local storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdDeletionsFromGetWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdDeletionsFromGetRequest, options?: Configuration): Promise<HttpInfo<FileDeletionsSchema>> {
        return this.api.filesV1StoragesStorageIdDeletionsFromGetWithHttpInfo(param.authToken, param.appID, param.storageId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - is_storage_worker 
     * Get pending deletions of files from a local storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdDeletionsFromGet(param: FilesApiFilesV1StoragesStorageIdDeletionsFromGetRequest, options?: Configuration): Promise<FileDeletionsSchema> {
        return this.api.filesV1StoragesStorageIdDeletionsFromGet(param.authToken, param.appID, param.storageId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - is_storage_worker 
     * Get pending deletions of files from a local storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdDeletionsGetWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdDeletionsGetRequest, options?: Configuration): Promise<HttpInfo<FileDeletionsSchema>> {
        return this.api.filesV1StoragesStorageIdDeletionsGetWithHttpInfo(param.authToken, param.appID, param.storageId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - is_storage_worker 
     * Get pending deletions of files from a local storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdDeletionsGet(param: FilesApiFilesV1StoragesStorageIdDeletionsGetRequest, options?: Configuration): Promise<FileDeletionsSchema> {
        return this.api.filesV1StoragesStorageIdDeletionsGet(param.authToken, param.appID, param.storageId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_storages - can_delete_files 
     * DELETE files (with copies in different storages) from a storage folder, or all files on a storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdFilesDeleteWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdFilesDeleteRequest, options?: Configuration): Promise<HttpInfo<FilesElasticSchema>> {
        return this.api.filesV1StoragesStorageIdFilesDeleteWithHttpInfo(param.appID, param.authToken, param.storageId, param.path, param.pathSeparator, param.directoryPath, param.checksum, param.id, param.name, param.type, param.status, param.dateCreated, param.dateModified,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_storages - can_delete_files 
     * DELETE files (with copies in different storages) from a storage folder, or all files on a storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdFilesDelete(param: FilesApiFilesV1StoragesStorageIdFilesDeleteRequest, options?: Configuration): Promise<FilesElasticSchema> {
        return this.api.filesV1StoragesStorageIdFilesDelete(param.appID, param.authToken, param.storageId, param.path, param.pathSeparator, param.directoryPath, param.checksum, param.id, param.name, param.type, param.status, param.dateCreated, param.dateModified,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_storages 
     * Trigger reindexing for a file on a storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdFilesFileIdReindexPostWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdFilesFileIdReindexPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1StoragesStorageIdFilesFileIdReindexPostWithHttpInfo(param.appID, param.authToken, param.storageId, param.fileId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_storages 
     * Trigger reindexing for a file on a storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdFilesFileIdReindexPost(param: FilesApiFilesV1StoragesStorageIdFilesFileIdReindexPostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1StoragesStorageIdFilesFileIdReindexPost(param.appID, param.authToken, param.storageId, param.fileId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_storages 
     * Get files in a storage folder, or all files on a storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdFilesGetWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdFilesGetRequest, options?: Configuration): Promise<HttpInfo<FilesElasticSchema>> {
        return this.api.filesV1StoragesStorageIdFilesGetWithHttpInfo(param.appID, param.authToken, param.storageId, param.path, param.pathSeparator, param.directoryPath, param.checksum, param.perPage, param.page, param.scroll, param.scrollId, param.sort, param.id, param.name, param.type, param.status, param.dateCreated, param.dateModified,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_storages 
     * Get files in a storage folder, or all files on a storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdFilesGet(param: FilesApiFilesV1StoragesStorageIdFilesGetRequest, options?: Configuration): Promise<FilesElasticSchema> {
        return this.api.filesV1StoragesStorageIdFilesGet(param.appID, param.authToken, param.storageId, param.path, param.pathSeparator, param.directoryPath, param.checksum, param.perPage, param.page, param.scroll, param.scrollId, param.sort, param.id, param.name, param.type, param.status, param.dateCreated, param.dateModified,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Update file by storage ID and path
     * @param param the request object
     */
    public filesV1StoragesStorageIdFilesPatchWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdFilesPatchRequest, options?: Configuration): Promise<HttpInfo<FileBaseSchema>> {
        return this.api.filesV1StoragesStorageIdFilesPatchWithHttpInfo(param.appID, param.authToken, param.storageId, param.fileBaseSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Update file by storage ID and path
     * @param param the request object
     */
    public filesV1StoragesStorageIdFilesPatch(param: FilesApiFilesV1StoragesStorageIdFilesPatchRequest, options?: Configuration): Promise<FileBaseSchema> {
        return this.api.filesV1StoragesStorageIdFilesPatch(param.appID, param.authToken, param.storageId, param.fileBaseSchema,  options).toPromise();
    }

    /**
     * 
     * Create file without associating it to an asset
     * @param param the request object
     */
    public filesV1StoragesStorageIdFilesPostWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdFilesPostRequest, options?: Configuration): Promise<HttpInfo<FileBaseSchema>> {
        return this.api.filesV1StoragesStorageIdFilesPostWithHttpInfo(param.appID, param.authToken, param.storageId, param.fileBaseSchema,  options).toPromise();
    }

    /**
     * 
     * Create file without associating it to an asset
     * @param param the request object
     */
    public filesV1StoragesStorageIdFilesPost(param: FilesApiFilesV1StoragesStorageIdFilesPostRequest, options?: Configuration): Promise<FileBaseSchema> {
        return this.api.filesV1StoragesStorageIdFilesPost(param.appID, param.authToken, param.storageId, param.fileBaseSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Update file by storage ID and path
     * @param param the request object
     */
    public filesV1StoragesStorageIdFilesPutWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdFilesPutRequest, options?: Configuration): Promise<HttpInfo<FileBaseSchema>> {
        return this.api.filesV1StoragesStorageIdFilesPutWithHttpInfo(param.appID, param.authToken, param.storageId, param.fileBaseSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_files 
     * Update file by storage ID and path
     * @param param the request object
     */
    public filesV1StoragesStorageIdFilesPut(param: FilesApiFilesV1StoragesStorageIdFilesPutRequest, options?: Configuration): Promise<FileBaseSchema> {
        return this.api.filesV1StoragesStorageIdFilesPut(param.appID, param.authToken, param.storageId, param.fileBaseSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_storages 
     * Trigger reindexing of all files
     * @param param the request object
     */
    public filesV1StoragesStorageIdFilesReindexPostWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdFilesReindexPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1StoragesStorageIdFilesReindexPostWithHttpInfo(param.appID, param.authToken, param.storageId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_storages 
     * Trigger reindexing of all files
     * @param param the request object
     */
    public filesV1StoragesStorageIdFilesReindexPost(param: FilesApiFilesV1StoragesStorageIdFilesReindexPostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1StoragesStorageIdFilesReindexPost(param.appID, param.authToken, param.storageId,  options).toPromise();
    }

    /**
     * 
     * Delete storage gateway event
     * @param param the request object
     */
    public filesV1StoragesStorageIdGatewayEventsEventIdDeleteWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdGatewayEventsEventIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1StoragesStorageIdGatewayEventsEventIdDeleteWithHttpInfo(param.appID, param.authToken, param.storageId, param.eventId,  options).toPromise();
    }

    /**
     * 
     * Delete storage gateway event
     * @param param the request object
     */
    public filesV1StoragesStorageIdGatewayEventsEventIdDelete(param: FilesApiFilesV1StoragesStorageIdGatewayEventsEventIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1StoragesStorageIdGatewayEventsEventIdDelete(param.appID, param.authToken, param.storageId, param.eventId,  options).toPromise();
    }

    /**
     * 
     * Get pending storage gateway events
     * @param param the request object
     */
    public filesV1StoragesStorageIdGatewayEventsGetWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdGatewayEventsGetRequest, options?: Configuration): Promise<HttpInfo<IconikStorageGatewayEventsSchema>> {
        return this.api.filesV1StoragesStorageIdGatewayEventsGetWithHttpInfo(param.appID, param.authToken, param.storageId, param.lastId,  options).toPromise();
    }

    /**
     * 
     * Get pending storage gateway events
     * @param param the request object
     */
    public filesV1StoragesStorageIdGatewayEventsGet(param: FilesApiFilesV1StoragesStorageIdGatewayEventsGetRequest, options?: Configuration): Promise<IconikStorageGatewayEventsSchema> {
        return this.api.filesV1StoragesStorageIdGatewayEventsGet(param.appID, param.authToken, param.storageId, param.lastId,  options).toPromise();
    }

    /**
     * 
     * Create new storage gateway event
     * @param param the request object
     */
    public filesV1StoragesStorageIdGatewayEventsPostWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdGatewayEventsPostRequest, options?: Configuration): Promise<HttpInfo<IconikStorageGatewayEventSchema>> {
        return this.api.filesV1StoragesStorageIdGatewayEventsPostWithHttpInfo(param.appID, param.authToken, param.storageId, param.iconikStorageGatewayEventSchema,  options).toPromise();
    }

    /**
     * 
     * Create new storage gateway event
     * @param param the request object
     */
    public filesV1StoragesStorageIdGatewayEventsPost(param: FilesApiFilesV1StoragesStorageIdGatewayEventsPostRequest, options?: Configuration): Promise<IconikStorageGatewayEventSchema> {
        return this.api.filesV1StoragesStorageIdGatewayEventsPost(param.appID, param.authToken, param.storageId, param.iconikStorageGatewayEventSchema,  options).toPromise();
    }

    /**
     * 
     * Delete storage gateway events in bulk
     * @param param the request object
     */
    public filesV1StoragesStorageIdGatewayEventsPurgePostWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdGatewayEventsPurgePostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1StoragesStorageIdGatewayEventsPurgePostWithHttpInfo(param.appID, param.authToken, param.storageId, param.iconikStorageGatewayEventsPurgeSchema,  options).toPromise();
    }

    /**
     * 
     * Delete storage gateway events in bulk
     * @param param the request object
     */
    public filesV1StoragesStorageIdGatewayEventsPurgePost(param: FilesApiFilesV1StoragesStorageIdGatewayEventsPurgePostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1StoragesStorageIdGatewayEventsPurgePost(param.appID, param.authToken, param.storageId, param.iconikStorageGatewayEventsPurgeSchema,  options).toPromise();
    }

    /**
     * 
     * Get storage gateway report
     * @param param the request object
     */
    public filesV1StoragesStorageIdGatewayReportGetWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdGatewayReportGetRequest, options?: Configuration): Promise<HttpInfo<GatewayReportSchema>> {
        return this.api.filesV1StoragesStorageIdGatewayReportGetWithHttpInfo(param.appID, param.authToken, param.storageId,  options).toPromise();
    }

    /**
     * 
     * Get storage gateway report
     * @param param the request object
     */
    public filesV1StoragesStorageIdGatewayReportGet(param: FilesApiFilesV1StoragesStorageIdGatewayReportGetRequest, options?: Configuration): Promise<GatewayReportSchema> {
        return this.api.filesV1StoragesStorageIdGatewayReportGet(param.appID, param.authToken, param.storageId,  options).toPromise();
    }

    /**
     *  Required roles:  - is_storage_worker 
     * Create storage gateway report
     * @param param the request object
     */
    public filesV1StoragesStorageIdGatewayReportPutWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdGatewayReportPutRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1StoragesStorageIdGatewayReportPutWithHttpInfo(param.appID, param.authToken, param.storageId, param.gatewayReportSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - is_storage_worker 
     * Create storage gateway report
     * @param param the request object
     */
    public filesV1StoragesStorageIdGatewayReportPut(param: FilesApiFilesV1StoragesStorageIdGatewayReportPutRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1StoragesStorageIdGatewayReportPut(param.appID, param.authToken, param.storageId, param.gatewayReportSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - is_storage_worker 
     * Update storage gateway status
     * @param param the request object
     */
    public filesV1StoragesStorageIdGatewayStatusPutWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdGatewayStatusPutRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1StoragesStorageIdGatewayStatusPutWithHttpInfo(param.appID, param.authToken, param.storageId, param.gatewayStatusSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - is_storage_worker 
     * Update storage gateway status
     * @param param the request object
     */
    public filesV1StoragesStorageIdGatewayStatusPut(param: FilesApiFilesV1StoragesStorageIdGatewayStatusPutRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1StoragesStorageIdGatewayStatusPut(param.appID, param.authToken, param.storageId, param.gatewayStatusSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_storages 
     * Returns a particular storage by id
     * @param param the request object
     */
    public filesV1StoragesStorageIdGetWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdGetRequest, options?: Configuration): Promise<HttpInfo<StorageSchema>> {
        return this.api.filesV1StoragesStorageIdGetWithHttpInfo(param.appID, param.authToken, param.storageId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_storages 
     * Returns a particular storage by id
     * @param param the request object
     */
    public filesV1StoragesStorageIdGet(param: FilesApiFilesV1StoragesStorageIdGetRequest, options?: Configuration): Promise<StorageSchema> {
        return this.api.filesV1StoragesStorageIdGet(param.appID, param.authToken, param.storageId,  options).toPromise();
    }

    /**
     *  Required roles:  - is_storage_worker 
     * Upload storage logs
     * @param param the request object
     */
    public filesV1StoragesStorageIdLogsPostWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdLogsPostRequest, options?: Configuration): Promise<HttpInfo<FilesV1StoragesStorageIdLogsPost200Response>> {
        return this.api.filesV1StoragesStorageIdLogsPostWithHttpInfo(param.appID, param.authToken, param.storageId, param.filename,  options).toPromise();
    }

    /**
     *  Required roles:  - is_storage_worker 
     * Upload storage logs
     * @param param the request object
     */
    public filesV1StoragesStorageIdLogsPost(param: FilesApiFilesV1StoragesStorageIdLogsPostRequest, options?: Configuration): Promise<FilesV1StoragesStorageIdLogsPost200Response> {
        return this.api.filesV1StoragesStorageIdLogsPost(param.appID, param.authToken, param.storageId, param.filename,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_storages - can_delete_files 
     * Delete files from a particular storage from multiple objects
     * @param param the request object
     */
    public filesV1StoragesStorageIdObjectTypeFilesDeleteWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdObjectTypeFilesDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1StoragesStorageIdObjectTypeFilesDeleteWithHttpInfo(param.appID, param.authToken, param.storageId, param.objectType, param.storageFilesDeleteBulkSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_storages - can_delete_files 
     * Delete files from a particular storage from multiple objects
     * @param param the request object
     */
    public filesV1StoragesStorageIdObjectTypeFilesDelete(param: FilesApiFilesV1StoragesStorageIdObjectTypeFilesDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1StoragesStorageIdObjectTypeFilesDelete(param.appID, param.authToken, param.storageId, param.objectType, param.storageFilesDeleteBulkSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_storages 
     * Update storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdPatchWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdPatchRequest, options?: Configuration): Promise<HttpInfo<StorageSchema>> {
        return this.api.filesV1StoragesStorageIdPatchWithHttpInfo(param.appID, param.authToken, param.storageId, param.storageSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_storages 
     * Update storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdPatch(param: FilesApiFilesV1StoragesStorageIdPatchRequest, options?: Configuration): Promise<StorageSchema> {
        return this.api.filesV1StoragesStorageIdPatch(param.appID, param.authToken, param.storageId, param.storageSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_storages 
     * Update storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdPutWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdPutRequest, options?: Configuration): Promise<HttpInfo<StorageSchema>> {
        return this.api.filesV1StoragesStorageIdPutWithHttpInfo(param.appID, param.authToken, param.storageId, param.storageSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_storages 
     * Update storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdPut(param: FilesApiFilesV1StoragesStorageIdPutRequest, options?: Configuration): Promise<StorageSchema> {
        return this.api.filesV1StoragesStorageIdPut(param.appID, param.authToken, param.storageId, param.storageSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_storages 
     * Trigger reindexing of a storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdReindexPostWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdReindexPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1StoragesStorageIdReindexPostWithHttpInfo(param.appID, param.authToken, param.storageId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_storages 
     * Trigger reindexing of a storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdReindexPost(param: FilesApiFilesV1StoragesStorageIdReindexPostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1StoragesStorageIdReindexPost(param.appID, param.authToken, param.storageId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_scan_bucket 
     * Requests to scan a storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdScanPostWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdScanPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1StoragesStorageIdScanPostWithHttpInfo(param.appID, param.authToken, param.storageId, param.storageScanSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_scan_bucket 
     * Requests to scan a storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdScanPost(param: FilesApiFilesV1StoragesStorageIdScanPostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1StoragesStorageIdScanPost(param.appID, param.authToken, param.storageId, param.storageScanSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_storages 
     * Update search document for storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdSearchDocumentPutWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdSearchDocumentPutRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1StoragesStorageIdSearchDocumentPutWithHttpInfo(param.appID, param.authToken, param.storageId, param.storageSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_storages 
     * Update search document for storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdSearchDocumentPut(param: FilesApiFilesV1StoragesStorageIdSearchDocumentPutRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1StoragesStorageIdSearchDocumentPut(param.appID, param.authToken, param.storageId, param.storageSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_storages 
     * Get storage\'s exported files
     * @param param the request object
     */
    public filesV1StoragesStorageIdTemporaryFilesGetWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdTemporaryFilesGetRequest, options?: Configuration): Promise<HttpInfo<FilesSchema>> {
        return this.api.filesV1StoragesStorageIdTemporaryFilesGetWithHttpInfo(param.appID, param.authToken, param.storageId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_storages 
     * Get storage\'s exported files
     * @param param the request object
     */
    public filesV1StoragesStorageIdTemporaryFilesGet(param: FilesApiFilesV1StoragesStorageIdTemporaryFilesGetRequest, options?: Configuration): Promise<FilesSchema> {
        return this.api.filesV1StoragesStorageIdTemporaryFilesGet(param.appID, param.authToken, param.storageId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_storages - can_read_transcoders 
     * Get all transcoders for a particular storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdTranscodersGetWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdTranscodersGetRequest, options?: Configuration): Promise<HttpInfo<TranscodersByStorageSchema>> {
        return this.api.filesV1StoragesStorageIdTranscodersGetWithHttpInfo(param.appID, param.authToken, param.storageId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_storages - can_read_transcoders 
     * Get all transcoders for a particular storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdTranscodersGet(param: FilesApiFilesV1StoragesStorageIdTranscodersGetRequest, options?: Configuration): Promise<TranscodersByStorageSchema> {
        return this.api.filesV1StoragesStorageIdTranscodersGet(param.appID, param.authToken, param.storageId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transcoders 
     * Delete a transcoder from storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdTranscodersTranscoderIdDeleteWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdTranscodersTranscoderIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1StoragesStorageIdTranscodersTranscoderIdDeleteWithHttpInfo(param.appID, param.authToken, param.storageId, param.transcoderId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transcoders 
     * Delete a transcoder from storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdTranscodersTranscoderIdDelete(param: FilesApiFilesV1StoragesStorageIdTranscodersTranscoderIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1StoragesStorageIdTranscodersTranscoderIdDelete(param.appID, param.authToken, param.storageId, param.transcoderId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transcoders 
     * Create a new transcoder for storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdTranscodersTranscoderIdPutWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdTranscodersTranscoderIdPutRequest, options?: Configuration): Promise<HttpInfo<TranscoderByStorageReadSchema>> {
        return this.api.filesV1StoragesStorageIdTranscodersTranscoderIdPutWithHttpInfo(param.appID, param.authToken, param.storageId, param.transcoderId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transcoders 
     * Create a new transcoder for storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdTranscodersTranscoderIdPut(param: FilesApiFilesV1StoragesStorageIdTranscodersTranscoderIdPutRequest, options?: Configuration): Promise<TranscoderByStorageReadSchema> {
        return this.api.filesV1StoragesStorageIdTranscodersTranscoderIdPut(param.appID, param.authToken, param.storageId, param.transcoderId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transfers 
     * Get pending transfers of file sets from a local storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdTransfersFromGetWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdTransfersFromGetRequest, options?: Configuration): Promise<HttpInfo<TransfersFromStorageSchema>> {
        return this.api.filesV1StoragesStorageIdTransfersFromGetWithHttpInfo(param.authToken, param.appID, param.storageId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transfers 
     * Get pending transfers of file sets from a local storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdTransfersFromGet(param: FilesApiFilesV1StoragesStorageIdTransfersFromGetRequest, options?: Configuration): Promise<TransfersFromStorageSchema> {
        return this.api.filesV1StoragesStorageIdTransfersFromGet(param.authToken, param.appID, param.storageId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transfers 
     * Delete file set transfer after handling it
     * @param param the request object
     */
    public filesV1StoragesStorageIdTransfersFromTransferIdDeleteWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdTransfersFromTransferIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1StoragesStorageIdTransfersFromTransferIdDeleteWithHttpInfo(param.authToken, param.appID, param.storageId, param.transferId, param.failed, param.completed,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transfers 
     * Delete file set transfer after handling it
     * @param param the request object
     */
    public filesV1StoragesStorageIdTransfersFromTransferIdDelete(param: FilesApiFilesV1StoragesStorageIdTransfersFromTransferIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1StoragesStorageIdTransfersFromTransferIdDelete(param.authToken, param.appID, param.storageId, param.transferId, param.failed, param.completed,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transfers 
     * Get file set transfer record
     * @param param the request object
     */
    public filesV1StoragesStorageIdTransfersFromTransferIdGetWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdTransfersFromTransferIdGetRequest, options?: Configuration): Promise<HttpInfo<TransferFromStorageReadSchema>> {
        return this.api.filesV1StoragesStorageIdTransfersFromTransferIdGetWithHttpInfo(param.authToken, param.appID, param.storageId, param.transferId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transfers 
     * Get file set transfer record
     * @param param the request object
     */
    public filesV1StoragesStorageIdTransfersFromTransferIdGet(param: FilesApiFilesV1StoragesStorageIdTransfersFromTransferIdGetRequest, options?: Configuration): Promise<TransferFromStorageReadSchema> {
        return this.api.filesV1StoragesStorageIdTransfersFromTransferIdGet(param.authToken, param.appID, param.storageId, param.transferId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transfers 
     * Get pending transfers of file sets to a local storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdTransfersToGetWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdTransfersToGetRequest, options?: Configuration): Promise<HttpInfo<TransfersToStorageSchema>> {
        return this.api.filesV1StoragesStorageIdTransfersToGetWithHttpInfo(param.authToken, param.appID, param.storageId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transfers 
     * Get pending transfers of file sets to a local storage
     * @param param the request object
     */
    public filesV1StoragesStorageIdTransfersToGet(param: FilesApiFilesV1StoragesStorageIdTransfersToGetRequest, options?: Configuration): Promise<TransfersToStorageSchema> {
        return this.api.filesV1StoragesStorageIdTransfersToGet(param.authToken, param.appID, param.storageId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transfers 
     * Delete file set transfer after handling it
     * @param param the request object
     */
    public filesV1StoragesStorageIdTransfersToTransferIdDeleteWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdTransfersToTransferIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1StoragesStorageIdTransfersToTransferIdDeleteWithHttpInfo(param.authToken, param.appID, param.storageId, param.transferId, param.failed, param.completed,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transfers 
     * Delete file set transfer after handling it
     * @param param the request object
     */
    public filesV1StoragesStorageIdTransfersToTransferIdDelete(param: FilesApiFilesV1StoragesStorageIdTransfersToTransferIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1StoragesStorageIdTransfersToTransferIdDelete(param.authToken, param.appID, param.storageId, param.transferId, param.failed, param.completed,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transfers 
     * Get file set transfer record
     * @param param the request object
     */
    public filesV1StoragesStorageIdTransfersToTransferIdGetWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdTransfersToTransferIdGetRequest, options?: Configuration): Promise<HttpInfo<TransferToStorageReadSchema>> {
        return this.api.filesV1StoragesStorageIdTransfersToTransferIdGetWithHttpInfo(param.authToken, param.appID, param.storageId, param.transferId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transfers 
     * Get file set transfer record
     * @param param the request object
     */
    public filesV1StoragesStorageIdTransfersToTransferIdGet(param: FilesApiFilesV1StoragesStorageIdTransfersToTransferIdGetRequest, options?: Configuration): Promise<TransferToStorageReadSchema> {
        return this.api.filesV1StoragesStorageIdTransfersToTransferIdGet(param.authToken, param.appID, param.storageId, param.transferId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_storages 
     * Verify storage access
     * @param param the request object
     */
    public filesV1StoragesStorageIdVerificationsAccessGetWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdVerificationsAccessGetRequest, options?: Configuration): Promise<HttpInfo<FilesV1StoragesStorageIdVerificationsAccessGet200Response>> {
        return this.api.filesV1StoragesStorageIdVerificationsAccessGetWithHttpInfo(param.appID, param.authToken, param.storageId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_storages 
     * Verify storage access
     * @param param the request object
     */
    public filesV1StoragesStorageIdVerificationsAccessGet(param: FilesApiFilesV1StoragesStorageIdVerificationsAccessGetRequest, options?: Configuration): Promise<FilesV1StoragesStorageIdVerificationsAccessGet200Response> {
        return this.api.filesV1StoragesStorageIdVerificationsAccessGet(param.appID, param.authToken, param.storageId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_storages 
     * Verify storage permissions
     * @param param the request object
     */
    public filesV1StoragesStorageIdVerificationsPermissionsGetWithHttpInfo(param: FilesApiFilesV1StoragesStorageIdVerificationsPermissionsGetRequest, options?: Configuration): Promise<HttpInfo<FilesV1StoragesStorageIdVerificationsPermissionsGet200Response>> {
        return this.api.filesV1StoragesStorageIdVerificationsPermissionsGetWithHttpInfo(param.appID, param.authToken, param.storageId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_storages 
     * Verify storage permissions
     * @param param the request object
     */
    public filesV1StoragesStorageIdVerificationsPermissionsGet(param: FilesApiFilesV1StoragesStorageIdVerificationsPermissionsGetRequest, options?: Configuration): Promise<FilesV1StoragesStorageIdVerificationsPermissionsGet200Response> {
        return this.api.filesV1StoragesStorageIdVerificationsPermissionsGet(param.appID, param.authToken, param.storageId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transcoders 
     * Get all transcoders
     * @param param the request object
     */
    public filesV1TranscodersGetWithHttpInfo(param: FilesApiFilesV1TranscodersGetRequest, options?: Configuration): Promise<HttpInfo<TranscodersSchema>> {
        return this.api.filesV1TranscodersGetWithHttpInfo(param.appID, param.authToken, param.perPage, param.page, param.query, param.ids, param.sort,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transcoders 
     * Get all transcoders
     * @param param the request object
     */
    public filesV1TranscodersGet(param: FilesApiFilesV1TranscodersGetRequest, options?: Configuration): Promise<TranscodersSchema> {
        return this.api.filesV1TranscodersGet(param.appID, param.authToken, param.perPage, param.page, param.query, param.ids, param.sort,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transcoders 
     * Create a new transcoder
     * @param param the request object
     */
    public filesV1TranscodersPostWithHttpInfo(param: FilesApiFilesV1TranscodersPostRequest, options?: Configuration): Promise<HttpInfo<TranscoderSchema>> {
        return this.api.filesV1TranscodersPostWithHttpInfo(param.appID, param.authToken, param.transcoderSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transcoders 
     * Create a new transcoder
     * @param param the request object
     */
    public filesV1TranscodersPost(param: FilesApiFilesV1TranscodersPostRequest, options?: Configuration): Promise<TranscoderSchema> {
        return this.api.filesV1TranscodersPost(param.appID, param.authToken, param.transcoderSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_transcoders 
     * Delete a particular transcoder by id
     * @param param the request object
     */
    public filesV1TranscodersTranscoderIdDeleteWithHttpInfo(param: FilesApiFilesV1TranscodersTranscoderIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1TranscodersTranscoderIdDeleteWithHttpInfo(param.appID, param.authToken, param.transcoderId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_transcoders 
     * Delete a particular transcoder by id
     * @param param the request object
     */
    public filesV1TranscodersTranscoderIdDelete(param: FilesApiFilesV1TranscodersTranscoderIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1TranscodersTranscoderIdDelete(param.appID, param.authToken, param.transcoderId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transcoders 
     * Returns a particular transcoder by id
     * @param param the request object
     */
    public filesV1TranscodersTranscoderIdGetWithHttpInfo(param: FilesApiFilesV1TranscodersTranscoderIdGetRequest, options?: Configuration): Promise<HttpInfo<TranscoderSchema>> {
        return this.api.filesV1TranscodersTranscoderIdGetWithHttpInfo(param.appID, param.authToken, param.transcoderId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transcoders 
     * Returns a particular transcoder by id
     * @param param the request object
     */
    public filesV1TranscodersTranscoderIdGet(param: FilesApiFilesV1TranscodersTranscoderIdGetRequest, options?: Configuration): Promise<TranscoderSchema> {
        return this.api.filesV1TranscodersTranscoderIdGet(param.appID, param.authToken, param.transcoderId,  options).toPromise();
    }

    /**
     *  Required roles:  - is_storage_worker 
     * Upload transcoder logs
     * @param param the request object
     */
    public filesV1TranscodersTranscoderIdLogsPostWithHttpInfo(param: FilesApiFilesV1TranscodersTranscoderIdLogsPostRequest, options?: Configuration): Promise<HttpInfo<FilesV1StoragesStorageIdLogsPost200Response>> {
        return this.api.filesV1TranscodersTranscoderIdLogsPostWithHttpInfo(param.appID, param.authToken, param.transcoderId, param.filename,  options).toPromise();
    }

    /**
     *  Required roles:  - is_storage_worker 
     * Upload transcoder logs
     * @param param the request object
     */
    public filesV1TranscodersTranscoderIdLogsPost(param: FilesApiFilesV1TranscodersTranscoderIdLogsPostRequest, options?: Configuration): Promise<FilesV1StoragesStorageIdLogsPost200Response> {
        return this.api.filesV1TranscodersTranscoderIdLogsPost(param.appID, param.authToken, param.transcoderId, param.filename,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transcoders 
     * Update transcoder
     * @param param the request object
     */
    public filesV1TranscodersTranscoderIdPatchWithHttpInfo(param: FilesApiFilesV1TranscodersTranscoderIdPatchRequest, options?: Configuration): Promise<HttpInfo<TranscoderSchema>> {
        return this.api.filesV1TranscodersTranscoderIdPatchWithHttpInfo(param.appID, param.authToken, param.transcoderId, param.transcoderSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transcoders 
     * Update transcoder
     * @param param the request object
     */
    public filesV1TranscodersTranscoderIdPatch(param: FilesApiFilesV1TranscodersTranscoderIdPatchRequest, options?: Configuration): Promise<TranscoderSchema> {
        return this.api.filesV1TranscodersTranscoderIdPatch(param.appID, param.authToken, param.transcoderId, param.transcoderSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transcoders 
     * Update transcoder
     * @param param the request object
     */
    public filesV1TranscodersTranscoderIdPutWithHttpInfo(param: FilesApiFilesV1TranscodersTranscoderIdPutRequest, options?: Configuration): Promise<HttpInfo<TranscoderSchema>> {
        return this.api.filesV1TranscodersTranscoderIdPutWithHttpInfo(param.appID, param.authToken, param.transcoderId, param.transcoderSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transcoders 
     * Update transcoder
     * @param param the request object
     */
    public filesV1TranscodersTranscoderIdPut(param: FilesApiFilesV1TranscodersTranscoderIdPutRequest, options?: Configuration): Promise<TranscoderSchema> {
        return this.api.filesV1TranscodersTranscoderIdPut(param.appID, param.authToken, param.transcoderId, param.transcoderSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_transcoders 
     * Trigger reindexing of a transcoder
     * @param param the request object
     */
    public filesV1TranscodersTranscoderIdReindexPostWithHttpInfo(param: FilesApiFilesV1TranscodersTranscoderIdReindexPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1TranscodersTranscoderIdReindexPostWithHttpInfo(param.appID, param.authToken, param.transcoderId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_transcoders 
     * Trigger reindexing of a transcoder
     * @param param the request object
     */
    public filesV1TranscodersTranscoderIdReindexPost(param: FilesApiFilesV1TranscodersTranscoderIdReindexPostRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1TranscodersTranscoderIdReindexPost(param.appID, param.authToken, param.transcoderId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transcoders 
     * Get storages linked to a transcoder
     * @param param the request object
     */
    public filesV1TranscodersTranscoderIdStoragesGetWithHttpInfo(param: FilesApiFilesV1TranscodersTranscoderIdStoragesGetRequest, options?: Configuration): Promise<HttpInfo<StoragesReadSchema>> {
        return this.api.filesV1TranscodersTranscoderIdStoragesGetWithHttpInfo(param.appID, param.authToken, param.transcoderId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transcoders 
     * Get storages linked to a transcoder
     * @param param the request object
     */
    public filesV1TranscodersTranscoderIdStoragesGet(param: FilesApiFilesV1TranscodersTranscoderIdStoragesGetRequest, options?: Configuration): Promise<StoragesReadSchema> {
        return this.api.filesV1TranscodersTranscoderIdStoragesGet(param.appID, param.authToken, param.transcoderId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     * 
     * Generates a url for direct file downloads (for IGSs)
     * @param param the request object
     */
    public filesV1TransfersTransferIdUrlsPostWithHttpInfo(param: FilesApiFilesV1TransfersTransferIdUrlsPostRequest, options?: Configuration): Promise<HttpInfo<TransferSignedURLSchema>> {
        return this.api.filesV1TransfersTransferIdUrlsPostWithHttpInfo(param.authToken, param.appID, param.transferId,  options).toPromise();
    }

    /**
     * 
     * Generates a url for direct file downloads (for IGSs)
     * @param param the request object
     */
    public filesV1TransfersTransferIdUrlsPost(param: FilesApiFilesV1TransfersTransferIdUrlsPostRequest, options?: Configuration): Promise<TransferSignedURLSchema> {
        return this.api.filesV1TransfersTransferIdUrlsPost(param.authToken, param.appID, param.transferId,  options).toPromise();
    }

    /**
     * 
     * Verifies the signature of a url
     * @param param the request object
     */
    public filesV1TransfersTransferIdUrlsVerifyGetWithHttpInfo(param: FilesApiFilesV1TransfersTransferIdUrlsVerifyGetRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.filesV1TransfersTransferIdUrlsVerifyGetWithHttpInfo(param.authToken, param.appID, param.transferId, param.userId, param.signature,  options).toPromise();
    }

    /**
     * 
     * Verifies the signature of a url
     * @param param the request object
     */
    public filesV1TransfersTransferIdUrlsVerifyGet(param: FilesApiFilesV1TransfersTransferIdUrlsVerifyGetRequest, options?: Configuration): Promise<void> {
        return this.api.filesV1TransfersTransferIdUrlsVerifyGet(param.authToken, param.appID, param.transferId, param.userId, param.signature,  options).toPromise();
    }

}

import { ObservableJobsApi } from "./ObservableAPI";
import { JobsApiRequestFactory, JobsApiResponseProcessor} from "../apis/JobsApi";

export interface JobsApiJobsV1JobsDeleteRequest {
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsDelete
     */
    authToken: string
    /**
     * body
     * @type JobsBulkDeleteSchema
     * @memberof JobsApijobsV1JobsDelete
     */
    jobsBulkDeleteSchema: JobsBulkDeleteSchema
}

export interface JobsApiJobsV1JobsGetRequest {
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsGet
     */
    authToken: string
    /**
     * If facets should be returned
     * @type boolean
     * @memberof JobsApijobsV1JobsGet
     */
    facets?: boolean
    /**
     * List of aggregation keys if facets is true
     * @type string
     * @memberof JobsApijobsV1JobsGet
     */
    aggregations?: string
    /**
     * Which page number to fetch
     * @type number
     * @memberof JobsApijobsV1JobsGet
     */
    page?: number
    /**
     * The number of items for each page
     * @type number
     * @memberof JobsApijobsV1JobsGet
     */
    perPage?: number
    /**
     * If true passed then uses scroll pagination instead of default one
     * @type boolean
     * @memberof JobsApijobsV1JobsGet
     */
    scroll?: boolean
    /**
     * In order to get next batch of results using scroll pagination the scroll_id is required
     * @type string
     * @memberof JobsApijobsV1JobsGet
     */
    scrollId?: string
    /**
     * A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc
     * @type string
     * @memberof JobsApijobsV1JobsGet
     */
    sort?: string
    /**
     * Filter by type
     * @type string
     * @memberof JobsApijobsV1JobsGet
     */
    type?: string
    /**
     * Filter by object_type
     * @type string
     * @memberof JobsApijobsV1JobsGet
     */
    objectType?: string
    /**
     * Filter by parent_id
     * @type string
     * @memberof JobsApijobsV1JobsGet
     */
    parentId?: string
    /**
     * Filter by object_id
     * @type string
     * @memberof JobsApijobsV1JobsGet
     */
    objectId?: string
    /**
     * Filter by status
     * @type string
     * @memberof JobsApijobsV1JobsGet
     */
    status?: string
    /**
     * Filter by created_by
     * @type string
     * @memberof JobsApijobsV1JobsGet
     */
    createdBy?: string
    /**
     * Filter by date_created. Can either be a single ISO8601 timestamp or two timestamps separated by a semicolon &#x60;;&#x60;. The timestamp can also be expressed as number of milliseconds since Jan 1 1970 (epoch). Either timestamp can also be replaced with an asterisk &#x60;*&#x60; to make the query open ended. For example: 2018-01-01T10:00:00Z;2018-01-01T15:00:00Z
     * @type string
     * @memberof JobsApijobsV1JobsGet
     */
    dateCreated?: string
    /**
     * Filter by date_modified Can either be a single ISO8601 timestamp or two timestamps separated by a semicolon &#x60;;&#x60;. The timestamp can also be expressed as number of milliseconds since Jan 1 1970 (epoch). Either timestamp can also be replaced with an asterisk &#x60;*&#x60; to make the query open ended. For example: *;1544450400
     * @type string
     * @memberof JobsApijobsV1JobsGet
     */
    dateModified?: string
    /**
     * Filter by any of the above with wildcard support
     * @type string
     * @memberof JobsApijobsV1JobsGet
     */
    query?: string
    /**
     * Filter list of id:s (comma separated)
     * @type string
     * @memberof JobsApijobsV1JobsGet
     */
    ids?: string
}

export interface JobsApiJobsV1JobsJobIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsJobIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsJobIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsJobIdDelete
     */
    jobId: string
}

export interface JobsApiJobsV1JobsJobIdGetRequest {
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsJobIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsJobIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsJobIdGet
     */
    jobId: string
}

export interface JobsApiJobsV1JobsJobIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsJobIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsJobIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsJobIdPatch
     */
    jobId: string
    /**
     * body
     * @type JobSchema
     * @memberof JobsApijobsV1JobsJobIdPatch
     */
    jobSchema: JobSchema
}

export interface JobsApiJobsV1JobsJobIdPutRequest {
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsJobIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsJobIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsJobIdPut
     */
    jobId: string
    /**
     * body
     * @type JobSchema
     * @memberof JobsApijobsV1JobsJobIdPut
     */
    jobSchema: JobSchema
}

export interface JobsApiJobsV1JobsJobIdReindexPostRequest {
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsJobIdReindexPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsJobIdReindexPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsJobIdReindexPost
     */
    jobId: string
    /**
     * body
     * @type ReindexJobSchema
     * @memberof JobsApijobsV1JobsJobIdReindexPost
     */
    reindexJobSchema: ReindexJobSchema
}

export interface JobsApiJobsV1JobsJobIdStepsJobStepIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsJobIdStepsJobStepIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsJobIdStepsJobStepIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsJobIdStepsJobStepIdPatch
     */
    jobId: string
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsJobIdStepsJobStepIdPatch
     */
    jobStepId: string
    /**
     * body
     * @type JobStepSchema
     * @memberof JobsApijobsV1JobsJobIdStepsJobStepIdPatch
     */
    jobStepSchema: JobStepSchema
}

export interface JobsApiJobsV1JobsJobIdStepsJobStepIdPutRequest {
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsJobIdStepsJobStepIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsJobIdStepsJobStepIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsJobIdStepsJobStepIdPut
     */
    jobId: string
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsJobIdStepsJobStepIdPut
     */
    jobStepId: string
    /**
     * body
     * @type JobStepSchema
     * @memberof JobsApijobsV1JobsJobIdStepsJobStepIdPut
     */
    jobStepSchema: JobStepSchema
}

export interface JobsApiJobsV1JobsJobIdStepsPatchRequest {
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsJobIdStepsPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsJobIdStepsPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsJobIdStepsPatch
     */
    jobId: string
    /**
     * body
     * @type JobStepsUpdateSchema
     * @memberof JobsApijobsV1JobsJobIdStepsPatch
     */
    jobStepsUpdateSchema: JobStepsUpdateSchema
}

export interface JobsApiJobsV1JobsJobIdStepsPutRequest {
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsJobIdStepsPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsJobIdStepsPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsJobIdStepsPut
     */
    jobId: string
    /**
     * body
     * @type JobStepsUpdateSchema
     * @memberof JobsApijobsV1JobsJobIdStepsPut
     */
    jobStepsUpdateSchema: JobStepsUpdateSchema
}

export interface JobsApiJobsV1JobsPostRequest {
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsPost
     */
    authToken: string
    /**
     * body
     * @type JobSchema
     * @memberof JobsApijobsV1JobsPost
     */
    jobSchema: JobSchema
}

export interface JobsApiJobsV1JobsPriorityPutRequest {
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsPriorityPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsPriorityPut
     */
    authToken: string
    /**
     * body
     * @type JobsPrioritySchema
     * @memberof JobsApijobsV1JobsPriorityPut
     */
    jobsPrioritySchema: JobsPrioritySchema
}

export interface JobsApiJobsV1JobsStatePutRequest {
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsStatePut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof JobsApijobsV1JobsStatePut
     */
    authToken: string
    /**
     * body
     * @type JobsStateSchema1
     * @memberof JobsApijobsV1JobsStatePut
     */
    jobsStateSchema1: JobsStateSchema1
}

export class ObjectJobsApi {
    private api: ObservableJobsApi

    public constructor(configuration: Configuration, requestFactory?: JobsApiRequestFactory, responseProcessor?: JobsApiResponseProcessor) {
        this.api = new ObservableJobsApi(configuration, requestFactory, responseProcessor);
    }

    /**
     *  Required roles:  - can_delete_jobs 
     * Delete multiple jobs by ids list
     * @param param the request object
     */
    public jobsV1JobsDeleteWithHttpInfo(param: JobsApiJobsV1JobsDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.jobsV1JobsDeleteWithHttpInfo(param.appID, param.authToken, param.jobsBulkDeleteSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_jobs 
     * Delete multiple jobs by ids list
     * @param param the request object
     */
    public jobsV1JobsDelete(param: JobsApiJobsV1JobsDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.jobsV1JobsDelete(param.appID, param.authToken, param.jobsBulkDeleteSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_jobs 
     * Get list of jobs
     * @param param the request object
     */
    public jobsV1JobsGetWithHttpInfo(param: JobsApiJobsV1JobsGetRequest, options?: Configuration): Promise<HttpInfo<JobsSchema>> {
        return this.api.jobsV1JobsGetWithHttpInfo(param.appID, param.authToken, param.facets, param.aggregations, param.page, param.perPage, param.scroll, param.scrollId, param.sort, param.type, param.objectType, param.parentId, param.objectId, param.status, param.createdBy, param.dateCreated, param.dateModified, param.query, param.ids,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_jobs 
     * Get list of jobs
     * @param param the request object
     */
    public jobsV1JobsGet(param: JobsApiJobsV1JobsGetRequest, options?: Configuration): Promise<JobsSchema> {
        return this.api.jobsV1JobsGet(param.appID, param.authToken, param.facets, param.aggregations, param.page, param.perPage, param.scroll, param.scrollId, param.sort, param.type, param.objectType, param.parentId, param.objectId, param.status, param.createdBy, param.dateCreated, param.dateModified, param.query, param.ids,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_jobs 
     * Delete a particular job by id
     * @param param the request object
     */
    public jobsV1JobsJobIdDeleteWithHttpInfo(param: JobsApiJobsV1JobsJobIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.jobsV1JobsJobIdDeleteWithHttpInfo(param.appID, param.authToken, param.jobId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_jobs 
     * Delete a particular job by id
     * @param param the request object
     */
    public jobsV1JobsJobIdDelete(param: JobsApiJobsV1JobsJobIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.jobsV1JobsJobIdDelete(param.appID, param.authToken, param.jobId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_jobs 
     * Returns a particular job by id
     * @param param the request object
     */
    public jobsV1JobsJobIdGetWithHttpInfo(param: JobsApiJobsV1JobsJobIdGetRequest, options?: Configuration): Promise<HttpInfo<JobSchema>> {
        return this.api.jobsV1JobsJobIdGetWithHttpInfo(param.appID, param.authToken, param.jobId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_jobs 
     * Returns a particular job by id
     * @param param the request object
     */
    public jobsV1JobsJobIdGet(param: JobsApiJobsV1JobsJobIdGetRequest, options?: Configuration): Promise<JobSchema> {
        return this.api.jobsV1JobsJobIdGet(param.appID, param.authToken, param.jobId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_jobs 
     * Update job
     * @param param the request object
     */
    public jobsV1JobsJobIdPatchWithHttpInfo(param: JobsApiJobsV1JobsJobIdPatchRequest, options?: Configuration): Promise<HttpInfo<JobSchema>> {
        return this.api.jobsV1JobsJobIdPatchWithHttpInfo(param.appID, param.authToken, param.jobId, param.jobSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_jobs 
     * Update job
     * @param param the request object
     */
    public jobsV1JobsJobIdPatch(param: JobsApiJobsV1JobsJobIdPatchRequest, options?: Configuration): Promise<JobSchema> {
        return this.api.jobsV1JobsJobIdPatch(param.appID, param.authToken, param.jobId, param.jobSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_jobs 
     * Update job
     * @param param the request object
     */
    public jobsV1JobsJobIdPutWithHttpInfo(param: JobsApiJobsV1JobsJobIdPutRequest, options?: Configuration): Promise<HttpInfo<JobSchema>> {
        return this.api.jobsV1JobsJobIdPutWithHttpInfo(param.appID, param.authToken, param.jobId, param.jobSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_jobs 
     * Update job
     * @param param the request object
     */
    public jobsV1JobsJobIdPut(param: JobsApiJobsV1JobsJobIdPutRequest, options?: Configuration): Promise<JobSchema> {
        return this.api.jobsV1JobsJobIdPut(param.appID, param.authToken, param.jobId, param.jobSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_jobs 
     * Reindex job
     * @param param the request object
     */
    public jobsV1JobsJobIdReindexPostWithHttpInfo(param: JobsApiJobsV1JobsJobIdReindexPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.jobsV1JobsJobIdReindexPostWithHttpInfo(param.appID, param.authToken, param.jobId, param.reindexJobSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_jobs 
     * Reindex job
     * @param param the request object
     */
    public jobsV1JobsJobIdReindexPost(param: JobsApiJobsV1JobsJobIdReindexPostRequest, options?: Configuration): Promise<void> {
        return this.api.jobsV1JobsJobIdReindexPost(param.appID, param.authToken, param.jobId, param.reindexJobSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_jobs 
     * Update job step
     * @param param the request object
     */
    public jobsV1JobsJobIdStepsJobStepIdPatchWithHttpInfo(param: JobsApiJobsV1JobsJobIdStepsJobStepIdPatchRequest, options?: Configuration): Promise<HttpInfo<JobSchema>> {
        return this.api.jobsV1JobsJobIdStepsJobStepIdPatchWithHttpInfo(param.appID, param.authToken, param.jobId, param.jobStepId, param.jobStepSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_jobs 
     * Update job step
     * @param param the request object
     */
    public jobsV1JobsJobIdStepsJobStepIdPatch(param: JobsApiJobsV1JobsJobIdStepsJobStepIdPatchRequest, options?: Configuration): Promise<JobSchema> {
        return this.api.jobsV1JobsJobIdStepsJobStepIdPatch(param.appID, param.authToken, param.jobId, param.jobStepId, param.jobStepSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_jobs 
     * Update job step
     * @param param the request object
     */
    public jobsV1JobsJobIdStepsJobStepIdPutWithHttpInfo(param: JobsApiJobsV1JobsJobIdStepsJobStepIdPutRequest, options?: Configuration): Promise<HttpInfo<JobSchema>> {
        return this.api.jobsV1JobsJobIdStepsJobStepIdPutWithHttpInfo(param.appID, param.authToken, param.jobId, param.jobStepId, param.jobStepSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_jobs 
     * Update job step
     * @param param the request object
     */
    public jobsV1JobsJobIdStepsJobStepIdPut(param: JobsApiJobsV1JobsJobIdStepsJobStepIdPutRequest, options?: Configuration): Promise<JobSchema> {
        return this.api.jobsV1JobsJobIdStepsJobStepIdPut(param.appID, param.authToken, param.jobId, param.jobStepId, param.jobStepSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_jobs 
     * Update multiple job steps
     * @param param the request object
     */
    public jobsV1JobsJobIdStepsPatchWithHttpInfo(param: JobsApiJobsV1JobsJobIdStepsPatchRequest, options?: Configuration): Promise<HttpInfo<JobSchema>> {
        return this.api.jobsV1JobsJobIdStepsPatchWithHttpInfo(param.appID, param.authToken, param.jobId, param.jobStepsUpdateSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_jobs 
     * Update multiple job steps
     * @param param the request object
     */
    public jobsV1JobsJobIdStepsPatch(param: JobsApiJobsV1JobsJobIdStepsPatchRequest, options?: Configuration): Promise<JobSchema> {
        return this.api.jobsV1JobsJobIdStepsPatch(param.appID, param.authToken, param.jobId, param.jobStepsUpdateSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_jobs 
     * Update multiple job steps
     * @param param the request object
     */
    public jobsV1JobsJobIdStepsPutWithHttpInfo(param: JobsApiJobsV1JobsJobIdStepsPutRequest, options?: Configuration): Promise<HttpInfo<JobSchema>> {
        return this.api.jobsV1JobsJobIdStepsPutWithHttpInfo(param.appID, param.authToken, param.jobId, param.jobStepsUpdateSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_jobs 
     * Update multiple job steps
     * @param param the request object
     */
    public jobsV1JobsJobIdStepsPut(param: JobsApiJobsV1JobsJobIdStepsPutRequest, options?: Configuration): Promise<JobSchema> {
        return this.api.jobsV1JobsJobIdStepsPut(param.appID, param.authToken, param.jobId, param.jobStepsUpdateSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_jobs 
     * Create a new job
     * @param param the request object
     */
    public jobsV1JobsPostWithHttpInfo(param: JobsApiJobsV1JobsPostRequest, options?: Configuration): Promise<HttpInfo<JobSchema>> {
        return this.api.jobsV1JobsPostWithHttpInfo(param.appID, param.authToken, param.jobSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_jobs 
     * Create a new job
     * @param param the request object
     */
    public jobsV1JobsPost(param: JobsApiJobsV1JobsPostRequest, options?: Configuration): Promise<JobSchema> {
        return this.api.jobsV1JobsPost(param.appID, param.authToken, param.jobSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_jobs 
     * Change jobs priority
     * @param param the request object
     */
    public jobsV1JobsPriorityPutWithHttpInfo(param: JobsApiJobsV1JobsPriorityPutRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.jobsV1JobsPriorityPutWithHttpInfo(param.appID, param.authToken, param.jobsPrioritySchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_jobs 
     * Change jobs priority
     * @param param the request object
     */
    public jobsV1JobsPriorityPut(param: JobsApiJobsV1JobsPriorityPutRequest, options?: Configuration): Promise<void> {
        return this.api.jobsV1JobsPriorityPut(param.appID, param.authToken, param.jobsPrioritySchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_jobs 
     * Change jobs state
     * @param param the request object
     */
    public jobsV1JobsStatePutWithHttpInfo(param: JobsApiJobsV1JobsStatePutRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.jobsV1JobsStatePutWithHttpInfo(param.appID, param.authToken, param.jobsStateSchema1,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_jobs 
     * Change jobs state
     * @param param the request object
     */
    public jobsV1JobsStatePut(param: JobsApiJobsV1JobsStatePutRequest, options?: Configuration): Promise<void> {
        return this.api.jobsV1JobsStatePut(param.appID, param.authToken, param.jobsStateSchema1,  options).toPromise();
    }

}

import { ObservableMetadataApi } from "./ObservableAPI";
import { MetadataApiRequestFactory, MetadataApiResponseProcessor} from "../apis/MetadataApi";

export interface MetadataApiMetadataV1AssetsAssetIdObjectTypeObjectIdViewsViewIdGetRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1AssetsAssetIdObjectTypeObjectIdViewsViewIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1AssetsAssetIdObjectTypeObjectIdViewsViewIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1AssetsAssetIdObjectTypeObjectIdViewsViewIdGet
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1AssetsAssetIdObjectTypeObjectIdViewsViewIdGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1AssetsAssetIdObjectTypeObjectIdViewsViewIdGet
     */
    objectId: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1AssetsAssetIdObjectTypeObjectIdViewsViewIdGet
     */
    viewId: string
}

export interface MetadataApiMetadataV1AssetsAssetIdObjectTypeObjectIdViewsViewIdPutRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1AssetsAssetIdObjectTypeObjectIdViewsViewIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1AssetsAssetIdObjectTypeObjectIdViewsViewIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1AssetsAssetIdObjectTypeObjectIdViewsViewIdPut
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1AssetsAssetIdObjectTypeObjectIdViewsViewIdPut
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1AssetsAssetIdObjectTypeObjectIdViewsViewIdPut
     */
    objectId: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1AssetsAssetIdObjectTypeObjectIdViewsViewIdPut
     */
    viewId: string
    /**
     * body
     * @type MetadataValuesSchema
     * @memberof MetadataApimetadataV1AssetsAssetIdObjectTypeObjectIdViewsViewIdPut
     */
    metadataValuesSchema: MetadataValuesSchema
}

export interface MetadataApiMetadataV1AssetsAssetIdVersionsVersionIdViewsViewIdGetRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1AssetsAssetIdVersionsVersionIdViewsViewIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1AssetsAssetIdVersionsVersionIdViewsViewIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1AssetsAssetIdVersionsVersionIdViewsViewIdGet
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1AssetsAssetIdVersionsVersionIdViewsViewIdGet
     */
    versionId: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1AssetsAssetIdVersionsVersionIdViewsViewIdGet
     */
    viewId: string
}

export interface MetadataApiMetadataV1AssetsObjectTypeObjectIdVersionsVersionIdViewsViewIdGetRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1AssetsObjectTypeObjectIdVersionsVersionIdViewsViewIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1AssetsObjectTypeObjectIdVersionsVersionIdViewsViewIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1AssetsObjectTypeObjectIdVersionsVersionIdViewsViewIdGet
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1AssetsObjectTypeObjectIdVersionsVersionIdViewsViewIdGet
     */
    objectId: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1AssetsObjectTypeObjectIdVersionsVersionIdViewsViewIdGet
     */
    versionId: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1AssetsObjectTypeObjectIdVersionsVersionIdViewsViewIdGet
     */
    viewId: string
}

export interface MetadataApiMetadataV1FieldsFieldNameDeleteRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1FieldsFieldNameDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1FieldsFieldNameDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1FieldsFieldNameDelete
     */
    fieldName: string
}

export interface MetadataApiMetadataV1FieldsFieldNameGetRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1FieldsFieldNameGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1FieldsFieldNameGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1FieldsFieldNameGet
     */
    fieldName: string
}

export interface MetadataApiMetadataV1FieldsFieldNamePatchRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1FieldsFieldNamePatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1FieldsFieldNamePatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1FieldsFieldNamePatch
     */
    fieldName: string
    /**
     * body
     * @type MetadataFieldSchema
     * @memberof MetadataApimetadataV1FieldsFieldNamePatch
     */
    metadataFieldSchema: MetadataFieldSchema
}

export interface MetadataApiMetadataV1FieldsFieldNamePutRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1FieldsFieldNamePut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1FieldsFieldNamePut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1FieldsFieldNamePut
     */
    fieldName: string
    /**
     * body
     * @type MetadataFieldSchema
     * @memberof MetadataApimetadataV1FieldsFieldNamePut
     */
    metadataFieldSchema: MetadataFieldSchema
}

export interface MetadataApiMetadataV1FieldsGetRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1FieldsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1FieldsGet
     */
    authToken: string
    /**
     * The number of items for each page (Default 500)
     * @type number
     * @memberof MetadataApimetadataV1FieldsGet
     */
    perPage?: number
    /**
     * If your request returns per_page entries, send the last value of \&quot;name\&quot; to fetch next page
     * @type string
     * @memberof MetadataApimetadataV1FieldsGet
     */
    lastFieldName?: string
    /**
     * A comma separated list of fieldnames For example - first_name,last_name,salary
     * @type string
     * @memberof MetadataApimetadataV1FieldsGet
     */
    filter?: string
}

export interface MetadataApiMetadataV1FieldsPostRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1FieldsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1FieldsPost
     */
    authToken: string
    /**
     * body
     * @type MetadataFieldCreateSchema
     * @memberof MetadataApimetadataV1FieldsPost
     */
    metadataFieldCreateSchema: MetadataFieldCreateSchema
}

export interface MetadataApiMetadataV1MappingFieldsFieldNameGetRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1MappingFieldsFieldNameGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1MappingFieldsFieldNameGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1MappingFieldsFieldNameGet
     */
    fieldName: string
}

export interface MetadataApiMetadataV1MappingFieldsPostRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1MappingFieldsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1MappingFieldsPost
     */
    authToken: string
    /**
     * body
     * @type MetadataFieldMappingSchema
     * @memberof MetadataApimetadataV1MappingFieldsPost
     */
    metadataFieldMappingSchema: MetadataFieldMappingSchema
}

export interface MetadataApiMetadataV1MappingOptionsGetRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1MappingOptionsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1MappingOptionsGet
     */
    authToken: string
}

export interface MetadataApiMetadataV1ObjectTypeCategoriesGetRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeCategoriesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeCategoriesGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeCategoriesGet
     */
    objectType: string
}

export interface MetadataApiMetadataV1ObjectTypeCategoriesNameDeleteRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeCategoriesNameDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeCategoriesNameDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeCategoriesNameDelete
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeCategoriesNameDelete
     */
    name: string
}

export interface MetadataApiMetadataV1ObjectTypeCategoriesNameGetRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeCategoriesNameGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeCategoriesNameGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeCategoriesNameGet
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeCategoriesNameGet
     */
    name: string
}

export interface MetadataApiMetadataV1ObjectTypeCategoriesNamePutRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeCategoriesNamePut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeCategoriesNamePut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeCategoriesNamePut
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeCategoriesNamePut
     */
    name: string
    /**
     * body
     * @type MetadataCategorySchema
     * @memberof MetadataApimetadataV1ObjectTypeCategoriesNamePut
     */
    metadataCategorySchema: MetadataCategorySchema
}

export interface MetadataApiMetadataV1ObjectTypeCategoriesNameViewsGetRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeCategoriesNameViewsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeCategoriesNameViewsGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeCategoriesNameViewsGet
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeCategoriesNameViewsGet
     */
    name: string
    /**
     * 
     * @type boolean
     * @memberof MetadataApimetadataV1ObjectTypeCategoriesNameViewsGet
     */
    extOptions?: boolean
    /**
     * 
     * @type boolean
     * @memberof MetadataApimetadataV1ObjectTypeCategoriesNameViewsGet
     */
    writableOnly?: boolean
}

export interface MetadataApiMetadataV1ObjectTypeCategoriesPostRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeCategoriesPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeCategoriesPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeCategoriesPost
     */
    objectType: string
    /**
     * body
     * @type MetadataCategorySchema
     * @memberof MetadataApimetadataV1ObjectTypeCategoriesPost
     */
    metadataCategorySchema: MetadataCategorySchema
}

export interface MetadataApiMetadataV1ObjectTypeContentViewsViewIdPutRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeContentViewsViewIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeContentViewsViewIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeContentViewsViewIdPut
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeContentViewsViewIdPut
     */
    viewId: string
    /**
     * body
     * @type CollectionMetadataValuesBatchSchema
     * @memberof MetadataApimetadataV1ObjectTypeContentViewsViewIdPut
     */
    collectionMetadataValuesBatchSchema: CollectionMetadataValuesBatchSchema
}

export interface MetadataApiMetadataV1ObjectTypeObjectIdGetRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeObjectIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeObjectIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeObjectIdGet
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeObjectIdGet
     */
    objectId: string
    /**
     * Filter out metadata field values, for deleted fields
     * @type boolean
     * @memberof MetadataApimetadataV1ObjectTypeObjectIdGet
     */
    includeValuesForDeletedFields?: boolean
}

export interface MetadataApiMetadataV1ObjectTypeObjectIdPutRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeObjectIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeObjectIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeObjectIdPut
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeObjectIdPut
     */
    objectId: string
    /**
     * body
     * @type MetadataValuesSchema
     * @memberof MetadataApimetadataV1ObjectTypeObjectIdPut
     */
    metadataValuesSchema: MetadataValuesSchema
}

export interface MetadataApiMetadataV1ObjectTypeObjectIdViewsViewIdGetRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeObjectIdViewsViewIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeObjectIdViewsViewIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeObjectIdViewsViewIdGet
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeObjectIdViewsViewIdGet
     */
    objectId: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeObjectIdViewsViewIdGet
     */
    viewId: string
}

export interface MetadataApiMetadataV1ObjectTypeObjectIdViewsViewIdPutRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeObjectIdViewsViewIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeObjectIdViewsViewIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeObjectIdViewsViewIdPut
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeObjectIdViewsViewIdPut
     */
    objectId: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeObjectIdViewsViewIdPut
     */
    viewId: string
    /**
     * body
     * @type MetadataValuesSchema
     * @memberof MetadataApimetadataV1ObjectTypeObjectIdViewsViewIdPut
     */
    metadataValuesSchema: MetadataValuesSchema
}

export interface MetadataApiMetadataV1ObjectTypeViewsViewIdPostRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeViewsViewIdPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeViewsViewIdPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeViewsViewIdPost
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeViewsViewIdPost
     */
    viewId: string
    /**
     * body
     * @type CreateMetadataValuesBatchSchema
     * @memberof MetadataApimetadataV1ObjectTypeViewsViewIdPost
     */
    createMetadataValuesBatchSchema: CreateMetadataValuesBatchSchema
}

export interface MetadataApiMetadataV1ObjectTypeViewsViewIdPutRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeViewsViewIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeViewsViewIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeViewsViewIdPut
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ObjectTypeViewsViewIdPut
     */
    viewId: string
    /**
     * body
     * @type MetadataValuesBatchSchema
     * @memberof MetadataApimetadataV1ObjectTypeViewsViewIdPut
     */
    metadataValuesBatchSchema: MetadataValuesBatchSchema
}

export interface MetadataApiMetadataV1UserFieldsGetRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1UserFieldsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1UserFieldsGet
     */
    authToken: string
}

export interface MetadataApiMetadataV1ViewsGetRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ViewsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ViewsGet
     */
    authToken: string
}

export interface MetadataApiMetadataV1ViewsPostRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ViewsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ViewsPost
     */
    authToken: string
    /**
     * body
     * @type MetadataViewInputSchema
     * @memberof MetadataApimetadataV1ViewsPost
     */
    metadataViewInputSchema: MetadataViewInputSchema
}

export interface MetadataApiMetadataV1ViewsViewIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ViewsViewIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ViewsViewIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ViewsViewIdDelete
     */
    viewId: string
}

export interface MetadataApiMetadataV1ViewsViewIdGetRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ViewsViewIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ViewsViewIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ViewsViewIdGet
     */
    viewId: string
    /**
     * 
     * @type boolean
     * @memberof MetadataApimetadataV1ViewsViewIdGet
     */
    mergeFields?: boolean
}

export interface MetadataApiMetadataV1ViewsViewIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ViewsViewIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ViewsViewIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ViewsViewIdPatch
     */
    viewId: string
    /**
     * body
     * @type MetadataViewInputSchema
     * @memberof MetadataApimetadataV1ViewsViewIdPatch
     */
    metadataViewInputSchema: MetadataViewInputSchema
}

export interface MetadataApiMetadataV1ViewsViewIdPutRequest {
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ViewsViewIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ViewsViewIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof MetadataApimetadataV1ViewsViewIdPut
     */
    viewId: string
    /**
     * body
     * @type MetadataViewInputSchema
     * @memberof MetadataApimetadataV1ViewsViewIdPut
     */
    metadataViewInputSchema: MetadataViewInputSchema
}

export class ObjectMetadataApi {
    private api: ObservableMetadataApi

    public constructor(configuration: Configuration, requestFactory?: MetadataApiRequestFactory, responseProcessor?: MetadataApiResponseProcessor) {
        this.api = new ObservableMetadataApi(configuration, requestFactory, responseProcessor);
    }

    /**
     *  Required roles:  - can_read_metadata_values 
     * Get asset metadata by object type, object ID and view ID
     * @param param the request object
     */
    public metadataV1AssetsAssetIdObjectTypeObjectIdViewsViewIdGetWithHttpInfo(param: MetadataApiMetadataV1AssetsAssetIdObjectTypeObjectIdViewsViewIdGetRequest, options?: Configuration): Promise<HttpInfo<MetadataValuesSchema>> {
        return this.api.metadataV1AssetsAssetIdObjectTypeObjectIdViewsViewIdGetWithHttpInfo(param.appID, param.authToken, param.objectType, param.assetId, param.objectId, param.viewId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_metadata_values 
     * Get asset metadata by object type, object ID and view ID
     * @param param the request object
     */
    public metadataV1AssetsAssetIdObjectTypeObjectIdViewsViewIdGet(param: MetadataApiMetadataV1AssetsAssetIdObjectTypeObjectIdViewsViewIdGetRequest, options?: Configuration): Promise<MetadataValuesSchema> {
        return this.api.metadataV1AssetsAssetIdObjectTypeObjectIdViewsViewIdGet(param.appID, param.authToken, param.objectType, param.assetId, param.objectId, param.viewId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_metadata_values 
     * Edit view metadata values for sub-objects of an asset (Such as segments)
     * @param param the request object
     */
    public metadataV1AssetsAssetIdObjectTypeObjectIdViewsViewIdPutWithHttpInfo(param: MetadataApiMetadataV1AssetsAssetIdObjectTypeObjectIdViewsViewIdPutRequest, options?: Configuration): Promise<HttpInfo<MetadataValuesSchema>> {
        return this.api.metadataV1AssetsAssetIdObjectTypeObjectIdViewsViewIdPutWithHttpInfo(param.appID, param.authToken, param.assetId, param.objectType, param.objectId, param.viewId, param.metadataValuesSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_metadata_values 
     * Edit view metadata values for sub-objects of an asset (Such as segments)
     * @param param the request object
     */
    public metadataV1AssetsAssetIdObjectTypeObjectIdViewsViewIdPut(param: MetadataApiMetadataV1AssetsAssetIdObjectTypeObjectIdViewsViewIdPutRequest, options?: Configuration): Promise<MetadataValuesSchema> {
        return this.api.metadataV1AssetsAssetIdObjectTypeObjectIdViewsViewIdPut(param.appID, param.authToken, param.assetId, param.objectType, param.objectId, param.viewId, param.metadataValuesSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_metadata_values 
     * Get object metadata by object type, object ID, version ID and view ID
     * @param param the request object
     */
    public metadataV1AssetsAssetIdVersionsVersionIdViewsViewIdGetWithHttpInfo(param: MetadataApiMetadataV1AssetsAssetIdVersionsVersionIdViewsViewIdGetRequest, options?: Configuration): Promise<HttpInfo<MetadataValuesSchema>> {
        return this.api.metadataV1AssetsAssetIdVersionsVersionIdViewsViewIdGetWithHttpInfo(param.appID, param.authToken, param.assetId, param.versionId, param.viewId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_metadata_values 
     * Get object metadata by object type, object ID, version ID and view ID
     * @param param the request object
     */
    public metadataV1AssetsAssetIdVersionsVersionIdViewsViewIdGet(param: MetadataApiMetadataV1AssetsAssetIdVersionsVersionIdViewsViewIdGetRequest, options?: Configuration): Promise<MetadataValuesSchema> {
        return this.api.metadataV1AssetsAssetIdVersionsVersionIdViewsViewIdGet(param.appID, param.authToken, param.assetId, param.versionId, param.viewId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_metadata_values 
     * Get asset metadata by object type, object ID, version ID and view ID
     * @param param the request object
     */
    public metadataV1AssetsObjectTypeObjectIdVersionsVersionIdViewsViewIdGetWithHttpInfo(param: MetadataApiMetadataV1AssetsObjectTypeObjectIdVersionsVersionIdViewsViewIdGetRequest, options?: Configuration): Promise<HttpInfo<MetadataValuesSchema>> {
        return this.api.metadataV1AssetsObjectTypeObjectIdVersionsVersionIdViewsViewIdGetWithHttpInfo(param.appID, param.authToken, param.objectType, param.objectId, param.versionId, param.viewId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_metadata_values 
     * Get asset metadata by object type, object ID, version ID and view ID
     * @param param the request object
     */
    public metadataV1AssetsObjectTypeObjectIdVersionsVersionIdViewsViewIdGet(param: MetadataApiMetadataV1AssetsObjectTypeObjectIdVersionsVersionIdViewsViewIdGetRequest, options?: Configuration): Promise<MetadataValuesSchema> {
        return this.api.metadataV1AssetsObjectTypeObjectIdVersionsVersionIdViewsViewIdGet(param.appID, param.authToken, param.objectType, param.objectId, param.versionId, param.viewId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_metadata_fields 
     * Delete a particular field by name
     * @param param the request object
     */
    public metadataV1FieldsFieldNameDeleteWithHttpInfo(param: MetadataApiMetadataV1FieldsFieldNameDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.metadataV1FieldsFieldNameDeleteWithHttpInfo(param.appID, param.authToken, param.fieldName,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_metadata_fields 
     * Delete a particular field by name
     * @param param the request object
     */
    public metadataV1FieldsFieldNameDelete(param: MetadataApiMetadataV1FieldsFieldNameDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.metadataV1FieldsFieldNameDelete(param.appID, param.authToken, param.fieldName,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_metadata_fields 
     * Returns a particular field by name
     * @param param the request object
     */
    public metadataV1FieldsFieldNameGetWithHttpInfo(param: MetadataApiMetadataV1FieldsFieldNameGetRequest, options?: Configuration): Promise<HttpInfo<MetadataFieldSchema>> {
        return this.api.metadataV1FieldsFieldNameGetWithHttpInfo(param.appID, param.authToken, param.fieldName,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_metadata_fields 
     * Returns a particular field by name
     * @param param the request object
     */
    public metadataV1FieldsFieldNameGet(param: MetadataApiMetadataV1FieldsFieldNameGetRequest, options?: Configuration): Promise<MetadataFieldSchema> {
        return this.api.metadataV1FieldsFieldNameGet(param.appID, param.authToken, param.fieldName,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_metadata_fields 
     * Update field by name
     * @param param the request object
     */
    public metadataV1FieldsFieldNamePatchWithHttpInfo(param: MetadataApiMetadataV1FieldsFieldNamePatchRequest, options?: Configuration): Promise<HttpInfo<MetadataFieldSchema>> {
        return this.api.metadataV1FieldsFieldNamePatchWithHttpInfo(param.appID, param.authToken, param.fieldName, param.metadataFieldSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_metadata_fields 
     * Update field by name
     * @param param the request object
     */
    public metadataV1FieldsFieldNamePatch(param: MetadataApiMetadataV1FieldsFieldNamePatchRequest, options?: Configuration): Promise<MetadataFieldSchema> {
        return this.api.metadataV1FieldsFieldNamePatch(param.appID, param.authToken, param.fieldName, param.metadataFieldSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_metadata_fields 
     * Update field by name
     * @param param the request object
     */
    public metadataV1FieldsFieldNamePutWithHttpInfo(param: MetadataApiMetadataV1FieldsFieldNamePutRequest, options?: Configuration): Promise<HttpInfo<MetadataFieldSchema>> {
        return this.api.metadataV1FieldsFieldNamePutWithHttpInfo(param.appID, param.authToken, param.fieldName, param.metadataFieldSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_metadata_fields 
     * Update field by name
     * @param param the request object
     */
    public metadataV1FieldsFieldNamePut(param: MetadataApiMetadataV1FieldsFieldNamePutRequest, options?: Configuration): Promise<MetadataFieldSchema> {
        return this.api.metadataV1FieldsFieldNamePut(param.appID, param.authToken, param.fieldName, param.metadataFieldSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_metadata_fields 
     * List the fields defined in the system
     * @param param the request object
     */
    public metadataV1FieldsGetWithHttpInfo(param: MetadataApiMetadataV1FieldsGetRequest, options?: Configuration): Promise<HttpInfo<MetadataFieldsSchema>> {
        return this.api.metadataV1FieldsGetWithHttpInfo(param.appID, param.authToken, param.perPage, param.lastFieldName, param.filter,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_metadata_fields 
     * List the fields defined in the system
     * @param param the request object
     */
    public metadataV1FieldsGet(param: MetadataApiMetadataV1FieldsGetRequest, options?: Configuration): Promise<MetadataFieldsSchema> {
        return this.api.metadataV1FieldsGet(param.appID, param.authToken, param.perPage, param.lastFieldName, param.filter,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_metadata_fields 
     * Create a new field
     * @param param the request object
     */
    public metadataV1FieldsPostWithHttpInfo(param: MetadataApiMetadataV1FieldsPostRequest, options?: Configuration): Promise<HttpInfo<MetadataFieldSchema>> {
        return this.api.metadataV1FieldsPostWithHttpInfo(param.appID, param.authToken, param.metadataFieldCreateSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_metadata_fields 
     * Create a new field
     * @param param the request object
     */
    public metadataV1FieldsPost(param: MetadataApiMetadataV1FieldsPostRequest, options?: Configuration): Promise<MetadataFieldSchema> {
        return this.api.metadataV1FieldsPost(param.appID, param.authToken, param.metadataFieldCreateSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_metadata_fields 
     * Get the metadata field mapping
     * @param param the request object
     */
    public metadataV1MappingFieldsFieldNameGetWithHttpInfo(param: MetadataApiMetadataV1MappingFieldsFieldNameGetRequest, options?: Configuration): Promise<HttpInfo<MetadataFieldMappingSchema>> {
        return this.api.metadataV1MappingFieldsFieldNameGetWithHttpInfo(param.appID, param.authToken, param.fieldName,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_metadata_fields 
     * Get the metadata field mapping
     * @param param the request object
     */
    public metadataV1MappingFieldsFieldNameGet(param: MetadataApiMetadataV1MappingFieldsFieldNameGetRequest, options?: Configuration): Promise<MetadataFieldMappingSchema> {
        return this.api.metadataV1MappingFieldsFieldNameGet(param.appID, param.authToken, param.fieldName,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_metadata_fields 
     * Create a new metadata field mapping
     * @param param the request object
     */
    public metadataV1MappingFieldsPostWithHttpInfo(param: MetadataApiMetadataV1MappingFieldsPostRequest, options?: Configuration): Promise<HttpInfo<MetadataFieldMappingSchema>> {
        return this.api.metadataV1MappingFieldsPostWithHttpInfo(param.appID, param.authToken, param.metadataFieldMappingSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_metadata_fields 
     * Create a new metadata field mapping
     * @param param the request object
     */
    public metadataV1MappingFieldsPost(param: MetadataApiMetadataV1MappingFieldsPostRequest, options?: Configuration): Promise<MetadataFieldMappingSchema> {
        return this.api.metadataV1MappingFieldsPost(param.appID, param.authToken, param.metadataFieldMappingSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_metadata_fields 
     * List the metadata field mapping options
     * @param param the request object
     */
    public metadataV1MappingOptionsGetWithHttpInfo(param: MetadataApiMetadataV1MappingOptionsGetRequest, options?: Configuration): Promise<HttpInfo<MetadataFieldMappingOptionsSchema>> {
        return this.api.metadataV1MappingOptionsGetWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_metadata_fields 
     * List the metadata field mapping options
     * @param param the request object
     */
    public metadataV1MappingOptionsGet(param: MetadataApiMetadataV1MappingOptionsGetRequest, options?: Configuration): Promise<MetadataFieldMappingOptionsSchema> {
        return this.api.metadataV1MappingOptionsGet(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_metadata_categories 
     * Get metadata categories
     * @param param the request object
     */
    public metadataV1ObjectTypeCategoriesGetWithHttpInfo(param: MetadataApiMetadataV1ObjectTypeCategoriesGetRequest, options?: Configuration): Promise<HttpInfo<MetadataCategoriesSchema>> {
        return this.api.metadataV1ObjectTypeCategoriesGetWithHttpInfo(param.appID, param.authToken, param.objectType,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_metadata_categories 
     * Get metadata categories
     * @param param the request object
     */
    public metadataV1ObjectTypeCategoriesGet(param: MetadataApiMetadataV1ObjectTypeCategoriesGetRequest, options?: Configuration): Promise<MetadataCategoriesSchema> {
        return this.api.metadataV1ObjectTypeCategoriesGet(param.appID, param.authToken, param.objectType,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_metadata_categories 
     * Delete metadata category by object type and category name
     * @param param the request object
     */
    public metadataV1ObjectTypeCategoriesNameDeleteWithHttpInfo(param: MetadataApiMetadataV1ObjectTypeCategoriesNameDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.metadataV1ObjectTypeCategoriesNameDeleteWithHttpInfo(param.appID, param.authToken, param.objectType, param.name,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_metadata_categories 
     * Delete metadata category by object type and category name
     * @param param the request object
     */
    public metadataV1ObjectTypeCategoriesNameDelete(param: MetadataApiMetadataV1ObjectTypeCategoriesNameDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.metadataV1ObjectTypeCategoriesNameDelete(param.appID, param.authToken, param.objectType, param.name,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_metadata_categories 
     * Get metadata category by object type and category name
     * @param param the request object
     */
    public metadataV1ObjectTypeCategoriesNameGetWithHttpInfo(param: MetadataApiMetadataV1ObjectTypeCategoriesNameGetRequest, options?: Configuration): Promise<HttpInfo<MetadataCategorySchema>> {
        return this.api.metadataV1ObjectTypeCategoriesNameGetWithHttpInfo(param.appID, param.authToken, param.objectType, param.name,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_metadata_categories 
     * Get metadata category by object type and category name
     * @param param the request object
     */
    public metadataV1ObjectTypeCategoriesNameGet(param: MetadataApiMetadataV1ObjectTypeCategoriesNameGetRequest, options?: Configuration): Promise<MetadataCategorySchema> {
        return this.api.metadataV1ObjectTypeCategoriesNameGet(param.appID, param.authToken, param.objectType, param.name,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_metadata_categories 
     * Edit metadata category for an object type
     * @param param the request object
     */
    public metadataV1ObjectTypeCategoriesNamePutWithHttpInfo(param: MetadataApiMetadataV1ObjectTypeCategoriesNamePutRequest, options?: Configuration): Promise<HttpInfo<MetadataCategorySchema>> {
        return this.api.metadataV1ObjectTypeCategoriesNamePutWithHttpInfo(param.appID, param.authToken, param.objectType, param.name, param.metadataCategorySchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_metadata_categories 
     * Edit metadata category for an object type
     * @param param the request object
     */
    public metadataV1ObjectTypeCategoriesNamePut(param: MetadataApiMetadataV1ObjectTypeCategoriesNamePutRequest, options?: Configuration): Promise<MetadataCategorySchema> {
        return this.api.metadataV1ObjectTypeCategoriesNamePut(param.appID, param.authToken, param.objectType, param.name, param.metadataCategorySchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_metadata_categories 
     * Get metadata views with field for object type and category
     * @param param the request object
     */
    public metadataV1ObjectTypeCategoriesNameViewsGetWithHttpInfo(param: MetadataApiMetadataV1ObjectTypeCategoriesNameViewsGetRequest, options?: Configuration): Promise<HttpInfo<MetadataCategorySchema>> {
        return this.api.metadataV1ObjectTypeCategoriesNameViewsGetWithHttpInfo(param.appID, param.authToken, param.objectType, param.name, param.extOptions, param.writableOnly,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_metadata_categories 
     * Get metadata views with field for object type and category
     * @param param the request object
     */
    public metadataV1ObjectTypeCategoriesNameViewsGet(param: MetadataApiMetadataV1ObjectTypeCategoriesNameViewsGetRequest, options?: Configuration): Promise<MetadataCategorySchema> {
        return this.api.metadataV1ObjectTypeCategoriesNameViewsGet(param.appID, param.authToken, param.objectType, param.name, param.extOptions, param.writableOnly,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_metadata_categories 
     * Add a metadata category for an object type
     * @param param the request object
     */
    public metadataV1ObjectTypeCategoriesPostWithHttpInfo(param: MetadataApiMetadataV1ObjectTypeCategoriesPostRequest, options?: Configuration): Promise<HttpInfo<MetadataCategorySchema>> {
        return this.api.metadataV1ObjectTypeCategoriesPostWithHttpInfo(param.appID, param.authToken, param.objectType, param.metadataCategorySchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_metadata_categories 
     * Add a metadata category for an object type
     * @param param the request object
     */
    public metadataV1ObjectTypeCategoriesPost(param: MetadataApiMetadataV1ObjectTypeCategoriesPostRequest, options?: Configuration): Promise<MetadataCategorySchema> {
        return this.api.metadataV1ObjectTypeCategoriesPost(param.appID, param.authToken, param.objectType, param.metadataCategorySchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_metadata_values 
     * Edit view metadata values for collection or saved search content.
     * @param param the request object
     */
    public metadataV1ObjectTypeContentViewsViewIdPutWithHttpInfo(param: MetadataApiMetadataV1ObjectTypeContentViewsViewIdPutRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.metadataV1ObjectTypeContentViewsViewIdPutWithHttpInfo(param.appID, param.authToken, param.objectType, param.viewId, param.collectionMetadataValuesBatchSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_metadata_values 
     * Edit view metadata values for collection or saved search content.
     * @param param the request object
     */
    public metadataV1ObjectTypeContentViewsViewIdPut(param: MetadataApiMetadataV1ObjectTypeContentViewsViewIdPutRequest, options?: Configuration): Promise<void> {
        return this.api.metadataV1ObjectTypeContentViewsViewIdPut(param.appID, param.authToken, param.objectType, param.viewId, param.collectionMetadataValuesBatchSchema,  options).toPromise();
    }

    /**
     * This endpoint is available only for admins
     * Get object metadata by object type and object ID
     * @param param the request object
     */
    public metadataV1ObjectTypeObjectIdGetWithHttpInfo(param: MetadataApiMetadataV1ObjectTypeObjectIdGetRequest, options?: Configuration): Promise<HttpInfo<MetadataValuesSchema>> {
        return this.api.metadataV1ObjectTypeObjectIdGetWithHttpInfo(param.appID, param.authToken, param.objectType, param.objectId, param.includeValuesForDeletedFields,  options).toPromise();
    }

    /**
     * This endpoint is available only for admins
     * Get object metadata by object type and object ID
     * @param param the request object
     */
    public metadataV1ObjectTypeObjectIdGet(param: MetadataApiMetadataV1ObjectTypeObjectIdGetRequest, options?: Configuration): Promise<MetadataValuesSchema> {
        return this.api.metadataV1ObjectTypeObjectIdGet(param.appID, param.authToken, param.objectType, param.objectId, param.includeValuesForDeletedFields,  options).toPromise();
    }

    /**
     * 
     * Edit metadata values directly without a view. Admin access required.
     * @param param the request object
     */
    public metadataV1ObjectTypeObjectIdPutWithHttpInfo(param: MetadataApiMetadataV1ObjectTypeObjectIdPutRequest, options?: Configuration): Promise<HttpInfo<MetadataValuesSchema>> {
        return this.api.metadataV1ObjectTypeObjectIdPutWithHttpInfo(param.appID, param.authToken, param.objectType, param.objectId, param.metadataValuesSchema,  options).toPromise();
    }

    /**
     * 
     * Edit metadata values directly without a view. Admin access required.
     * @param param the request object
     */
    public metadataV1ObjectTypeObjectIdPut(param: MetadataApiMetadataV1ObjectTypeObjectIdPutRequest, options?: Configuration): Promise<MetadataValuesSchema> {
        return this.api.metadataV1ObjectTypeObjectIdPut(param.appID, param.authToken, param.objectType, param.objectId, param.metadataValuesSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_metadata_values 
     * Get object metadata by object type, object ID and view ID
     * @param param the request object
     */
    public metadataV1ObjectTypeObjectIdViewsViewIdGetWithHttpInfo(param: MetadataApiMetadataV1ObjectTypeObjectIdViewsViewIdGetRequest, options?: Configuration): Promise<HttpInfo<MetadataValuesSchema>> {
        return this.api.metadataV1ObjectTypeObjectIdViewsViewIdGetWithHttpInfo(param.appID, param.authToken, param.objectType, param.objectId, param.viewId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_metadata_values 
     * Get object metadata by object type, object ID and view ID
     * @param param the request object
     */
    public metadataV1ObjectTypeObjectIdViewsViewIdGet(param: MetadataApiMetadataV1ObjectTypeObjectIdViewsViewIdGetRequest, options?: Configuration): Promise<MetadataValuesSchema> {
        return this.api.metadataV1ObjectTypeObjectIdViewsViewIdGet(param.appID, param.authToken, param.objectType, param.objectId, param.viewId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_metadata_values 
     * Edit view metadata values for a single object
     * @param param the request object
     */
    public metadataV1ObjectTypeObjectIdViewsViewIdPutWithHttpInfo(param: MetadataApiMetadataV1ObjectTypeObjectIdViewsViewIdPutRequest, options?: Configuration): Promise<HttpInfo<MetadataValuesSchema>> {
        return this.api.metadataV1ObjectTypeObjectIdViewsViewIdPutWithHttpInfo(param.appID, param.authToken, param.objectType, param.objectId, param.viewId, param.metadataValuesSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_metadata_values 
     * Edit view metadata values for a single object
     * @param param the request object
     */
    public metadataV1ObjectTypeObjectIdViewsViewIdPut(param: MetadataApiMetadataV1ObjectTypeObjectIdViewsViewIdPutRequest, options?: Configuration): Promise<MetadataValuesSchema> {
        return this.api.metadataV1ObjectTypeObjectIdViewsViewIdPut(param.appID, param.authToken, param.objectType, param.objectId, param.viewId, param.metadataValuesSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_metadata_values 
     * Add view metadata values for multiple objects (Assets, Collections or Segments)
     * @param param the request object
     */
    public metadataV1ObjectTypeViewsViewIdPostWithHttpInfo(param: MetadataApiMetadataV1ObjectTypeViewsViewIdPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.metadataV1ObjectTypeViewsViewIdPostWithHttpInfo(param.appID, param.authToken, param.objectType, param.viewId, param.createMetadataValuesBatchSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_metadata_values 
     * Add view metadata values for multiple objects (Assets, Collections or Segments)
     * @param param the request object
     */
    public metadataV1ObjectTypeViewsViewIdPost(param: MetadataApiMetadataV1ObjectTypeViewsViewIdPostRequest, options?: Configuration): Promise<void> {
        return this.api.metadataV1ObjectTypeViewsViewIdPost(param.appID, param.authToken, param.objectType, param.viewId, param.createMetadataValuesBatchSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_metadata_values 
     * Edit view metadata values for multiple objects (Assets, Collections or Segments)
     * @param param the request object
     */
    public metadataV1ObjectTypeViewsViewIdPutWithHttpInfo(param: MetadataApiMetadataV1ObjectTypeViewsViewIdPutRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.metadataV1ObjectTypeViewsViewIdPutWithHttpInfo(param.appID, param.authToken, param.objectType, param.viewId, param.metadataValuesBatchSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_metadata_values 
     * Edit view metadata values for multiple objects (Assets, Collections or Segments)
     * @param param the request object
     */
    public metadataV1ObjectTypeViewsViewIdPut(param: MetadataApiMetadataV1ObjectTypeViewsViewIdPutRequest, options?: Configuration): Promise<void> {
        return this.api.metadataV1ObjectTypeViewsViewIdPut(param.appID, param.authToken, param.objectType, param.viewId, param.metadataValuesBatchSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_metadata_fields 
     * List the fields that can be accessed by a user
     * @param param the request object
     */
    public metadataV1UserFieldsGetWithHttpInfo(param: MetadataApiMetadataV1UserFieldsGetRequest, options?: Configuration): Promise<HttpInfo<MetadataFieldsSchema>> {
        return this.api.metadataV1UserFieldsGetWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_metadata_fields 
     * List the fields that can be accessed by a user
     * @param param the request object
     */
    public metadataV1UserFieldsGet(param: MetadataApiMetadataV1UserFieldsGetRequest, options?: Configuration): Promise<MetadataFieldsSchema> {
        return this.api.metadataV1UserFieldsGet(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_metadata_views 
     * List the views defined in the system
     * @param param the request object
     */
    public metadataV1ViewsGetWithHttpInfo(param: MetadataApiMetadataV1ViewsGetRequest, options?: Configuration): Promise<HttpInfo<MetadataViewsSchema>> {
        return this.api.metadataV1ViewsGetWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_metadata_views 
     * List the views defined in the system
     * @param param the request object
     */
    public metadataV1ViewsGet(param: MetadataApiMetadataV1ViewsGetRequest, options?: Configuration): Promise<MetadataViewsSchema> {
        return this.api.metadataV1ViewsGet(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_metadata_views 
     * Create a new view
     * @param param the request object
     */
    public metadataV1ViewsPostWithHttpInfo(param: MetadataApiMetadataV1ViewsPostRequest, options?: Configuration): Promise<HttpInfo<MetadataViewSchema>> {
        return this.api.metadataV1ViewsPostWithHttpInfo(param.appID, param.authToken, param.metadataViewInputSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_metadata_views 
     * Create a new view
     * @param param the request object
     */
    public metadataV1ViewsPost(param: MetadataApiMetadataV1ViewsPostRequest, options?: Configuration): Promise<MetadataViewSchema> {
        return this.api.metadataV1ViewsPost(param.appID, param.authToken, param.metadataViewInputSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_metadata_views 
     * Delete a particular view by id
     * @param param the request object
     */
    public metadataV1ViewsViewIdDeleteWithHttpInfo(param: MetadataApiMetadataV1ViewsViewIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.metadataV1ViewsViewIdDeleteWithHttpInfo(param.appID, param.authToken, param.viewId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_metadata_views 
     * Delete a particular view by id
     * @param param the request object
     */
    public metadataV1ViewsViewIdDelete(param: MetadataApiMetadataV1ViewsViewIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.metadataV1ViewsViewIdDelete(param.appID, param.authToken, param.viewId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_metadata_views 
     * Returns a particular view by id
     * @param param the request object
     */
    public metadataV1ViewsViewIdGetWithHttpInfo(param: MetadataApiMetadataV1ViewsViewIdGetRequest, options?: Configuration): Promise<HttpInfo<MetadataViewSchema>> {
        return this.api.metadataV1ViewsViewIdGetWithHttpInfo(param.appID, param.authToken, param.viewId, param.mergeFields,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_metadata_views 
     * Returns a particular view by id
     * @param param the request object
     */
    public metadataV1ViewsViewIdGet(param: MetadataApiMetadataV1ViewsViewIdGetRequest, options?: Configuration): Promise<MetadataViewSchema> {
        return this.api.metadataV1ViewsViewIdGet(param.appID, param.authToken, param.viewId, param.mergeFields,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_metadata_views 
     * Update view
     * @param param the request object
     */
    public metadataV1ViewsViewIdPatchWithHttpInfo(param: MetadataApiMetadataV1ViewsViewIdPatchRequest, options?: Configuration): Promise<HttpInfo<MetadataViewSchema>> {
        return this.api.metadataV1ViewsViewIdPatchWithHttpInfo(param.appID, param.authToken, param.viewId, param.metadataViewInputSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_metadata_views 
     * Update view
     * @param param the request object
     */
    public metadataV1ViewsViewIdPatch(param: MetadataApiMetadataV1ViewsViewIdPatchRequest, options?: Configuration): Promise<MetadataViewSchema> {
        return this.api.metadataV1ViewsViewIdPatch(param.appID, param.authToken, param.viewId, param.metadataViewInputSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_metadata_views 
     * Update view
     * @param param the request object
     */
    public metadataV1ViewsViewIdPutWithHttpInfo(param: MetadataApiMetadataV1ViewsViewIdPutRequest, options?: Configuration): Promise<HttpInfo<MetadataViewSchema>> {
        return this.api.metadataV1ViewsViewIdPutWithHttpInfo(param.appID, param.authToken, param.viewId, param.metadataViewInputSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_metadata_views 
     * Update view
     * @param param the request object
     */
    public metadataV1ViewsViewIdPut(param: MetadataApiMetadataV1ViewsViewIdPutRequest, options?: Configuration): Promise<MetadataViewSchema> {
        return this.api.metadataV1ViewsViewIdPut(param.appID, param.authToken, param.viewId, param.metadataViewInputSchema,  options).toPromise();
    }

}

import { ObservableNotificationsApi } from "./ObservableAPI";
import { NotificationsApiRequestFactory, NotificationsApiResponseProcessor} from "../apis/NotificationsApi";

export interface NotificationsApiNotificationsV1WebhooksGetRequest {
    /**
     * 
     * @type string
     * @memberof NotificationsApinotificationsV1WebhooksGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof NotificationsApinotificationsV1WebhooksGet
     */
    appID: string
}

export interface NotificationsApiNotificationsV1WebhooksPostRequest {
    /**
     * 
     * @type string
     * @memberof NotificationsApinotificationsV1WebhooksPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof NotificationsApinotificationsV1WebhooksPost
     */
    appID: string
    /**
     * body
     * @type WebhookCreateSchema
     * @memberof NotificationsApinotificationsV1WebhooksPost
     */
    webhookCreateSchema: WebhookCreateSchema
}

export interface NotificationsApiNotificationsV1WebhooksWebhookIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof NotificationsApinotificationsV1WebhooksWebhookIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof NotificationsApinotificationsV1WebhooksWebhookIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof NotificationsApinotificationsV1WebhooksWebhookIdDelete
     */
    webhookId: string
}

export interface NotificationsApiNotificationsV1WebhooksWebhookIdGetRequest {
    /**
     * 
     * @type string
     * @memberof NotificationsApinotificationsV1WebhooksWebhookIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof NotificationsApinotificationsV1WebhooksWebhookIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof NotificationsApinotificationsV1WebhooksWebhookIdGet
     */
    webhookId: string
}

export interface NotificationsApiNotificationsV1WebhooksWebhookIdPutRequest {
    /**
     * 
     * @type string
     * @memberof NotificationsApinotificationsV1WebhooksWebhookIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof NotificationsApinotificationsV1WebhooksWebhookIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof NotificationsApinotificationsV1WebhooksWebhookIdPut
     */
    webhookId: string
    /**
     * body
     * @type WebhookCreateSchema
     * @memberof NotificationsApinotificationsV1WebhooksWebhookIdPut
     */
    webhookCreateSchema: WebhookCreateSchema
}

export class ObjectNotificationsApi {
    private api: ObservableNotificationsApi

    public constructor(configuration: Configuration, requestFactory?: NotificationsApiRequestFactory, responseProcessor?: NotificationsApiResponseProcessor) {
        this.api = new ObservableNotificationsApi(configuration, requestFactory, responseProcessor);
    }

    /**
     *  Required roles:  - can_read_webhooks 
     * Get all webhooks
     * @param param the request object
     */
    public notificationsV1WebhooksGetWithHttpInfo(param: NotificationsApiNotificationsV1WebhooksGetRequest, options?: Configuration): Promise<HttpInfo<WebhooksSchema>> {
        return this.api.notificationsV1WebhooksGetWithHttpInfo(param.authToken, param.appID,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_webhooks 
     * Get all webhooks
     * @param param the request object
     */
    public notificationsV1WebhooksGet(param: NotificationsApiNotificationsV1WebhooksGetRequest, options?: Configuration): Promise<WebhooksSchema> {
        return this.api.notificationsV1WebhooksGet(param.authToken, param.appID,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_webhooks 
     * Create a new webhook
     * @param param the request object
     */
    public notificationsV1WebhooksPostWithHttpInfo(param: NotificationsApiNotificationsV1WebhooksPostRequest, options?: Configuration): Promise<HttpInfo<WebhookSchema>> {
        return this.api.notificationsV1WebhooksPostWithHttpInfo(param.authToken, param.appID, param.webhookCreateSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_webhooks 
     * Create a new webhook
     * @param param the request object
     */
    public notificationsV1WebhooksPost(param: NotificationsApiNotificationsV1WebhooksPostRequest, options?: Configuration): Promise<WebhookSchema> {
        return this.api.notificationsV1WebhooksPost(param.authToken, param.appID, param.webhookCreateSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_webhooks 
     * Delete a webhook
     * @param param the request object
     */
    public notificationsV1WebhooksWebhookIdDeleteWithHttpInfo(param: NotificationsApiNotificationsV1WebhooksWebhookIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.notificationsV1WebhooksWebhookIdDeleteWithHttpInfo(param.authToken, param.appID, param.webhookId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_webhooks 
     * Delete a webhook
     * @param param the request object
     */
    public notificationsV1WebhooksWebhookIdDelete(param: NotificationsApiNotificationsV1WebhooksWebhookIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.notificationsV1WebhooksWebhookIdDelete(param.authToken, param.appID, param.webhookId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_webhooks 
     * Get a webhook definition
     * @param param the request object
     */
    public notificationsV1WebhooksWebhookIdGetWithHttpInfo(param: NotificationsApiNotificationsV1WebhooksWebhookIdGetRequest, options?: Configuration): Promise<HttpInfo<WebhookSchema>> {
        return this.api.notificationsV1WebhooksWebhookIdGetWithHttpInfo(param.authToken, param.appID, param.webhookId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_webhooks 
     * Get a webhook definition
     * @param param the request object
     */
    public notificationsV1WebhooksWebhookIdGet(param: NotificationsApiNotificationsV1WebhooksWebhookIdGetRequest, options?: Configuration): Promise<WebhookSchema> {
        return this.api.notificationsV1WebhooksWebhookIdGet(param.authToken, param.appID, param.webhookId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_webhooks 
     * Update a webhook
     * @param param the request object
     */
    public notificationsV1WebhooksWebhookIdPutWithHttpInfo(param: NotificationsApiNotificationsV1WebhooksWebhookIdPutRequest, options?: Configuration): Promise<HttpInfo<WebhookSchema>> {
        return this.api.notificationsV1WebhooksWebhookIdPutWithHttpInfo(param.authToken, param.appID, param.webhookId, param.webhookCreateSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_webhooks 
     * Update a webhook
     * @param param the request object
     */
    public notificationsV1WebhooksWebhookIdPut(param: NotificationsApiNotificationsV1WebhooksWebhookIdPutRequest, options?: Configuration): Promise<WebhookSchema> {
        return this.api.notificationsV1WebhooksWebhookIdPut(param.authToken, param.appID, param.webhookId, param.webhookCreateSchema,  options).toPromise();
    }

}

import { ObservableSearchApi } from "./ObservableAPI";
import { SearchApiRequestFactory, SearchApiResponseProcessor} from "../apis/SearchApi";

export interface SearchApiSearchV1DiscoveryDefaultEntitiesAdminGetRequest {
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1DiscoveryDefaultEntitiesAdminGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1DiscoveryDefaultEntitiesAdminGet
     */
    authToken: string
}

export interface SearchApiSearchV1DiscoveryDefaultEntitiesEntityIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1DiscoveryDefaultEntitiesEntityIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1DiscoveryDefaultEntitiesEntityIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1DiscoveryDefaultEntitiesEntityIdDelete
     */
    entityId: string
}

export interface SearchApiSearchV1DiscoveryDefaultEntitiesEntityIdGetRequest {
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1DiscoveryDefaultEntitiesEntityIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1DiscoveryDefaultEntitiesEntityIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1DiscoveryDefaultEntitiesEntityIdGet
     */
    entityId: string
}

export interface SearchApiSearchV1DiscoveryDefaultEntitiesEntityIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1DiscoveryDefaultEntitiesEntityIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1DiscoveryDefaultEntitiesEntityIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1DiscoveryDefaultEntitiesEntityIdPatch
     */
    entityId: string
    /**
     * body
     * @type DiscoveryEntitySchema
     * @memberof SearchApisearchV1DiscoveryDefaultEntitiesEntityIdPatch
     */
    discoveryEntitySchema: DiscoveryEntitySchema
}

export interface SearchApiSearchV1DiscoveryDefaultEntitiesEntityIdPutRequest {
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1DiscoveryDefaultEntitiesEntityIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1DiscoveryDefaultEntitiesEntityIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1DiscoveryDefaultEntitiesEntityIdPut
     */
    entityId: string
    /**
     * body
     * @type DiscoveryEntitySchema
     * @memberof SearchApisearchV1DiscoveryDefaultEntitiesEntityIdPut
     */
    discoveryEntitySchema: DiscoveryEntitySchema
}

export interface SearchApiSearchV1DiscoveryDefaultEntitiesGetRequest {
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1DiscoveryDefaultEntitiesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1DiscoveryDefaultEntitiesGet
     */
    authToken: string
}

export interface SearchApiSearchV1DiscoveryDefaultEntitiesPostRequest {
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1DiscoveryDefaultEntitiesPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1DiscoveryDefaultEntitiesPost
     */
    authToken: string
    /**
     * body
     * @type DiscoveryEntitySchema
     * @memberof SearchApisearchV1DiscoveryDefaultEntitiesPost
     */
    discoveryEntitySchema: DiscoveryEntitySchema
}

export interface SearchApiSearchV1DiscoveryDefaultPutRequest {
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1DiscoveryDefaultPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1DiscoveryDefaultPut
     */
    authToken: string
    /**
     * body
     * @type DiscoveryViewSettingsSchema
     * @memberof SearchApisearchV1DiscoveryDefaultPut
     */
    discoveryViewSettingsSchema: DiscoveryViewSettingsSchema
}

export interface SearchApiSearchV1DiscoveryEntitiesObjectTypeObjectIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1DiscoveryEntitiesObjectTypeObjectIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1DiscoveryEntitiesObjectTypeObjectIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1DiscoveryEntitiesObjectTypeObjectIdPatch
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1DiscoveryEntitiesObjectTypeObjectIdPatch
     */
    objectId: string
    /**
     * body
     * @type DiscoveryEntitySchema
     * @memberof SearchApisearchV1DiscoveryEntitiesObjectTypeObjectIdPatch
     */
    discoveryEntitySchema: DiscoveryEntitySchema
}

export interface SearchApiSearchV1DiscoveryEntitiesObjectTypeObjectIdPutRequest {
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1DiscoveryEntitiesObjectTypeObjectIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1DiscoveryEntitiesObjectTypeObjectIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1DiscoveryEntitiesObjectTypeObjectIdPut
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1DiscoveryEntitiesObjectTypeObjectIdPut
     */
    objectId: string
    /**
     * body
     * @type DiscoveryEntitySchema
     * @memberof SearchApisearchV1DiscoveryEntitiesObjectTypeObjectIdPut
     */
    discoveryEntitySchema: DiscoveryEntitySchema
}

export interface SearchApiSearchV1SearchHistoryGetRequest {
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchHistoryGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchHistoryGet
     */
    authToken: string
}

export interface SearchApiSearchV1SearchHistorySearchHistoryIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchHistorySearchHistoryIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchHistorySearchHistoryIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchHistorySearchHistoryIdDelete
     */
    searchHistoryId: string
}

export interface SearchApiSearchV1SearchHistorySearchHistoryIdGetRequest {
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchHistorySearchHistoryIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchHistorySearchHistoryIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchHistorySearchHistoryIdGet
     */
    searchHistoryId: string
}

export interface SearchApiSearchV1SearchPostRequest {
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchPost
     */
    authToken: string
    /**
     * body
     * @type SearchCriteriaSchema
     * @memberof SearchApisearchV1SearchPost
     */
    searchCriteriaSchema: SearchCriteriaSchema
    /**
     * The number of documents for each page
     * @type number
     * @memberof SearchApisearchV1SearchPost
     */
    perPage?: number
    /**
     * Which page number to fetch
     * @type number
     * @memberof SearchApisearchV1SearchPost
     */
    page?: number
    /**
     * If true passed then uses scroll pagination instead of default one (Deprecated, user search_after body parameter instead)
     * @type boolean
     * @memberof SearchApisearchV1SearchPost
     */
    scroll?: boolean
    /**
     * In order to get next batch of results using scroll pagination the scroll_id is required
     * @type string
     * @memberof SearchApisearchV1SearchPost
     */
    scrollId?: string
    /**
     * Set to false if you don\&#39;t need a URL, will speed things up
     * @type boolean
     * @memberof SearchApisearchV1SearchPost
     */
    generateSignedUrl?: boolean
    /**
     * Set to true if you also want the file download URLs generated
     * @type boolean
     * @memberof SearchApisearchV1SearchPost
     */
    generateSignedDownloadUrl?: boolean
    /**
     * Set to false if you don\&#39;t want to save the search to the history
     * @type boolean
     * @memberof SearchApisearchV1SearchPost
     */
    saveSearchHistory?: boolean
}

export interface SearchApiSearchV1SearchSavedGetRequest {
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedGet
     */
    authToken: string
    /**
     * The number of items for each page
     * @type number
     * @memberof SearchApisearchV1SearchSavedGet
     */
    perPage?: number
    /**
     * Which page number to fetch
     * @type number
     * @memberof SearchApisearchV1SearchSavedGet
     */
    page?: number
    /**
     * If true passed then uses scroll pagination instead of default one
     * @type boolean
     * @memberof SearchApisearchV1SearchSavedGet
     */
    scroll?: boolean
    /**
     * In order to get next batch of results using scroll pagination the scroll_id is required
     * @type string
     * @memberof SearchApisearchV1SearchSavedGet
     */
    scrollId?: string
    /**
     * A comma separated list of fieldnames with order. For example - name,asc;group_id,desc
     * @type string
     * @memberof SearchApisearchV1SearchSavedGet
     */
    sort?: string
    /**
     * Group ID
     * @type string
     * @memberof SearchApisearchV1SearchSavedGet
     */
    groupId?: string
    /**
     * Filter list of id:s (comma separated)
     * @type string
     * @memberof SearchApisearchV1SearchSavedGet
     */
    ids?: string
    /**
     * Search using query
     * @type string
     * @memberof SearchApisearchV1SearchSavedGet
     */
    query?: string
}

export interface SearchApiSearchV1SearchSavedGroupGroupIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedGroupGroupIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedGroupGroupIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedGroupGroupIdDelete
     */
    groupId: string
}

export interface SearchApiSearchV1SearchSavedGroupGroupIdGetRequest {
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedGroupGroupIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedGroupGroupIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedGroupGroupIdGet
     */
    groupId: string
}

export interface SearchApiSearchV1SearchSavedGroupGroupIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedGroupGroupIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedGroupGroupIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedGroupGroupIdPatch
     */
    groupId: string
    /**
     * body
     * @type SavedSearchGroupSchema
     * @memberof SearchApisearchV1SearchSavedGroupGroupIdPatch
     */
    savedSearchGroupSchema: SavedSearchGroupSchema
}

export interface SearchApiSearchV1SearchSavedGroupGroupIdPutRequest {
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedGroupGroupIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedGroupGroupIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedGroupGroupIdPut
     */
    groupId: string
    /**
     * body
     * @type SavedSearchGroupSchema
     * @memberof SearchApisearchV1SearchSavedGroupGroupIdPut
     */
    savedSearchGroupSchema: SavedSearchGroupSchema
}

export interface SearchApiSearchV1SearchSavedGroupGroupIdSearchSearchIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedGroupGroupIdSearchSearchIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedGroupGroupIdSearchSearchIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedGroupGroupIdSearchSearchIdDelete
     */
    groupId: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedGroupGroupIdSearchSearchIdDelete
     */
    searchId: string
}

export interface SearchApiSearchV1SearchSavedGroupGroupIdSearchSearchIdPostRequest {
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedGroupGroupIdSearchSearchIdPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedGroupGroupIdSearchSearchIdPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedGroupGroupIdSearchSearchIdPost
     */
    groupId: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedGroupGroupIdSearchSearchIdPost
     */
    searchId: string
}

export interface SearchApiSearchV1SearchSavedGroupPostRequest {
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedGroupPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedGroupPost
     */
    authToken: string
    /**
     * body
     * @type SavedSearchGroupSchema
     * @memberof SearchApisearchV1SearchSavedGroupPost
     */
    savedSearchGroupSchema: SavedSearchGroupSchema
}

export interface SearchApiSearchV1SearchSavedGroupsGetRequest {
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedGroupsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedGroupsGet
     */
    authToken: string
    /**
     * The number of items for each page
     * @type number
     * @memberof SearchApisearchV1SearchSavedGroupsGet
     */
    perPage?: number
    /**
     * Which page number to fetch
     * @type number
     * @memberof SearchApisearchV1SearchSavedGroupsGet
     */
    page?: number
    /**
     * A comma separated list of IDs. for example - 3c2db7d8-1f39-46e3-8c77-992101e5e616,683a2c63-63a0-42b0-aed8-5b62dedba840
     * @type string
     * @memberof SearchApisearchV1SearchSavedGroupsGet
     */
    ids?: string
    /**
     * A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc
     * @type string
     * @memberof SearchApisearchV1SearchSavedGroupsGet
     */
    sort?: string
}

export interface SearchApiSearchV1SearchSavedGroupsGroupIdReindexPostRequest {
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedGroupsGroupIdReindexPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedGroupsGroupIdReindexPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedGroupsGroupIdReindexPost
     */
    groupId: string
}

export interface SearchApiSearchV1SearchSavedPostRequest {
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedPost
     */
    authToken: string
    /**
     * body
     * @type SavedSearchSchema
     * @memberof SearchApisearchV1SearchSavedPost
     */
    savedSearchSchema: SavedSearchSchema
}

export interface SearchApiSearchV1SearchSavedSearchIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedSearchIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedSearchIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedSearchIdDelete
     */
    searchId: string
}

export interface SearchApiSearchV1SearchSavedSearchIdGetRequest {
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedSearchIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedSearchIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedSearchIdGet
     */
    searchId: string
    /**
     * The number of items for each page
     * @type number
     * @memberof SearchApisearchV1SearchSavedSearchIdGet
     */
    perPage?: number
    /**
     * Which page number to fetch
     * @type number
     * @memberof SearchApisearchV1SearchSavedSearchIdGet
     */
    page?: number
    /**
     * Set to false if you only want the search definition
     * @type boolean
     * @memberof SearchApisearchV1SearchSavedSearchIdGet
     */
    includeResults?: boolean
}

export interface SearchApiSearchV1SearchSavedSearchIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedSearchIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedSearchIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedSearchIdPatch
     */
    searchId: string
    /**
     * body
     * @type SavedSearchSchema
     * @memberof SearchApisearchV1SearchSavedSearchIdPatch
     */
    savedSearchSchema: SavedSearchSchema
}

export interface SearchApiSearchV1SearchSavedSearchIdPutRequest {
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedSearchIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedSearchIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedSearchIdPut
     */
    searchId: string
    /**
     * body
     * @type SavedSearchSchema
     * @memberof SearchApisearchV1SearchSavedSearchIdPut
     */
    savedSearchSchema: SavedSearchSchema
}

export interface SearchApiSearchV1SearchSavedSearchIdReindexPostRequest {
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedSearchIdReindexPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedSearchIdReindexPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSavedSearchIdReindexPost
     */
    searchId: string
    /**
     * body
     * @type ReindexSavedSearchSchema
     * @memberof SearchApisearchV1SearchSavedSearchIdReindexPost
     */
    reindexSavedSearchSchema: ReindexSavedSearchSchema
}

export interface SearchApiSearchV1SearchSuggestPostRequest {
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSuggestPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SearchApisearchV1SearchSuggestPost
     */
    authToken: string
    /**
     * body
     * @type SearchSuggestSchema
     * @memberof SearchApisearchV1SearchSuggestPost
     */
    searchSuggestSchema: SearchSuggestSchema
}

export class ObjectSearchApi {
    private api: ObservableSearchApi

    public constructor(configuration: Configuration, requestFactory?: SearchApiRequestFactory, responseProcessor?: SearchApiResponseProcessor) {
        this.api = new ObservableSearchApi(configuration, requestFactory, responseProcessor);
    }

    /**
     *  Required roles:  - can_write_discovery_entities 
     * Returns the discovery entities that are used to build the discovery view.
     * @param param the request object
     */
    public searchV1DiscoveryDefaultEntitiesAdminGetWithHttpInfo(param: SearchApiSearchV1DiscoveryDefaultEntitiesAdminGetRequest, options?: Configuration): Promise<HttpInfo<DiscoveryEntitiesSchema>> {
        return this.api.searchV1DiscoveryDefaultEntitiesAdminGetWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_discovery_entities 
     * Returns the discovery entities that are used to build the discovery view.
     * @param param the request object
     */
    public searchV1DiscoveryDefaultEntitiesAdminGet(param: SearchApiSearchV1DiscoveryDefaultEntitiesAdminGetRequest, options?: Configuration): Promise<DiscoveryEntitiesSchema> {
        return this.api.searchV1DiscoveryDefaultEntitiesAdminGet(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_discovery_entities 
     * Delete a discovery entity by id
     * @param param the request object
     */
    public searchV1DiscoveryDefaultEntitiesEntityIdDeleteWithHttpInfo(param: SearchApiSearchV1DiscoveryDefaultEntitiesEntityIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.searchV1DiscoveryDefaultEntitiesEntityIdDeleteWithHttpInfo(param.appID, param.authToken, param.entityId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_discovery_entities 
     * Delete a discovery entity by id
     * @param param the request object
     */
    public searchV1DiscoveryDefaultEntitiesEntityIdDelete(param: SearchApiSearchV1DiscoveryDefaultEntitiesEntityIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.searchV1DiscoveryDefaultEntitiesEntityIdDelete(param.appID, param.authToken, param.entityId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_discovery_entities 
     * Returns discovery entity
     * @param param the request object
     */
    public searchV1DiscoveryDefaultEntitiesEntityIdGetWithHttpInfo(param: SearchApiSearchV1DiscoveryDefaultEntitiesEntityIdGetRequest, options?: Configuration): Promise<HttpInfo<DiscoveryEntitySchema>> {
        return this.api.searchV1DiscoveryDefaultEntitiesEntityIdGetWithHttpInfo(param.appID, param.authToken, param.entityId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_discovery_entities 
     * Returns discovery entity
     * @param param the request object
     */
    public searchV1DiscoveryDefaultEntitiesEntityIdGet(param: SearchApiSearchV1DiscoveryDefaultEntitiesEntityIdGetRequest, options?: Configuration): Promise<DiscoveryEntitySchema> {
        return this.api.searchV1DiscoveryDefaultEntitiesEntityIdGet(param.appID, param.authToken, param.entityId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_discovery_entities 
     * Update a discovery entity by id
     * @param param the request object
     */
    public searchV1DiscoveryDefaultEntitiesEntityIdPatchWithHttpInfo(param: SearchApiSearchV1DiscoveryDefaultEntitiesEntityIdPatchRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.searchV1DiscoveryDefaultEntitiesEntityIdPatchWithHttpInfo(param.appID, param.authToken, param.entityId, param.discoveryEntitySchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_discovery_entities 
     * Update a discovery entity by id
     * @param param the request object
     */
    public searchV1DiscoveryDefaultEntitiesEntityIdPatch(param: SearchApiSearchV1DiscoveryDefaultEntitiesEntityIdPatchRequest, options?: Configuration): Promise<void> {
        return this.api.searchV1DiscoveryDefaultEntitiesEntityIdPatch(param.appID, param.authToken, param.entityId, param.discoveryEntitySchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_discovery_entities 
     * Update a discovery entity by id
     * @param param the request object
     */
    public searchV1DiscoveryDefaultEntitiesEntityIdPutWithHttpInfo(param: SearchApiSearchV1DiscoveryDefaultEntitiesEntityIdPutRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.searchV1DiscoveryDefaultEntitiesEntityIdPutWithHttpInfo(param.appID, param.authToken, param.entityId, param.discoveryEntitySchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_discovery_entities 
     * Update a discovery entity by id
     * @param param the request object
     */
    public searchV1DiscoveryDefaultEntitiesEntityIdPut(param: SearchApiSearchV1DiscoveryDefaultEntitiesEntityIdPutRequest, options?: Configuration): Promise<void> {
        return this.api.searchV1DiscoveryDefaultEntitiesEntityIdPut(param.appID, param.authToken, param.entityId, param.discoveryEntitySchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_discovery_entities 
     * Returns the discovery entities that are used to build the discovery view.
     * @param param the request object
     */
    public searchV1DiscoveryDefaultEntitiesGetWithHttpInfo(param: SearchApiSearchV1DiscoveryDefaultEntitiesGetRequest, options?: Configuration): Promise<HttpInfo<DiscoveryEntitiesSchema>> {
        return this.api.searchV1DiscoveryDefaultEntitiesGetWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_discovery_entities 
     * Returns the discovery entities that are used to build the discovery view.
     * @param param the request object
     */
    public searchV1DiscoveryDefaultEntitiesGet(param: SearchApiSearchV1DiscoveryDefaultEntitiesGetRequest, options?: Configuration): Promise<DiscoveryEntitiesSchema> {
        return this.api.searchV1DiscoveryDefaultEntitiesGet(param.appID, param.authToken,  options).toPromise();
    }

    /**
     * <br/>This creates an entry for the discovery view to show collections and saved searches.<br/>Object Type should be one of COLLECTION, SAVED_SEARCH, ASSET, RECOMMENDATION or TRENDING<br/>Object ID is only needed in the case of COLLECTION, SAVED_SEARCH or ASSET<br/>metadata is for user defined extra data.<br/><br/>This creates an entry for the discovery view to show collections and saved searches.<br/>Object Type should be one of COLLECTION, SAVED_SEARCH, ASSET, RECOMMENDATION or TRENDING<br/>Object ID is only needed in the case of COLLECTION, SAVED_SEARCH or ASSET<br/>metadata is for user defined extra data.<br/> Required roles:  - can_write_discovery_entities 
     * Adds a new discovery entity.
     * @param param the request object
     */
    public searchV1DiscoveryDefaultEntitiesPostWithHttpInfo(param: SearchApiSearchV1DiscoveryDefaultEntitiesPostRequest, options?: Configuration): Promise<HttpInfo<DiscoveryEntitySchema>> {
        return this.api.searchV1DiscoveryDefaultEntitiesPostWithHttpInfo(param.appID, param.authToken, param.discoveryEntitySchema,  options).toPromise();
    }

    /**
     * <br/>This creates an entry for the discovery view to show collections and saved searches.<br/>Object Type should be one of COLLECTION, SAVED_SEARCH, ASSET, RECOMMENDATION or TRENDING<br/>Object ID is only needed in the case of COLLECTION, SAVED_SEARCH or ASSET<br/>metadata is for user defined extra data.<br/><br/>This creates an entry for the discovery view to show collections and saved searches.<br/>Object Type should be one of COLLECTION, SAVED_SEARCH, ASSET, RECOMMENDATION or TRENDING<br/>Object ID is only needed in the case of COLLECTION, SAVED_SEARCH or ASSET<br/>metadata is for user defined extra data.<br/> Required roles:  - can_write_discovery_entities 
     * Adds a new discovery entity.
     * @param param the request object
     */
    public searchV1DiscoveryDefaultEntitiesPost(param: SearchApiSearchV1DiscoveryDefaultEntitiesPostRequest, options?: Configuration): Promise<DiscoveryEntitySchema> {
        return this.api.searchV1DiscoveryDefaultEntitiesPost(param.appID, param.authToken, param.discoveryEntitySchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_discovery_entities 
     * Update default discovery view
     * @param param the request object
     */
    public searchV1DiscoveryDefaultPutWithHttpInfo(param: SearchApiSearchV1DiscoveryDefaultPutRequest, options?: Configuration): Promise<HttpInfo<DiscoveryViewSettingsSchema>> {
        return this.api.searchV1DiscoveryDefaultPutWithHttpInfo(param.appID, param.authToken, param.discoveryViewSettingsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_discovery_entities 
     * Update default discovery view
     * @param param the request object
     */
    public searchV1DiscoveryDefaultPut(param: SearchApiSearchV1DiscoveryDefaultPutRequest, options?: Configuration): Promise<DiscoveryViewSettingsSchema> {
        return this.api.searchV1DiscoveryDefaultPut(param.appID, param.authToken, param.discoveryViewSettingsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_discovery_entities 
     * Update a discovery entity by object\'s type and id
     * @param param the request object
     */
    public searchV1DiscoveryEntitiesObjectTypeObjectIdPatchWithHttpInfo(param: SearchApiSearchV1DiscoveryEntitiesObjectTypeObjectIdPatchRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.searchV1DiscoveryEntitiesObjectTypeObjectIdPatchWithHttpInfo(param.appID, param.authToken, param.objectType, param.objectId, param.discoveryEntitySchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_discovery_entities 
     * Update a discovery entity by object\'s type and id
     * @param param the request object
     */
    public searchV1DiscoveryEntitiesObjectTypeObjectIdPatch(param: SearchApiSearchV1DiscoveryEntitiesObjectTypeObjectIdPatchRequest, options?: Configuration): Promise<void> {
        return this.api.searchV1DiscoveryEntitiesObjectTypeObjectIdPatch(param.appID, param.authToken, param.objectType, param.objectId, param.discoveryEntitySchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_discovery_entities 
     * Update a discovery entity by object\'s type and id
     * @param param the request object
     */
    public searchV1DiscoveryEntitiesObjectTypeObjectIdPutWithHttpInfo(param: SearchApiSearchV1DiscoveryEntitiesObjectTypeObjectIdPutRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.searchV1DiscoveryEntitiesObjectTypeObjectIdPutWithHttpInfo(param.appID, param.authToken, param.objectType, param.objectId, param.discoveryEntitySchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_discovery_entities 
     * Update a discovery entity by object\'s type and id
     * @param param the request object
     */
    public searchV1DiscoveryEntitiesObjectTypeObjectIdPut(param: SearchApiSearchV1DiscoveryEntitiesObjectTypeObjectIdPutRequest, options?: Configuration): Promise<void> {
        return this.api.searchV1DiscoveryEntitiesObjectTypeObjectIdPut(param.appID, param.authToken, param.objectType, param.objectId, param.discoveryEntitySchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_search_history 
     * Returns the current search history
     * @param param the request object
     */
    public searchV1SearchHistoryGetWithHttpInfo(param: SearchApiSearchV1SearchHistoryGetRequest, options?: Configuration): Promise<HttpInfo<SearchHistoryListSchema>> {
        return this.api.searchV1SearchHistoryGetWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_search_history 
     * Returns the current search history
     * @param param the request object
     */
    public searchV1SearchHistoryGet(param: SearchApiSearchV1SearchHistoryGetRequest, options?: Configuration): Promise<SearchHistoryListSchema> {
        return this.api.searchV1SearchHistoryGet(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_search_history 
     * Delete a search from history by its id
     * @param param the request object
     */
    public searchV1SearchHistorySearchHistoryIdDeleteWithHttpInfo(param: SearchApiSearchV1SearchHistorySearchHistoryIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.searchV1SearchHistorySearchHistoryIdDeleteWithHttpInfo(param.appID, param.authToken, param.searchHistoryId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_search_history 
     * Delete a search from history by its id
     * @param param the request object
     */
    public searchV1SearchHistorySearchHistoryIdDelete(param: SearchApiSearchV1SearchHistorySearchHistoryIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.searchV1SearchHistorySearchHistoryIdDelete(param.appID, param.authToken, param.searchHistoryId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_search_history 
     * Returns results of search history
     * @param param the request object
     */
    public searchV1SearchHistorySearchHistoryIdGetWithHttpInfo(param: SearchApiSearchV1SearchHistorySearchHistoryIdGetRequest, options?: Configuration): Promise<HttpInfo<SearchDocumentsSchema>> {
        return this.api.searchV1SearchHistorySearchHistoryIdGetWithHttpInfo(param.appID, param.authToken, param.searchHistoryId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_search_history 
     * Returns results of search history
     * @param param the request object
     */
    public searchV1SearchHistorySearchHistoryIdGet(param: SearchApiSearchV1SearchHistorySearchHistoryIdGetRequest, options?: Configuration): Promise<SearchDocumentsSchema> {
        return this.api.searchV1SearchHistorySearchHistoryIdGet(param.appID, param.authToken, param.searchHistoryId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_search 
     * Search
     * @param param the request object
     */
    public searchV1SearchPostWithHttpInfo(param: SearchApiSearchV1SearchPostRequest, options?: Configuration): Promise<HttpInfo<SearchDocumentsSchema>> {
        return this.api.searchV1SearchPostWithHttpInfo(param.appID, param.authToken, param.searchCriteriaSchema, param.perPage, param.page, param.scroll, param.scrollId, param.generateSignedUrl, param.generateSignedDownloadUrl, param.saveSearchHistory,  options).toPromise();
    }

    /**
     *  Required roles:  - can_search 
     * Search
     * @param param the request object
     */
    public searchV1SearchPost(param: SearchApiSearchV1SearchPostRequest, options?: Configuration): Promise<SearchDocumentsSchema> {
        return this.api.searchV1SearchPost(param.appID, param.authToken, param.searchCriteriaSchema, param.perPage, param.page, param.scroll, param.scrollId, param.generateSignedUrl, param.generateSignedDownloadUrl, param.saveSearchHistory,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_saved_searches 
     * Returns list of saved searches
     * @param param the request object
     */
    public searchV1SearchSavedGetWithHttpInfo(param: SearchApiSearchV1SearchSavedGetRequest, options?: Configuration): Promise<HttpInfo<SavedSearchesSchema>> {
        return this.api.searchV1SearchSavedGetWithHttpInfo(param.appID, param.authToken, param.perPage, param.page, param.scroll, param.scrollId, param.sort, param.groupId, param.ids, param.query,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_saved_searches 
     * Returns list of saved searches
     * @param param the request object
     */
    public searchV1SearchSavedGet(param: SearchApiSearchV1SearchSavedGetRequest, options?: Configuration): Promise<SavedSearchesSchema> {
        return this.api.searchV1SearchSavedGet(param.appID, param.authToken, param.perPage, param.page, param.scroll, param.scrollId, param.sort, param.groupId, param.ids, param.query,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_saved_search_groups 
     * Delete a saved search group by it\'s id
     * @param param the request object
     */
    public searchV1SearchSavedGroupGroupIdDeleteWithHttpInfo(param: SearchApiSearchV1SearchSavedGroupGroupIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.searchV1SearchSavedGroupGroupIdDeleteWithHttpInfo(param.appID, param.authToken, param.groupId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_saved_search_groups 
     * Delete a saved search group by it\'s id
     * @param param the request object
     */
    public searchV1SearchSavedGroupGroupIdDelete(param: SearchApiSearchV1SearchSavedGroupGroupIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.searchV1SearchSavedGroupGroupIdDelete(param.appID, param.authToken, param.groupId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_saved_searches 
     * Returns saved search group data
     * @param param the request object
     */
    public searchV1SearchSavedGroupGroupIdGetWithHttpInfo(param: SearchApiSearchV1SearchSavedGroupGroupIdGetRequest, options?: Configuration): Promise<HttpInfo<SavedSearchGroupSchema>> {
        return this.api.searchV1SearchSavedGroupGroupIdGetWithHttpInfo(param.appID, param.authToken, param.groupId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_saved_searches 
     * Returns saved search group data
     * @param param the request object
     */
    public searchV1SearchSavedGroupGroupIdGet(param: SearchApiSearchV1SearchSavedGroupGroupIdGetRequest, options?: Configuration): Promise<SavedSearchGroupSchema> {
        return this.api.searchV1SearchSavedGroupGroupIdGet(param.appID, param.authToken, param.groupId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_saved_search_groups 
     * Update and return saved search group data
     * @param param the request object
     */
    public searchV1SearchSavedGroupGroupIdPatchWithHttpInfo(param: SearchApiSearchV1SearchSavedGroupGroupIdPatchRequest, options?: Configuration): Promise<HttpInfo<SavedSearchGroupSchema>> {
        return this.api.searchV1SearchSavedGroupGroupIdPatchWithHttpInfo(param.appID, param.authToken, param.groupId, param.savedSearchGroupSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_saved_search_groups 
     * Update and return saved search group data
     * @param param the request object
     */
    public searchV1SearchSavedGroupGroupIdPatch(param: SearchApiSearchV1SearchSavedGroupGroupIdPatchRequest, options?: Configuration): Promise<SavedSearchGroupSchema> {
        return this.api.searchV1SearchSavedGroupGroupIdPatch(param.appID, param.authToken, param.groupId, param.savedSearchGroupSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_saved_search_groups 
     * Update and return saved search group data
     * @param param the request object
     */
    public searchV1SearchSavedGroupGroupIdPutWithHttpInfo(param: SearchApiSearchV1SearchSavedGroupGroupIdPutRequest, options?: Configuration): Promise<HttpInfo<SavedSearchGroupSchema>> {
        return this.api.searchV1SearchSavedGroupGroupIdPutWithHttpInfo(param.appID, param.authToken, param.groupId, param.savedSearchGroupSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_saved_search_groups 
     * Update and return saved search group data
     * @param param the request object
     */
    public searchV1SearchSavedGroupGroupIdPut(param: SearchApiSearchV1SearchSavedGroupGroupIdPutRequest, options?: Configuration): Promise<SavedSearchGroupSchema> {
        return this.api.searchV1SearchSavedGroupGroupIdPut(param.appID, param.authToken, param.groupId, param.savedSearchGroupSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_saved_searches 
     * Delete saved search from search group
     * @param param the request object
     */
    public searchV1SearchSavedGroupGroupIdSearchSearchIdDeleteWithHttpInfo(param: SearchApiSearchV1SearchSavedGroupGroupIdSearchSearchIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.searchV1SearchSavedGroupGroupIdSearchSearchIdDeleteWithHttpInfo(param.appID, param.authToken, param.groupId, param.searchId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_saved_searches 
     * Delete saved search from search group
     * @param param the request object
     */
    public searchV1SearchSavedGroupGroupIdSearchSearchIdDelete(param: SearchApiSearchV1SearchSavedGroupGroupIdSearchSearchIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.searchV1SearchSavedGroupGroupIdSearchSearchIdDelete(param.appID, param.authToken, param.groupId, param.searchId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_saved_searches 
     * Adds saved search to group
     * @param param the request object
     */
    public searchV1SearchSavedGroupGroupIdSearchSearchIdPostWithHttpInfo(param: SearchApiSearchV1SearchSavedGroupGroupIdSearchSearchIdPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.searchV1SearchSavedGroupGroupIdSearchSearchIdPostWithHttpInfo(param.appID, param.authToken, param.groupId, param.searchId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_saved_searches 
     * Adds saved search to group
     * @param param the request object
     */
    public searchV1SearchSavedGroupGroupIdSearchSearchIdPost(param: SearchApiSearchV1SearchSavedGroupGroupIdSearchSearchIdPostRequest, options?: Configuration): Promise<void> {
        return this.api.searchV1SearchSavedGroupGroupIdSearchSearchIdPost(param.appID, param.authToken, param.groupId, param.searchId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_saved_search_groups 
     * Create and return saved search group data
     * @param param the request object
     */
    public searchV1SearchSavedGroupPostWithHttpInfo(param: SearchApiSearchV1SearchSavedGroupPostRequest, options?: Configuration): Promise<HttpInfo<SavedSearchGroupSchema>> {
        return this.api.searchV1SearchSavedGroupPostWithHttpInfo(param.appID, param.authToken, param.savedSearchGroupSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_saved_search_groups 
     * Create and return saved search group data
     * @param param the request object
     */
    public searchV1SearchSavedGroupPost(param: SearchApiSearchV1SearchSavedGroupPostRequest, options?: Configuration): Promise<SavedSearchGroupSchema> {
        return this.api.searchV1SearchSavedGroupPost(param.appID, param.authToken, param.savedSearchGroupSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_saved_searches 
     * Returns paginated list of search groups
     * @param param the request object
     */
    public searchV1SearchSavedGroupsGetWithHttpInfo(param: SearchApiSearchV1SearchSavedGroupsGetRequest, options?: Configuration): Promise<HttpInfo<SavedSearchGroupsSchema>> {
        return this.api.searchV1SearchSavedGroupsGetWithHttpInfo(param.appID, param.authToken, param.perPage, param.page, param.ids, param.sort,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_saved_searches 
     * Returns paginated list of search groups
     * @param param the request object
     */
    public searchV1SearchSavedGroupsGet(param: SearchApiSearchV1SearchSavedGroupsGetRequest, options?: Configuration): Promise<SavedSearchGroupsSchema> {
        return this.api.searchV1SearchSavedGroupsGet(param.appID, param.authToken, param.perPage, param.page, param.ids, param.sort,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_saved_searches 
     * Reindex a particular saved search group by id
     * @param param the request object
     */
    public searchV1SearchSavedGroupsGroupIdReindexPostWithHttpInfo(param: SearchApiSearchV1SearchSavedGroupsGroupIdReindexPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.searchV1SearchSavedGroupsGroupIdReindexPostWithHttpInfo(param.appID, param.authToken, param.groupId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_saved_searches 
     * Reindex a particular saved search group by id
     * @param param the request object
     */
    public searchV1SearchSavedGroupsGroupIdReindexPost(param: SearchApiSearchV1SearchSavedGroupsGroupIdReindexPostRequest, options?: Configuration): Promise<void> {
        return this.api.searchV1SearchSavedGroupsGroupIdReindexPost(param.appID, param.authToken, param.groupId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_saved_searches 
     * Search, save and return result of this search
     * @param param the request object
     */
    public searchV1SearchSavedPostWithHttpInfo(param: SearchApiSearchV1SearchSavedPostRequest, options?: Configuration): Promise<HttpInfo<SavedSearchSchema>> {
        return this.api.searchV1SearchSavedPostWithHttpInfo(param.appID, param.authToken, param.savedSearchSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_saved_searches 
     * Search, save and return result of this search
     * @param param the request object
     */
    public searchV1SearchSavedPost(param: SearchApiSearchV1SearchSavedPostRequest, options?: Configuration): Promise<SavedSearchSchema> {
        return this.api.searchV1SearchSavedPost(param.appID, param.authToken, param.savedSearchSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_saved_searches 
     * Delete a saved search by its id
     * @param param the request object
     */
    public searchV1SearchSavedSearchIdDeleteWithHttpInfo(param: SearchApiSearchV1SearchSavedSearchIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.searchV1SearchSavedSearchIdDeleteWithHttpInfo(param.appID, param.authToken, param.searchId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_saved_searches 
     * Delete a saved search by its id
     * @param param the request object
     */
    public searchV1SearchSavedSearchIdDelete(param: SearchApiSearchV1SearchSavedSearchIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.searchV1SearchSavedSearchIdDelete(param.appID, param.authToken, param.searchId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_saved_searches 
     * Returns results of saved search
     * @param param the request object
     */
    public searchV1SearchSavedSearchIdGetWithHttpInfo(param: SearchApiSearchV1SearchSavedSearchIdGetRequest, options?: Configuration): Promise<HttpInfo<SavedSearchResultsSchema>> {
        return this.api.searchV1SearchSavedSearchIdGetWithHttpInfo(param.appID, param.authToken, param.searchId, param.perPage, param.page, param.includeResults,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_saved_searches 
     * Returns results of saved search
     * @param param the request object
     */
    public searchV1SearchSavedSearchIdGet(param: SearchApiSearchV1SearchSavedSearchIdGetRequest, options?: Configuration): Promise<SavedSearchResultsSchema> {
        return this.api.searchV1SearchSavedSearchIdGet(param.appID, param.authToken, param.searchId, param.perPage, param.page, param.includeResults,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_saved_searches 
     * Search and save this search
     * @param param the request object
     */
    public searchV1SearchSavedSearchIdPatchWithHttpInfo(param: SearchApiSearchV1SearchSavedSearchIdPatchRequest, options?: Configuration): Promise<HttpInfo<SearchDocumentsSchema>> {
        return this.api.searchV1SearchSavedSearchIdPatchWithHttpInfo(param.appID, param.authToken, param.searchId, param.savedSearchSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_saved_searches 
     * Search and save this search
     * @param param the request object
     */
    public searchV1SearchSavedSearchIdPatch(param: SearchApiSearchV1SearchSavedSearchIdPatchRequest, options?: Configuration): Promise<SearchDocumentsSchema> {
        return this.api.searchV1SearchSavedSearchIdPatch(param.appID, param.authToken, param.searchId, param.savedSearchSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_saved_searches 
     * Search and save this search
     * @param param the request object
     */
    public searchV1SearchSavedSearchIdPutWithHttpInfo(param: SearchApiSearchV1SearchSavedSearchIdPutRequest, options?: Configuration): Promise<HttpInfo<SearchDocumentsSchema>> {
        return this.api.searchV1SearchSavedSearchIdPutWithHttpInfo(param.appID, param.authToken, param.searchId, param.savedSearchSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_saved_searches 
     * Search and save this search
     * @param param the request object
     */
    public searchV1SearchSavedSearchIdPut(param: SearchApiSearchV1SearchSavedSearchIdPutRequest, options?: Configuration): Promise<SearchDocumentsSchema> {
        return this.api.searchV1SearchSavedSearchIdPut(param.appID, param.authToken, param.searchId, param.savedSearchSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_saved_searches 
     * Reindex a particular saved search by id
     * @param param the request object
     */
    public searchV1SearchSavedSearchIdReindexPostWithHttpInfo(param: SearchApiSearchV1SearchSavedSearchIdReindexPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.searchV1SearchSavedSearchIdReindexPostWithHttpInfo(param.appID, param.authToken, param.searchId, param.reindexSavedSearchSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_saved_searches 
     * Reindex a particular saved search by id
     * @param param the request object
     */
    public searchV1SearchSavedSearchIdReindexPost(param: SearchApiSearchV1SearchSavedSearchIdReindexPostRequest, options?: Configuration): Promise<void> {
        return this.api.searchV1SearchSavedSearchIdReindexPost(param.appID, param.authToken, param.searchId, param.reindexSavedSearchSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_search 
     * Returns search suggestions for a particular query.
     * @param param the request object
     */
    public searchV1SearchSuggestPostWithHttpInfo(param: SearchApiSearchV1SearchSuggestPostRequest, options?: Configuration): Promise<HttpInfo<SearchSuggestsResponseSchema>> {
        return this.api.searchV1SearchSuggestPostWithHttpInfo(param.appID, param.authToken, param.searchSuggestSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_search 
     * Returns search suggestions for a particular query.
     * @param param the request object
     */
    public searchV1SearchSuggestPost(param: SearchApiSearchV1SearchSuggestPostRequest, options?: Configuration): Promise<SearchSuggestsResponseSchema> {
        return this.api.searchV1SearchSuggestPost(param.appID, param.authToken, param.searchSuggestSchema,  options).toPromise();
    }

}

import { ObservableSettingsApi } from "./ObservableAPI";
import { SettingsApiRequestFactory, SettingsApiResponseProcessor} from "../apis/SettingsApi";

export interface SettingsApiSettingsV1CorsHostsCorsHostIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1CorsHostsCorsHostIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1CorsHostsCorsHostIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1CorsHostsCorsHostIdDelete
     */
    corsHostId: string
}

export interface SettingsApiSettingsV1CorsHostsCorsHostIdGetRequest {
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1CorsHostsCorsHostIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1CorsHostsCorsHostIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1CorsHostsCorsHostIdGet
     */
    corsHostId: string
}

export interface SettingsApiSettingsV1CorsHostsGetRequest {
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1CorsHostsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1CorsHostsGet
     */
    authToken: string
}

export interface SettingsApiSettingsV1CorsHostsPostRequest {
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1CorsHostsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1CorsHostsPost
     */
    authToken: string
    /**
     * body
     * @type CORSHostSchema
     * @memberof SettingsApisettingsV1CorsHostsPost
     */
    cORSHostSchema: CORSHostSchema
}

export interface SettingsApiSettingsV1GroupGroupIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1GroupGroupIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1GroupGroupIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1GroupGroupIdDelete
     */
    groupId: string
}

export interface SettingsApiSettingsV1GroupGroupIdGetRequest {
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1GroupGroupIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1GroupGroupIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1GroupGroupIdGet
     */
    groupId: string
}

export interface SettingsApiSettingsV1GroupGroupIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1GroupGroupIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1GroupGroupIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1GroupGroupIdPatch
     */
    groupId: string
    /**
     * body
     * @type GroupSettingPublicSchema
     * @memberof SettingsApisettingsV1GroupGroupIdPatch
     */
    groupSettingPublicSchema: GroupSettingPublicSchema
}

export interface SettingsApiSettingsV1GroupGroupIdPutRequest {
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1GroupGroupIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1GroupGroupIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1GroupGroupIdPut
     */
    groupId: string
    /**
     * body
     * @type GroupSettingPublicSchema
     * @memberof SettingsApisettingsV1GroupGroupIdPut
     */
    groupSettingPublicSchema: GroupSettingPublicSchema
}

export interface SettingsApiSettingsV1KubernetesRealmGetRequest {
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1KubernetesRealmGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1KubernetesRealmGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1KubernetesRealmGet
     */
    realm: string
    /**
     * Which page number to fetch
     * @type number
     * @memberof SettingsApisettingsV1KubernetesRealmGet
     */
    page?: number
    /**
     * The number of items for each page
     * @type number
     * @memberof SettingsApisettingsV1KubernetesRealmGet
     */
    perPage?: number
}

export interface SettingsApiSettingsV1KubernetesRealmPatchRequest {
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1KubernetesRealmPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1KubernetesRealmPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1KubernetesRealmPatch
     */
    realm: string
    /**
     * body
     * @type KubernetesSettingSchema
     * @memberof SettingsApisettingsV1KubernetesRealmPatch
     */
    kubernetesSettingSchema: KubernetesSettingSchema
}

export interface SettingsApiSettingsV1KubernetesRealmSettingNameDeleteRequest {
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1KubernetesRealmSettingNameDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1KubernetesRealmSettingNameDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1KubernetesRealmSettingNameDelete
     */
    realm: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1KubernetesRealmSettingNameDelete
     */
    settingName: string
}

export interface SettingsApiSettingsV1KubernetesRealmSettingNameGetRequest {
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1KubernetesRealmSettingNameGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1KubernetesRealmSettingNameGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1KubernetesRealmSettingNameGet
     */
    realm: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1KubernetesRealmSettingNameGet
     */
    settingName: string
}

export interface SettingsApiSettingsV1MergedCurrentGetRequest {
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1MergedCurrentGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1MergedCurrentGet
     */
    authToken: string
    /**
     * 
     * @type boolean
     * @memberof SettingsApisettingsV1MergedCurrentGet
     */
    ignoreLogoUrl?: boolean
}

export interface SettingsApiSettingsV1MergedUserIdGetRequest {
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1MergedUserIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1MergedUserIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1MergedUserIdGet
     */
    userId: string
    /**
     * 
     * @type boolean
     * @memberof SettingsApisettingsV1MergedUserIdGet
     */
    ignoreLogoUrl?: boolean
}

export interface SettingsApiSettingsV1SystemCurrentGetRequest {
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1SystemCurrentGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1SystemCurrentGet
     */
    authToken: string
    /**
     * 
     * @type boolean
     * @memberof SettingsApisettingsV1SystemCurrentGet
     */
    ignoreLogoUrl?: boolean
}

export interface SettingsApiSettingsV1SystemCurrentPatchRequest {
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1SystemCurrentPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1SystemCurrentPatch
     */
    authToken: string
    /**
     * body
     * @type SystemSettingPublicSchema
     * @memberof SettingsApisettingsV1SystemCurrentPatch
     */
    systemSettingPublicSchema: SystemSettingPublicSchema
}

export interface SettingsApiSettingsV1SystemCurrentPutRequest {
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1SystemCurrentPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1SystemCurrentPut
     */
    authToken: string
    /**
     * body
     * @type SystemSettingPublicSchema
     * @memberof SettingsApisettingsV1SystemCurrentPut
     */
    systemSettingPublicSchema: SystemSettingPublicSchema
}

export interface SettingsApiSettingsV1SystemSystemDomainIdGetRequest {
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1SystemSystemDomainIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1SystemSystemDomainIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1SystemSystemDomainIdGet
     */
    systemDomainId: string
    /**
     * 
     * @type boolean
     * @memberof SettingsApisettingsV1SystemSystemDomainIdGet
     */
    ignoreLogoUrl?: boolean
}

export interface SettingsApiSettingsV1SystemSystemDomainIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1SystemSystemDomainIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1SystemSystemDomainIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1SystemSystemDomainIdPatch
     */
    systemDomainId: string
    /**
     * body
     * @type SystemSettingPublicSchema
     * @memberof SettingsApisettingsV1SystemSystemDomainIdPatch
     */
    systemSettingPublicSchema: SystemSettingPublicSchema
}

export interface SettingsApiSettingsV1SystemSystemDomainIdPutRequest {
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1SystemSystemDomainIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1SystemSystemDomainIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1SystemSystemDomainIdPut
     */
    systemDomainId: string
    /**
     * body
     * @type SystemSettingPublicSchema
     * @memberof SettingsApisettingsV1SystemSystemDomainIdPut
     */
    systemSettingPublicSchema: SystemSettingPublicSchema
}

export interface SettingsApiSettingsV1UserAttributesDeleteRequest {
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1UserAttributesDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1UserAttributesDelete
     */
    authToken: string
    /**
     * body
     * @type UserSettingRemoveAttributesSchema
     * @memberof SettingsApisettingsV1UserAttributesDelete
     */
    userSettingRemoveAttributesSchema: UserSettingRemoveAttributesSchema
}

export interface SettingsApiSettingsV1UserUserIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1UserUserIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1UserUserIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1UserUserIdDelete
     */
    userId: string
}

export interface SettingsApiSettingsV1UserUserIdGetRequest {
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1UserUserIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1UserUserIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1UserUserIdGet
     */
    userId: string
}

export interface SettingsApiSettingsV1UserUserIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1UserUserIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1UserUserIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1UserUserIdPatch
     */
    userId: string
    /**
     * body
     * @type UserSettingSchema
     * @memberof SettingsApisettingsV1UserUserIdPatch
     */
    userSettingSchema: UserSettingSchema
}

export interface SettingsApiSettingsV1UserUserIdPutRequest {
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1UserUserIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1UserUserIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof SettingsApisettingsV1UserUserIdPut
     */
    userId: string
    /**
     * body
     * @type UserSettingSchema
     * @memberof SettingsApisettingsV1UserUserIdPut
     */
    userSettingSchema: UserSettingSchema
}

export class ObjectSettingsApi {
    private api: ObservableSettingsApi

    public constructor(configuration: Configuration, requestFactory?: SettingsApiRequestFactory, responseProcessor?: SettingsApiResponseProcessor) {
        this.api = new ObservableSettingsApi(configuration, requestFactory, responseProcessor);
    }

    /**
     *  Required roles:  - can_delete_cors_hosts 
     * Delete a particular CORS host by id
     * @param param the request object
     */
    public settingsV1CorsHostsCorsHostIdDeleteWithHttpInfo(param: SettingsApiSettingsV1CorsHostsCorsHostIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.settingsV1CorsHostsCorsHostIdDeleteWithHttpInfo(param.appID, param.authToken, param.corsHostId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_cors_hosts 
     * Delete a particular CORS host by id
     * @param param the request object
     */
    public settingsV1CorsHostsCorsHostIdDelete(param: SettingsApiSettingsV1CorsHostsCorsHostIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.settingsV1CorsHostsCorsHostIdDelete(param.appID, param.authToken, param.corsHostId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_cors_hosts 
     * Returns a particular CORS host by id
     * @param param the request object
     */
    public settingsV1CorsHostsCorsHostIdGetWithHttpInfo(param: SettingsApiSettingsV1CorsHostsCorsHostIdGetRequest, options?: Configuration): Promise<HttpInfo<CORSHostSchema>> {
        return this.api.settingsV1CorsHostsCorsHostIdGetWithHttpInfo(param.appID, param.authToken, param.corsHostId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_cors_hosts 
     * Returns a particular CORS host by id
     * @param param the request object
     */
    public settingsV1CorsHostsCorsHostIdGet(param: SettingsApiSettingsV1CorsHostsCorsHostIdGetRequest, options?: Configuration): Promise<CORSHostSchema> {
        return this.api.settingsV1CorsHostsCorsHostIdGet(param.appID, param.authToken, param.corsHostId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_cors_hosts 
     * List of CORS hosts
     * @param param the request object
     */
    public settingsV1CorsHostsGetWithHttpInfo(param: SettingsApiSettingsV1CorsHostsGetRequest, options?: Configuration): Promise<HttpInfo<CORSHostsSchema>> {
        return this.api.settingsV1CorsHostsGetWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_cors_hosts 
     * List of CORS hosts
     * @param param the request object
     */
    public settingsV1CorsHostsGet(param: SettingsApiSettingsV1CorsHostsGetRequest, options?: Configuration): Promise<CORSHostsSchema> {
        return this.api.settingsV1CorsHostsGet(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_cors_hosts 
     * Create a new CORS host
     * @param param the request object
     */
    public settingsV1CorsHostsPostWithHttpInfo(param: SettingsApiSettingsV1CorsHostsPostRequest, options?: Configuration): Promise<HttpInfo<CORSHostSchema>> {
        return this.api.settingsV1CorsHostsPostWithHttpInfo(param.appID, param.authToken, param.cORSHostSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_cors_hosts 
     * Create a new CORS host
     * @param param the request object
     */
    public settingsV1CorsHostsPost(param: SettingsApiSettingsV1CorsHostsPostRequest, options?: Configuration): Promise<CORSHostSchema> {
        return this.api.settingsV1CorsHostsPost(param.appID, param.authToken, param.cORSHostSchema,  options).toPromise();
    }

    /**
     * 
     * Delete group settings
     * @param param the request object
     */
    public settingsV1GroupGroupIdDeleteWithHttpInfo(param: SettingsApiSettingsV1GroupGroupIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.settingsV1GroupGroupIdDeleteWithHttpInfo(param.appID, param.authToken, param.groupId,  options).toPromise();
    }

    /**
     * 
     * Delete group settings
     * @param param the request object
     */
    public settingsV1GroupGroupIdDelete(param: SettingsApiSettingsV1GroupGroupIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.settingsV1GroupGroupIdDelete(param.appID, param.authToken, param.groupId,  options).toPromise();
    }

    /**
     * 
     * Group settings
     * @param param the request object
     */
    public settingsV1GroupGroupIdGetWithHttpInfo(param: SettingsApiSettingsV1GroupGroupIdGetRequest, options?: Configuration): Promise<HttpInfo<GroupSettingPublicSchema>> {
        return this.api.settingsV1GroupGroupIdGetWithHttpInfo(param.appID, param.authToken, param.groupId,  options).toPromise();
    }

    /**
     * 
     * Group settings
     * @param param the request object
     */
    public settingsV1GroupGroupIdGet(param: SettingsApiSettingsV1GroupGroupIdGetRequest, options?: Configuration): Promise<GroupSettingPublicSchema> {
        return this.api.settingsV1GroupGroupIdGet(param.appID, param.authToken, param.groupId,  options).toPromise();
    }

    /**
     * 
     * Change group settings
     * @param param the request object
     */
    public settingsV1GroupGroupIdPatchWithHttpInfo(param: SettingsApiSettingsV1GroupGroupIdPatchRequest, options?: Configuration): Promise<HttpInfo<GroupSettingPublicSchema>> {
        return this.api.settingsV1GroupGroupIdPatchWithHttpInfo(param.appID, param.authToken, param.groupId, param.groupSettingPublicSchema,  options).toPromise();
    }

    /**
     * 
     * Change group settings
     * @param param the request object
     */
    public settingsV1GroupGroupIdPatch(param: SettingsApiSettingsV1GroupGroupIdPatchRequest, options?: Configuration): Promise<GroupSettingPublicSchema> {
        return this.api.settingsV1GroupGroupIdPatch(param.appID, param.authToken, param.groupId, param.groupSettingPublicSchema,  options).toPromise();
    }

    /**
     * 
     * Change group settings
     * @param param the request object
     */
    public settingsV1GroupGroupIdPutWithHttpInfo(param: SettingsApiSettingsV1GroupGroupIdPutRequest, options?: Configuration): Promise<HttpInfo<GroupSettingPublicSchema>> {
        return this.api.settingsV1GroupGroupIdPutWithHttpInfo(param.appID, param.authToken, param.groupId, param.groupSettingPublicSchema,  options).toPromise();
    }

    /**
     * 
     * Change group settings
     * @param param the request object
     */
    public settingsV1GroupGroupIdPut(param: SettingsApiSettingsV1GroupGroupIdPutRequest, options?: Configuration): Promise<GroupSettingPublicSchema> {
        return this.api.settingsV1GroupGroupIdPut(param.appID, param.authToken, param.groupId, param.groupSettingPublicSchema,  options).toPromise();
    }

    /**
     * 
     * List of settings
     * @param param the request object
     */
    public settingsV1KubernetesRealmGetWithHttpInfo(param: SettingsApiSettingsV1KubernetesRealmGetRequest, options?: Configuration): Promise<HttpInfo<KubernetesSettingSchema>> {
        return this.api.settingsV1KubernetesRealmGetWithHttpInfo(param.appID, param.authToken, param.realm, param.page, param.perPage,  options).toPromise();
    }

    /**
     * 
     * List of settings
     * @param param the request object
     */
    public settingsV1KubernetesRealmGet(param: SettingsApiSettingsV1KubernetesRealmGetRequest, options?: Configuration): Promise<KubernetesSettingSchema> {
        return this.api.settingsV1KubernetesRealmGet(param.appID, param.authToken, param.realm, param.page, param.perPage,  options).toPromise();
    }

    /**
     * 
     * Change settings
     * @param param the request object
     */
    public settingsV1KubernetesRealmPatchWithHttpInfo(param: SettingsApiSettingsV1KubernetesRealmPatchRequest, options?: Configuration): Promise<HttpInfo<KubernetesSettingSchema>> {
        return this.api.settingsV1KubernetesRealmPatchWithHttpInfo(param.appID, param.authToken, param.realm, param.kubernetesSettingSchema,  options).toPromise();
    }

    /**
     * 
     * Change settings
     * @param param the request object
     */
    public settingsV1KubernetesRealmPatch(param: SettingsApiSettingsV1KubernetesRealmPatchRequest, options?: Configuration): Promise<KubernetesSettingSchema> {
        return this.api.settingsV1KubernetesRealmPatch(param.appID, param.authToken, param.realm, param.kubernetesSettingSchema,  options).toPromise();
    }

    /**
     * 
     * Delete a particular setting by name
     * @param param the request object
     */
    public settingsV1KubernetesRealmSettingNameDeleteWithHttpInfo(param: SettingsApiSettingsV1KubernetesRealmSettingNameDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.settingsV1KubernetesRealmSettingNameDeleteWithHttpInfo(param.appID, param.authToken, param.realm, param.settingName,  options).toPromise();
    }

    /**
     * 
     * Delete a particular setting by name
     * @param param the request object
     */
    public settingsV1KubernetesRealmSettingNameDelete(param: SettingsApiSettingsV1KubernetesRealmSettingNameDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.settingsV1KubernetesRealmSettingNameDelete(param.appID, param.authToken, param.realm, param.settingName,  options).toPromise();
    }

    /**
     * 
     * Returns value for the setting
     * @param param the request object
     */
    public settingsV1KubernetesRealmSettingNameGetWithHttpInfo(param: SettingsApiSettingsV1KubernetesRealmSettingNameGetRequest, options?: Configuration): Promise<HttpInfo<KubernetesSettingSchema>> {
        return this.api.settingsV1KubernetesRealmSettingNameGetWithHttpInfo(param.appID, param.authToken, param.realm, param.settingName,  options).toPromise();
    }

    /**
     * 
     * Returns value for the setting
     * @param param the request object
     */
    public settingsV1KubernetesRealmSettingNameGet(param: SettingsApiSettingsV1KubernetesRealmSettingNameGetRequest, options?: Configuration): Promise<KubernetesSettingSchema> {
        return this.api.settingsV1KubernetesRealmSettingNameGet(param.appID, param.authToken, param.realm, param.settingName,  options).toPromise();
    }

    /**
     * 
     * Get merged settings for current user
     * @param param the request object
     */
    public settingsV1MergedCurrentGetWithHttpInfo(param: SettingsApiSettingsV1MergedCurrentGetRequest, options?: Configuration): Promise<HttpInfo<MergedSettingsSchema>> {
        return this.api.settingsV1MergedCurrentGetWithHttpInfo(param.appID, param.authToken, param.ignoreLogoUrl,  options).toPromise();
    }

    /**
     * 
     * Get merged settings for current user
     * @param param the request object
     */
    public settingsV1MergedCurrentGet(param: SettingsApiSettingsV1MergedCurrentGetRequest, options?: Configuration): Promise<MergedSettingsSchema> {
        return this.api.settingsV1MergedCurrentGet(param.appID, param.authToken, param.ignoreLogoUrl,  options).toPromise();
    }

    /**
     * 
     * Get merged settings for a specific user
     * @param param the request object
     */
    public settingsV1MergedUserIdGetWithHttpInfo(param: SettingsApiSettingsV1MergedUserIdGetRequest, options?: Configuration): Promise<HttpInfo<MergedSettingsSchema>> {
        return this.api.settingsV1MergedUserIdGetWithHttpInfo(param.appID, param.authToken, param.userId, param.ignoreLogoUrl,  options).toPromise();
    }

    /**
     * 
     * Get merged settings for a specific user
     * @param param the request object
     */
    public settingsV1MergedUserIdGet(param: SettingsApiSettingsV1MergedUserIdGetRequest, options?: Configuration): Promise<MergedSettingsSchema> {
        return this.api.settingsV1MergedUserIdGet(param.appID, param.authToken, param.userId, param.ignoreLogoUrl,  options).toPromise();
    }

    /**
     * 
     * System settings
     * @param param the request object
     */
    public settingsV1SystemCurrentGetWithHttpInfo(param: SettingsApiSettingsV1SystemCurrentGetRequest, options?: Configuration): Promise<HttpInfo<SystemSettingPublicSchema>> {
        return this.api.settingsV1SystemCurrentGetWithHttpInfo(param.appID, param.authToken, param.ignoreLogoUrl,  options).toPromise();
    }

    /**
     * 
     * System settings
     * @param param the request object
     */
    public settingsV1SystemCurrentGet(param: SettingsApiSettingsV1SystemCurrentGetRequest, options?: Configuration): Promise<SystemSettingPublicSchema> {
        return this.api.settingsV1SystemCurrentGet(param.appID, param.authToken, param.ignoreLogoUrl,  options).toPromise();
    }

    /**
     * 
     * Change system settings
     * @param param the request object
     */
    public settingsV1SystemCurrentPatchWithHttpInfo(param: SettingsApiSettingsV1SystemCurrentPatchRequest, options?: Configuration): Promise<HttpInfo<SystemSettingPublicSchema>> {
        return this.api.settingsV1SystemCurrentPatchWithHttpInfo(param.appID, param.authToken, param.systemSettingPublicSchema,  options).toPromise();
    }

    /**
     * 
     * Change system settings
     * @param param the request object
     */
    public settingsV1SystemCurrentPatch(param: SettingsApiSettingsV1SystemCurrentPatchRequest, options?: Configuration): Promise<SystemSettingPublicSchema> {
        return this.api.settingsV1SystemCurrentPatch(param.appID, param.authToken, param.systemSettingPublicSchema,  options).toPromise();
    }

    /**
     * 
     * Change system settings
     * @param param the request object
     */
    public settingsV1SystemCurrentPutWithHttpInfo(param: SettingsApiSettingsV1SystemCurrentPutRequest, options?: Configuration): Promise<HttpInfo<SystemSettingPublicSchema>> {
        return this.api.settingsV1SystemCurrentPutWithHttpInfo(param.appID, param.authToken, param.systemSettingPublicSchema,  options).toPromise();
    }

    /**
     * 
     * Change system settings
     * @param param the request object
     */
    public settingsV1SystemCurrentPut(param: SettingsApiSettingsV1SystemCurrentPutRequest, options?: Configuration): Promise<SystemSettingPublicSchema> {
        return this.api.settingsV1SystemCurrentPut(param.appID, param.authToken, param.systemSettingPublicSchema,  options).toPromise();
    }

    /**
     * 
     * System settings
     * @param param the request object
     */
    public settingsV1SystemSystemDomainIdGetWithHttpInfo(param: SettingsApiSettingsV1SystemSystemDomainIdGetRequest, options?: Configuration): Promise<HttpInfo<SystemSettingPublicSchema>> {
        return this.api.settingsV1SystemSystemDomainIdGetWithHttpInfo(param.appID, param.authToken, param.systemDomainId, param.ignoreLogoUrl,  options).toPromise();
    }

    /**
     * 
     * System settings
     * @param param the request object
     */
    public settingsV1SystemSystemDomainIdGet(param: SettingsApiSettingsV1SystemSystemDomainIdGetRequest, options?: Configuration): Promise<SystemSettingPublicSchema> {
        return this.api.settingsV1SystemSystemDomainIdGet(param.appID, param.authToken, param.systemDomainId, param.ignoreLogoUrl,  options).toPromise();
    }

    /**
     * 
     * Change system settings
     * @param param the request object
     */
    public settingsV1SystemSystemDomainIdPatchWithHttpInfo(param: SettingsApiSettingsV1SystemSystemDomainIdPatchRequest, options?: Configuration): Promise<HttpInfo<SystemSettingPublicSchema>> {
        return this.api.settingsV1SystemSystemDomainIdPatchWithHttpInfo(param.appID, param.authToken, param.systemDomainId, param.systemSettingPublicSchema,  options).toPromise();
    }

    /**
     * 
     * Change system settings
     * @param param the request object
     */
    public settingsV1SystemSystemDomainIdPatch(param: SettingsApiSettingsV1SystemSystemDomainIdPatchRequest, options?: Configuration): Promise<SystemSettingPublicSchema> {
        return this.api.settingsV1SystemSystemDomainIdPatch(param.appID, param.authToken, param.systemDomainId, param.systemSettingPublicSchema,  options).toPromise();
    }

    /**
     * 
     * Change system settings
     * @param param the request object
     */
    public settingsV1SystemSystemDomainIdPutWithHttpInfo(param: SettingsApiSettingsV1SystemSystemDomainIdPutRequest, options?: Configuration): Promise<HttpInfo<SystemSettingPublicSchema>> {
        return this.api.settingsV1SystemSystemDomainIdPutWithHttpInfo(param.appID, param.authToken, param.systemDomainId, param.systemSettingPublicSchema,  options).toPromise();
    }

    /**
     * 
     * Change system settings
     * @param param the request object
     */
    public settingsV1SystemSystemDomainIdPut(param: SettingsApiSettingsV1SystemSystemDomainIdPutRequest, options?: Configuration): Promise<SystemSettingPublicSchema> {
        return this.api.settingsV1SystemSystemDomainIdPut(param.appID, param.authToken, param.systemDomainId, param.systemSettingPublicSchema,  options).toPromise();
    }

    /**
     * 
     * Remove attributes from user settings
     * @param param the request object
     */
    public settingsV1UserAttributesDeleteWithHttpInfo(param: SettingsApiSettingsV1UserAttributesDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.settingsV1UserAttributesDeleteWithHttpInfo(param.appID, param.authToken, param.userSettingRemoveAttributesSchema,  options).toPromise();
    }

    /**
     * 
     * Remove attributes from user settings
     * @param param the request object
     */
    public settingsV1UserAttributesDelete(param: SettingsApiSettingsV1UserAttributesDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.settingsV1UserAttributesDelete(param.appID, param.authToken, param.userSettingRemoveAttributesSchema,  options).toPromise();
    }

    /**
     * 
     * Delete user settings
     * @param param the request object
     */
    public settingsV1UserUserIdDeleteWithHttpInfo(param: SettingsApiSettingsV1UserUserIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.settingsV1UserUserIdDeleteWithHttpInfo(param.appID, param.authToken, param.userId,  options).toPromise();
    }

    /**
     * 
     * Delete user settings
     * @param param the request object
     */
    public settingsV1UserUserIdDelete(param: SettingsApiSettingsV1UserUserIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.settingsV1UserUserIdDelete(param.appID, param.authToken, param.userId,  options).toPromise();
    }

    /**
     * 
     * User settings
     * @param param the request object
     */
    public settingsV1UserUserIdGetWithHttpInfo(param: SettingsApiSettingsV1UserUserIdGetRequest, options?: Configuration): Promise<HttpInfo<UserSettingSchema>> {
        return this.api.settingsV1UserUserIdGetWithHttpInfo(param.appID, param.authToken, param.userId,  options).toPromise();
    }

    /**
     * 
     * User settings
     * @param param the request object
     */
    public settingsV1UserUserIdGet(param: SettingsApiSettingsV1UserUserIdGetRequest, options?: Configuration): Promise<UserSettingSchema> {
        return this.api.settingsV1UserUserIdGet(param.appID, param.authToken, param.userId,  options).toPromise();
    }

    /**
     * 
     * Change user settings
     * @param param the request object
     */
    public settingsV1UserUserIdPatchWithHttpInfo(param: SettingsApiSettingsV1UserUserIdPatchRequest, options?: Configuration): Promise<HttpInfo<UserSettingSchema>> {
        return this.api.settingsV1UserUserIdPatchWithHttpInfo(param.appID, param.authToken, param.userId, param.userSettingSchema,  options).toPromise();
    }

    /**
     * 
     * Change user settings
     * @param param the request object
     */
    public settingsV1UserUserIdPatch(param: SettingsApiSettingsV1UserUserIdPatchRequest, options?: Configuration): Promise<UserSettingSchema> {
        return this.api.settingsV1UserUserIdPatch(param.appID, param.authToken, param.userId, param.userSettingSchema,  options).toPromise();
    }

    /**
     * 
     * Change user settings
     * @param param the request object
     */
    public settingsV1UserUserIdPutWithHttpInfo(param: SettingsApiSettingsV1UserUserIdPutRequest, options?: Configuration): Promise<HttpInfo<UserSettingSchema>> {
        return this.api.settingsV1UserUserIdPutWithHttpInfo(param.appID, param.authToken, param.userId, param.userSettingSchema,  options).toPromise();
    }

    /**
     * 
     * Change user settings
     * @param param the request object
     */
    public settingsV1UserUserIdPut(param: SettingsApiSettingsV1UserUserIdPutRequest, options?: Configuration): Promise<UserSettingSchema> {
        return this.api.settingsV1UserUserIdPut(param.appID, param.authToken, param.userId, param.userSettingSchema,  options).toPromise();
    }

}

import { ObservableStatsApi } from "./ObservableAPI";
import { StatsApiRequestFactory, StatsApiResponseProcessor} from "../apis/StatsApi";

export interface StatsApiStatsV1AssetsByPeriodGetRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1AssetsByPeriodGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1AssetsByPeriodGet
     */
    authToken: string
    /**
     * Period of stats (month or day)
     * @type string
     * @memberof StatsApistatsV1AssetsByPeriodGet
     */
    period: string
    /**
     * Filter by from_date
     * @type string
     * @memberof StatsApistatsV1AssetsByPeriodGet
     */
    fromDate?: string
    /**
     * Filter by to_date
     * @type string
     * @memberof StatsApistatsV1AssetsByPeriodGet
     */
    toDate?: string
}

export interface StatsApiStatsV1AssetsPostRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1AssetsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1AssetsPost
     */
    authToken: string
    /**
     * body
     * @type AssetUsageSchema
     * @memberof StatsApistatsV1AssetsPost
     */
    assetUsageSchema: AssetUsageSchema
}

export interface StatsApiStatsV1BillingChargesChargeIdReceiptUrlGetRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingChargesChargeIdReceiptUrlGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingChargesChargeIdReceiptUrlGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingChargesChargeIdReceiptUrlGet
     */
    chargeId: string
}

export interface StatsApiStatsV1BillingCreditsPostRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingCreditsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingCreditsPost
     */
    authToken: string
    /**
     * body
     * @type BillingCreditsSchema
     * @memberof StatsApistatsV1BillingCreditsPost
     */
    billingCreditsSchema: BillingCreditsSchema
}

export interface StatsApiStatsV1BillingCreditsPriceGetRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingCreditsPriceGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingCreditsPriceGet
     */
    authToken: string
    /**
     * 
     * @type number
     * @memberof StatsApistatsV1BillingCreditsPriceGet
     */
    credits: number
}

export interface StatsApiStatsV1BillingCreditsVerifyPostRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingCreditsVerifyPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingCreditsVerifyPost
     */
    authToken: string
    /**
     * body
     * @type BillingCreditsVerifySchema
     * @memberof StatsApistatsV1BillingCreditsVerifyPost
     */
    billingCreditsVerifySchema: BillingCreditsVerifySchema
}

export interface StatsApiStatsV1BillingCustomerCardDeleteRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingCustomerCardDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingCustomerCardDelete
     */
    authToken: string
}

export interface StatsApiStatsV1BillingCustomerCardPostRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingCustomerCardPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingCustomerCardPost
     */
    authToken: string
    /**
     * body
     * @type BillingCustomerCardSchema
     * @memberof StatsApistatsV1BillingCustomerCardPost
     */
    billingCustomerCardSchema: BillingCustomerCardSchema
}

export interface StatsApiStatsV1BillingCustomerGetRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingCustomerGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingCustomerGet
     */
    authToken: string
    /**
     * body
     * @type BillingSchema
     * @memberof StatsApistatsV1BillingCustomerGet
     */
    billingSchema: BillingSchema
}

export interface StatsApiStatsV1BillingCustomerPostRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingCustomerPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingCustomerPost
     */
    authToken: string
    /**
     * body
     * @type BillingCustomerSchema
     * @memberof StatsApistatsV1BillingCustomerPost
     */
    billingCustomerSchema: BillingCustomerSchema
}

export interface StatsApiStatsV1BillingGetRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingGet
     */
    authToken: string
    /**
     * Filter by from_date
     * @type string
     * @memberof StatsApistatsV1BillingGet
     */
    fromDate?: string
    /**
     * Filter by from_date
     * @type string
     * @memberof StatsApistatsV1BillingGet
     */
    toDate?: string
    /**
     * The number of items for each page
     * @type number
     * @memberof StatsApistatsV1BillingGet
     */
    perPage?: number
    /**
     * ID of a last file on previous page
     * @type string
     * @memberof StatsApistatsV1BillingGet
     */
    lastId?: string
}

export interface StatsApiStatsV1BillingInvoicesGetRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingInvoicesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingInvoicesGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingInvoicesGet
     */
    startingAfter?: string
    /**
     * 
     * @type number
     * @memberof StatsApistatsV1BillingInvoicesGet
     */
    limit?: number
}

export interface StatsApiStatsV1BillingPostRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingPost
     */
    authToken: string
    /**
     * body
     * @type BillingSchema
     * @memberof StatsApistatsV1BillingPost
     */
    billingSchema: BillingSchema
}

export interface StatsApiStatsV1BillingPriceListsGetRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingPriceListsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingPriceListsGet
     */
    authToken: string
}

export interface StatsApiStatsV1BillingPriceListsNameCurrencyDeleteRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingPriceListsNameCurrencyDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingPriceListsNameCurrencyDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingPriceListsNameCurrencyDelete
     */
    name: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingPriceListsNameCurrencyDelete
     */
    currency: string
}

export interface StatsApiStatsV1BillingPriceListsNameCurrencyGetRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingPriceListsNameCurrencyGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingPriceListsNameCurrencyGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingPriceListsNameCurrencyGet
     */
    name: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingPriceListsNameCurrencyGet
     */
    currency: string
}

export interface StatsApiStatsV1BillingPriceListsPutRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingPriceListsPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingPriceListsPut
     */
    authToken: string
    /**
     * body
     * @type PriceSchema
     * @memberof StatsApistatsV1BillingPriceListsPut
     */
    priceSchema: PriceSchema
}

export interface StatsApiStatsV1BillingRecipientsGetRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingRecipientsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingRecipientsGet
     */
    authToken: string
}

export interface StatsApiStatsV1BillingRecipientsPutRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingRecipientsPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingRecipientsPut
     */
    authToken: string
    /**
     * body
     * @type BillingRecipientsSchema
     * @memberof StatsApistatsV1BillingRecipientsPut
     */
    billingRecipientsSchema: BillingRecipientsSchema
}

export interface StatsApiStatsV1BillingSettingsGetRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingSettingsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingSettingsGet
     */
    authToken: string
}

export interface StatsApiStatsV1BillingSettingsPutRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingSettingsPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingSettingsPut
     */
    authToken: string
    /**
     * body
     * @type BillingSettingsSchema
     * @memberof StatsApistatsV1BillingSettingsPut
     */
    billingSettingsSchema: BillingSettingsSchema
}

export interface StatsApiStatsV1BillingStatusGetRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingStatusGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingStatusGet
     */
    authToken: string
}

export interface StatsApiStatsV1BillingSystemDomainIdBillingIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingSystemDomainIdBillingIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingSystemDomainIdBillingIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingSystemDomainIdBillingIdDelete
     */
    systemDomainId: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1BillingSystemDomainIdBillingIdDelete
     */
    billingId: string
}

export interface StatsApiStatsV1CollectionsByPeriodGetRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1CollectionsByPeriodGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1CollectionsByPeriodGet
     */
    authToken: string
    /**
     * Period of stats (month or day)
     * @type string
     * @memberof StatsApistatsV1CollectionsByPeriodGet
     */
    period: string
    /**
     * Filter by from_date
     * @type string
     * @memberof StatsApistatsV1CollectionsByPeriodGet
     */
    fromDate?: string
    /**
     * Filter by to_date
     * @type string
     * @memberof StatsApistatsV1CollectionsByPeriodGet
     */
    toDate?: string
}

export interface StatsApiStatsV1IdObjectIdInfoGetRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1IdObjectIdInfoGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1IdObjectIdInfoGet
     */
    authToken: string
    /**
     * Object ID
     * @type string
     * @memberof StatsApistatsV1IdObjectIdInfoGet
     */
    objectId: string
}

export interface StatsApiStatsV1OrdwayBillingCustomerGetRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1OrdwayBillingCustomerGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1OrdwayBillingCustomerGet
     */
    authToken: string
}

export interface StatsApiStatsV1OrdwayBillingGetRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1OrdwayBillingGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1OrdwayBillingGet
     */
    authToken: string
    /**
     * Filter by from_date
     * @type string
     * @memberof StatsApistatsV1OrdwayBillingGet
     */
    fromDate?: string
    /**
     * Filter by from_date
     * @type string
     * @memberof StatsApistatsV1OrdwayBillingGet
     */
    toDate?: string
    /**
     * The number of items for each page
     * @type number
     * @memberof StatsApistatsV1OrdwayBillingGet
     */
    perPage?: number
    /**
     * Which page number to fetch
     * @type number
     * @memberof StatsApistatsV1OrdwayBillingGet
     */
    page?: number
}

export interface StatsApiStatsV1OrdwayBillingInvoicesGetRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1OrdwayBillingInvoicesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1OrdwayBillingInvoicesGet
     */
    authToken: string
    /**
     * The number of items for each page
     * @type number
     * @memberof StatsApistatsV1OrdwayBillingInvoicesGet
     */
    perPage?: number
    /**
     * Which page number to fetch
     * @type number
     * @memberof StatsApistatsV1OrdwayBillingInvoicesGet
     */
    page?: number
}

export interface StatsApiStatsV1StorageAccessByPeriodGetRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1StorageAccessByPeriodGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1StorageAccessByPeriodGet
     */
    authToken: string
    /**
     * Period of stats (month or day)
     * @type string
     * @memberof StatsApistatsV1StorageAccessByPeriodGet
     */
    period: string
    /**
     * Filter by from_date
     * @type string
     * @memberof StatsApistatsV1StorageAccessByPeriodGet
     */
    fromDate?: string
    /**
     * Filter by to_date
     * @type string
     * @memberof StatsApistatsV1StorageAccessByPeriodGet
     */
    toDate?: string
}

export interface StatsApiStatsV1StorageUsageByPeriodGetRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1StorageUsageByPeriodGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1StorageUsageByPeriodGet
     */
    authToken: string
    /**
     * Period of stats (month or day)
     * @type string
     * @memberof StatsApistatsV1StorageUsageByPeriodGet
     */
    period: string
    /**
     * Filter by from_date
     * @type string
     * @memberof StatsApistatsV1StorageUsageByPeriodGet
     */
    fromDate?: string
    /**
     * Filter by to_date
     * @type string
     * @memberof StatsApistatsV1StorageUsageByPeriodGet
     */
    toDate?: string
}

export interface StatsApiStatsV1SystemLogsRecipientsGetRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1SystemLogsRecipientsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1SystemLogsRecipientsGet
     */
    authToken: string
    /**
     * The number of items for each page
     * @type number
     * @memberof StatsApistatsV1SystemLogsRecipientsGet
     */
    perPage?: number
    /**
     * ID of a last service account set on previous page
     * @type string
     * @memberof StatsApistatsV1SystemLogsRecipientsGet
     */
    lastId?: string
}

export interface StatsApiStatsV1SystemLogsRecipientsLogsRecipientIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1SystemLogsRecipientsLogsRecipientIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1SystemLogsRecipientsLogsRecipientIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1SystemLogsRecipientsLogsRecipientIdDelete
     */
    logsRecipientId: string
}

export interface StatsApiStatsV1SystemLogsRecipientsLogsRecipientIdGetRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1SystemLogsRecipientsLogsRecipientIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1SystemLogsRecipientsLogsRecipientIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1SystemLogsRecipientsLogsRecipientIdGet
     */
    logsRecipientId: string
}

export interface StatsApiStatsV1SystemLogsRecipientsLogsRecipientIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1SystemLogsRecipientsLogsRecipientIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1SystemLogsRecipientsLogsRecipientIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1SystemLogsRecipientsLogsRecipientIdPatch
     */
    logsRecipientId: string
    /**
     * body
     * @type LogsRecipientSchema
     * @memberof StatsApistatsV1SystemLogsRecipientsLogsRecipientIdPatch
     */
    logsRecipientSchema: LogsRecipientSchema
}

export interface StatsApiStatsV1SystemLogsRecipientsLogsRecipientIdPostRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1SystemLogsRecipientsLogsRecipientIdPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1SystemLogsRecipientsLogsRecipientIdPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1SystemLogsRecipientsLogsRecipientIdPost
     */
    logsRecipientId: string
}

export interface StatsApiStatsV1SystemLogsRecipientsLogsRecipientIdPutRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1SystemLogsRecipientsLogsRecipientIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1SystemLogsRecipientsLogsRecipientIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1SystemLogsRecipientsLogsRecipientIdPut
     */
    logsRecipientId: string
    /**
     * body
     * @type LogsRecipientSchema
     * @memberof StatsApistatsV1SystemLogsRecipientsLogsRecipientIdPut
     */
    logsRecipientSchema: LogsRecipientSchema
}

export interface StatsApiStatsV1SystemLogsRecipientsPostRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1SystemLogsRecipientsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1SystemLogsRecipientsPost
     */
    authToken: string
    /**
     * body
     * @type LogsRecipientSchema
     * @memberof StatsApistatsV1SystemLogsRecipientsPost
     */
    logsRecipientSchema: LogsRecipientSchema
}

export interface StatsApiStatsV1TranscoderUsageByPeriodGetRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1TranscoderUsageByPeriodGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1TranscoderUsageByPeriodGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1TranscoderUsageByPeriodGet
     */
    period: string
    /**
     * Filter by from_date
     * @type string
     * @memberof StatsApistatsV1TranscoderUsageByPeriodGet
     */
    fromDate?: string
    /**
     * Filter by to_date
     * @type string
     * @memberof StatsApistatsV1TranscoderUsageByPeriodGet
     */
    toDate?: string
}

export interface StatsApiStatsV1UserAuditByPeriodGetRequest {
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1UserAuditByPeriodGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof StatsApistatsV1UserAuditByPeriodGet
     */
    authToken: string
    /**
     * Period of stats (month, day or day_detailed)
     * @type string
     * @memberof StatsApistatsV1UserAuditByPeriodGet
     */
    period: string
    /**
     * Filter by from_date
     * @type string
     * @memberof StatsApistatsV1UserAuditByPeriodGet
     */
    fromDate?: string
    /**
     * Filter by to_date
     * @type string
     * @memberof StatsApistatsV1UserAuditByPeriodGet
     */
    toDate?: string
    /**
     * Filter by system_domain_id (Only for super admins)
     * @type string
     * @memberof StatsApistatsV1UserAuditByPeriodGet
     */
    systemDomainId?: string
}

export class ObjectStatsApi {
    private api: ObservableStatsApi

    public constructor(configuration: Configuration, requestFactory?: StatsApiRequestFactory, responseProcessor?: StatsApiResponseProcessor) {
        this.api = new ObservableStatsApi(configuration, requestFactory, responseProcessor);
    }

    /**
     *  Required roles:  - can_read_stats 
     * Returns all asset usage
     * @param param the request object
     */
    public statsV1AssetsByPeriodGetWithHttpInfo(param: StatsApiStatsV1AssetsByPeriodGetRequest, options?: Configuration): Promise<HttpInfo<AssetUsageSchema>> {
        return this.api.statsV1AssetsByPeriodGetWithHttpInfo(param.appID, param.authToken, param.period, param.fromDate, param.toDate,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_stats 
     * Returns all asset usage
     * @param param the request object
     */
    public statsV1AssetsByPeriodGet(param: StatsApiStatsV1AssetsByPeriodGetRequest, options?: Configuration): Promise<AssetUsageSchema> {
        return this.api.statsV1AssetsByPeriodGet(param.appID, param.authToken, param.period, param.fromDate, param.toDate,  options).toPromise();
    }

    /**
     * <br/>system_domain_id will be automatically added when<br/>posting to this end point.
     * Sets asset usage.
     * @param param the request object
     */
    public statsV1AssetsPostWithHttpInfo(param: StatsApiStatsV1AssetsPostRequest, options?: Configuration): Promise<HttpInfo<AssetUsageSchema>> {
        return this.api.statsV1AssetsPostWithHttpInfo(param.appID, param.authToken, param.assetUsageSchema,  options).toPromise();
    }

    /**
     * <br/>system_domain_id will be automatically added when<br/>posting to this end point.
     * Sets asset usage.
     * @param param the request object
     */
    public statsV1AssetsPost(param: StatsApiStatsV1AssetsPostRequest, options?: Configuration): Promise<AssetUsageSchema> {
        return this.api.statsV1AssetsPost(param.appID, param.authToken, param.assetUsageSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_billing 
     * Returns billing receipt
     * @param param the request object
     */
    public statsV1BillingChargesChargeIdReceiptUrlGetWithHttpInfo(param: StatsApiStatsV1BillingChargesChargeIdReceiptUrlGetRequest, options?: Configuration): Promise<HttpInfo<BillingReceiptSchema>> {
        return this.api.statsV1BillingChargesChargeIdReceiptUrlGetWithHttpInfo(param.appID, param.authToken, param.chargeId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_billing 
     * Returns billing receipt
     * @param param the request object
     */
    public statsV1BillingChargesChargeIdReceiptUrlGet(param: StatsApiStatsV1BillingChargesChargeIdReceiptUrlGetRequest, options?: Configuration): Promise<BillingReceiptSchema> {
        return this.api.statsV1BillingChargesChargeIdReceiptUrlGet(param.appID, param.authToken, param.chargeId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_billing 
     * Add credits to an account
     * @param param the request object
     */
    public statsV1BillingCreditsPostWithHttpInfo(param: StatsApiStatsV1BillingCreditsPostRequest, options?: Configuration): Promise<HttpInfo<BillingCreditsSchema>> {
        return this.api.statsV1BillingCreditsPostWithHttpInfo(param.appID, param.authToken, param.billingCreditsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_billing 
     * Add credits to an account
     * @param param the request object
     */
    public statsV1BillingCreditsPost(param: StatsApiStatsV1BillingCreditsPostRequest, options?: Configuration): Promise<BillingCreditsSchema> {
        return this.api.statsV1BillingCreditsPost(param.appID, param.authToken, param.billingCreditsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_billing 
     * Checks the total price that needs to be paid including VAT if it\'s needed
     * @param param the request object
     */
    public statsV1BillingCreditsPriceGetWithHttpInfo(param: StatsApiStatsV1BillingCreditsPriceGetRequest, options?: Configuration): Promise<HttpInfo<CreditsSchema>> {
        return this.api.statsV1BillingCreditsPriceGetWithHttpInfo(param.appID, param.authToken, param.credits,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_billing 
     * Checks the total price that needs to be paid including VAT if it\'s needed
     * @param param the request object
     */
    public statsV1BillingCreditsPriceGet(param: StatsApiStatsV1BillingCreditsPriceGetRequest, options?: Configuration): Promise<CreditsSchema> {
        return this.api.statsV1BillingCreditsPriceGet(param.appID, param.authToken, param.credits,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_billing 
     * Verify status of add credits to an account
     * @param param the request object
     */
    public statsV1BillingCreditsVerifyPostWithHttpInfo(param: StatsApiStatsV1BillingCreditsVerifyPostRequest, options?: Configuration): Promise<HttpInfo<BillingCreditsVerifySchema>> {
        return this.api.statsV1BillingCreditsVerifyPostWithHttpInfo(param.appID, param.authToken, param.billingCreditsVerifySchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_billing 
     * Verify status of add credits to an account
     * @param param the request object
     */
    public statsV1BillingCreditsVerifyPost(param: StatsApiStatsV1BillingCreditsVerifyPostRequest, options?: Configuration): Promise<BillingCreditsVerifySchema> {
        return this.api.statsV1BillingCreditsVerifyPost(param.appID, param.authToken, param.billingCreditsVerifySchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_billing 
     * Creates billing customer card
     * @param param the request object
     */
    public statsV1BillingCustomerCardDeleteWithHttpInfo(param: StatsApiStatsV1BillingCustomerCardDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.statsV1BillingCustomerCardDeleteWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_billing 
     * Creates billing customer card
     * @param param the request object
     */
    public statsV1BillingCustomerCardDelete(param: StatsApiStatsV1BillingCustomerCardDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.statsV1BillingCustomerCardDelete(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_billing 
     * Creates billing customer card
     * @param param the request object
     */
    public statsV1BillingCustomerCardPostWithHttpInfo(param: StatsApiStatsV1BillingCustomerCardPostRequest, options?: Configuration): Promise<HttpInfo<BillingCustomerCardSchema>> {
        return this.api.statsV1BillingCustomerCardPostWithHttpInfo(param.appID, param.authToken, param.billingCustomerCardSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_billing 
     * Creates billing customer card
     * @param param the request object
     */
    public statsV1BillingCustomerCardPost(param: StatsApiStatsV1BillingCustomerCardPostRequest, options?: Configuration): Promise<BillingCustomerCardSchema> {
        return this.api.statsV1BillingCustomerCardPost(param.appID, param.authToken, param.billingCustomerCardSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_billing 
     * Returns billing customer
     * @param param the request object
     */
    public statsV1BillingCustomerGetWithHttpInfo(param: StatsApiStatsV1BillingCustomerGetRequest, options?: Configuration): Promise<HttpInfo<BillingSchema>> {
        return this.api.statsV1BillingCustomerGetWithHttpInfo(param.appID, param.authToken, param.billingSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_billing 
     * Returns billing customer
     * @param param the request object
     */
    public statsV1BillingCustomerGet(param: StatsApiStatsV1BillingCustomerGetRequest, options?: Configuration): Promise<BillingSchema> {
        return this.api.statsV1BillingCustomerGet(param.appID, param.authToken, param.billingSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_billing 
     * Updates billing customer
     * @param param the request object
     */
    public statsV1BillingCustomerPostWithHttpInfo(param: StatsApiStatsV1BillingCustomerPostRequest, options?: Configuration): Promise<HttpInfo<BillingCustomerSchema>> {
        return this.api.statsV1BillingCustomerPostWithHttpInfo(param.appID, param.authToken, param.billingCustomerSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_billing 
     * Updates billing customer
     * @param param the request object
     */
    public statsV1BillingCustomerPost(param: StatsApiStatsV1BillingCustomerPostRequest, options?: Configuration): Promise<BillingCustomerSchema> {
        return this.api.statsV1BillingCustomerPost(param.appID, param.authToken, param.billingCustomerSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_stats 
     * Returns billing info
     * @param param the request object
     */
    public statsV1BillingGetWithHttpInfo(param: StatsApiStatsV1BillingGetRequest, options?: Configuration): Promise<HttpInfo<BillingsSchema>> {
        return this.api.statsV1BillingGetWithHttpInfo(param.appID, param.authToken, param.fromDate, param.toDate, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_stats 
     * Returns billing info
     * @param param the request object
     */
    public statsV1BillingGet(param: StatsApiStatsV1BillingGetRequest, options?: Configuration): Promise<BillingsSchema> {
        return this.api.statsV1BillingGet(param.appID, param.authToken, param.fromDate, param.toDate, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_billing 
     * Returns billing invoices
     * @param param the request object
     */
    public statsV1BillingInvoicesGetWithHttpInfo(param: StatsApiStatsV1BillingInvoicesGetRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.statsV1BillingInvoicesGetWithHttpInfo(param.appID, param.authToken, param.startingAfter, param.limit,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_billing 
     * Returns billing invoices
     * @param param the request object
     */
    public statsV1BillingInvoicesGet(param: StatsApiStatsV1BillingInvoicesGetRequest, options?: Configuration): Promise<void> {
        return this.api.statsV1BillingInvoicesGet(param.appID, param.authToken, param.startingAfter, param.limit,  options).toPromise();
    }

    /**
     * 
     * Updates Billing (Requires super admin access).
     * @param param the request object
     */
    public statsV1BillingPostWithHttpInfo(param: StatsApiStatsV1BillingPostRequest, options?: Configuration): Promise<HttpInfo<BillingSchema>> {
        return this.api.statsV1BillingPostWithHttpInfo(param.appID, param.authToken, param.billingSchema,  options).toPromise();
    }

    /**
     * 
     * Updates Billing (Requires super admin access).
     * @param param the request object
     */
    public statsV1BillingPost(param: StatsApiStatsV1BillingPostRequest, options?: Configuration): Promise<BillingSchema> {
        return this.api.statsV1BillingPost(param.appID, param.authToken, param.billingSchema,  options).toPromise();
    }

    /**
     * 
     * Get All Price Lists
     * @param param the request object
     */
    public statsV1BillingPriceListsGetWithHttpInfo(param: StatsApiStatsV1BillingPriceListsGetRequest, options?: Configuration): Promise<HttpInfo<PricesSchema>> {
        return this.api.statsV1BillingPriceListsGetWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     * 
     * Get All Price Lists
     * @param param the request object
     */
    public statsV1BillingPriceListsGet(param: StatsApiStatsV1BillingPriceListsGetRequest, options?: Configuration): Promise<PricesSchema> {
        return this.api.statsV1BillingPriceListsGet(param.appID, param.authToken,  options).toPromise();
    }

    /**
     * 
     * Delete a Price list
     * @param param the request object
     */
    public statsV1BillingPriceListsNameCurrencyDeleteWithHttpInfo(param: StatsApiStatsV1BillingPriceListsNameCurrencyDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.statsV1BillingPriceListsNameCurrencyDeleteWithHttpInfo(param.appID, param.authToken, param.name, param.currency,  options).toPromise();
    }

    /**
     * 
     * Delete a Price list
     * @param param the request object
     */
    public statsV1BillingPriceListsNameCurrencyDelete(param: StatsApiStatsV1BillingPriceListsNameCurrencyDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.statsV1BillingPriceListsNameCurrencyDelete(param.appID, param.authToken, param.name, param.currency,  options).toPromise();
    }

    /**
     * 
     * Get a Price List
     * @param param the request object
     */
    public statsV1BillingPriceListsNameCurrencyGetWithHttpInfo(param: StatsApiStatsV1BillingPriceListsNameCurrencyGetRequest, options?: Configuration): Promise<HttpInfo<PriceSchema>> {
        return this.api.statsV1BillingPriceListsNameCurrencyGetWithHttpInfo(param.appID, param.authToken, param.name, param.currency,  options).toPromise();
    }

    /**
     * 
     * Get a Price List
     * @param param the request object
     */
    public statsV1BillingPriceListsNameCurrencyGet(param: StatsApiStatsV1BillingPriceListsNameCurrencyGetRequest, options?: Configuration): Promise<PriceSchema> {
        return this.api.statsV1BillingPriceListsNameCurrencyGet(param.appID, param.authToken, param.name, param.currency,  options).toPromise();
    }

    /**
     * 
     * Creates or updates a Price List
     * @param param the request object
     */
    public statsV1BillingPriceListsPutWithHttpInfo(param: StatsApiStatsV1BillingPriceListsPutRequest, options?: Configuration): Promise<HttpInfo<PriceSchema>> {
        return this.api.statsV1BillingPriceListsPutWithHttpInfo(param.appID, param.authToken, param.priceSchema,  options).toPromise();
    }

    /**
     * 
     * Creates or updates a Price List
     * @param param the request object
     */
    public statsV1BillingPriceListsPut(param: StatsApiStatsV1BillingPriceListsPutRequest, options?: Configuration): Promise<PriceSchema> {
        return this.api.statsV1BillingPriceListsPut(param.appID, param.authToken, param.priceSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_billing 
     * Updates Billing Recipients
     * @param param the request object
     */
    public statsV1BillingRecipientsGetWithHttpInfo(param: StatsApiStatsV1BillingRecipientsGetRequest, options?: Configuration): Promise<HttpInfo<BillingRecipientsSchema>> {
        return this.api.statsV1BillingRecipientsGetWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_billing 
     * Updates Billing Recipients
     * @param param the request object
     */
    public statsV1BillingRecipientsGet(param: StatsApiStatsV1BillingRecipientsGetRequest, options?: Configuration): Promise<BillingRecipientsSchema> {
        return this.api.statsV1BillingRecipientsGet(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_billing 
     * Updates Billing Recipients
     * @param param the request object
     */
    public statsV1BillingRecipientsPutWithHttpInfo(param: StatsApiStatsV1BillingRecipientsPutRequest, options?: Configuration): Promise<HttpInfo<BillingRecipientsSchema>> {
        return this.api.statsV1BillingRecipientsPutWithHttpInfo(param.appID, param.authToken, param.billingRecipientsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_billing 
     * Updates Billing Recipients
     * @param param the request object
     */
    public statsV1BillingRecipientsPut(param: StatsApiStatsV1BillingRecipientsPutRequest, options?: Configuration): Promise<BillingRecipientsSchema> {
        return this.api.statsV1BillingRecipientsPut(param.appID, param.authToken, param.billingRecipientsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_billing 
     * Updates Billing Settings
     * @param param the request object
     */
    public statsV1BillingSettingsGetWithHttpInfo(param: StatsApiStatsV1BillingSettingsGetRequest, options?: Configuration): Promise<HttpInfo<BillingSettingsSchema>> {
        return this.api.statsV1BillingSettingsGetWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_billing 
     * Updates Billing Settings
     * @param param the request object
     */
    public statsV1BillingSettingsGet(param: StatsApiStatsV1BillingSettingsGetRequest, options?: Configuration): Promise<BillingSettingsSchema> {
        return this.api.statsV1BillingSettingsGet(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_billing 
     * Updates Billing Settings
     * @param param the request object
     */
    public statsV1BillingSettingsPutWithHttpInfo(param: StatsApiStatsV1BillingSettingsPutRequest, options?: Configuration): Promise<HttpInfo<BillingSettingsSchema>> {
        return this.api.statsV1BillingSettingsPutWithHttpInfo(param.appID, param.authToken, param.billingSettingsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_billing 
     * Updates Billing Settings
     * @param param the request object
     */
    public statsV1BillingSettingsPut(param: StatsApiStatsV1BillingSettingsPutRequest, options?: Configuration): Promise<BillingSettingsSchema> {
        return this.api.statsV1BillingSettingsPut(param.appID, param.authToken, param.billingSettingsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_billing 
     * Returns billing status
     * @param param the request object
     */
    public statsV1BillingStatusGetWithHttpInfo(param: StatsApiStatsV1BillingStatusGetRequest, options?: Configuration): Promise<HttpInfo<BillingStatsSchema>> {
        return this.api.statsV1BillingStatusGetWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_billing 
     * Returns billing status
     * @param param the request object
     */
    public statsV1BillingStatusGet(param: StatsApiStatsV1BillingStatusGetRequest, options?: Configuration): Promise<BillingStatsSchema> {
        return this.api.statsV1BillingStatusGet(param.appID, param.authToken,  options).toPromise();
    }

    /**
     * 
     * Delete billing record (Requires super admin access).
     * @param param the request object
     */
    public statsV1BillingSystemDomainIdBillingIdDeleteWithHttpInfo(param: StatsApiStatsV1BillingSystemDomainIdBillingIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.statsV1BillingSystemDomainIdBillingIdDeleteWithHttpInfo(param.appID, param.authToken, param.systemDomainId, param.billingId,  options).toPromise();
    }

    /**
     * 
     * Delete billing record (Requires super admin access).
     * @param param the request object
     */
    public statsV1BillingSystemDomainIdBillingIdDelete(param: StatsApiStatsV1BillingSystemDomainIdBillingIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.statsV1BillingSystemDomainIdBillingIdDelete(param.appID, param.authToken, param.systemDomainId, param.billingId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_stats 
     * Returns all collection usage
     * @param param the request object
     */
    public statsV1CollectionsByPeriodGetWithHttpInfo(param: StatsApiStatsV1CollectionsByPeriodGetRequest, options?: Configuration): Promise<HttpInfo<CollectionUsageSchema>> {
        return this.api.statsV1CollectionsByPeriodGetWithHttpInfo(param.appID, param.authToken, param.period, param.fromDate, param.toDate,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_stats 
     * Returns all collection usage
     * @param param the request object
     */
    public statsV1CollectionsByPeriodGet(param: StatsApiStatsV1CollectionsByPeriodGetRequest, options?: Configuration): Promise<CollectionUsageSchema> {
        return this.api.statsV1CollectionsByPeriodGet(param.appID, param.authToken, param.period, param.fromDate, param.toDate,  options).toPromise();
    }

    /**
     * 
     * Internal endpoint to convert ID to system domain
     * @param param the request object
     */
    public statsV1IdObjectIdInfoGetWithHttpInfo(param: StatsApiStatsV1IdObjectIdInfoGetRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.statsV1IdObjectIdInfoGetWithHttpInfo(param.appID, param.authToken, param.objectId,  options).toPromise();
    }

    /**
     * 
     * Internal endpoint to convert ID to system domain
     * @param param the request object
     */
    public statsV1IdObjectIdInfoGet(param: StatsApiStatsV1IdObjectIdInfoGetRequest, options?: Configuration): Promise<void> {
        return this.api.statsV1IdObjectIdInfoGet(param.appID, param.authToken, param.objectId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_billing 
     * Returns billing customer
     * @param param the request object
     */
    public statsV1OrdwayBillingCustomerGetWithHttpInfo(param: StatsApiStatsV1OrdwayBillingCustomerGetRequest, options?: Configuration): Promise<HttpInfo<BillingSchema>> {
        return this.api.statsV1OrdwayBillingCustomerGetWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_billing 
     * Returns billing customer
     * @param param the request object
     */
    public statsV1OrdwayBillingCustomerGet(param: StatsApiStatsV1OrdwayBillingCustomerGetRequest, options?: Configuration): Promise<BillingSchema> {
        return this.api.statsV1OrdwayBillingCustomerGet(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_stats 
     * Returns billing info
     * @param param the request object
     */
    public statsV1OrdwayBillingGetWithHttpInfo(param: StatsApiStatsV1OrdwayBillingGetRequest, options?: Configuration): Promise<HttpInfo<BillingsSchema>> {
        return this.api.statsV1OrdwayBillingGetWithHttpInfo(param.appID, param.authToken, param.fromDate, param.toDate, param.perPage, param.page,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_stats 
     * Returns billing info
     * @param param the request object
     */
    public statsV1OrdwayBillingGet(param: StatsApiStatsV1OrdwayBillingGetRequest, options?: Configuration): Promise<BillingsSchema> {
        return this.api.statsV1OrdwayBillingGet(param.appID, param.authToken, param.fromDate, param.toDate, param.perPage, param.page,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_billing 
     * Returns billing invoices
     * @param param the request object
     */
    public statsV1OrdwayBillingInvoicesGetWithHttpInfo(param: StatsApiStatsV1OrdwayBillingInvoicesGetRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.statsV1OrdwayBillingInvoicesGetWithHttpInfo(param.appID, param.authToken, param.perPage, param.page,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_billing 
     * Returns billing invoices
     * @param param the request object
     */
    public statsV1OrdwayBillingInvoicesGet(param: StatsApiStatsV1OrdwayBillingInvoicesGetRequest, options?: Configuration): Promise<void> {
        return this.api.statsV1OrdwayBillingInvoicesGet(param.appID, param.authToken, param.perPage, param.page,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_stats 
     * Returns storage_access for all storages
     * @param param the request object
     */
    public statsV1StorageAccessByPeriodGetWithHttpInfo(param: StatsApiStatsV1StorageAccessByPeriodGetRequest, options?: Configuration): Promise<HttpInfo<StorageAccessesSchema>> {
        return this.api.statsV1StorageAccessByPeriodGetWithHttpInfo(param.appID, param.authToken, param.period, param.fromDate, param.toDate,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_stats 
     * Returns storage_access for all storages
     * @param param the request object
     */
    public statsV1StorageAccessByPeriodGet(param: StatsApiStatsV1StorageAccessByPeriodGetRequest, options?: Configuration): Promise<StorageAccessesSchema> {
        return this.api.statsV1StorageAccessByPeriodGet(param.appID, param.authToken, param.period, param.fromDate, param.toDate,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_stats 
     * Returns storage_usage for all storages
     * @param param the request object
     */
    public statsV1StorageUsageByPeriodGetWithHttpInfo(param: StatsApiStatsV1StorageUsageByPeriodGetRequest, options?: Configuration): Promise<HttpInfo<StorageUsagesSchema>> {
        return this.api.statsV1StorageUsageByPeriodGetWithHttpInfo(param.appID, param.authToken, param.period, param.fromDate, param.toDate,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_stats 
     * Returns storage_usage for all storages
     * @param param the request object
     */
    public statsV1StorageUsageByPeriodGet(param: StatsApiStatsV1StorageUsageByPeriodGetRequest, options?: Configuration): Promise<StorageUsagesSchema> {
        return this.api.statsV1StorageUsageByPeriodGet(param.appID, param.authToken, param.period, param.fromDate, param.toDate,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_logs_recipients 
     * Get logs recipients settings
     * @param param the request object
     */
    public statsV1SystemLogsRecipientsGetWithHttpInfo(param: StatsApiStatsV1SystemLogsRecipientsGetRequest, options?: Configuration): Promise<HttpInfo<LogsRecipientsSchema>> {
        return this.api.statsV1SystemLogsRecipientsGetWithHttpInfo(param.appID, param.authToken, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_logs_recipients 
     * Get logs recipients settings
     * @param param the request object
     */
    public statsV1SystemLogsRecipientsGet(param: StatsApiStatsV1SystemLogsRecipientsGetRequest, options?: Configuration): Promise<LogsRecipientsSchema> {
        return this.api.statsV1SystemLogsRecipientsGet(param.appID, param.authToken, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_logs_recipients 
     * Delete logs recipient settings
     * @param param the request object
     */
    public statsV1SystemLogsRecipientsLogsRecipientIdDeleteWithHttpInfo(param: StatsApiStatsV1SystemLogsRecipientsLogsRecipientIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.statsV1SystemLogsRecipientsLogsRecipientIdDeleteWithHttpInfo(param.appID, param.authToken, param.logsRecipientId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_logs_recipients 
     * Delete logs recipient settings
     * @param param the request object
     */
    public statsV1SystemLogsRecipientsLogsRecipientIdDelete(param: StatsApiStatsV1SystemLogsRecipientsLogsRecipientIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.statsV1SystemLogsRecipientsLogsRecipientIdDelete(param.appID, param.authToken, param.logsRecipientId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_logs_recipients 
     * Get settings of a logs recipient
     * @param param the request object
     */
    public statsV1SystemLogsRecipientsLogsRecipientIdGetWithHttpInfo(param: StatsApiStatsV1SystemLogsRecipientsLogsRecipientIdGetRequest, options?: Configuration): Promise<HttpInfo<LogsRecipientReadSchema>> {
        return this.api.statsV1SystemLogsRecipientsLogsRecipientIdGetWithHttpInfo(param.appID, param.authToken, param.logsRecipientId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_logs_recipients 
     * Get settings of a logs recipient
     * @param param the request object
     */
    public statsV1SystemLogsRecipientsLogsRecipientIdGet(param: StatsApiStatsV1SystemLogsRecipientsLogsRecipientIdGetRequest, options?: Configuration): Promise<LogsRecipientReadSchema> {
        return this.api.statsV1SystemLogsRecipientsLogsRecipientIdGet(param.appID, param.authToken, param.logsRecipientId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_logs_recipients 
     * Change logs recipient settings
     * @param param the request object
     */
    public statsV1SystemLogsRecipientsLogsRecipientIdPatchWithHttpInfo(param: StatsApiStatsV1SystemLogsRecipientsLogsRecipientIdPatchRequest, options?: Configuration): Promise<HttpInfo<LogsRecipientReadSchema>> {
        return this.api.statsV1SystemLogsRecipientsLogsRecipientIdPatchWithHttpInfo(param.appID, param.authToken, param.logsRecipientId, param.logsRecipientSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_logs_recipients 
     * Change logs recipient settings
     * @param param the request object
     */
    public statsV1SystemLogsRecipientsLogsRecipientIdPatch(param: StatsApiStatsV1SystemLogsRecipientsLogsRecipientIdPatchRequest, options?: Configuration): Promise<LogsRecipientReadSchema> {
        return this.api.statsV1SystemLogsRecipientsLogsRecipientIdPatch(param.appID, param.authToken, param.logsRecipientId, param.logsRecipientSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_logs_recipients 
     * Test logs recipient connection
     * @param param the request object
     */
    public statsV1SystemLogsRecipientsLogsRecipientIdPostWithHttpInfo(param: StatsApiStatsV1SystemLogsRecipientsLogsRecipientIdPostRequest, options?: Configuration): Promise<HttpInfo<StatsV1SystemLogsRecipientsLogsRecipientIdPost200Response>> {
        return this.api.statsV1SystemLogsRecipientsLogsRecipientIdPostWithHttpInfo(param.appID, param.authToken, param.logsRecipientId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_logs_recipients 
     * Test logs recipient connection
     * @param param the request object
     */
    public statsV1SystemLogsRecipientsLogsRecipientIdPost(param: StatsApiStatsV1SystemLogsRecipientsLogsRecipientIdPostRequest, options?: Configuration): Promise<StatsV1SystemLogsRecipientsLogsRecipientIdPost200Response> {
        return this.api.statsV1SystemLogsRecipientsLogsRecipientIdPost(param.appID, param.authToken, param.logsRecipientId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_logs_recipients 
     * Change logs recipient settings
     * @param param the request object
     */
    public statsV1SystemLogsRecipientsLogsRecipientIdPutWithHttpInfo(param: StatsApiStatsV1SystemLogsRecipientsLogsRecipientIdPutRequest, options?: Configuration): Promise<HttpInfo<LogsRecipientReadSchema>> {
        return this.api.statsV1SystemLogsRecipientsLogsRecipientIdPutWithHttpInfo(param.appID, param.authToken, param.logsRecipientId, param.logsRecipientSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_logs_recipients 
     * Change logs recipient settings
     * @param param the request object
     */
    public statsV1SystemLogsRecipientsLogsRecipientIdPut(param: StatsApiStatsV1SystemLogsRecipientsLogsRecipientIdPutRequest, options?: Configuration): Promise<LogsRecipientReadSchema> {
        return this.api.statsV1SystemLogsRecipientsLogsRecipientIdPut(param.appID, param.authToken, param.logsRecipientId, param.logsRecipientSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_logs_recipients 
     * Create logs recipient settings
     * @param param the request object
     */
    public statsV1SystemLogsRecipientsPostWithHttpInfo(param: StatsApiStatsV1SystemLogsRecipientsPostRequest, options?: Configuration): Promise<HttpInfo<LogsRecipientReadSchema>> {
        return this.api.statsV1SystemLogsRecipientsPostWithHttpInfo(param.appID, param.authToken, param.logsRecipientSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_logs_recipients 
     * Create logs recipient settings
     * @param param the request object
     */
    public statsV1SystemLogsRecipientsPost(param: StatsApiStatsV1SystemLogsRecipientsPostRequest, options?: Configuration): Promise<LogsRecipientReadSchema> {
        return this.api.statsV1SystemLogsRecipientsPost(param.appID, param.authToken, param.logsRecipientSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_stats 
     * Returns transcoder_usage for all transcoders
     * @param param the request object
     */
    public statsV1TranscoderUsageByPeriodGetWithHttpInfo(param: StatsApiStatsV1TranscoderUsageByPeriodGetRequest, options?: Configuration): Promise<HttpInfo<TranscoderUsagesSchema>> {
        return this.api.statsV1TranscoderUsageByPeriodGetWithHttpInfo(param.appID, param.authToken, param.period, param.fromDate, param.toDate,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_stats 
     * Returns transcoder_usage for all transcoders
     * @param param the request object
     */
    public statsV1TranscoderUsageByPeriodGet(param: StatsApiStatsV1TranscoderUsageByPeriodGetRequest, options?: Configuration): Promise<TranscoderUsagesSchema> {
        return this.api.statsV1TranscoderUsageByPeriodGet(param.appID, param.authToken, param.period, param.fromDate, param.toDate,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_stats 
     * Returns all audit
     * @param param the request object
     */
    public statsV1UserAuditByPeriodGetWithHttpInfo(param: StatsApiStatsV1UserAuditByPeriodGetRequest, options?: Configuration): Promise<HttpInfo<UserUsagesSchema>> {
        return this.api.statsV1UserAuditByPeriodGetWithHttpInfo(param.appID, param.authToken, param.period, param.fromDate, param.toDate, param.systemDomainId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_stats 
     * Returns all audit
     * @param param the request object
     */
    public statsV1UserAuditByPeriodGet(param: StatsApiStatsV1UserAuditByPeriodGetRequest, options?: Configuration): Promise<UserUsagesSchema> {
        return this.api.statsV1UserAuditByPeriodGet(param.appID, param.authToken, param.period, param.fromDate, param.toDate, param.systemDomainId,  options).toPromise();
    }

}

import { ObservableTranscodeApi } from "./ObservableAPI";
import { TranscodeApiRequestFactory, TranscodeApiResponseProcessor} from "../apis/TranscodeApi";

export interface TranscodeApiTranscodeV1AnalyzeAssetsAssetIdPostRequest {
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1AnalyzeAssetsAssetIdPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1AnalyzeAssetsAssetIdPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1AnalyzeAssetsAssetIdPost
     */
    assetId: string
    /**
     * body
     * @type AnalyzeSchema
     * @memberof TranscodeApitranscodeV1AnalyzeAssetsAssetIdPost
     */
    analyzeSchema?: AnalyzeSchema
}

export interface TranscodeApiTranscodeV1AnalyzeAssetsAssetIdProfilesDefaultMediaTypePostRequest {
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1AnalyzeAssetsAssetIdProfilesDefaultMediaTypePost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1AnalyzeAssetsAssetIdProfilesDefaultMediaTypePost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1AnalyzeAssetsAssetIdProfilesDefaultMediaTypePost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1AnalyzeAssetsAssetIdProfilesDefaultMediaTypePost
     */
    mediaType: string
    /**
     * body
     * @type AnalyzeSchema
     * @memberof TranscodeApitranscodeV1AnalyzeAssetsAssetIdProfilesDefaultMediaTypePost
     */
    analyzeSchema?: AnalyzeSchema
}

export interface TranscodeApiTranscodeV1AnalyzeAssetsAssetIdProfilesDefaultPostRequest {
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1AnalyzeAssetsAssetIdProfilesDefaultPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1AnalyzeAssetsAssetIdProfilesDefaultPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1AnalyzeAssetsAssetIdProfilesDefaultPost
     */
    assetId: string
    /**
     * body
     * @type AnalyzeSchema
     * @memberof TranscodeApitranscodeV1AnalyzeAssetsAssetIdProfilesDefaultPost
     */
    analyzeSchema?: AnalyzeSchema
}

export interface TranscodeApiTranscodeV1AnalyzeAssetsAssetIdProfilesProfileIdPostRequest {
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1AnalyzeAssetsAssetIdProfilesProfileIdPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1AnalyzeAssetsAssetIdProfilesProfileIdPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1AnalyzeAssetsAssetIdProfilesProfileIdPost
     */
    assetId: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1AnalyzeAssetsAssetIdProfilesProfileIdPost
     */
    profileId: string
    /**
     * body
     * @type AnalyzeSchema
     * @memberof TranscodeApitranscodeV1AnalyzeAssetsAssetIdProfilesProfileIdPost
     */
    analyzeSchema?: AnalyzeSchema
}

export interface TranscodeApiTranscodeV1AnalyzeBulkPostRequest {
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1AnalyzeBulkPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1AnalyzeBulkPost
     */
    authToken: string
    /**
     * body
     * @type BulkAnalyzeSchema
     * @memberof TranscodeApitranscodeV1AnalyzeBulkPost
     */
    bulkAnalyzeSchema?: BulkAnalyzeSchema
}

export interface TranscodeApiTranscodeV1AssetsLinkMetadataPostRequest {
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1AssetsLinkMetadataPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1AssetsLinkMetadataPost
     */
    authToken: string
    /**
     * body
     * @type AssetLinkURLSchema
     * @memberof TranscodeApitranscodeV1AssetsLinkMetadataPost
     */
    assetLinkURLSchema: AssetLinkURLSchema
}

export interface TranscodeApiTranscodeV1EdgeTranscodeJobsJobIdAcknowledgePostRequest {
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1EdgeTranscodeJobsJobIdAcknowledgePost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1EdgeTranscodeJobsJobIdAcknowledgePost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1EdgeTranscodeJobsJobIdAcknowledgePost
     */
    jobId: string
}

export interface TranscodeApiTranscodeV1EdgeTranscodeWorkersGetRequest {
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1EdgeTranscodeWorkersGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1EdgeTranscodeWorkersGet
     */
    authToken: string
}

export interface TranscodeApiTranscodeV1EdgeTranscodeWorkersPostRequest {
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1EdgeTranscodeWorkersPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1EdgeTranscodeWorkersPost
     */
    authToken: string
    /**
     * body
     * @type EdgeTranscodeWorkerSchema
     * @memberof TranscodeApitranscodeV1EdgeTranscodeWorkersPost
     */
    edgeTranscodeWorkerSchema: EdgeTranscodeWorkerSchema
}

export interface TranscodeApiTranscodeV1EdgeTranscodeWorkersWorkerIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1EdgeTranscodeWorkersWorkerIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1EdgeTranscodeWorkersWorkerIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1EdgeTranscodeWorkersWorkerIdDelete
     */
    workerId: string
}

export interface TranscodeApiTranscodeV1EdgeTranscodeWorkersWorkerIdGetRequest {
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1EdgeTranscodeWorkersWorkerIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1EdgeTranscodeWorkersWorkerIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1EdgeTranscodeWorkersWorkerIdGet
     */
    workerId: string
}

export interface TranscodeApiTranscodeV1EdgeTranscodeWorkersWorkerIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1EdgeTranscodeWorkersWorkerIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1EdgeTranscodeWorkersWorkerIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1EdgeTranscodeWorkersWorkerIdPatch
     */
    workerId: string
    /**
     * body
     * @type EdgeTranscodeWorkerSchema
     * @memberof TranscodeApitranscodeV1EdgeTranscodeWorkersWorkerIdPatch
     */
    edgeTranscodeWorkerSchema: EdgeTranscodeWorkerSchema
}

export interface TranscodeApiTranscodeV1EdgeTranscodeWorkersWorkerIdPutRequest {
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1EdgeTranscodeWorkersWorkerIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1EdgeTranscodeWorkersWorkerIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1EdgeTranscodeWorkersWorkerIdPut
     */
    workerId: string
    /**
     * body
     * @type EdgeTranscodeWorkerSchema
     * @memberof TranscodeApitranscodeV1EdgeTranscodeWorkersWorkerIdPut
     */
    edgeTranscodeWorkerSchema: EdgeTranscodeWorkerSchema
}

export interface TranscodeApiTranscodeV1KeyframesCollectionsCollectionIdPostRequest {
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1KeyframesCollectionsCollectionIdPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1KeyframesCollectionsCollectionIdPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1KeyframesCollectionsCollectionIdPost
     */
    collectionId: string
    /**
     * body
     * @type GenerateCollectionKeyframeSchema
     * @memberof TranscodeApitranscodeV1KeyframesCollectionsCollectionIdPost
     */
    generateCollectionKeyframeSchema?: GenerateCollectionKeyframeSchema
}

export interface TranscodeApiTranscodeV1StoragesStorageIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1StoragesStorageIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1StoragesStorageIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1StoragesStorageIdDelete
     */
    storageId: string
    /**
     * body
     * @type AbortStorageTranscodeJobsSchema
     * @memberof TranscodeApitranscodeV1StoragesStorageIdDelete
     */
    abortStorageTranscodeJobsSchema?: AbortStorageTranscodeJobsSchema
}

export interface TranscodeApiTranscodeV1StoragesStorageIdEdgeTranscodeJobsGetRequest {
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1StoragesStorageIdEdgeTranscodeJobsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1StoragesStorageIdEdgeTranscodeJobsGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1StoragesStorageIdEdgeTranscodeJobsGet
     */
    storageId: string
    /**
     * The max number of items to fetch
     * @type number
     * @memberof TranscodeApitranscodeV1StoragesStorageIdEdgeTranscodeJobsGet
     */
    limit?: number
}

export interface TranscodeApiTranscodeV1StoragesStorageIdFilesFileIdTranscodeDeleteRequest {
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1StoragesStorageIdFilesFileIdTranscodeDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1StoragesStorageIdFilesFileIdTranscodeDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1StoragesStorageIdFilesFileIdTranscodeDelete
     */
    storageId: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1StoragesStorageIdFilesFileIdTranscodeDelete
     */
    fileId: string
}

export interface TranscodeApiTranscodeV1StoragesStorageIdTranscodeGetRequest {
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1StoragesStorageIdTranscodeGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1StoragesStorageIdTranscodeGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1StoragesStorageIdTranscodeGet
     */
    storageId: string
    /**
     * The number of items for each page
     * @type number
     * @memberof TranscodeApitranscodeV1StoragesStorageIdTranscodeGet
     */
    perPage?: number
    /**
     * ID of a last transcode job entity on previous page
     * @type string
     * @memberof TranscodeApitranscodeV1StoragesStorageIdTranscodeGet
     */
    lastId?: string
}

export interface TranscodeApiTranscodeV1StoragesStorageIdTranscodeRecordIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1StoragesStorageIdTranscodeRecordIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1StoragesStorageIdTranscodeRecordIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1StoragesStorageIdTranscodeRecordIdDelete
     */
    storageId: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1StoragesStorageIdTranscodeRecordIdDelete
     */
    recordId: string
}

export interface TranscodeApiTranscodeV1StoragesStorageIdTranscodeRecordIdGetRequest {
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1StoragesStorageIdTranscodeRecordIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1StoragesStorageIdTranscodeRecordIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1StoragesStorageIdTranscodeRecordIdGet
     */
    storageId: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1StoragesStorageIdTranscodeRecordIdGet
     */
    recordId: string
}

export interface TranscodeApiTranscodeV1TranscodeObjectTypeObjectIdGetRequest {
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscodeObjectTypeObjectIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscodeObjectTypeObjectIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscodeObjectTypeObjectIdGet
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscodeObjectTypeObjectIdGet
     */
    objectId: string
}

export interface TranscodeApiTranscodeV1TranscodeObjectTypeObjectIdVersionsVersionIdGetRequest {
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscodeObjectTypeObjectIdVersionsVersionIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscodeObjectTypeObjectIdVersionsVersionIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscodeObjectTypeObjectIdVersionsVersionIdGet
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscodeObjectTypeObjectIdVersionsVersionIdGet
     */
    objectId: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscodeObjectTypeObjectIdVersionsVersionIdGet
     */
    versionId: string
}

export interface TranscodeApiTranscodeV1TranscodePostRequest {
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscodePost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscodePost
     */
    authToken: string
    /**
     * body
     * @type JobSchema1
     * @memberof TranscodeApitranscodeV1TranscodePost
     */
    jobSchema1: JobSchema1
}

export interface TranscodeApiTranscodeV1TranscodeQueueGetRequest {
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscodeQueueGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscodeQueueGet
     */
    authToken: string
    /**
     * 
     * @type number
     * @memberof TranscodeApitranscodeV1TranscodeQueueGet
     */
    perPage?: number
    /**
     * 
     * @type number
     * @memberof TranscodeApitranscodeV1TranscodeQueueGet
     */
    page?: number
    /**
     * A comma separated list of fieldnames without spaces. object_type,user_id,retry_count,priority,type,status
     * @type string
     * @memberof TranscodeApitranscodeV1TranscodeQueueGet
     */
    sort?: string
}

export interface TranscodeApiTranscodeV1TranscodeQueueSystemGetRequest {
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscodeQueueSystemGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscodeQueueSystemGet
     */
    authToken: string
    /**
     * 
     * @type boolean
     * @memberof TranscodeApitranscodeV1TranscodeQueueSystemGet
     */
    perDomainId?: boolean
    /**
     * 
     * @type number
     * @memberof TranscodeApitranscodeV1TranscodeQueueSystemGet
     */
    perPage?: number
    /**
     * 
     * @type number
     * @memberof TranscodeApitranscodeV1TranscodeQueueSystemGet
     */
    page?: number
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscodeQueueSystemGet
     */
    sort?: string
}

export interface TranscodeApiTranscodeV1TranscodeTranscodeJobIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscodeTranscodeJobIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscodeTranscodeJobIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscodeTranscodeJobIdDelete
     */
    transcodeJobId: string
}

export interface TranscodeApiTranscodeV1TranscodeTranscodeJobIdGetRequest {
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscodeTranscodeJobIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscodeTranscodeJobIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscodeTranscodeJobIdGet
     */
    transcodeJobId: string
}

export interface TranscodeApiTranscodeV1TranscodeTranscodeJobIdPositionPositionPostRequest {
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscodeTranscodeJobIdPositionPositionPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscodeTranscodeJobIdPositionPositionPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscodeTranscodeJobIdPositionPositionPost
     */
    transcodeJobId: string
    /**
     * move transcode job to \&quot;top\&quot; or \&quot;bottom\&quot; position
     * @type string
     * @memberof TranscodeApitranscodeV1TranscodeTranscodeJobIdPositionPositionPost
     */
    position: string
}

export interface TranscodeApiTranscodeV1TranscodeTranscodeJobIdPriorityPriorityPutRequest {
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscodeTranscodeJobIdPriorityPriorityPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscodeTranscodeJobIdPriorityPriorityPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscodeTranscodeJobIdPriorityPriorityPut
     */
    transcodeJobId: string
    /**
     * 
     * @type number
     * @memberof TranscodeApitranscodeV1TranscodeTranscodeJobIdPriorityPriorityPut
     */
    priority: number
}

export interface TranscodeApiTranscodeV1TranscribeAssetsAssetIdProfilesDefaultPostRequest {
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscribeAssetsAssetIdProfilesDefaultPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscribeAssetsAssetIdProfilesDefaultPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscribeAssetsAssetIdProfilesDefaultPost
     */
    assetId: string
    /**
     * body
     * @type TranscribeSchema
     * @memberof TranscodeApitranscodeV1TranscribeAssetsAssetIdProfilesDefaultPost
     */
    transcribeSchema?: TranscribeSchema
}

export interface TranscodeApiTranscodeV1TranscribeBulkPostRequest {
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscribeBulkPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof TranscodeApitranscodeV1TranscribeBulkPost
     */
    authToken: string
    /**
     * body
     * @type BulkTranscribeSchema
     * @memberof TranscodeApitranscodeV1TranscribeBulkPost
     */
    bulkTranscribeSchema: BulkTranscribeSchema
}

export class ObjectTranscodeApi {
    private api: ObservableTranscodeApi

    public constructor(configuration: Configuration, requestFactory?: TranscodeApiRequestFactory, responseProcessor?: TranscodeApiResponseProcessor) {
        this.api = new ObservableTranscodeApi(configuration, requestFactory, responseProcessor);
    }

    /**
     *  Required roles:  - can_analyze_content 
     * Start a job that sends an asset for analysis
     * @param param the request object
     */
    public transcodeV1AnalyzeAssetsAssetIdPostWithHttpInfo(param: TranscodeApiTranscodeV1AnalyzeAssetsAssetIdPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.transcodeV1AnalyzeAssetsAssetIdPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.analyzeSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_analyze_content 
     * Start a job that sends an asset for analysis
     * @param param the request object
     */
    public transcodeV1AnalyzeAssetsAssetIdPost(param: TranscodeApiTranscodeV1AnalyzeAssetsAssetIdPostRequest, options?: Configuration): Promise<void> {
        return this.api.transcodeV1AnalyzeAssetsAssetIdPost(param.appID, param.authToken, param.assetId, param.analyzeSchema,  options).toPromise();
    }

    /**
     * with a default analysis profile of specified media typewith a default analysis profile of specified media type Required roles:  - can_analyze_content 
     * Start a job that sends an asset for analysis
     * @param param the request object
     */
    public transcodeV1AnalyzeAssetsAssetIdProfilesDefaultMediaTypePostWithHttpInfo(param: TranscodeApiTranscodeV1AnalyzeAssetsAssetIdProfilesDefaultMediaTypePostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.transcodeV1AnalyzeAssetsAssetIdProfilesDefaultMediaTypePostWithHttpInfo(param.appID, param.authToken, param.assetId, param.mediaType, param.analyzeSchema,  options).toPromise();
    }

    /**
     * with a default analysis profile of specified media typewith a default analysis profile of specified media type Required roles:  - can_analyze_content 
     * Start a job that sends an asset for analysis
     * @param param the request object
     */
    public transcodeV1AnalyzeAssetsAssetIdProfilesDefaultMediaTypePost(param: TranscodeApiTranscodeV1AnalyzeAssetsAssetIdProfilesDefaultMediaTypePostRequest, options?: Configuration): Promise<void> {
        return this.api.transcodeV1AnalyzeAssetsAssetIdProfilesDefaultMediaTypePost(param.appID, param.authToken, param.assetId, param.mediaType, param.analyzeSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_analyze_content 
     * Start a job that sends an asset for analysis with a default analysis profile
     * @param param the request object
     */
    public transcodeV1AnalyzeAssetsAssetIdProfilesDefaultPostWithHttpInfo(param: TranscodeApiTranscodeV1AnalyzeAssetsAssetIdProfilesDefaultPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.transcodeV1AnalyzeAssetsAssetIdProfilesDefaultPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.analyzeSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_analyze_content 
     * Start a job that sends an asset for analysis with a default analysis profile
     * @param param the request object
     */
    public transcodeV1AnalyzeAssetsAssetIdProfilesDefaultPost(param: TranscodeApiTranscodeV1AnalyzeAssetsAssetIdProfilesDefaultPostRequest, options?: Configuration): Promise<void> {
        return this.api.transcodeV1AnalyzeAssetsAssetIdProfilesDefaultPost(param.appID, param.authToken, param.assetId, param.analyzeSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_analyze_content 
     * Start a job that sends an asset for analysis with a custom analysis profile
     * @param param the request object
     */
    public transcodeV1AnalyzeAssetsAssetIdProfilesProfileIdPostWithHttpInfo(param: TranscodeApiTranscodeV1AnalyzeAssetsAssetIdProfilesProfileIdPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.transcodeV1AnalyzeAssetsAssetIdProfilesProfileIdPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.profileId, param.analyzeSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_analyze_content 
     * Start a job that sends an asset for analysis with a custom analysis profile
     * @param param the request object
     */
    public transcodeV1AnalyzeAssetsAssetIdProfilesProfileIdPost(param: TranscodeApiTranscodeV1AnalyzeAssetsAssetIdProfilesProfileIdPostRequest, options?: Configuration): Promise<void> {
        return this.api.transcodeV1AnalyzeAssetsAssetIdProfilesProfileIdPost(param.appID, param.authToken, param.assetId, param.profileId, param.analyzeSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_analyze_content 
     * Start a job that sends objects for analysis using a custom analysis profile
     * @param param the request object
     */
    public transcodeV1AnalyzeBulkPostWithHttpInfo(param: TranscodeApiTranscodeV1AnalyzeBulkPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.transcodeV1AnalyzeBulkPostWithHttpInfo(param.appID, param.authToken, param.bulkAnalyzeSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_analyze_content 
     * Start a job that sends objects for analysis using a custom analysis profile
     * @param param the request object
     */
    public transcodeV1AnalyzeBulkPost(param: TranscodeApiTranscodeV1AnalyzeBulkPostRequest, options?: Configuration): Promise<void> {
        return this.api.transcodeV1AnalyzeBulkPost(param.appID, param.authToken, param.bulkAnalyzeSchema,  options).toPromise();
    }

    /**
     * 
     * Gets metadata info from the link
     * @param param the request object
     */
    public transcodeV1AssetsLinkMetadataPostWithHttpInfo(param: TranscodeApiTranscodeV1AssetsLinkMetadataPostRequest, options?: Configuration): Promise<HttpInfo<AssetLinkData>> {
        return this.api.transcodeV1AssetsLinkMetadataPostWithHttpInfo(param.appID, param.authToken, param.assetLinkURLSchema,  options).toPromise();
    }

    /**
     * 
     * Gets metadata info from the link
     * @param param the request object
     */
    public transcodeV1AssetsLinkMetadataPost(param: TranscodeApiTranscodeV1AssetsLinkMetadataPostRequest, options?: Configuration): Promise<AssetLinkData> {
        return this.api.transcodeV1AssetsLinkMetadataPost(param.appID, param.authToken, param.assetLinkURLSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transcode_jobs 
     * Acknowledge an edge transcode job
     * @param param the request object
     */
    public transcodeV1EdgeTranscodeJobsJobIdAcknowledgePostWithHttpInfo(param: TranscodeApiTranscodeV1EdgeTranscodeJobsJobIdAcknowledgePostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.transcodeV1EdgeTranscodeJobsJobIdAcknowledgePostWithHttpInfo(param.appID, param.authToken, param.jobId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transcode_jobs 
     * Acknowledge an edge transcode job
     * @param param the request object
     */
    public transcodeV1EdgeTranscodeJobsJobIdAcknowledgePost(param: TranscodeApiTranscodeV1EdgeTranscodeJobsJobIdAcknowledgePostRequest, options?: Configuration): Promise<void> {
        return this.api.transcodeV1EdgeTranscodeJobsJobIdAcknowledgePost(param.appID, param.authToken, param.jobId,  options).toPromise();
    }

    /**
     *  Required roles:  - is_storage_worker - can_read_transcoders 
     * Get edge transcode workers
     * @param param the request object
     */
    public transcodeV1EdgeTranscodeWorkersGetWithHttpInfo(param: TranscodeApiTranscodeV1EdgeTranscodeWorkersGetRequest, options?: Configuration): Promise<HttpInfo<EdgeTranscodeWorkersSchema>> {
        return this.api.transcodeV1EdgeTranscodeWorkersGetWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - is_storage_worker - can_read_transcoders 
     * Get edge transcode workers
     * @param param the request object
     */
    public transcodeV1EdgeTranscodeWorkersGet(param: TranscodeApiTranscodeV1EdgeTranscodeWorkersGetRequest, options?: Configuration): Promise<EdgeTranscodeWorkersSchema> {
        return this.api.transcodeV1EdgeTranscodeWorkersGet(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - is_storage_worker - can_write_transcoders 
     * Create a new edge transcode worker
     * @param param the request object
     */
    public transcodeV1EdgeTranscodeWorkersPostWithHttpInfo(param: TranscodeApiTranscodeV1EdgeTranscodeWorkersPostRequest, options?: Configuration): Promise<HttpInfo<EdgeTranscodeWorkerSchema>> {
        return this.api.transcodeV1EdgeTranscodeWorkersPostWithHttpInfo(param.appID, param.authToken, param.edgeTranscodeWorkerSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - is_storage_worker - can_write_transcoders 
     * Create a new edge transcode worker
     * @param param the request object
     */
    public transcodeV1EdgeTranscodeWorkersPost(param: TranscodeApiTranscodeV1EdgeTranscodeWorkersPostRequest, options?: Configuration): Promise<EdgeTranscodeWorkerSchema> {
        return this.api.transcodeV1EdgeTranscodeWorkersPost(param.appID, param.authToken, param.edgeTranscodeWorkerSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - is_storage_worker - can_write_transcoders 
     * Delete a edge transcode worker
     * @param param the request object
     */
    public transcodeV1EdgeTranscodeWorkersWorkerIdDeleteWithHttpInfo(param: TranscodeApiTranscodeV1EdgeTranscodeWorkersWorkerIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.transcodeV1EdgeTranscodeWorkersWorkerIdDeleteWithHttpInfo(param.appID, param.authToken, param.workerId,  options).toPromise();
    }

    /**
     *  Required roles:  - is_storage_worker - can_write_transcoders 
     * Delete a edge transcode worker
     * @param param the request object
     */
    public transcodeV1EdgeTranscodeWorkersWorkerIdDelete(param: TranscodeApiTranscodeV1EdgeTranscodeWorkersWorkerIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.transcodeV1EdgeTranscodeWorkersWorkerIdDelete(param.appID, param.authToken, param.workerId,  options).toPromise();
    }

    /**
     *  Required roles:  - is_storage_worker - can_read_transcoders 
     * Get a edge transcode worker
     * @param param the request object
     */
    public transcodeV1EdgeTranscodeWorkersWorkerIdGetWithHttpInfo(param: TranscodeApiTranscodeV1EdgeTranscodeWorkersWorkerIdGetRequest, options?: Configuration): Promise<HttpInfo<EdgeTranscodeWorkerSchema>> {
        return this.api.transcodeV1EdgeTranscodeWorkersWorkerIdGetWithHttpInfo(param.appID, param.authToken, param.workerId,  options).toPromise();
    }

    /**
     *  Required roles:  - is_storage_worker - can_read_transcoders 
     * Get a edge transcode worker
     * @param param the request object
     */
    public transcodeV1EdgeTranscodeWorkersWorkerIdGet(param: TranscodeApiTranscodeV1EdgeTranscodeWorkersWorkerIdGetRequest, options?: Configuration): Promise<EdgeTranscodeWorkerSchema> {
        return this.api.transcodeV1EdgeTranscodeWorkersWorkerIdGet(param.appID, param.authToken, param.workerId,  options).toPromise();
    }

    /**
     *  Required roles:  - is_storage_worker - can_write_transcoders 
     * Update a edge transcode worker
     * @param param the request object
     */
    public transcodeV1EdgeTranscodeWorkersWorkerIdPatchWithHttpInfo(param: TranscodeApiTranscodeV1EdgeTranscodeWorkersWorkerIdPatchRequest, options?: Configuration): Promise<HttpInfo<EdgeTranscodeWorkerSchema>> {
        return this.api.transcodeV1EdgeTranscodeWorkersWorkerIdPatchWithHttpInfo(param.appID, param.authToken, param.workerId, param.edgeTranscodeWorkerSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - is_storage_worker - can_write_transcoders 
     * Update a edge transcode worker
     * @param param the request object
     */
    public transcodeV1EdgeTranscodeWorkersWorkerIdPatch(param: TranscodeApiTranscodeV1EdgeTranscodeWorkersWorkerIdPatchRequest, options?: Configuration): Promise<EdgeTranscodeWorkerSchema> {
        return this.api.transcodeV1EdgeTranscodeWorkersWorkerIdPatch(param.appID, param.authToken, param.workerId, param.edgeTranscodeWorkerSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - is_storage_worker - can_write_transcoders 
     * Update a edge transcode worker
     * @param param the request object
     */
    public transcodeV1EdgeTranscodeWorkersWorkerIdPutWithHttpInfo(param: TranscodeApiTranscodeV1EdgeTranscodeWorkersWorkerIdPutRequest, options?: Configuration): Promise<HttpInfo<EdgeTranscodeWorkerSchema>> {
        return this.api.transcodeV1EdgeTranscodeWorkersWorkerIdPutWithHttpInfo(param.appID, param.authToken, param.workerId, param.edgeTranscodeWorkerSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - is_storage_worker - can_write_transcoders 
     * Update a edge transcode worker
     * @param param the request object
     */
    public transcodeV1EdgeTranscodeWorkersWorkerIdPut(param: TranscodeApiTranscodeV1EdgeTranscodeWorkersWorkerIdPutRequest, options?: Configuration): Promise<EdgeTranscodeWorkerSchema> {
        return this.api.transcodeV1EdgeTranscodeWorkersWorkerIdPut(param.appID, param.authToken, param.workerId, param.edgeTranscodeWorkerSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transcode_jobs 
     * Start a job that creates a collection keyframe
     * @param param the request object
     */
    public transcodeV1KeyframesCollectionsCollectionIdPostWithHttpInfo(param: TranscodeApiTranscodeV1KeyframesCollectionsCollectionIdPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.transcodeV1KeyframesCollectionsCollectionIdPostWithHttpInfo(param.appID, param.authToken, param.collectionId, param.generateCollectionKeyframeSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transcode_jobs 
     * Start a job that creates a collection keyframe
     * @param param the request object
     */
    public transcodeV1KeyframesCollectionsCollectionIdPost(param: TranscodeApiTranscodeV1KeyframesCollectionsCollectionIdPostRequest, options?: Configuration): Promise<void> {
        return this.api.transcodeV1KeyframesCollectionsCollectionIdPost(param.appID, param.authToken, param.collectionId, param.generateCollectionKeyframeSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_transcode_jobs 
     * Cancel all transcode jobs linked to the storage
     * @param param the request object
     */
    public transcodeV1StoragesStorageIdDeleteWithHttpInfo(param: TranscodeApiTranscodeV1StoragesStorageIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.transcodeV1StoragesStorageIdDeleteWithHttpInfo(param.appID, param.authToken, param.storageId, param.abortStorageTranscodeJobsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_transcode_jobs 
     * Cancel all transcode jobs linked to the storage
     * @param param the request object
     */
    public transcodeV1StoragesStorageIdDelete(param: TranscodeApiTranscodeV1StoragesStorageIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.transcodeV1StoragesStorageIdDelete(param.appID, param.authToken, param.storageId, param.abortStorageTranscodeJobsSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transcode_jobs 
     * Get a edge transcode jobs from the job queue
     * @param param the request object
     */
    public transcodeV1StoragesStorageIdEdgeTranscodeJobsGetWithHttpInfo(param: TranscodeApiTranscodeV1StoragesStorageIdEdgeTranscodeJobsGetRequest, options?: Configuration): Promise<HttpInfo<EdgeTranscodeJobsSchema>> {
        return this.api.transcodeV1StoragesStorageIdEdgeTranscodeJobsGetWithHttpInfo(param.appID, param.authToken, param.storageId, param.limit,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transcode_jobs 
     * Get a edge transcode jobs from the job queue
     * @param param the request object
     */
    public transcodeV1StoragesStorageIdEdgeTranscodeJobsGet(param: TranscodeApiTranscodeV1StoragesStorageIdEdgeTranscodeJobsGetRequest, options?: Configuration): Promise<EdgeTranscodeJobsSchema> {
        return this.api.transcodeV1StoragesStorageIdEdgeTranscodeJobsGet(param.appID, param.authToken, param.storageId, param.limit,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transcode_jobs 
     * Delete local storage transcode job.
     * @param param the request object
     */
    public transcodeV1StoragesStorageIdFilesFileIdTranscodeDeleteWithHttpInfo(param: TranscodeApiTranscodeV1StoragesStorageIdFilesFileIdTranscodeDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.transcodeV1StoragesStorageIdFilesFileIdTranscodeDeleteWithHttpInfo(param.authToken, param.appID, param.storageId, param.fileId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transcode_jobs 
     * Delete local storage transcode job.
     * @param param the request object
     */
    public transcodeV1StoragesStorageIdFilesFileIdTranscodeDelete(param: TranscodeApiTranscodeV1StoragesStorageIdFilesFileIdTranscodeDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.transcodeV1StoragesStorageIdFilesFileIdTranscodeDelete(param.authToken, param.appID, param.storageId, param.fileId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transcode_jobs 
     * Get pending local storage transcode jobs.
     * @param param the request object
     */
    public transcodeV1StoragesStorageIdTranscodeGetWithHttpInfo(param: TranscodeApiTranscodeV1StoragesStorageIdTranscodeGetRequest, options?: Configuration): Promise<HttpInfo<LocalStorageFileTranscodeJobsSchema>> {
        return this.api.transcodeV1StoragesStorageIdTranscodeGetWithHttpInfo(param.authToken, param.appID, param.storageId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transcode_jobs 
     * Get pending local storage transcode jobs.
     * @param param the request object
     */
    public transcodeV1StoragesStorageIdTranscodeGet(param: TranscodeApiTranscodeV1StoragesStorageIdTranscodeGetRequest, options?: Configuration): Promise<LocalStorageFileTranscodeJobsSchema> {
        return this.api.transcodeV1StoragesStorageIdTranscodeGet(param.authToken, param.appID, param.storageId, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transcode_jobs 
     * Delete local storage transcode job.
     * @param param the request object
     */
    public transcodeV1StoragesStorageIdTranscodeRecordIdDeleteWithHttpInfo(param: TranscodeApiTranscodeV1StoragesStorageIdTranscodeRecordIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.transcodeV1StoragesStorageIdTranscodeRecordIdDeleteWithHttpInfo(param.authToken, param.appID, param.storageId, param.recordId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transcode_jobs 
     * Delete local storage transcode job.
     * @param param the request object
     */
    public transcodeV1StoragesStorageIdTranscodeRecordIdDelete(param: TranscodeApiTranscodeV1StoragesStorageIdTranscodeRecordIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.transcodeV1StoragesStorageIdTranscodeRecordIdDelete(param.authToken, param.appID, param.storageId, param.recordId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transcode_jobs 
     * Get local storage transcode job.
     * @param param the request object
     */
    public transcodeV1StoragesStorageIdTranscodeRecordIdGetWithHttpInfo(param: TranscodeApiTranscodeV1StoragesStorageIdTranscodeRecordIdGetRequest, options?: Configuration): Promise<HttpInfo<LocalStorageFileTranscodeJobSchema>> {
        return this.api.transcodeV1StoragesStorageIdTranscodeRecordIdGetWithHttpInfo(param.authToken, param.appID, param.storageId, param.recordId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transcode_jobs 
     * Get local storage transcode job.
     * @param param the request object
     */
    public transcodeV1StoragesStorageIdTranscodeRecordIdGet(param: TranscodeApiTranscodeV1StoragesStorageIdTranscodeRecordIdGetRequest, options?: Configuration): Promise<LocalStorageFileTranscodeJobSchema> {
        return this.api.transcodeV1StoragesStorageIdTranscodeRecordIdGet(param.authToken, param.appID, param.storageId, param.recordId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transcode_jobs 
     * Returns list of transcode queue records by object_id
     * @param param the request object
     */
    public transcodeV1TranscodeObjectTypeObjectIdGetWithHttpInfo(param: TranscodeApiTranscodeV1TranscodeObjectTypeObjectIdGetRequest, options?: Configuration): Promise<HttpInfo<TranscodeESQueueRecordsSchema>> {
        return this.api.transcodeV1TranscodeObjectTypeObjectIdGetWithHttpInfo(param.authToken, param.appID, param.objectType, param.objectId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transcode_jobs 
     * Returns list of transcode queue records by object_id
     * @param param the request object
     */
    public transcodeV1TranscodeObjectTypeObjectIdGet(param: TranscodeApiTranscodeV1TranscodeObjectTypeObjectIdGetRequest, options?: Configuration): Promise<TranscodeESQueueRecordsSchema> {
        return this.api.transcodeV1TranscodeObjectTypeObjectIdGet(param.authToken, param.appID, param.objectType, param.objectId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transcode_jobs 
     * Returns list of transcode queue records by version_id
     * @param param the request object
     */
    public transcodeV1TranscodeObjectTypeObjectIdVersionsVersionIdGetWithHttpInfo(param: TranscodeApiTranscodeV1TranscodeObjectTypeObjectIdVersionsVersionIdGetRequest, options?: Configuration): Promise<HttpInfo<TranscodeESQueueRecordsSchema>> {
        return this.api.transcodeV1TranscodeObjectTypeObjectIdVersionsVersionIdGetWithHttpInfo(param.authToken, param.appID, param.objectType, param.objectId, param.versionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transcode_jobs 
     * Returns list of transcode queue records by version_id
     * @param param the request object
     */
    public transcodeV1TranscodeObjectTypeObjectIdVersionsVersionIdGet(param: TranscodeApiTranscodeV1TranscodeObjectTypeObjectIdVersionsVersionIdGetRequest, options?: Configuration): Promise<TranscodeESQueueRecordsSchema> {
        return this.api.transcodeV1TranscodeObjectTypeObjectIdVersionsVersionIdGet(param.authToken, param.appID, param.objectType, param.objectId, param.versionId,  options).toPromise();
    }

    /**
     * Use /API/files/v1/assets/ID/files/ID/keyframes insteadUse /API/files/v1/assets/ID/files/ID/keyframes instead Required roles:  - can_write_transcode_jobs 
     * Starts a new transcode.
     * @param param the request object
     */
    public transcodeV1TranscodePostWithHttpInfo(param: TranscodeApiTranscodeV1TranscodePostRequest, options?: Configuration): Promise<HttpInfo<JobSchema1>> {
        return this.api.transcodeV1TranscodePostWithHttpInfo(param.appID, param.authToken, param.jobSchema1,  options).toPromise();
    }

    /**
     * Use /API/files/v1/assets/ID/files/ID/keyframes insteadUse /API/files/v1/assets/ID/files/ID/keyframes instead Required roles:  - can_write_transcode_jobs 
     * Starts a new transcode.
     * @param param the request object
     */
    public transcodeV1TranscodePost(param: TranscodeApiTranscodeV1TranscodePostRequest, options?: Configuration): Promise<JobSchema1> {
        return this.api.transcodeV1TranscodePost(param.appID, param.authToken, param.jobSchema1,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transcode_jobs 
     * Get all the statuses of the queued transcode jobs
     * @param param the request object
     */
    public transcodeV1TranscodeQueueGetWithHttpInfo(param: TranscodeApiTranscodeV1TranscodeQueueGetRequest, options?: Configuration): Promise<HttpInfo<TranscodeQueueSchema>> {
        return this.api.transcodeV1TranscodeQueueGetWithHttpInfo(param.appID, param.authToken, param.perPage, param.page, param.sort,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transcode_jobs 
     * Get all the statuses of the queued transcode jobs
     * @param param the request object
     */
    public transcodeV1TranscodeQueueGet(param: TranscodeApiTranscodeV1TranscodeQueueGetRequest, options?: Configuration): Promise<TranscodeQueueSchema> {
        return this.api.transcodeV1TranscodeQueueGet(param.appID, param.authToken, param.perPage, param.page, param.sort,  options).toPromise();
    }

    /**
     * 
     * Get the status of the transcode job queues
     * @param param the request object
     */
    public transcodeV1TranscodeQueueSystemGetWithHttpInfo(param: TranscodeApiTranscodeV1TranscodeQueueSystemGetRequest, options?: Configuration): Promise<HttpInfo<TranscodeQueueSchema>> {
        return this.api.transcodeV1TranscodeQueueSystemGetWithHttpInfo(param.appID, param.authToken, param.perDomainId, param.perPage, param.page, param.sort,  options).toPromise();
    }

    /**
     * 
     * Get the status of the transcode job queues
     * @param param the request object
     */
    public transcodeV1TranscodeQueueSystemGet(param: TranscodeApiTranscodeV1TranscodeQueueSystemGetRequest, options?: Configuration): Promise<TranscodeQueueSchema> {
        return this.api.transcodeV1TranscodeQueueSystemGet(param.appID, param.authToken, param.perDomainId, param.perPage, param.page, param.sort,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_transcode_jobs 
     * Cancel a particular transcode job by id
     * @param param the request object
     */
    public transcodeV1TranscodeTranscodeJobIdDeleteWithHttpInfo(param: TranscodeApiTranscodeV1TranscodeTranscodeJobIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.transcodeV1TranscodeTranscodeJobIdDeleteWithHttpInfo(param.appID, param.authToken, param.transcodeJobId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_transcode_jobs 
     * Cancel a particular transcode job by id
     * @param param the request object
     */
    public transcodeV1TranscodeTranscodeJobIdDelete(param: TranscodeApiTranscodeV1TranscodeTranscodeJobIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.transcodeV1TranscodeTranscodeJobIdDelete(param.appID, param.authToken, param.transcodeJobId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transcode_jobs 
     * Get transcode job
     * @param param the request object
     */
    public transcodeV1TranscodeTranscodeJobIdGetWithHttpInfo(param: TranscodeApiTranscodeV1TranscodeTranscodeJobIdGetRequest, options?: Configuration): Promise<HttpInfo<JobSchema1>> {
        return this.api.transcodeV1TranscodeTranscodeJobIdGetWithHttpInfo(param.appID, param.authToken, param.transcodeJobId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_transcode_jobs 
     * Get transcode job
     * @param param the request object
     */
    public transcodeV1TranscodeTranscodeJobIdGet(param: TranscodeApiTranscodeV1TranscodeTranscodeJobIdGetRequest, options?: Configuration): Promise<JobSchema1> {
        return this.api.transcodeV1TranscodeTranscodeJobIdGet(param.appID, param.authToken, param.transcodeJobId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transcode_jobs 
     * Move transcode job to top or bottom of the queue
     * @param param the request object
     */
    public transcodeV1TranscodeTranscodeJobIdPositionPositionPostWithHttpInfo(param: TranscodeApiTranscodeV1TranscodeTranscodeJobIdPositionPositionPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.transcodeV1TranscodeTranscodeJobIdPositionPositionPostWithHttpInfo(param.appID, param.authToken, param.transcodeJobId, param.position,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transcode_jobs 
     * Move transcode job to top or bottom of the queue
     * @param param the request object
     */
    public transcodeV1TranscodeTranscodeJobIdPositionPositionPost(param: TranscodeApiTranscodeV1TranscodeTranscodeJobIdPositionPositionPostRequest, options?: Configuration): Promise<void> {
        return this.api.transcodeV1TranscodeTranscodeJobIdPositionPositionPost(param.appID, param.authToken, param.transcodeJobId, param.position,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transcode_jobs 
     * Change transcode job priority
     * @param param the request object
     */
    public transcodeV1TranscodeTranscodeJobIdPriorityPriorityPutWithHttpInfo(param: TranscodeApiTranscodeV1TranscodeTranscodeJobIdPriorityPriorityPutRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.transcodeV1TranscodeTranscodeJobIdPriorityPriorityPutWithHttpInfo(param.appID, param.authToken, param.transcodeJobId, param.priority,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_transcode_jobs 
     * Change transcode job priority
     * @param param the request object
     */
    public transcodeV1TranscodeTranscodeJobIdPriorityPriorityPut(param: TranscodeApiTranscodeV1TranscodeTranscodeJobIdPriorityPriorityPutRequest, options?: Configuration): Promise<void> {
        return this.api.transcodeV1TranscodeTranscodeJobIdPriorityPriorityPut(param.appID, param.authToken, param.transcodeJobId, param.priority,  options).toPromise();
    }

    /**
     *  Required roles:  - can_transcribe_content 
     * Start a job that sends an asset to default transcription service
     * @param param the request object
     */
    public transcodeV1TranscribeAssetsAssetIdProfilesDefaultPostWithHttpInfo(param: TranscodeApiTranscodeV1TranscribeAssetsAssetIdProfilesDefaultPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.transcodeV1TranscribeAssetsAssetIdProfilesDefaultPostWithHttpInfo(param.appID, param.authToken, param.assetId, param.transcribeSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_transcribe_content 
     * Start a job that sends an asset to default transcription service
     * @param param the request object
     */
    public transcodeV1TranscribeAssetsAssetIdProfilesDefaultPost(param: TranscodeApiTranscodeV1TranscribeAssetsAssetIdProfilesDefaultPostRequest, options?: Configuration): Promise<void> {
        return this.api.transcodeV1TranscribeAssetsAssetIdProfilesDefaultPost(param.appID, param.authToken, param.assetId, param.transcribeSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_transcribe_content 
     * Start a job that sends multiple objects to transcription service
     * @param param the request object
     */
    public transcodeV1TranscribeBulkPostWithHttpInfo(param: TranscodeApiTranscodeV1TranscribeBulkPostRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.transcodeV1TranscribeBulkPostWithHttpInfo(param.appID, param.authToken, param.bulkTranscribeSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_transcribe_content 
     * Start a job that sends multiple objects to transcription service
     * @param param the request object
     */
    public transcodeV1TranscribeBulkPost(param: TranscodeApiTranscodeV1TranscribeBulkPostRequest, options?: Configuration): Promise<void> {
        return this.api.transcodeV1TranscribeBulkPost(param.appID, param.authToken, param.bulkTranscribeSchema,  options).toPromise();
    }

}

import { ObservableUsersApi } from "./ObservableAPI";
import { UsersApiRequestFactory, UsersApiResponseProcessor} from "../apis/UsersApi";

export interface UsersApiUsersV1GroupsBasicGetRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsBasicGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsBasicGet
     */
    authToken: string
    /**
     * Which page number to fetch
     * @type number
     * @memberof UsersApiusersV1GroupsBasicGet
     */
    page?: number
    /**
     * The number of items for each page
     * @type number
     * @memberof UsersApiusersV1GroupsBasicGet
     */
    perPage?: number
    /**
     * A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc
     * @type string
     * @memberof UsersApiusersV1GroupsBasicGet
     */
    sort?: string
    /**
     * Filter by alias
     * @type string
     * @memberof UsersApiusersV1GroupsBasicGet
     */
    alias?: string
    /**
     * Filter by descripton
     * @type string
     * @memberof UsersApiusersV1GroupsBasicGet
     */
    description?: string
    /**
     * Filter by name
     * @type string
     * @memberof UsersApiusersV1GroupsBasicGet
     */
    name?: string
    /**
     * Filter by roles
     * @type string
     * @memberof UsersApiusersV1GroupsBasicGet
     */
    roles?: string
    /**
     * Filter by date_created
     * @type string
     * @memberof UsersApiusersV1GroupsBasicGet
     */
    dateCreated?: string
    /**
     * Filter by date_modified
     * @type string
     * @memberof UsersApiusersV1GroupsBasicGet
     */
    dateModified?: string
    /**
     * Filter by any of first_name, last_name and email with wildcard support
     * @type string
     * @memberof UsersApiusersV1GroupsBasicGet
     */
    query?: string
    /**
     * Filter list of id:s (comma separated)
     * @type string
     * @memberof UsersApiusersV1GroupsBasicGet
     */
    ids?: string
}

export interface UsersApiUsersV1GroupsGetRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsGet
     */
    authToken: string
    /**
     * Which page number to fetch
     * @type number
     * @memberof UsersApiusersV1GroupsGet
     */
    page?: number
    /**
     * The number of items for each page
     * @type number
     * @memberof UsersApiusersV1GroupsGet
     */
    perPage?: number
    /**
     * A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc
     * @type string
     * @memberof UsersApiusersV1GroupsGet
     */
    sort?: string
    /**
     * Filter by alias
     * @type string
     * @memberof UsersApiusersV1GroupsGet
     */
    alias?: string
    /**
     * Filter by descripton
     * @type string
     * @memberof UsersApiusersV1GroupsGet
     */
    description?: string
    /**
     * Filter by name
     * @type string
     * @memberof UsersApiusersV1GroupsGet
     */
    name?: string
    /**
     * Filter by roles
     * @type string
     * @memberof UsersApiusersV1GroupsGet
     */
    roles?: string
    /**
     * Filter by date_created
     * @type string
     * @memberof UsersApiusersV1GroupsGet
     */
    dateCreated?: string
    /**
     * Filter by date_modified
     * @type string
     * @memberof UsersApiusersV1GroupsGet
     */
    dateModified?: string
    /**
     * Filter by any of field with wildcard support
     * @type string
     * @memberof UsersApiusersV1GroupsGet
     */
    query?: string
    /**
     * Filter list of id:s (comma separated)
     * @type string
     * @memberof UsersApiusersV1GroupsGet
     */
    ids?: string
}

export interface UsersApiUsersV1GroupsGroupIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsGroupIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsGroupIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsGroupIdDelete
     */
    groupId: string
}

export interface UsersApiUsersV1GroupsGroupIdGetRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsGroupIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsGroupIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsGroupIdGet
     */
    groupId: string
}

export interface UsersApiUsersV1GroupsGroupIdLogoDeleteRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsGroupIdLogoDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsGroupIdLogoDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsGroupIdLogoDelete
     */
    groupId: string
}

export interface UsersApiUsersV1GroupsGroupIdLogoPostRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsGroupIdLogoPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsGroupIdLogoPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsGroupIdLogoPost
     */
    groupId: string
    /**
     * 
     * @type AuthV1SystemDomainsSystemDomainIdLogoPostRequest
     * @memberof UsersApiusersV1GroupsGroupIdLogoPost
     */
    authV1SystemDomainsSystemDomainIdLogoPostRequest: AuthV1SystemDomainsSystemDomainIdLogoPostRequest
}

export interface UsersApiUsersV1GroupsGroupIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsGroupIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsGroupIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsGroupIdPatch
     */
    groupId: string
    /**
     * body
     * @type GroupSchema
     * @memberof UsersApiusersV1GroupsGroupIdPatch
     */
    groupSchema: GroupSchema
}

export interface UsersApiUsersV1GroupsGroupIdPutRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsGroupIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsGroupIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsGroupIdPut
     */
    groupId: string
    /**
     * body
     * @type GroupSchema
     * @memberof UsersApiusersV1GroupsGroupIdPut
     */
    groupSchema: GroupSchema
}

export interface UsersApiUsersV1GroupsGroupIdReindexPostRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsGroupIdReindexPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsGroupIdReindexPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsGroupIdReindexPost
     */
    groupId: string
}

export interface UsersApiUsersV1GroupsGroupIdUsersUserIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsGroupIdUsersUserIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsGroupIdUsersUserIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsGroupIdUsersUserIdDelete
     */
    groupId: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsGroupIdUsersUserIdDelete
     */
    userId: string
}

export interface UsersApiUsersV1GroupsGroupIdUsersUserIdPostRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsGroupIdUsersUserIdPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsGroupIdUsersUserIdPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsGroupIdUsersUserIdPost
     */
    groupId: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsGroupIdUsersUserIdPost
     */
    userId: string
}

export interface UsersApiUsersV1GroupsMappingsGetRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsMappingsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsMappingsGet
     */
    authToken: string
    /**
     * The number of items for each page
     * @type number
     * @memberof UsersApiusersV1GroupsMappingsGet
     */
    perPage?: number
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsMappingsGet
     */
    lastId?: string
}

export interface UsersApiUsersV1GroupsMappingsNameDeleteRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsMappingsNameDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsMappingsNameDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsMappingsNameDelete
     */
    name: string
}

export interface UsersApiUsersV1GroupsMappingsNameGetRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsMappingsNameGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsMappingsNameGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsMappingsNameGet
     */
    name: string
}

export interface UsersApiUsersV1GroupsMappingsPostRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsMappingsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsMappingsPost
     */
    authToken: string
    /**
     * body
     * @type GroupMappingSchema
     * @memberof UsersApiusersV1GroupsMappingsPost
     */
    groupMappingSchema: GroupMappingSchema
}

export interface UsersApiUsersV1GroupsPostRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1GroupsPost
     */
    authToken: string
    /**
     * body
     * @type GroupSchema
     * @memberof UsersApiusersV1GroupsPost
     */
    groupSchema: GroupSchema
}

export interface UsersApiUsersV1UsersBasicGetRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersBasicGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersBasicGet
     */
    authToken: string
    /**
     * Which page number to fetch
     * @type number
     * @memberof UsersApiusersV1UsersBasicGet
     */
    page?: number
    /**
     * The number of items for each page
     * @type number
     * @memberof UsersApiusersV1UsersBasicGet
     */
    perPage?: number
    /**
     * A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc
     * @type string
     * @memberof UsersApiusersV1UsersBasicGet
     */
    sort?: string
    /**
     * Filter by date_created
     * @type string
     * @memberof UsersApiusersV1UsersBasicGet
     */
    dateCreated?: string
    /**
     * Filter by date_modified
     * @type string
     * @memberof UsersApiusersV1UsersBasicGet
     */
    dateModified?: string
    /**
     * Filter by email
     * @type string
     * @memberof UsersApiusersV1UsersBasicGet
     */
    email?: string
    /**
     * Filter by first_name
     * @type string
     * @memberof UsersApiusersV1UsersBasicGet
     */
    firstName?: string
    /**
     * Filter by last_name
     * @type string
     * @memberof UsersApiusersV1UsersBasicGet
     */
    lastName?: string
    /**
     * Filter by groups
     * @type string
     * @memberof UsersApiusersV1UsersBasicGet
     */
    groups?: string
    /**
     * Filter by hide_email
     * @type string
     * @memberof UsersApiusersV1UsersBasicGet
     */
    hideEmail?: string
    /**
     * Filter by hide_phone
     * @type string
     * @memberof UsersApiusersV1UsersBasicGet
     */
    hidePhone?: string
    /**
     * Filter by is_admin
     * @type string
     * @memberof UsersApiusersV1UsersBasicGet
     */
    isAdmin?: string
    /**
     * Filter by password_changed
     * @type string
     * @memberof UsersApiusersV1UsersBasicGet
     */
    passwordChanged?: string
    /**
     * Filter by phone
     * @type string
     * @memberof UsersApiusersV1UsersBasicGet
     */
    phone?: string
    /**
     * Filter by photo
     * @type string
     * @memberof UsersApiusersV1UsersBasicGet
     */
    photo?: string
    /**
     * Filter by status
     * @type string
     * @memberof UsersApiusersV1UsersBasicGet
     */
    status?: string
    /**
     * Filter by any of first_name, last_name and email with wildcard support
     * @type string
     * @memberof UsersApiusersV1UsersBasicGet
     */
    query?: string
    /**
     * Filter list of id:s (comma separated)
     * @type string
     * @memberof UsersApiusersV1UsersBasicGet
     */
    ids?: string
}

export interface UsersApiUsersV1UsersCurrentGetRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersCurrentGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersCurrentGet
     */
    authToken: string
}

export interface UsersApiUsersV1UsersCurrentPatchRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersCurrentPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersCurrentPatch
     */
    authToken: string
    /**
     * body
     * @type UserSchema1
     * @memberof UsersApiusersV1UsersCurrentPatch
     */
    userSchema1: UserSchema1
}

export interface UsersApiUsersV1UsersCurrentPhotoDeleteRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersCurrentPhotoDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersCurrentPhotoDelete
     */
    authToken: string
}

export interface UsersApiUsersV1UsersCurrentPhotoPostRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersCurrentPhotoPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersCurrentPhotoPost
     */
    authToken: string
    /**
     * 
     * @type UsersV1UsersCurrentPhotoPostRequest
     * @memberof UsersApiusersV1UsersCurrentPhotoPost
     */
    usersV1UsersCurrentPhotoPostRequest: UsersV1UsersCurrentPhotoPostRequest
}

export interface UsersApiUsersV1UsersCurrentPutRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersCurrentPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersCurrentPut
     */
    authToken: string
    /**
     * body
     * @type UserSchema1
     * @memberof UsersApiusersV1UsersCurrentPut
     */
    userSchema1: UserSchema1
}

export interface UsersApiUsersV1UsersCurrentRolesGetRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersCurrentRolesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersCurrentRolesGet
     */
    authToken: string
}

export interface UsersApiUsersV1UsersGetRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersGet
     */
    authToken: string
    /**
     * Which page number to fetch
     * @type number
     * @memberof UsersApiusersV1UsersGet
     */
    page?: number
    /**
     * The number of items for each page
     * @type number
     * @memberof UsersApiusersV1UsersGet
     */
    perPage?: number
    /**
     * A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc
     * @type string
     * @memberof UsersApiusersV1UsersGet
     */
    sort?: string
    /**
     * Filter by date_created
     * @type string
     * @memberof UsersApiusersV1UsersGet
     */
    dateCreated?: string
    /**
     * Filter by date_modified
     * @type string
     * @memberof UsersApiusersV1UsersGet
     */
    dateModified?: string
    /**
     * Filter by email
     * @type string
     * @memberof UsersApiusersV1UsersGet
     */
    email?: string
    /**
     * Filter by first_name
     * @type string
     * @memberof UsersApiusersV1UsersGet
     */
    firstName?: string
    /**
     * Filter by last_name
     * @type string
     * @memberof UsersApiusersV1UsersGet
     */
    lastName?: string
    /**
     * Filter by groups
     * @type string
     * @memberof UsersApiusersV1UsersGet
     */
    groups?: string
    /**
     * Filter by hide_email
     * @type string
     * @memberof UsersApiusersV1UsersGet
     */
    hideEmail?: string
    /**
     * Filter by hide_phone
     * @type string
     * @memberof UsersApiusersV1UsersGet
     */
    hidePhone?: string
    /**
     * Filter by is_admin
     * @type string
     * @memberof UsersApiusersV1UsersGet
     */
    isAdmin?: string
    /**
     * Filter by password_changed
     * @type string
     * @memberof UsersApiusersV1UsersGet
     */
    passwordChanged?: string
    /**
     * Filter by phone
     * @type string
     * @memberof UsersApiusersV1UsersGet
     */
    phone?: string
    /**
     * Filter by photo
     * @type string
     * @memberof UsersApiusersV1UsersGet
     */
    photo?: string
    /**
     * Filter by status
     * @type string
     * @memberof UsersApiusersV1UsersGet
     */
    status?: string
    /**
     * Filter by any of first_name, last_name and email with wildcard support
     * @type string
     * @memberof UsersApiusersV1UsersGet
     */
    query?: string
    /**
     * Filter list of id:s (comma separated)
     * @type string
     * @memberof UsersApiusersV1UsersGet
     */
    ids?: string
}

export interface UsersApiUsersV1UsersPostRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersPost
     */
    authToken: string
    /**
     * body
     * @type UserCreateSchema
     * @memberof UsersApiusersV1UsersPost
     */
    userCreateSchema: UserCreateSchema
}

export interface UsersApiUsersV1UsersUserIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdDelete
     */
    userId: string
}

export interface UsersApiUsersV1UsersUserIdGetRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdGet
     */
    userId: string
}

export interface UsersApiUsersV1UsersUserIdPatchRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdPatch
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdPatch
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdPatch
     */
    userId: string
    /**
     * body
     * @type UserSchema1
     * @memberof UsersApiusersV1UsersUserIdPatch
     */
    userSchema1: UserSchema1
}

export interface UsersApiUsersV1UsersUserIdPhotoDeleteRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdPhotoDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdPhotoDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdPhotoDelete
     */
    userId: string
}

export interface UsersApiUsersV1UsersUserIdPhotoPostRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdPhotoPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdPhotoPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdPhotoPost
     */
    userId: string
    /**
     * 
     * @type UsersV1UsersCurrentPhotoPostRequest
     * @memberof UsersApiusersV1UsersUserIdPhotoPost
     */
    usersV1UsersCurrentPhotoPostRequest: UsersV1UsersCurrentPhotoPostRequest
}

export interface UsersApiUsersV1UsersUserIdPutRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdPut
     */
    userId: string
    /**
     * body
     * @type UserSchema1
     * @memberof UsersApiusersV1UsersUserIdPut
     */
    userSchema1: UserSchema1
}

export interface UsersApiUsersV1UsersUserIdReindexPostRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdReindexPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdReindexPost
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdReindexPost
     */
    userId: string
}

export interface UsersApiUsersV1UsersUserIdRolesGetRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdRolesGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdRolesGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdRolesGet
     */
    userId: string
}

export interface UsersApiUsersV1UsersUserIdRolesRoleGetRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdRolesRoleGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdRolesRoleGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdRolesRoleGet
     */
    userId: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdRolesRoleGet
     */
    role: string
}

export interface UsersApiUsersV1UsersUserIdSamlDeleteRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdSamlDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdSamlDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdSamlDelete
     */
    userId: string
}

export interface UsersApiUsersV1UsersUserIdSamlPutRequest {
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdSamlPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdSamlPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof UsersApiusersV1UsersUserIdSamlPut
     */
    userId: string
    /**
     * body
     * @type UserSamlIdpUpdateSchema
     * @memberof UsersApiusersV1UsersUserIdSamlPut
     */
    userSamlIdpUpdateSchema: UserSamlIdpUpdateSchema
}

export class ObjectUsersApi {
    private api: ObservableUsersApi

    public constructor(configuration: Configuration, requestFactory?: UsersApiRequestFactory, responseProcessor?: UsersApiResponseProcessor) {
        this.api = new ObservableUsersApi(configuration, requestFactory, responseProcessor);
    }

    /**
     * 
     * List groups info without details
     * @param param the request object
     */
    public usersV1GroupsBasicGetWithHttpInfo(param: UsersApiUsersV1GroupsBasicGetRequest, options?: Configuration): Promise<HttpInfo<GroupsSchema>> {
        return this.api.usersV1GroupsBasicGetWithHttpInfo(param.appID, param.authToken, param.page, param.perPage, param.sort, param.alias, param.description, param.name, param.roles, param.dateCreated, param.dateModified, param.query, param.ids,  options).toPromise();
    }

    /**
     * 
     * List groups info without details
     * @param param the request object
     */
    public usersV1GroupsBasicGet(param: UsersApiUsersV1GroupsBasicGetRequest, options?: Configuration): Promise<GroupsSchema> {
        return this.api.usersV1GroupsBasicGet(param.appID, param.authToken, param.page, param.perPage, param.sort, param.alias, param.description, param.name, param.roles, param.dateCreated, param.dateModified, param.query, param.ids,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_groups 
     * List groups with details
     * @param param the request object
     */
    public usersV1GroupsGetWithHttpInfo(param: UsersApiUsersV1GroupsGetRequest, options?: Configuration): Promise<HttpInfo<GroupsSchema>> {
        return this.api.usersV1GroupsGetWithHttpInfo(param.appID, param.authToken, param.page, param.perPage, param.sort, param.alias, param.description, param.name, param.roles, param.dateCreated, param.dateModified, param.query, param.ids,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_groups 
     * List groups with details
     * @param param the request object
     */
    public usersV1GroupsGet(param: UsersApiUsersV1GroupsGetRequest, options?: Configuration): Promise<GroupsSchema> {
        return this.api.usersV1GroupsGet(param.appID, param.authToken, param.page, param.perPage, param.sort, param.alias, param.description, param.name, param.roles, param.dateCreated, param.dateModified, param.query, param.ids,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_groups 
     * Delete a particular group by id
     * @param param the request object
     */
    public usersV1GroupsGroupIdDeleteWithHttpInfo(param: UsersApiUsersV1GroupsGroupIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.usersV1GroupsGroupIdDeleteWithHttpInfo(param.appID, param.authToken, param.groupId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_groups 
     * Delete a particular group by id
     * @param param the request object
     */
    public usersV1GroupsGroupIdDelete(param: UsersApiUsersV1GroupsGroupIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.usersV1GroupsGroupIdDelete(param.appID, param.authToken, param.groupId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_groups 
     * Returns a particular group by id
     * @param param the request object
     */
    public usersV1GroupsGroupIdGetWithHttpInfo(param: UsersApiUsersV1GroupsGroupIdGetRequest, options?: Configuration): Promise<HttpInfo<GroupSchema>> {
        return this.api.usersV1GroupsGroupIdGetWithHttpInfo(param.appID, param.authToken, param.groupId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_groups 
     * Returns a particular group by id
     * @param param the request object
     */
    public usersV1GroupsGroupIdGet(param: UsersApiUsersV1GroupsGroupIdGetRequest, options?: Configuration): Promise<GroupSchema> {
        return this.api.usersV1GroupsGroupIdGet(param.appID, param.authToken, param.groupId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_groups 
     * Delete group logo image.
     * @param param the request object
     */
    public usersV1GroupsGroupIdLogoDeleteWithHttpInfo(param: UsersApiUsersV1GroupsGroupIdLogoDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.usersV1GroupsGroupIdLogoDeleteWithHttpInfo(param.appID, param.authToken, param.groupId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_groups 
     * Delete group logo image.
     * @param param the request object
     */
    public usersV1GroupsGroupIdLogoDelete(param: UsersApiUsersV1GroupsGroupIdLogoDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.usersV1GroupsGroupIdLogoDelete(param.appID, param.authToken, param.groupId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_groups 
     * Upload group logo image.
     * @param param the request object
     */
    public usersV1GroupsGroupIdLogoPostWithHttpInfo(param: UsersApiUsersV1GroupsGroupIdLogoPostRequest, options?: Configuration): Promise<HttpInfo<UsersV1GroupsGroupIdLogoPost200Response>> {
        return this.api.usersV1GroupsGroupIdLogoPostWithHttpInfo(param.appID, param.authToken, param.groupId, param.authV1SystemDomainsSystemDomainIdLogoPostRequest,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_groups 
     * Upload group logo image.
     * @param param the request object
     */
    public usersV1GroupsGroupIdLogoPost(param: UsersApiUsersV1GroupsGroupIdLogoPostRequest, options?: Configuration): Promise<UsersV1GroupsGroupIdLogoPost200Response> {
        return this.api.usersV1GroupsGroupIdLogoPost(param.appID, param.authToken, param.groupId, param.authV1SystemDomainsSystemDomainIdLogoPostRequest,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_groups 
     * Update group
     * @param param the request object
     */
    public usersV1GroupsGroupIdPatchWithHttpInfo(param: UsersApiUsersV1GroupsGroupIdPatchRequest, options?: Configuration): Promise<HttpInfo<GroupSchema>> {
        return this.api.usersV1GroupsGroupIdPatchWithHttpInfo(param.appID, param.authToken, param.groupId, param.groupSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_groups 
     * Update group
     * @param param the request object
     */
    public usersV1GroupsGroupIdPatch(param: UsersApiUsersV1GroupsGroupIdPatchRequest, options?: Configuration): Promise<GroupSchema> {
        return this.api.usersV1GroupsGroupIdPatch(param.appID, param.authToken, param.groupId, param.groupSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_groups 
     * Update group
     * @param param the request object
     */
    public usersV1GroupsGroupIdPutWithHttpInfo(param: UsersApiUsersV1GroupsGroupIdPutRequest, options?: Configuration): Promise<HttpInfo<GroupSchema>> {
        return this.api.usersV1GroupsGroupIdPutWithHttpInfo(param.appID, param.authToken, param.groupId, param.groupSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_groups 
     * Update group
     * @param param the request object
     */
    public usersV1GroupsGroupIdPut(param: UsersApiUsersV1GroupsGroupIdPutRequest, options?: Configuration): Promise<GroupSchema> {
        return this.api.usersV1GroupsGroupIdPut(param.appID, param.authToken, param.groupId, param.groupSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_groups 
     * Reindex a particular group by id
     * @param param the request object
     */
    public usersV1GroupsGroupIdReindexPostWithHttpInfo(param: UsersApiUsersV1GroupsGroupIdReindexPostRequest, options?: Configuration): Promise<HttpInfo<UserSchema1>> {
        return this.api.usersV1GroupsGroupIdReindexPostWithHttpInfo(param.appID, param.authToken, param.groupId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_groups 
     * Reindex a particular group by id
     * @param param the request object
     */
    public usersV1GroupsGroupIdReindexPost(param: UsersApiUsersV1GroupsGroupIdReindexPostRequest, options?: Configuration): Promise<UserSchema1> {
        return this.api.usersV1GroupsGroupIdReindexPost(param.appID, param.authToken, param.groupId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_groups 
     * Delete a user from group
     * @param param the request object
     */
    public usersV1GroupsGroupIdUsersUserIdDeleteWithHttpInfo(param: UsersApiUsersV1GroupsGroupIdUsersUserIdDeleteRequest, options?: Configuration): Promise<HttpInfo<UserSchema1>> {
        return this.api.usersV1GroupsGroupIdUsersUserIdDeleteWithHttpInfo(param.appID, param.authToken, param.groupId, param.userId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_groups 
     * Delete a user from group
     * @param param the request object
     */
    public usersV1GroupsGroupIdUsersUserIdDelete(param: UsersApiUsersV1GroupsGroupIdUsersUserIdDeleteRequest, options?: Configuration): Promise<UserSchema1> {
        return this.api.usersV1GroupsGroupIdUsersUserIdDelete(param.appID, param.authToken, param.groupId, param.userId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_groups 
     * Add user into a group
     * @param param the request object
     */
    public usersV1GroupsGroupIdUsersUserIdPostWithHttpInfo(param: UsersApiUsersV1GroupsGroupIdUsersUserIdPostRequest, options?: Configuration): Promise<HttpInfo<UserSchema1>> {
        return this.api.usersV1GroupsGroupIdUsersUserIdPostWithHttpInfo(param.appID, param.authToken, param.groupId, param.userId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_groups 
     * Add user into a group
     * @param param the request object
     */
    public usersV1GroupsGroupIdUsersUserIdPost(param: UsersApiUsersV1GroupsGroupIdUsersUserIdPostRequest, options?: Configuration): Promise<UserSchema1> {
        return this.api.usersV1GroupsGroupIdUsersUserIdPost(param.appID, param.authToken, param.groupId, param.userId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_group_mappings 
     * Get all group mappings
     * @param param the request object
     */
    public usersV1GroupsMappingsGetWithHttpInfo(param: UsersApiUsersV1GroupsMappingsGetRequest, options?: Configuration): Promise<HttpInfo<GroupMappingsSchema>> {
        return this.api.usersV1GroupsMappingsGetWithHttpInfo(param.appID, param.authToken, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_group_mappings 
     * Get all group mappings
     * @param param the request object
     */
    public usersV1GroupsMappingsGet(param: UsersApiUsersV1GroupsMappingsGetRequest, options?: Configuration): Promise<GroupMappingsSchema> {
        return this.api.usersV1GroupsMappingsGet(param.appID, param.authToken, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_group_mappings 
     * Delete group mapping by name
     * @param param the request object
     */
    public usersV1GroupsMappingsNameDeleteWithHttpInfo(param: UsersApiUsersV1GroupsMappingsNameDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.usersV1GroupsMappingsNameDeleteWithHttpInfo(param.appID, param.authToken, param.name,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_group_mappings 
     * Delete group mapping by name
     * @param param the request object
     */
    public usersV1GroupsMappingsNameDelete(param: UsersApiUsersV1GroupsMappingsNameDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.usersV1GroupsMappingsNameDelete(param.appID, param.authToken, param.name,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_group_mappings 
     * Get a group mapping
     * @param param the request object
     */
    public usersV1GroupsMappingsNameGetWithHttpInfo(param: UsersApiUsersV1GroupsMappingsNameGetRequest, options?: Configuration): Promise<HttpInfo<GroupMappingSchema>> {
        return this.api.usersV1GroupsMappingsNameGetWithHttpInfo(param.appID, param.authToken, param.name,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_group_mappings 
     * Get a group mapping
     * @param param the request object
     */
    public usersV1GroupsMappingsNameGet(param: UsersApiUsersV1GroupsMappingsNameGetRequest, options?: Configuration): Promise<GroupMappingSchema> {
        return this.api.usersV1GroupsMappingsNameGet(param.appID, param.authToken, param.name,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_group_mappings 
     * Create a new group mapping
     * @param param the request object
     */
    public usersV1GroupsMappingsPostWithHttpInfo(param: UsersApiUsersV1GroupsMappingsPostRequest, options?: Configuration): Promise<HttpInfo<GroupMappingSchema>> {
        return this.api.usersV1GroupsMappingsPostWithHttpInfo(param.appID, param.authToken, param.groupMappingSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_group_mappings 
     * Create a new group mapping
     * @param param the request object
     */
    public usersV1GroupsMappingsPost(param: UsersApiUsersV1GroupsMappingsPostRequest, options?: Configuration): Promise<GroupMappingSchema> {
        return this.api.usersV1GroupsMappingsPost(param.appID, param.authToken, param.groupMappingSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_groups 
     * Create a new group
     * @param param the request object
     */
    public usersV1GroupsPostWithHttpInfo(param: UsersApiUsersV1GroupsPostRequest, options?: Configuration): Promise<HttpInfo<GroupSchema>> {
        return this.api.usersV1GroupsPostWithHttpInfo(param.appID, param.authToken, param.groupSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_groups 
     * Create a new group
     * @param param the request object
     */
    public usersV1GroupsPost(param: UsersApiUsersV1GroupsPostRequest, options?: Configuration): Promise<GroupSchema> {
        return this.api.usersV1GroupsPost(param.appID, param.authToken, param.groupSchema,  options).toPromise();
    }

    /**
     * 
     * List of users without details
     * @param param the request object
     */
    public usersV1UsersBasicGetWithHttpInfo(param: UsersApiUsersV1UsersBasicGetRequest, options?: Configuration): Promise<HttpInfo<UsersSchema1>> {
        return this.api.usersV1UsersBasicGetWithHttpInfo(param.appID, param.authToken, param.page, param.perPage, param.sort, param.dateCreated, param.dateModified, param.email, param.firstName, param.lastName, param.groups, param.hideEmail, param.hidePhone, param.isAdmin, param.passwordChanged, param.phone, param.photo, param.status, param.query, param.ids,  options).toPromise();
    }

    /**
     * 
     * List of users without details
     * @param param the request object
     */
    public usersV1UsersBasicGet(param: UsersApiUsersV1UsersBasicGetRequest, options?: Configuration): Promise<UsersSchema1> {
        return this.api.usersV1UsersBasicGet(param.appID, param.authToken, param.page, param.perPage, param.sort, param.dateCreated, param.dateModified, param.email, param.firstName, param.lastName, param.groups, param.hideEmail, param.hidePhone, param.isAdmin, param.passwordChanged, param.phone, param.photo, param.status, param.query, param.ids,  options).toPromise();
    }

    /**
     * 
     * Returns current user
     * @param param the request object
     */
    public usersV1UsersCurrentGetWithHttpInfo(param: UsersApiUsersV1UsersCurrentGetRequest, options?: Configuration): Promise<HttpInfo<UserSchema1>> {
        return this.api.usersV1UsersCurrentGetWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     * 
     * Returns current user
     * @param param the request object
     */
    public usersV1UsersCurrentGet(param: UsersApiUsersV1UsersCurrentGetRequest, options?: Configuration): Promise<UserSchema1> {
        return this.api.usersV1UsersCurrentGet(param.appID, param.authToken,  options).toPromise();
    }

    /**
     * 
     * Update user
     * @param param the request object
     */
    public usersV1UsersCurrentPatchWithHttpInfo(param: UsersApiUsersV1UsersCurrentPatchRequest, options?: Configuration): Promise<HttpInfo<UserSchema1>> {
        return this.api.usersV1UsersCurrentPatchWithHttpInfo(param.appID, param.authToken, param.userSchema1,  options).toPromise();
    }

    /**
     * 
     * Update user
     * @param param the request object
     */
    public usersV1UsersCurrentPatch(param: UsersApiUsersV1UsersCurrentPatchRequest, options?: Configuration): Promise<UserSchema1> {
        return this.api.usersV1UsersCurrentPatch(param.appID, param.authToken, param.userSchema1,  options).toPromise();
    }

    /**
     * 
     * Delete current user photo image.
     * @param param the request object
     */
    public usersV1UsersCurrentPhotoDeleteWithHttpInfo(param: UsersApiUsersV1UsersCurrentPhotoDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.usersV1UsersCurrentPhotoDeleteWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     * 
     * Delete current user photo image.
     * @param param the request object
     */
    public usersV1UsersCurrentPhotoDelete(param: UsersApiUsersV1UsersCurrentPhotoDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.usersV1UsersCurrentPhotoDelete(param.appID, param.authToken,  options).toPromise();
    }

    /**
     * 
     * Upload current user photo image.
     * @param param the request object
     */
    public usersV1UsersCurrentPhotoPostWithHttpInfo(param: UsersApiUsersV1UsersCurrentPhotoPostRequest, options?: Configuration): Promise<HttpInfo<UsersV1UsersCurrentPhotoPost201Response>> {
        return this.api.usersV1UsersCurrentPhotoPostWithHttpInfo(param.appID, param.authToken, param.usersV1UsersCurrentPhotoPostRequest,  options).toPromise();
    }

    /**
     * 
     * Upload current user photo image.
     * @param param the request object
     */
    public usersV1UsersCurrentPhotoPost(param: UsersApiUsersV1UsersCurrentPhotoPostRequest, options?: Configuration): Promise<UsersV1UsersCurrentPhotoPost201Response> {
        return this.api.usersV1UsersCurrentPhotoPost(param.appID, param.authToken, param.usersV1UsersCurrentPhotoPostRequest,  options).toPromise();
    }

    /**
     * 
     * Update user
     * @param param the request object
     */
    public usersV1UsersCurrentPutWithHttpInfo(param: UsersApiUsersV1UsersCurrentPutRequest, options?: Configuration): Promise<HttpInfo<UserSchema1>> {
        return this.api.usersV1UsersCurrentPutWithHttpInfo(param.appID, param.authToken, param.userSchema1,  options).toPromise();
    }

    /**
     * 
     * Update user
     * @param param the request object
     */
    public usersV1UsersCurrentPut(param: UsersApiUsersV1UsersCurrentPutRequest, options?: Configuration): Promise<UserSchema1> {
        return this.api.usersV1UsersCurrentPut(param.appID, param.authToken, param.userSchema1,  options).toPromise();
    }

    /**
     * 
     * Returns current user roles
     * @param param the request object
     */
    public usersV1UsersCurrentRolesGetWithHttpInfo(param: UsersApiUsersV1UsersCurrentRolesGetRequest, options?: Configuration): Promise<HttpInfo<UserRolesSchema>> {
        return this.api.usersV1UsersCurrentRolesGetWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     * 
     * Returns current user roles
     * @param param the request object
     */
    public usersV1UsersCurrentRolesGet(param: UsersApiUsersV1UsersCurrentRolesGetRequest, options?: Configuration): Promise<UserRolesSchema> {
        return this.api.usersV1UsersCurrentRolesGet(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_users 
     * List of users with details
     * @param param the request object
     */
    public usersV1UsersGetWithHttpInfo(param: UsersApiUsersV1UsersGetRequest, options?: Configuration): Promise<HttpInfo<UsersSchema1>> {
        return this.api.usersV1UsersGetWithHttpInfo(param.appID, param.authToken, param.page, param.perPage, param.sort, param.dateCreated, param.dateModified, param.email, param.firstName, param.lastName, param.groups, param.hideEmail, param.hidePhone, param.isAdmin, param.passwordChanged, param.phone, param.photo, param.status, param.query, param.ids,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_users 
     * List of users with details
     * @param param the request object
     */
    public usersV1UsersGet(param: UsersApiUsersV1UsersGetRequest, options?: Configuration): Promise<UsersSchema1> {
        return this.api.usersV1UsersGet(param.appID, param.authToken, param.page, param.perPage, param.sort, param.dateCreated, param.dateModified, param.email, param.firstName, param.lastName, param.groups, param.hideEmail, param.hidePhone, param.isAdmin, param.passwordChanged, param.phone, param.photo, param.status, param.query, param.ids,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_users 
     * Create a new user
     * @param param the request object
     */
    public usersV1UsersPostWithHttpInfo(param: UsersApiUsersV1UsersPostRequest, options?: Configuration): Promise<HttpInfo<UserSchema1>> {
        return this.api.usersV1UsersPostWithHttpInfo(param.appID, param.authToken, param.userCreateSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_create_users 
     * Create a new user
     * @param param the request object
     */
    public usersV1UsersPost(param: UsersApiUsersV1UsersPostRequest, options?: Configuration): Promise<UserSchema1> {
        return this.api.usersV1UsersPost(param.appID, param.authToken, param.userCreateSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_users 
     * Delete a particular user by id
     * @param param the request object
     */
    public usersV1UsersUserIdDeleteWithHttpInfo(param: UsersApiUsersV1UsersUserIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.usersV1UsersUserIdDeleteWithHttpInfo(param.appID, param.authToken, param.userId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_users 
     * Delete a particular user by id
     * @param param the request object
     */
    public usersV1UsersUserIdDelete(param: UsersApiUsersV1UsersUserIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.usersV1UsersUserIdDelete(param.appID, param.authToken, param.userId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_users 
     * Returns a particular user by id
     * @param param the request object
     */
    public usersV1UsersUserIdGetWithHttpInfo(param: UsersApiUsersV1UsersUserIdGetRequest, options?: Configuration): Promise<HttpInfo<UserSchema1>> {
        return this.api.usersV1UsersUserIdGetWithHttpInfo(param.appID, param.authToken, param.userId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_users 
     * Returns a particular user by id
     * @param param the request object
     */
    public usersV1UsersUserIdGet(param: UsersApiUsersV1UsersUserIdGetRequest, options?: Configuration): Promise<UserSchema1> {
        return this.api.usersV1UsersUserIdGet(param.appID, param.authToken, param.userId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_users 
     * Update user
     * @param param the request object
     */
    public usersV1UsersUserIdPatchWithHttpInfo(param: UsersApiUsersV1UsersUserIdPatchRequest, options?: Configuration): Promise<HttpInfo<UserSchema1>> {
        return this.api.usersV1UsersUserIdPatchWithHttpInfo(param.appID, param.authToken, param.userId, param.userSchema1,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_users 
     * Update user
     * @param param the request object
     */
    public usersV1UsersUserIdPatch(param: UsersApiUsersV1UsersUserIdPatchRequest, options?: Configuration): Promise<UserSchema1> {
        return this.api.usersV1UsersUserIdPatch(param.appID, param.authToken, param.userId, param.userSchema1,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_users 
     * Delete a photo image of a specified user.
     * @param param the request object
     */
    public usersV1UsersUserIdPhotoDeleteWithHttpInfo(param: UsersApiUsersV1UsersUserIdPhotoDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.usersV1UsersUserIdPhotoDeleteWithHttpInfo(param.appID, param.authToken, param.userId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_users 
     * Delete a photo image of a specified user.
     * @param param the request object
     */
    public usersV1UsersUserIdPhotoDelete(param: UsersApiUsersV1UsersUserIdPhotoDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.usersV1UsersUserIdPhotoDelete(param.appID, param.authToken, param.userId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_users 
     * Upload user photo image.
     * @param param the request object
     */
    public usersV1UsersUserIdPhotoPostWithHttpInfo(param: UsersApiUsersV1UsersUserIdPhotoPostRequest, options?: Configuration): Promise<HttpInfo<UsersV1UsersCurrentPhotoPost201Response>> {
        return this.api.usersV1UsersUserIdPhotoPostWithHttpInfo(param.appID, param.authToken, param.userId, param.usersV1UsersCurrentPhotoPostRequest,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_users 
     * Upload user photo image.
     * @param param the request object
     */
    public usersV1UsersUserIdPhotoPost(param: UsersApiUsersV1UsersUserIdPhotoPostRequest, options?: Configuration): Promise<UsersV1UsersCurrentPhotoPost201Response> {
        return this.api.usersV1UsersUserIdPhotoPost(param.appID, param.authToken, param.userId, param.usersV1UsersCurrentPhotoPostRequest,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_users 
     * Update user
     * @param param the request object
     */
    public usersV1UsersUserIdPutWithHttpInfo(param: UsersApiUsersV1UsersUserIdPutRequest, options?: Configuration): Promise<HttpInfo<UserSchema1>> {
        return this.api.usersV1UsersUserIdPutWithHttpInfo(param.appID, param.authToken, param.userId, param.userSchema1,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_users 
     * Update user
     * @param param the request object
     */
    public usersV1UsersUserIdPut(param: UsersApiUsersV1UsersUserIdPutRequest, options?: Configuration): Promise<UserSchema1> {
        return this.api.usersV1UsersUserIdPut(param.appID, param.authToken, param.userId, param.userSchema1,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_users 
     * Reindex a particular user by id
     * @param param the request object
     */
    public usersV1UsersUserIdReindexPostWithHttpInfo(param: UsersApiUsersV1UsersUserIdReindexPostRequest, options?: Configuration): Promise<HttpInfo<UserSchema1>> {
        return this.api.usersV1UsersUserIdReindexPostWithHttpInfo(param.appID, param.authToken, param.userId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_reindex_users 
     * Reindex a particular user by id
     * @param param the request object
     */
    public usersV1UsersUserIdReindexPost(param: UsersApiUsersV1UsersUserIdReindexPostRequest, options?: Configuration): Promise<UserSchema1> {
        return this.api.usersV1UsersUserIdReindexPost(param.appID, param.authToken, param.userId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_users 
     * Returns user roles by user_id
     * @param param the request object
     */
    public usersV1UsersUserIdRolesGetWithHttpInfo(param: UsersApiUsersV1UsersUserIdRolesGetRequest, options?: Configuration): Promise<HttpInfo<UserRolesSchema>> {
        return this.api.usersV1UsersUserIdRolesGetWithHttpInfo(param.appID, param.authToken, param.userId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_users 
     * Returns user roles by user_id
     * @param param the request object
     */
    public usersV1UsersUserIdRolesGet(param: UsersApiUsersV1UsersUserIdRolesGetRequest, options?: Configuration): Promise<UserRolesSchema> {
        return this.api.usersV1UsersUserIdRolesGet(param.appID, param.authToken, param.userId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_users 
     * Returns user roles by user_id
     * @param param the request object
     */
    public usersV1UsersUserIdRolesRoleGetWithHttpInfo(param: UsersApiUsersV1UsersUserIdRolesRoleGetRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.usersV1UsersUserIdRolesRoleGetWithHttpInfo(param.appID, param.authToken, param.userId, param.role,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_users 
     * Returns user roles by user_id
     * @param param the request object
     */
    public usersV1UsersUserIdRolesRoleGet(param: UsersApiUsersV1UsersUserIdRolesRoleGetRequest, options?: Configuration): Promise<void> {
        return this.api.usersV1UsersUserIdRolesRoleGet(param.appID, param.authToken, param.userId, param.role,  options).toPromise();
    }

    /**
     * 
     * Remove a user\'s SAML IdP setting
     * @param param the request object
     */
    public usersV1UsersUserIdSamlDeleteWithHttpInfo(param: UsersApiUsersV1UsersUserIdSamlDeleteRequest, options?: Configuration): Promise<HttpInfo<UserSchema1>> {
        return this.api.usersV1UsersUserIdSamlDeleteWithHttpInfo(param.appID, param.authToken, param.userId,  options).toPromise();
    }

    /**
     * 
     * Remove a user\'s SAML IdP setting
     * @param param the request object
     */
    public usersV1UsersUserIdSamlDelete(param: UsersApiUsersV1UsersUserIdSamlDeleteRequest, options?: Configuration): Promise<UserSchema1> {
        return this.api.usersV1UsersUserIdSamlDelete(param.appID, param.authToken, param.userId,  options).toPromise();
    }

    /**
     * 
     * Update a user\'s SAML IdP settings
     * @param param the request object
     */
    public usersV1UsersUserIdSamlPutWithHttpInfo(param: UsersApiUsersV1UsersUserIdSamlPutRequest, options?: Configuration): Promise<HttpInfo<UserSchema1>> {
        return this.api.usersV1UsersUserIdSamlPutWithHttpInfo(param.appID, param.authToken, param.userId, param.userSamlIdpUpdateSchema,  options).toPromise();
    }

    /**
     * 
     * Update a user\'s SAML IdP settings
     * @param param the request object
     */
    public usersV1UsersUserIdSamlPut(param: UsersApiUsersV1UsersUserIdSamlPutRequest, options?: Configuration): Promise<UserSchema1> {
        return this.api.usersV1UsersUserIdSamlPut(param.appID, param.authToken, param.userId, param.userSamlIdpUpdateSchema,  options).toPromise();
    }

}

import { ObservableUsersNotificationsApi } from "./ObservableAPI";
import { UsersNotificationsApiRequestFactory, UsersNotificationsApiResponseProcessor} from "../apis/UsersNotificationsApi";

export interface UsersNotificationsApiUsersNotificationsV1NotificationSettingsGetRequest {
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationSettingsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationSettingsGet
     */
    authToken: string
    /**
     * The number of items for each page
     * @type number
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationSettingsGet
     */
    perPage?: number
    /**
     * ID of a last file set on previous page
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationSettingsGet
     */
    lastId?: string
}

export interface UsersNotificationsApiUsersNotificationsV1NotificationSettingsObjectTypeSubObjectTypeEventTypeProtocolGetRequest {
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationSettingsObjectTypeSubObjectTypeEventTypeProtocolGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationSettingsObjectTypeSubObjectTypeEventTypeProtocolGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationSettingsObjectTypeSubObjectTypeEventTypeProtocolGet
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationSettingsObjectTypeSubObjectTypeEventTypeProtocolGet
     */
    subObjectType: string
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationSettingsObjectTypeSubObjectTypeEventTypeProtocolGet
     */
    eventType: string
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationSettingsObjectTypeSubObjectTypeEventTypeProtocolGet
     */
    protocol: string
}

export interface UsersNotificationsApiUsersNotificationsV1NotificationSettingsObjectTypeSubObjectTypeEventTypeProtocolPutRequest {
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationSettingsObjectTypeSubObjectTypeEventTypeProtocolPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationSettingsObjectTypeSubObjectTypeEventTypeProtocolPut
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationSettingsObjectTypeSubObjectTypeEventTypeProtocolPut
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationSettingsObjectTypeSubObjectTypeEventTypeProtocolPut
     */
    subObjectType: string
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationSettingsObjectTypeSubObjectTypeEventTypeProtocolPut
     */
    eventType: string
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationSettingsObjectTypeSubObjectTypeEventTypeProtocolPut
     */
    protocol: string
    /**
     * body
     * @type NotificationSettingSchema
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationSettingsObjectTypeSubObjectTypeEventTypeProtocolPut
     */
    notificationSettingSchema: NotificationSettingSchema
}

export interface UsersNotificationsApiUsersNotificationsV1NotificationsAllReadPutRequest {
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationsAllReadPut
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationsAllReadPut
     */
    authToken: string
}

export interface UsersNotificationsApiUsersNotificationsV1NotificationsGetRequest {
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationsGet
     */
    authToken: string
    /**
     * The number of items for each page
     * @type number
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationsGet
     */
    perPage?: number
    /**
     * ID of a last file set on previous page
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationsGet
     */
    lastId?: string
}

export interface UsersNotificationsApiUsersNotificationsV1NotificationsNotificationIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationsNotificationIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationsNotificationIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationsNotificationIdDelete
     */
    notificationId: string
}

export interface UsersNotificationsApiUsersNotificationsV1NotificationsNotificationIdGetRequest {
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationsNotificationIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationsNotificationIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationsNotificationIdGet
     */
    notificationId: string
}

export interface UsersNotificationsApiUsersNotificationsV1NotificationsPostRequest {
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationsPost
     */
    authToken: string
    /**
     * body
     * @type NotificationSchema
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationsPost
     */
    notificationSchema: NotificationSchema
}

export interface UsersNotificationsApiUsersNotificationsV1NotificationsSystemPostRequest {
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationsSystemPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationsSystemPost
     */
    authToken: string
    /**
     * body
     * @type SystemNotificationSchema
     * @memberof UsersNotificationsApiusersNotificationsV1NotificationsSystemPost
     */
    systemNotificationSchema: SystemNotificationSchema
}

export interface UsersNotificationsApiUsersNotificationsV1ObjectTypeObjectIdSubscriptionsAllDeleteRequest {
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1ObjectTypeObjectIdSubscriptionsAllDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1ObjectTypeObjectIdSubscriptionsAllDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1ObjectTypeObjectIdSubscriptionsAllDelete
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1ObjectTypeObjectIdSubscriptionsAllDelete
     */
    objectId: string
}

export interface UsersNotificationsApiUsersNotificationsV1ObjectTypeObjectIdSubscriptionsGetRequest {
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1ObjectTypeObjectIdSubscriptionsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1ObjectTypeObjectIdSubscriptionsGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1ObjectTypeObjectIdSubscriptionsGet
     */
    objectType: string
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1ObjectTypeObjectIdSubscriptionsGet
     */
    objectId: string
}

export interface UsersNotificationsApiUsersNotificationsV1SubscriptionsGetRequest {
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1SubscriptionsGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1SubscriptionsGet
     */
    authToken: string
}

export interface UsersNotificationsApiUsersNotificationsV1SubscriptionsPostRequest {
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1SubscriptionsPost
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1SubscriptionsPost
     */
    authToken: string
    /**
     * body
     * @type SubscriptionSchema
     * @memberof UsersNotificationsApiusersNotificationsV1SubscriptionsPost
     */
    subscriptionSchema: SubscriptionSchema
}

export interface UsersNotificationsApiUsersNotificationsV1SubscriptionsSubscriptionIdDeleteRequest {
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1SubscriptionsSubscriptionIdDelete
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1SubscriptionsSubscriptionIdDelete
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1SubscriptionsSubscriptionIdDelete
     */
    subscriptionId: string
}

export interface UsersNotificationsApiUsersNotificationsV1SubscriptionsSubscriptionIdGetRequest {
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1SubscriptionsSubscriptionIdGet
     */
    appID: string
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1SubscriptionsSubscriptionIdGet
     */
    authToken: string
    /**
     * 
     * @type string
     * @memberof UsersNotificationsApiusersNotificationsV1SubscriptionsSubscriptionIdGet
     */
    subscriptionId: string
}

export class ObjectUsersNotificationsApi {
    private api: ObservableUsersNotificationsApi

    public constructor(configuration: Configuration, requestFactory?: UsersNotificationsApiRequestFactory, responseProcessor?: UsersNotificationsApiResponseProcessor) {
        this.api = new ObservableUsersNotificationsApi(configuration, requestFactory, responseProcessor);
    }

    /**
     *  Required roles:  - can_read_notification_settings 
     * Returns a particular notification_setting by id
     * @param param the request object
     */
    public usersNotificationsV1NotificationSettingsGetWithHttpInfo(param: UsersNotificationsApiUsersNotificationsV1NotificationSettingsGetRequest, options?: Configuration): Promise<HttpInfo<NotificationSettingsSchema>> {
        return this.api.usersNotificationsV1NotificationSettingsGetWithHttpInfo(param.appID, param.authToken, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_notification_settings 
     * Returns a particular notification_setting by id
     * @param param the request object
     */
    public usersNotificationsV1NotificationSettingsGet(param: UsersNotificationsApiUsersNotificationsV1NotificationSettingsGetRequest, options?: Configuration): Promise<NotificationSettingsSchema> {
        return this.api.usersNotificationsV1NotificationSettingsGet(param.appID, param.authToken, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_notification_settings 
     * Returns a particular notification_setting by id
     * @param param the request object
     */
    public usersNotificationsV1NotificationSettingsObjectTypeSubObjectTypeEventTypeProtocolGetWithHttpInfo(param: UsersNotificationsApiUsersNotificationsV1NotificationSettingsObjectTypeSubObjectTypeEventTypeProtocolGetRequest, options?: Configuration): Promise<HttpInfo<NotificationSettingSchema>> {
        return this.api.usersNotificationsV1NotificationSettingsObjectTypeSubObjectTypeEventTypeProtocolGetWithHttpInfo(param.appID, param.authToken, param.objectType, param.subObjectType, param.eventType, param.protocol,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_notification_settings 
     * Returns a particular notification_setting by id
     * @param param the request object
     */
    public usersNotificationsV1NotificationSettingsObjectTypeSubObjectTypeEventTypeProtocolGet(param: UsersNotificationsApiUsersNotificationsV1NotificationSettingsObjectTypeSubObjectTypeEventTypeProtocolGetRequest, options?: Configuration): Promise<NotificationSettingSchema> {
        return this.api.usersNotificationsV1NotificationSettingsObjectTypeSubObjectTypeEventTypeProtocolGet(param.appID, param.authToken, param.objectType, param.subObjectType, param.eventType, param.protocol,  options).toPromise();
    }

    /**
     * 
     * Create a new notification_setting
     * @param param the request object
     */
    public usersNotificationsV1NotificationSettingsObjectTypeSubObjectTypeEventTypeProtocolPutWithHttpInfo(param: UsersNotificationsApiUsersNotificationsV1NotificationSettingsObjectTypeSubObjectTypeEventTypeProtocolPutRequest, options?: Configuration): Promise<HttpInfo<NotificationSettingSchema>> {
        return this.api.usersNotificationsV1NotificationSettingsObjectTypeSubObjectTypeEventTypeProtocolPutWithHttpInfo(param.appID, param.authToken, param.objectType, param.subObjectType, param.eventType, param.protocol, param.notificationSettingSchema,  options).toPromise();
    }

    /**
     * 
     * Create a new notification_setting
     * @param param the request object
     */
    public usersNotificationsV1NotificationSettingsObjectTypeSubObjectTypeEventTypeProtocolPut(param: UsersNotificationsApiUsersNotificationsV1NotificationSettingsObjectTypeSubObjectTypeEventTypeProtocolPutRequest, options?: Configuration): Promise<NotificationSettingSchema> {
        return this.api.usersNotificationsV1NotificationSettingsObjectTypeSubObjectTypeEventTypeProtocolPut(param.appID, param.authToken, param.objectType, param.subObjectType, param.eventType, param.protocol, param.notificationSettingSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_notifications 
     * Update notification
     * @param param the request object
     */
    public usersNotificationsV1NotificationsAllReadPutWithHttpInfo(param: UsersNotificationsApiUsersNotificationsV1NotificationsAllReadPutRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.usersNotificationsV1NotificationsAllReadPutWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_notifications 
     * Update notification
     * @param param the request object
     */
    public usersNotificationsV1NotificationsAllReadPut(param: UsersNotificationsApiUsersNotificationsV1NotificationsAllReadPutRequest, options?: Configuration): Promise<void> {
        return this.api.usersNotificationsV1NotificationsAllReadPut(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_notifications 
     * Returns a list of notifications
     * @param param the request object
     */
    public usersNotificationsV1NotificationsGetWithHttpInfo(param: UsersNotificationsApiUsersNotificationsV1NotificationsGetRequest, options?: Configuration): Promise<HttpInfo<NotificationsSchema>> {
        return this.api.usersNotificationsV1NotificationsGetWithHttpInfo(param.appID, param.authToken, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_notifications 
     * Returns a list of notifications
     * @param param the request object
     */
    public usersNotificationsV1NotificationsGet(param: UsersNotificationsApiUsersNotificationsV1NotificationsGetRequest, options?: Configuration): Promise<NotificationsSchema> {
        return this.api.usersNotificationsV1NotificationsGet(param.appID, param.authToken, param.perPage, param.lastId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_notifications 
     * Delete a particular notification by id
     * @param param the request object
     */
    public usersNotificationsV1NotificationsNotificationIdDeleteWithHttpInfo(param: UsersNotificationsApiUsersNotificationsV1NotificationsNotificationIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.usersNotificationsV1NotificationsNotificationIdDeleteWithHttpInfo(param.appID, param.authToken, param.notificationId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_delete_notifications 
     * Delete a particular notification by id
     * @param param the request object
     */
    public usersNotificationsV1NotificationsNotificationIdDelete(param: UsersNotificationsApiUsersNotificationsV1NotificationsNotificationIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.usersNotificationsV1NotificationsNotificationIdDelete(param.appID, param.authToken, param.notificationId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_notifications 
     * Returns a particular notification by id
     * @param param the request object
     */
    public usersNotificationsV1NotificationsNotificationIdGetWithHttpInfo(param: UsersNotificationsApiUsersNotificationsV1NotificationsNotificationIdGetRequest, options?: Configuration): Promise<HttpInfo<NotificationSchema>> {
        return this.api.usersNotificationsV1NotificationsNotificationIdGetWithHttpInfo(param.appID, param.authToken, param.notificationId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_notifications 
     * Returns a particular notification by id
     * @param param the request object
     */
    public usersNotificationsV1NotificationsNotificationIdGet(param: UsersNotificationsApiUsersNotificationsV1NotificationsNotificationIdGetRequest, options?: Configuration): Promise<NotificationSchema> {
        return this.api.usersNotificationsV1NotificationsNotificationIdGet(param.appID, param.authToken, param.notificationId,  options).toPromise();
    }

    /**
     * 
     * Create a new notification
     * @param param the request object
     */
    public usersNotificationsV1NotificationsPostWithHttpInfo(param: UsersNotificationsApiUsersNotificationsV1NotificationsPostRequest, options?: Configuration): Promise<HttpInfo<NotificationSchema>> {
        return this.api.usersNotificationsV1NotificationsPostWithHttpInfo(param.appID, param.authToken, param.notificationSchema,  options).toPromise();
    }

    /**
     * 
     * Create a new notification
     * @param param the request object
     */
    public usersNotificationsV1NotificationsPost(param: UsersNotificationsApiUsersNotificationsV1NotificationsPostRequest, options?: Configuration): Promise<NotificationSchema> {
        return this.api.usersNotificationsV1NotificationsPost(param.appID, param.authToken, param.notificationSchema,  options).toPromise();
    }

    /**
     * 
     * Create a new system notification
     * @param param the request object
     */
    public usersNotificationsV1NotificationsSystemPostWithHttpInfo(param: UsersNotificationsApiUsersNotificationsV1NotificationsSystemPostRequest, options?: Configuration): Promise<HttpInfo<NotificationSchema>> {
        return this.api.usersNotificationsV1NotificationsSystemPostWithHttpInfo(param.appID, param.authToken, param.systemNotificationSchema,  options).toPromise();
    }

    /**
     * 
     * Create a new system notification
     * @param param the request object
     */
    public usersNotificationsV1NotificationsSystemPost(param: UsersNotificationsApiUsersNotificationsV1NotificationsSystemPostRequest, options?: Configuration): Promise<NotificationSchema> {
        return this.api.usersNotificationsV1NotificationsSystemPost(param.appID, param.authToken, param.systemNotificationSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_subscriptions 
     * Delete all user subscriptions for a specific object_type and object_id
     * @param param the request object
     */
    public usersNotificationsV1ObjectTypeObjectIdSubscriptionsAllDeleteWithHttpInfo(param: UsersNotificationsApiUsersNotificationsV1ObjectTypeObjectIdSubscriptionsAllDeleteRequest, options?: Configuration): Promise<HttpInfo<SubscriptionSchema>> {
        return this.api.usersNotificationsV1ObjectTypeObjectIdSubscriptionsAllDeleteWithHttpInfo(param.appID, param.authToken, param.objectType, param.objectId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_subscriptions 
     * Delete all user subscriptions for a specific object_type and object_id
     * @param param the request object
     */
    public usersNotificationsV1ObjectTypeObjectIdSubscriptionsAllDelete(param: UsersNotificationsApiUsersNotificationsV1ObjectTypeObjectIdSubscriptionsAllDeleteRequest, options?: Configuration): Promise<SubscriptionSchema> {
        return this.api.usersNotificationsV1ObjectTypeObjectIdSubscriptionsAllDelete(param.appID, param.authToken, param.objectType, param.objectId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_subscriptions 
     * Returns user subscriptions for a specific object_type and object_id
     * @param param the request object
     */
    public usersNotificationsV1ObjectTypeObjectIdSubscriptionsGetWithHttpInfo(param: UsersNotificationsApiUsersNotificationsV1ObjectTypeObjectIdSubscriptionsGetRequest, options?: Configuration): Promise<HttpInfo<SubscriptionsSchema>> {
        return this.api.usersNotificationsV1ObjectTypeObjectIdSubscriptionsGetWithHttpInfo(param.appID, param.authToken, param.objectType, param.objectId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_subscriptions 
     * Returns user subscriptions for a specific object_type and object_id
     * @param param the request object
     */
    public usersNotificationsV1ObjectTypeObjectIdSubscriptionsGet(param: UsersNotificationsApiUsersNotificationsV1ObjectTypeObjectIdSubscriptionsGetRequest, options?: Configuration): Promise<SubscriptionsSchema> {
        return this.api.usersNotificationsV1ObjectTypeObjectIdSubscriptionsGet(param.appID, param.authToken, param.objectType, param.objectId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_subscriptions 
     * Returns all user subscriptions
     * @param param the request object
     */
    public usersNotificationsV1SubscriptionsGetWithHttpInfo(param: UsersNotificationsApiUsersNotificationsV1SubscriptionsGetRequest, options?: Configuration): Promise<HttpInfo<SubscriptionSchema>> {
        return this.api.usersNotificationsV1SubscriptionsGetWithHttpInfo(param.appID, param.authToken,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_subscriptions 
     * Returns all user subscriptions
     * @param param the request object
     */
    public usersNotificationsV1SubscriptionsGet(param: UsersNotificationsApiUsersNotificationsV1SubscriptionsGetRequest, options?: Configuration): Promise<SubscriptionSchema> {
        return this.api.usersNotificationsV1SubscriptionsGet(param.appID, param.authToken,  options).toPromise();
    }

    /**
     * 
     * Create a new subscription
     * @param param the request object
     */
    public usersNotificationsV1SubscriptionsPostWithHttpInfo(param: UsersNotificationsApiUsersNotificationsV1SubscriptionsPostRequest, options?: Configuration): Promise<HttpInfo<SubscriptionSchema>> {
        return this.api.usersNotificationsV1SubscriptionsPostWithHttpInfo(param.appID, param.authToken, param.subscriptionSchema,  options).toPromise();
    }

    /**
     * 
     * Create a new subscription
     * @param param the request object
     */
    public usersNotificationsV1SubscriptionsPost(param: UsersNotificationsApiUsersNotificationsV1SubscriptionsPostRequest, options?: Configuration): Promise<SubscriptionSchema> {
        return this.api.usersNotificationsV1SubscriptionsPost(param.appID, param.authToken, param.subscriptionSchema,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_subscriptions 
     * Delete a particular subscription by id
     * @param param the request object
     */
    public usersNotificationsV1SubscriptionsSubscriptionIdDeleteWithHttpInfo(param: UsersNotificationsApiUsersNotificationsV1SubscriptionsSubscriptionIdDeleteRequest, options?: Configuration): Promise<HttpInfo<void>> {
        return this.api.usersNotificationsV1SubscriptionsSubscriptionIdDeleteWithHttpInfo(param.appID, param.authToken, param.subscriptionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_write_subscriptions 
     * Delete a particular subscription by id
     * @param param the request object
     */
    public usersNotificationsV1SubscriptionsSubscriptionIdDelete(param: UsersNotificationsApiUsersNotificationsV1SubscriptionsSubscriptionIdDeleteRequest, options?: Configuration): Promise<void> {
        return this.api.usersNotificationsV1SubscriptionsSubscriptionIdDelete(param.appID, param.authToken, param.subscriptionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_subscriptions 
     * Returns a particular subscription by id
     * @param param the request object
     */
    public usersNotificationsV1SubscriptionsSubscriptionIdGetWithHttpInfo(param: UsersNotificationsApiUsersNotificationsV1SubscriptionsSubscriptionIdGetRequest, options?: Configuration): Promise<HttpInfo<SubscriptionSchema>> {
        return this.api.usersNotificationsV1SubscriptionsSubscriptionIdGetWithHttpInfo(param.appID, param.authToken, param.subscriptionId,  options).toPromise();
    }

    /**
     *  Required roles:  - can_read_subscriptions 
     * Returns a particular subscription by id
     * @param param the request object
     */
    public usersNotificationsV1SubscriptionsSubscriptionIdGet(param: UsersNotificationsApiUsersNotificationsV1SubscriptionsSubscriptionIdGetRequest, options?: Configuration): Promise<SubscriptionSchema> {
        return this.api.usersNotificationsV1SubscriptionsSubscriptionIdGet(param.appID, param.authToken, param.subscriptionId,  options).toPromise();
    }

}
