{
  "openapi": "3.0.3",
  "info": {
    "title": "Iconik",
    "version": "2.0.0"
  },
  "servers": [
    {
      "url": "https://app.iconik.io/API/"
    }
  ],
  "paths": {
    "/acls/v1/acl/": {
      "post": {
        "description": "\nRequired roles:\n - can_read_acls\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckBulkACLsSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkACLSchema"
                }
              }
            },
            "description": "Returns empty dict if object has permission"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "User doesn't have permission"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Check if objects have required permission"
      }
    },
    "/acls/v1/acl/templates/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_acl_templates\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ACLTemplatesSchema"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Retreive all acl templates"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_acl_templates\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ACLTemplateSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ACLTemplateSchema"
                }
              }
            },
            "description": "Successfully Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create an acl template"
      }
    },
    "/acls/v1/acl/templates/{template_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_acl_templates\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "template_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "ACL template does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Remove an acl template"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_acl_templates\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "template_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ACLTemplateSchema"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Template does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Retreive an acl template"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_acl_templates\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "template_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ACLTemplateSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ACLTemplateSchema"
                }
              }
            },
            "description": "Successfully updated"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "ACL template does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update an acl template"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_acl_templates\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "template_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ACLTemplateSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ACLTemplateSchema"
                }
              }
            },
            "description": "Successfully updated"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "ACL template does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update an acl template"
      }
    },
    "/acls/v1/acl/templates/{template_id}/{object_type}/{object_key}/": {
      "post": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "template_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_key",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "ignore_reindexing",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "Do not apply any ACLs that are not in the collection_id provided (Parent collection normally)",
            "in": "query",
            "name": "restrict_acls_collection_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "User does not have permission"
          },
          "404": {
            "description": "ACL template does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Apply template permissions to an object"
      }
    },
    "/acls/v1/acl/{object_type}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_acls\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteACLsSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the deleted objects"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete acls for multiple objects"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_acls\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateACLsSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateACLsResultSchema"
                }
              }
            },
            "description": "Returns the updated objects"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new acl for multiple objects"
      }
    },
    "/acls/v1/acl/{object_type}/content/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_acls\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteBulkACLsSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the deleted objects"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete acls for content of multiple objects"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_acls\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBulkACLsSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Returns the updated objects"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "501": {
            "description": "Invalid object type"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new acl for content of multiple objects"
      }
    },
    "/acls/v1/acl/{object_type}/{object_key}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_acls\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_key",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ACLSchema"
                }
              }
            },
            "description": "Returns a list of permissions"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "List of object permissions"
      }
    },
    "/acls/v1/acl/{object_type}/{object_key}/permissions/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_key",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CombinedPermissionsSchema"
                }
              }
            },
            "description": "Returns a list of permissions"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "List of permissions for the user"
      }
    },
    "/acls/v1/acl/{object_type}/{object_key}/{permission}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_acls\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_key",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "permission",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns empty dict if object has permission"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Returns empty dict if object doesn't have permission"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Check if particular object has required permission"
      }
    },
    "/acls/v1/acl/{object_type}/{permission}/": {
      "post": {
        "description": "\nRequired roles:\n - can_read_acls\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "permission",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ACLsSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkACLSchema"
                }
              }
            },
            "description": "Returns a dict with two lists `access_granted` and `access_denied` object keys"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "User doesn't have permission"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Check if objects have required permission"
      }
    },
    "/acls/v1/groups/{group_id}/acl/{object_type}/{object_key}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_acls\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_key",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "ACL does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular acl by id for an object"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_acls\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_key",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupACLSchema"
                }
              }
            },
            "description": "Returns a list of group permissions"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Group doesn't have permissions"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "List of groups permissions for an object"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_acls\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_key",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupACLSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupACLSchema"
                }
              }
            },
            "description": "Returns an updated acl"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "ACL does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update or create group acl for an object"
      }
    },
    "/acls/v1/groups/{group_id}/acl/{object_type}/{object_key}/{permission}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_acls\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_key",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "permission",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Group doesn't have particular permission"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Check if group has particular permission for an object"
      }
    },
    "/acls/v1/shares/{object_type}/{object_key}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_acls\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_key",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharesACLSchema"
                }
              }
            },
            "description": "Returns a list of permissions"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "List of share acls"
      }
    },
    "/acls/v1/shares/{share_id}/acl/{object_type}/": {
      "put": {
        "description": "\nRequired roles:\n - can_write_acls\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateShareACLsSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateACLsResultSchema"
                }
              }
            },
            "description": "Returns the updated objects"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new acl for multiple share objects"
      }
    },
    "/acls/v1/shares/{share_id}/acl/{object_type}/{object_key}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_acls\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_key",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "ACL does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a share acl for an object"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_acls\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_key",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareACLSchema"
                }
              }
            },
            "description": "Returns a list of permissions"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "List of share permissions for an object"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_acls\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_key",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareACLSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareACLSchema"
                }
              }
            },
            "description": "Returns a created acl"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new share acl for an object"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_acls\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_key",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareACLSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareACLSchema"
                }
              }
            },
            "description": "Returns an updated acl"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "ACL does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update share acl for an object"
      }
    },
    "/acls/v1/shares/{share_id}/acl/{object_type}/{object_key}/{permission}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_acls\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_key",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "permission",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an empty body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "User does not have permission"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a share acl for an object"
      }
    },
    "/acls/v1/users/{user_id}/acl/{object_type}/{object_key}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_acls\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_key",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "ACL does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a user acl for an object"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_acls\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_key",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserACLSchema"
                }
              }
            },
            "description": "Returns a list of permissions"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "List of user permissions for an object"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_acls\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_key",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserACLSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserACLSchema"
                }
              }
            },
            "description": "Returns an updated acl"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "ACL does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update or create user acl for an object"
      }
    },
    "/acls/v1/users/{user_id}/acl/{object_type}/{object_key}/{permission}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_acls\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_key",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "permission",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserACLSchema"
                }
              }
            },
            "description": "Returns a acl"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "User does not have permission"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a user acl for an object"
      }
    },
    "/assets/v1/approvals/bulk/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_approval_status_in_bulk\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkSetApprovalSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a job for bulk request & set approval"
      }
    },
    "/assets/v1/approvals/bulk_remove/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_approval_status_in_bulk\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkRemoveApprovalSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a job for bulk approval status removal"
      }
    },
    "/assets/v1/assets/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "If true passed then uses scroll pagination instead of default one",
            "in": "query",
            "name": "scroll",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "In order to get next batch of results using scroll pagination the scroll_id is required",
            "in": "query",
            "name": "scroll_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "filter by field_name",
            "in": "query",
            "name": "field_name",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsSchema"
                }
              }
            },
            "description": "Returns a list of asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get list of assets"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkAssetEditSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Bulk assets update scheduled"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Bulk update assets"
      },
      "post": {
        "description": "\nRequired roles:\n - can_create_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Adds default ACLs to an asset",
            "in": "query",
            "name": "apply_default_acls",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "Adds containing collection's ACLs to an asset",
            "in": "query",
            "name": "apply_collection_acls",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "Adds the asset to the collection specified in the body",
            "in": "query",
            "name": "assign_to_collection",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetCreateSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetSchema"
                }
              }
            },
            "description": "Returns a created asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Permission denied"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new asset"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkAssetEditSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Bulk assets update scheduled"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Bulk update assets"
      }
    },
    "/assets/v1/assets/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReindexAllAssetsSchema"
              }
            }
          },
          "description": "body",
          "required": false
        },
        "responses": {
          "201": {
            "description": "ID and status of the job"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Trigger reindexing of all assets"
      }
    },
    "/assets/v1/assets/relation_types/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_asset_relations\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationTypesSchema"
                }
              }
            },
            "description": "Returns a relation type"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new asset relation type"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_asset_relation_types\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelationTypeSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationTypeSchema"
                }
              }
            },
            "description": "Returns a created relation type"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new asset relation type"
      }
    },
    "/assets/v1/assets/relation_types/{relation_type}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_asset_relation_types\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "relation_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete an asset relation type"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_asset_relations\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "relation_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationTypeSchema"
                }
              }
            },
            "description": "Returns a created relation"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get a relation type"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_asset_relation_types\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "relation_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelationTypeSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationTypeSchema"
                }
              }
            },
            "description": "Update successful"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update an asset relation type"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_asset_relation_types\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "relation_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelationTypeSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationTypeSchema"
                }
              }
            },
            "description": "Update successful"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update an asset relation type"
      }
    },
    "/assets/v1/assets/segments/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReindexAllSegmentsSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "ID and status of the job"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Trigger reindexing of all segments"
      }
    },
    "/assets/v1/assets/{asset_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular asset by id"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "include collection membership",
            "in": "query",
            "name": "include_collections",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "include info about the users who have interacted with this asset",
            "in": "query",
            "name": "include_users",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetSchema"
                }
              }
            },
            "description": "Returns an asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a particular asset by id"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetSchema"
                }
              }
            },
            "description": "Returns an updated asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update asset"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetSchema"
                }
              }
            },
            "description": "Returns an updated asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update asset"
      }
    },
    "/assets/v1/assets/{asset_id}/history/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_assets_history\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order For example - first_name,eq,Vlad;last_name,eq,Gudkov",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetHistoryEntitiesSchema"
                }
              }
            },
            "description": "Returns a list of asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get list of assets"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_assets_history\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetHistorySchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetHistorySchema"
                }
              }
            },
            "description": "Returns a created asset history entity"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset Id doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create an asset history entity"
      }
    },
    "/assets/v1/assets/{asset_id}/history/{history_entity_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_assets_history\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "history_entity_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetHistorySchema"
                }
              }
            },
            "description": "Returns a created asset history entity"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Deletes an asset history entity"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_assets_history\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "history_entity_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetHistorySchema"
                }
              }
            },
            "description": "Returns a created asset history entity"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get an asset history entity"
      }
    },
    "/assets/v1/assets/{asset_id}/history/{history_entity_id}/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_assets_history\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "history_entity_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "description": "ID and status of the job"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset history entity does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Reindex asset history entity"
      }
    },
    "/assets/v1/assets/{asset_id}/purge/": {
      "delete": {
        "description": "\nRequired roles:\n - can_purge_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Purges a particular asset by id immediately"
      }
    },
    "/assets/v1/assets/{asset_id}/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReindexAssetSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "ID and status of the job"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Reindex asset"
      }
    },
    "/assets/v1/assets/{asset_id}/relations/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_asset_relations\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Also show assets from recycle bin in relations",
            "in": "query",
            "name": "include_deleted",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsSchema"
                }
              }
            },
            "description": "Returns a list of assets"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns an assets relations"
      },
      "post": {
        "description": "\nRequired roles:\n - can_create_asset_relations\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelationSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationSchema"
                }
              }
            },
            "description": "Returns an existing relation"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationSchema"
                }
              }
            },
            "description": "Returns a created relation"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new asset relation"
      }
    },
    "/assets/v1/assets/{asset_id}/relations/{relation_type}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_asset_relations\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "relation_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Also show assets from recycle bin in relations",
            "in": "query",
            "name": "include_deleted",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsSchema"
                }
              }
            },
            "description": "Returns a list of assets"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns assets that has a relation to this asset"
      }
    },
    "/assets/v1/assets/{asset_id}/relations/{relation_type}/{related_to_asset_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_asset_relations\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "relation_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "related_to_asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular asset by id"
      },
      "post": {
        "description": "\nRequired roles:\n - can_create_asset_relations\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "relation_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "related_to_asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelationSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationSchema"
                }
              }
            },
            "description": "Returns an existing relation"
          },
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationSchema"
                }
              }
            },
            "description": "Returns a created relation"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new asset relation"
      }
    },
    "/assets/v1/assets/{asset_id}/relations/{relation_type}/{related_to_asset_id}/reverse/": {
      "post": {
        "description": "\nRequired roles:\n - can_create_asset_relations\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "relation_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "related_to_asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RelationSchema"
                }
              }
            },
            "description": "Update successful"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Reverse a particular asset's relation"
      }
    },
    "/assets/v1/assets/{asset_id}/restore/": {
      "put": {
        "description": "\nRequired roles:\n - can_write_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Restore deleted asset by id"
      }
    },
    "/assets/v1/assets/{asset_id}/search_document/": {
      "put": {
        "deprecated": true,
        "description": "\nRequired roles:\n - can_reindex_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetElasticSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Asset metadata updated"
          },
          "400": {
            "description": "No metadata supplied"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset does not exist in search index"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update metadata for asset"
      }
    },
    "/assets/v1/assets/{asset_id}/segments/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Sort on field (Comma separated)",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only include these segments (Comma separated)",
            "in": "query",
            "name": "ids",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search using query",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only include fields (Comma separated)",
            "in": "query",
            "name": "includes",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "If true passed then uses scroll pagination instead of default one",
            "in": "query",
            "name": "scroll",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "In order to get next batch of results using scroll pagination the scroll_id is required\n",
            "in": "query",
            "name": "scroll_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by transcription_id",
            "in": "query",
            "name": "transcription_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by version_id",
            "in": "query",
            "name": "version_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by segment_type",
            "in": "query",
            "name": "segment_type",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by segment_color",
            "in": "query",
            "name": "segment_color",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by time_start_milliseconds",
            "in": "query",
            "name": "time_start_milliseconds",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by time_end_milliseconds",
            "in": "query",
            "name": "time_end_milliseconds",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Get segments with start time greater than or equal to time_start_milliseconds__gte\n",
            "in": "query",
            "name": "time_start_milliseconds__gte",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Get segments with end time less than or equal to time_end_milliseconds__lte",
            "in": "query",
            "name": "time_end_milliseconds__lte",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by status",
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Include segment's authors info",
            "in": "query",
            "name": "include_users",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentsSchema"
                }
              }
            },
            "description": "Returns a list of segments"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Page number does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "List of segments"
      },
      "post": {
        "description": "\nRequired roles:\n - can_create_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "This header is used for shares by URL to identify user. Only valid emails are allowed.",
            "in": "header",
            "name": "Share-User-Email",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SegmentSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentSchema"
                }
              }
            },
            "description": "Returns a created segment"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new segment"
      }
    },
    "/assets/v1/assets/{asset_id}/segments/bulk/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "If false, delete segments asynchronously",
            "in": "query",
            "name": "immediately",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "If false, reindex",
            "in": "query",
            "name": "ignore_reindexing",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteSegmentsSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Segment ids or segment type not provided correctly"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "No segments found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete segments with either ids or by type"
      },
      "post": {
        "description": "\nRequired roles:\n - can_create_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkCreateSegmentsSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns ID and status of a job"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create multiple new segments for a single asset"
      }
    },
    "/assets/v1/assets/{asset_id}/segments/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReindexSegmentSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "ID and status of the job"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Reindex assets segments"
      }
    },
    "/assets/v1/assets/{asset_id}/segments/srt/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Only include these segments (Comma separated)",
            "in": "query",
            "name": "ids",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search using query",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by transcription_id",
            "in": "query",
            "name": "transcription_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by version_id",
            "in": "query",
            "name": "version_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by segment_type",
            "in": "query",
            "name": "segment_type",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by segment_color",
            "in": "query",
            "name": "segment_color",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Limit the number of words per subtitle line",
            "in": "query",
            "name": "words_per_line",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/srt": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns a list of segments as SRT file"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Page number does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "List of segments as SRT file"
      }
    },
    "/assets/v1/assets/{asset_id}/segments/vtt/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Only include these segments (Comma separated)",
            "in": "query",
            "name": "ids",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search using query",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by transcription_id",
            "in": "query",
            "name": "transcription_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by version_id",
            "in": "query",
            "name": "version_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by segment_type",
            "in": "query",
            "name": "segment_type",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by segment_color",
            "in": "query",
            "name": "segment_color",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Limit the number of words per subtitle line",
            "in": "query",
            "name": "words_per_line",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/vtt": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns a list of segments as VTT file"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Page number does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "List of segments as WebVTT file"
      }
    },
    "/assets/v1/assets/{asset_id}/segments/{segment_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "segment_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "soft_delete",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Segment not found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular segment from an asset by id"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "segment_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "If true passed then uses scroll pagination instead of default one",
            "in": "query",
            "name": "scroll",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "In order to get next batch of results using scroll pagination the scroll_id is required\n",
            "in": "query",
            "name": "scroll_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentSchema"
                }
              }
            },
            "description": "Returns a segment"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Segment does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get a segment by ID"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "segment_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditSegmentSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentSchema"
                }
              }
            },
            "description": "Returns an updated segment"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Segment does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update segment"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "segment_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditSegmentSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentSchema"
                }
              }
            },
            "description": "Returns an updated segment"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Segment does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update segment"
      }
    },
    "/assets/v1/assets/{asset_id}/segments/{segment_id}/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "segment_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReindexSegmentSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "ID and status of the job"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset segment does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Reindex assets segment"
      }
    },
    "/assets/v1/assets/{asset_id}/segments/{segment_type}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "segment_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Sort on field (Comma separated)",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only include these segments (Comma separated)",
            "in": "query",
            "name": "ids",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search using query",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Only include fields (Comma separated)",
            "in": "query",
            "name": "includes",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "If true passed then uses scroll pagination instead of default one",
            "in": "query",
            "name": "scroll",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "In order to get next batch of results using scroll pagination the scroll_id is required\n",
            "in": "query",
            "name": "scroll_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by time_start_milliseconds",
            "in": "query",
            "name": "time_start_milliseconds",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Filter segments by time_end_milliseconds",
            "in": "query",
            "name": "time_end_milliseconds",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Get segments with start time greater than or equal to time_start_milliseconds__gte\n",
            "in": "query",
            "name": "time_start_milliseconds__gte",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Get segments with end time less than or equal to time_end_milliseconds__lte",
            "in": "query",
            "name": "time_end_milliseconds__lte",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentsSchema"
                }
              }
            },
            "description": "Returns a list of segments"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Page number does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "List of segments"
      }
    },
    "/assets/v1/assets/{asset_id}/uploads/": {
      "delete": {
        "description": "\nRequired roles:\n - can_create_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular asset by id on failed uplaod"
      }
    },
    "/assets/v1/assets/{asset_id}/versions/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_versions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAssetVersionSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetVersionsSchema"
                }
              }
            },
            "description": "Returns an updated asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Add asset version"
      }
    },
    "/assets/v1/assets/{asset_id}/versions/from/assets/{source_asset_id}/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_versions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "source_asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAssetVersionFromAssetSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Returns nothing"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Source or destination asset does not exist"
          },
          "409": {
            "description": "The asset is being transcoded and cannot be set as a new version"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new asset's version from another asset"
      }
    },
    "/assets/v1/assets/{asset_id}/versions/from/versions/{source_version_id}/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_versions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "source_version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAssetVersionFromVersionSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Returns version id"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Source or destination asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new asset's version from another version"
      }
    },
    "/assets/v1/assets/{asset_id}/versions/old/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_versions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete all asset versions except the latest one"
      }
    },
    "/assets/v1/assets/{asset_id}/versions/{version_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_versions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "completely remove the version",
            "in": "query",
            "name": "hard_delete",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular asset version by id"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_versions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetVersionSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetVersionSchema"
                }
              }
            },
            "description": "Returns an updated asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Edit asset version"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_versions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetVersionSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetVersionSchema"
                }
              }
            },
            "description": "Returns an updated asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Edit asset version"
      }
    },
    "/assets/v1/assets/{asset_id}/versions/{version_id}/promote/": {
      "put": {
        "description": "\nRequired roles:\n - can_write_versions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Promote a particular asset version to a latest version"
      }
    },
    "/assets/v1/assets/{asset_id}/versions/{version_id}/transcriptions/properties/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_transcriptions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetTranscriptionsPropertiesSchema"
                }
              }
            },
            "description": "Returns a list of transcription properties"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Transcription does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get a list of transcription properties"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_transcriptions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetTranscriptionPropertiesSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetTranscriptionPropertiesSchema"
                }
              }
            },
            "description": "Returns transcription properties"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Transcription properties do not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Add a new transcription properties"
      }
    },
    "/assets/v1/assets/{asset_id}/versions/{version_id}/transcriptions/subtitles/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_transcriptions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetTranscriptionFromSubtitleSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetTranscriptionPropertiesSchema"
                }
              }
            },
            "description": "Returns transcription properties"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Transcription properties do not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Add a new transcription properties"
      }
    },
    "/assets/v1/assets/{asset_id}/versions/{version_id}/transcriptions/{transcription_id}/properties/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_transcriptions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "transcription_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Transcription properties do not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete transcription properties by ID"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_transcriptions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "transcription_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetTranscriptionPropertiesSchema"
                }
              }
            },
            "description": "Returns a transcription properties"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Transcription properties do not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get a transcription properties by ID"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_transcriptions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "transcription_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetTranscriptionPropertiesSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetTranscriptionPropertiesSchema"
                }
              }
            },
            "description": "Returns transcription properties"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Transcription properties do not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update transcription properties by ID"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_transcriptions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "transcription_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetTranscriptionPropertiesSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetTranscriptionPropertiesSchema"
                }
              }
            },
            "description": "Returns transcription properties"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Transcription properties do not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update transcription properties by ID"
      }
    },
    "/assets/v1/assets/{asset_id}/views/": {
      "post": {
        "description": "\nRequired roles:\n - can_read_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetSchema"
                }
              }
            },
            "description": "Returns an updated asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Mark asset as viewed"
      }
    },
    "/assets/v1/collections/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "If true passed then uses scroll pagination instead of default one",
            "in": "query",
            "name": "scroll",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "In order to get next batch of results using scroll pagination the scroll_id is required",
            "in": "query",
            "name": "scroll_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - title,asc;is_root,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by is_root",
            "in": "query",
            "name": "is_root",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by status",
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionsSchema"
                }
              }
            },
            "description": "Returns a list of collections"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get list of collections"
      },
      "post": {
        "description": "\nRequired roles:\n - can_create_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Adds default ACLs to a collection",
            "in": "query",
            "name": "apply_default_acls",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "Adds containing collection's ACLs to a collection",
            "in": "query",
            "name": "apply_collection_acls",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "Restricts ACLS to containing collection's ACLs",
            "in": "query",
            "name": "restrict_collection_acls",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionInputSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionSchema"
                }
              }
            },
            "description": "Returns a created collection"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new collection"
      }
    },
    "/assets/v1/collections/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReindexAllCollectionsSchema"
              }
            }
          },
          "description": "body",
          "required": false
        },
        "responses": {
          "201": {
            "description": "ID and status of the job"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Trigger reindexing of all collections"
      }
    },
    "/assets/v1/collections/{collection_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "202": {
            "description": "Deletion has been scheduled"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular collection by id"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionSchema"
                }
              }
            },
            "description": "Returns a collection"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a particular collection by id"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Set to 'move' or 'copy'. Ignored if 'parent_id' hasn't changed",
            "in": "query",
            "name": "change_parent_mode",
            "schema": {
              "default": "move",
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionInputSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionSchema"
                }
              }
            },
            "description": "Returns an updated collection"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update collection"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Set to 'move' or 'copy'. Ignored if 'parent_id' hasn't changed",
            "in": "query",
            "name": "change_parent_mode",
            "schema": {
              "default": "move",
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionInputSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionSchema"
                }
              }
            },
            "description": "Returns an updated collection"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update collection"
      }
    },
    "/assets/v1/collections/{collection_id}/ancestors/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionsSchema"
                }
              }
            },
            "description": "Returns a collections content"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns list of ancestors of a collection"
      }
    },
    "/assets/v1/collections/{collection_id}/content/info/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "If false, include all the contents",
            "in": "query",
            "name": "only_active",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionContentInfoSchema"
                }
              }
            },
            "description": "Returns a sub-collections and assets number"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns all sub-collections and assets number for a specific collection"
      }
    },
    "/assets/v1/collections/{collection_id}/contents/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Comma separated list of content types. Example - assets,collections",
            "in": "query",
            "name": "object_types",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Comma separated list of content ids.",
            "in": "query",
            "name": "object_ids",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "external_id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order For example - first_name,eq,Vlad;last_name,eq,Gudkov",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsSchema"
                }
              }
            },
            "description": "Returns a collections content"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns contents of a collection by id"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionContentSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Content added"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection not found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Add an object to a collection"
      }
    },
    "/assets/v1/collections/{collection_id}/contents/ordering/custom/": {
      "delete": {
        "description": "\nRequired roles:\n - can_write_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "Disables custom ordering for a collection's content"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection not found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Disable custom ordering for a collection's content"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCollectionContentOrderingSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Schedules a background job that will order the collection"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection not found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Enable custom ordering for a collection's content"
      }
    },
    "/assets/v1/collections/{collection_id}/contents/{object_type}/{object_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_write_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Content object not found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular content object in a collection by id"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionContentOrderingSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Content object not found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update an order of a particular content object in a collection"
      }
    },
    "/assets/v1/collections/{collection_id}/contents/{object_type}/{object_id}/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReindexCollectionContentSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "ID and status of the job"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection content does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Reindex collection content"
      }
    },
    "/assets/v1/collections/{collection_id}/full/path/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Use to get the upload path instead of the full path",
            "in": "query",
            "name": "get_upload_path",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Full path including all the ancestors / the upload path"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Gets the full path of the collection"
      }
    },
    "/assets/v1/collections/{collection_id}/keyframes/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SynchronizeCollectionKeyframesSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Transcode job started"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Pick up to three asset_ids for collection keyframes"
      }
    },
    "/assets/v1/collections/{collection_id}/purge/": {
      "delete": {
        "description": "\nRequired roles:\n - can_purge_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "202": {
            "description": "Status and job_id"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Forbidden - Collection is not empty"
          },
          "404": {
            "description": "Collection does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Purges deleted collection by id immediately"
      }
    },
    "/assets/v1/collections/{collection_id}/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReindexCollectionSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "ID and status of the job"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Reindex collection"
      }
    },
    "/assets/v1/collections/{collection_id}/reindex/contents/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "description": "ID and status of the job"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Reindex collection and its content"
      }
    },
    "/assets/v1/collections/{collection_id}/restore/": {
      "put": {
        "description": "\nRequired roles:\n - can_write_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Forbidden - Collection is not empty"
          },
          "404": {
            "description": "Collection does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Restore deleted collection by id"
      }
    },
    "/assets/v1/collections/{collection_id}/search_document/": {
      "put": {
        "deprecated": true,
        "description": "\nRequired roles:\n - can_reindex_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Collection metadata updated"
          },
          "400": {
            "description": "No metadata supplied"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection does not exist in search index"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update metadata for collection"
      }
    },
    "/assets/v1/collections/{collection_id}/size/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Compute total size only for files with the specified format name",
            "in": "query",
            "name": "format_name",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Compute total size for all files including sub_collections' assets",
            "in": "query",
            "name": "include_subcollections",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionSizeSchema"
                }
              }
            },
            "description": "Returns the size of all the collection's assets"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns the size of all the collection's assets in bytes"
      }
    },
    "/assets/v1/collections/{collection_id}/subcollections/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionContentSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Content added"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Collection not found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Copy a collection (recursively) in to another collection"
      }
    },
    "/assets/v1/custom_actions/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_custom_actions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomActionsSchema"
                }
              }
            },
            "description": "Returns a list of custom actions"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get list of custom actions"
      }
    },
    "/assets/v1/custom_actions/shared/{context}/{action_id}/callback/": {
      "post": {
        "description": "\nRequired roles:\n - can_read_custom_actions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "context",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "action_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomActionCallbackSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomActionCallbackReplySchema"
                }
              }
            },
            "description": "Returns a custom action reply"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Schedules a celery task that will call custom action on shares"
      }
    },
    "/assets/v1/custom_actions/{context}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_custom_actions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "context",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomActionsSchema"
                }
              }
            },
            "description": "Returns a list of custom actions by context"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get list of custom actions by context"
      },
      "post": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "context",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomActionSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomActionSchema"
                }
              }
            },
            "description": "Returns a created custom action"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create an custom action"
      }
    },
    "/assets/v1/custom_actions/{context}/{action_id}/": {
      "delete": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "context",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "action_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomActionSchema"
                }
              }
            },
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Deletes an custom action"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_custom_actions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "context",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "action_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomActionSchema"
                }
              }
            },
            "description": "Returns a created asset custom action"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get an asset custom action"
      },
      "patch": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "context",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "action_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomActionSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomActionSchema"
                }
              }
            },
            "description": "Returns an created custom action"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update an custom action"
      },
      "put": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "context",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "action_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomActionSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomActionSchema"
                }
              }
            },
            "description": "Returns an created custom action"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update an custom action"
      }
    },
    "/assets/v1/custom_actions/{context}/{action_id}/callback/": {
      "post": {
        "description": "\nRequired roles:\n - can_read_custom_actions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "context",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "action_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomActionCallbackSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomActionCallbackReplySchema"
                }
              }
            },
            "description": "Returns a custom action reply"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Schedules a celery task that will call custom action"
      }
    },
    "/assets/v1/delete_queue/assets/": {
      "delete": {
        "description": "\nRequired roles:\n - can_write_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteQueueSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete assets from delete queue (Mark assets as active again)"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order For example - first_name,eq,Vlad;last_name,eq,Gudkov",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsSchema"
                }
              }
            },
            "description": "Returns a list of asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get deleted objects"
      },
      "post": {
        "description": "\nRequired roles:\n - can_delete_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteQueueSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Add assets to a delete queue (Mark assets as deleted)"
      }
    },
    "/assets/v1/delete_queue/assets/purge/": {
      "post": {
        "description": "\nRequired roles:\n - can_purge_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteQueueSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Purge assets from delete queue (Permanently delete)"
      }
    },
    "/assets/v1/delete_queue/assets/purge/all/": {
      "post": {
        "description": "\nRequired roles:\n - can_purge_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "User does not have permission"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Purge all assets from delete queue (Permanently delete)"
      }
    },
    "/assets/v1/delete_queue/assets/restore/all/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "User does not have permission"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Restore all assets from delete queue"
      }
    },
    "/assets/v1/delete_queue/bulk/": {
      "post": {
        "description": "\nRequired roles:\n - can_delete_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkDeleteSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Bulk delete was scheduled"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Bulk delete objects"
      }
    },
    "/assets/v1/delete_queue/collections/": {
      "delete": {
        "description": "\nRequired roles:\n - can_write_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteQueueSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Forbidden - Collection is not empty"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete collections from delete queue (Mark collections as active again)"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order For example - first_name,eq,Vlad;last_name,eq,Gudkov",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionsSchema"
                }
              }
            },
            "description": "Returns a list of collections"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get list of collections"
      },
      "post": {
        "description": "\nRequired roles:\n - can_delete_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteQueueSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Forbidden - Collection is not empty"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Add collections to a delete queue (Mark collections as deleted)"
      }
    },
    "/assets/v1/delete_queue/collections/purge/": {
      "post": {
        "description": "\nRequired roles:\n - can_purge_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteQueueSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Forbidden - Collection is not empty"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Purge collections from delete queue (Permanently delete)"
      }
    },
    "/assets/v1/delete_queue/collections/purge/all/": {
      "post": {
        "description": "\nRequired roles:\n - can_purge_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "User does not have permission"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Purge all collections from delete queue (Permanently delete)"
      }
    },
    "/assets/v1/delete_queue/collections/restore/all/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "User does not have permission"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Restore all collections from delete queue"
      }
    },
    "/assets/v1/delete_queue/purge/all/": {
      "post": {
        "description": "\nRequired roles:\n - can_purge_assets\n- can_purge_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "User does not have permission"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Purge all assets and collections from delete queue (Permanently delete)"
      }
    },
    "/assets/v1/favorites/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_favorites\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkDeleteFromFavoritesSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkDeleteFromFavoritesSchema"
                }
              }
            },
            "description": "Returns a list of object IDs that were removed from favorites"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Deletes objects items from a list of favorites"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of objects for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - title,asc;date_created,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FavoritesSchema"
                }
              }
            },
            "description": "Returns list of favorite objects"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get list of favorite objects"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_favorites\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkAddToFavoritesSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkAddToFavoritesSchema"
                }
              }
            },
            "description": "Returns a list of object IDs that were added to favorites"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Adds multiple objects to a list of favorites"
      }
    },
    "/assets/v1/favorites/all/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_favorites\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "202": {
            "description": "A background task for deleting all from favourites was scheduled"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Removes all assets/collections from the list of favourites"
      }
    },
    "/assets/v1/favourites/all/": {
      "delete": {
        "deprecated": true,
        "description": "\nRequired roles:\n - can_delete_favorites\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "202": {
            "description": "A background task for deleting all from favourites was scheduled"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Removes all assets/collections from the list of favourites"
      }
    },
    "/assets/v1/segments/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_segments\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReindexSegmentsSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "ID and status of the job"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Trigger reindexing of specific segment ids"
      }
    },
    "/assets/v1/share/{object_type}/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_shares\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkShareCreateSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareSchema"
                }
              }
            },
            "description": "Returns a created share"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Shares are restricted by system administator"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new share of multiple objects (currently only assets are supported)"
      }
    },
    "/assets/v1/shares/auth/login/": {
      "post": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareLoginSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareTokenSchema"
                }
              }
            },
            "description": "Returns a token"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Share does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Login for share"
      }
    },
    "/assets/v1/shares/auth/token/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Share-Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareTokenSchema"
                }
              }
            },
            "description": "Returns an updated share"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Share does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Check if a token is valid"
      },
      "put": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Share-Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareTokenSchema"
                }
              }
            },
            "description": "Returns a newly generated token"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Share does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Refreshes a token for share"
      }
    },
    "/assets/v1/{object_type}/{object_id}/approvals/": {
      "delete": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Deletes an objects approval status"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_approval_request\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalsBySchema"
                }
              }
            },
            "description": "Returns a objects approval"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns an objects approval request"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_approval_status\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApprovalBySchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalBySchema"
                }
              }
            },
            "description": "Returns a objects approval"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns an objects approval status"
      }
    },
    "/assets/v1/{object_type}/{object_id}/approvals/external/{email}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_approval_status\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Deletes an objects approval status by user_id"
      }
    },
    "/assets/v1/{object_type}/{object_id}/approvals/request/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_approval_request\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalSchema"
                }
              }
            },
            "description": "Returns a objects approval"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Deletes an objects approval request"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_approval_request\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalSchema"
                }
              }
            },
            "description": "Returns a objects approval"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns an objects approval request"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_approval_request\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApprovalSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalSchema"
                }
              }
            },
            "description": "Returns a assets approval"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Edits an approval request"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_approval_request\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApprovalSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalSchema"
                }
              }
            },
            "description": "Returns a objects approval"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Creates an objects approval request"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_approval_request\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApprovalSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalSchema"
                }
              }
            },
            "description": "Returns a assets approval"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Edits an approval request"
      }
    },
    "/assets/v1/{object_type}/{object_id}/approvals/user/{user_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_approval_status\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Empty body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Deletes an objects approval status by user_id"
      }
    },
    "/assets/v1/{object_type}/{object_id}/shares/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_shares\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SharesSchema"
                }
              }
            },
            "description": "Returns a list of share"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get list of shares"
      },
      "post": {
        "description": "In case if is_approval=True, share options will be created respectively to user roles.<br/>In case if is_approval=True, share options will be created respectively to user roles.<br/>\nRequired roles:\n - can_write_shares\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "is_approval",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareCreateSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareSchema"
                }
              }
            },
            "description": "Returns a created share; the URL field will be null as a notification email has been sent to the specified email addresses with the share URLs embedded in it"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Shares are restricted by system administator"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new share."
      }
    },
    "/assets/v1/{object_type}/{object_id}/shares/url/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_shares\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareURLCreateSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareURLSchema"
                }
              }
            },
            "description": "Returns a URL link in the body of the response that can be shared and used to access the object"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Shares are restricted by system administator"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Generates a URL for the shared object"
      }
    },
    "/assets/v1/{object_type}/{object_id}/shares/{share_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_object_shares\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Share does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular share by id"
      },
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareSchema"
                }
              }
            },
            "description": "Returns a share"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Share does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a particular share by id"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_shares\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareSchema"
                }
              }
            },
            "description": "Returns an updated share"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Share does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update share"
      }
    },
    "/assets/v1/{object_type}/{object_id}/shares/{share_id}/users/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_shares\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareUsersSchema"
                }
              }
            },
            "description": "Returns a list of share"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get list of share users"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_shares\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareUserSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareUserSchema"
                }
              }
            },
            "description": "Returns a created share"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Add a new share_user to a share"
      }
    },
    "/assets/v1/{object_type}/{object_id}/shares/{share_id}/users/{share_user_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_write_shares\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "No body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Share does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular share_user user by id"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_shares\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareUserSchema"
                }
              }
            },
            "description": "Returns a share"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Share does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a particular share user by id"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_shares\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareUserSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareUserSchema"
                }
              }
            },
            "description": "Returns an updated share"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Share does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update share user"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_shares\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "share_user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareUserSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareUserSchema"
                }
              }
            },
            "description": "Returns an updated share"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Share does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update share user"
      }
    },
    "/assets/v1/{object_type}/{object_id}/versions/{version_id}/approvals/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_approval_request\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalsBySchema"
                }
              }
            },
            "description": "Returns a objects approval"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns an objects approval request by version"
      }
    },
    "/assets/v1/{object_type}/{object_id}/versions/{version_id}/approvals/request/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_approval_request\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalSchema"
                }
              }
            },
            "description": "Returns a objects approval"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns an objects approval request by version"
      }
    },
    "/auth/v1/apps/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_apps\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "ID of a last file set on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppsSchema"
                }
              }
            },
            "description": "Returns a list of app"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "List of apps"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_apps\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppSchema"
                }
              }
            },
            "description": "Returns a created app"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new app"
      }
    },
    "/auth/v1/apps/external/auth/": {
      "post": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalAuthRequestSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalAuthRequestResponseSchema"
                }
              }
            },
            "description": "Returns an app_id"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new token for the logged in user and store it for an external app"
      }
    },
    "/auth/v1/apps/external/auth/{secret}/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "path",
            "name": "secret",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalAuthSchema"
                }
              }
            },
            "description": "Returns auth info"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Gets a token requested by an external app"
      }
    },
    "/auth/v1/apps/instance/": {
      "post": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApprovedAppInstanceSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovedAppInstanceSchema"
                }
              }
            },
            "description": "Returns a created app"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new app instance"
      }
    },
    "/auth/v1/apps/instance/{approved_instance_id}/": {
      "delete": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "approved_instance_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete an approved instance of an app"
      },
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "approved_instance_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalAuthSchema"
                }
              }
            },
            "description": "Returns auth info"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Gets an approved instance of an app"
      }
    },
    "/auth/v1/apps/{app_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_apps\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "app_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular app by id"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_apps\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "app_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppSchema"
                }
              }
            },
            "description": "Returns a app"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a particular app by id"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_apps\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "app_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppSchema"
                }
              }
            },
            "description": "Returns an updated app"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update app"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_apps\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "app_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppSchema"
                }
              }
            },
            "description": "Returns an updated app"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update app"
      }
    },
    "/auth/v1/apps/{app_id}/token/": {
      "post": {
        "description": "\nRequired roles:\n - can_read_apps\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "app_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenSchema"
                }
              }
            },
            "description": "Returns an application token"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Creates app token by id and returns it's data"
      }
    },
    "/auth/v1/auth/ad/login/": {
      "post": {
        "description": "<br/>This function is not yet implemented.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenSchema"
                }
              }
            },
            "description": "Returns a new generated token for particular user"
          },
          "400": {
            "description": "Bad request"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Login by ActiveDirectory"
      }
    },
    "/auth/v1/auth/multidomain/login/": {
      "post": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "Temp-Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiDomainLoginSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenSchema"
                }
              }
            },
            "description": "Returns a new generated token for particular user"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Login by using temp token"
      }
    },
    "/auth/v1/auth/oauth/login/": {
      "post": {
        "description": "<br/>This function is not yet implemented.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenSchema"
                }
              }
            },
            "description": "Returns a new generated token for particular user"
          },
          "400": {
            "description": "Bad request"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Login by OAuth"
      }
    },
    "/auth/v1/auth/saml/acs/{public_id}/": {
      "post": {
        "description": "",
        "parameters": [
          {
            "in": "path",
            "name": "public_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect on SAML IDP for SSO"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "SAML Assertion Consumer Service"
      }
    },
    "/auth/v1/auth/saml/acs/{system_domain_id}/{identity_provider_id}/": {
      "post": {
        "deprecated": true,
        "description": "",
        "parameters": [
          {
            "in": "path",
            "name": "system_domain_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "identity_provider_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect on SAML IDP for SSO"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized request"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "SAML Assertion Consumer Service"
      }
    },
    "/auth/v1/auth/saml/domains/": {
      "post": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainIdentityProviderMapSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainIdentityProviderMapSchema"
                }
              }
            },
            "description": "Returns an identity provider"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Bind domain to identity provider"
      }
    },
    "/auth/v1/auth/saml/domains/{domain}/": {
      "delete": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "domain",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "No body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Unbind domain from identity provider"
      }
    },
    "/auth/v1/auth/saml/idp/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_identity_providers\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProvidersSchema"
                }
              }
            },
            "description": "Returns a list of identity providers"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get list of identity providers"
      },
      "post": {
        "description": "<br/>Input can either be an IdentityProviderSchema as json or a SAML<br/>EntityDescriptor XML.<br/>Input can either be an IdentityProviderSchema as json or a SAML<br/>EntityDescriptor XML.\nRequired roles:\n - can_write_identity_providers\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityProviderSchema"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/IdentityProviderSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderSchema"
                }
              }
            },
            "description": "Returns an identity provider"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new identity provider."
      }
    },
    "/auth/v1/auth/saml/idp/convert/": {
      "post": {
        "description": "<br/>Input should be a SAML EntityDescriptor XML.",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/IdentityProviderSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderSchema"
                }
              }
            },
            "description": "Returns an identity provider"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Convert an IdP EntityDescriptor XML into json suitable as a settings configuration."
      }
    },
    "/auth/v1/auth/saml/idp/{identity_provider_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_identity_providers\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "identity_provider_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "No body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Identity provider does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular identity provider by id"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_identity_providers\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "identity_provider_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderSchema"
                }
              }
            },
            "description": "Returns an identity provider"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Identity provider does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get a particular identity provider by id"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_identity_providers\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "identity_provider_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityProviderSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderSchema"
                }
              }
            },
            "description": "Returns an updated identity provider"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Identity provider does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update a particular identity provider by id"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_identity_providers\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "identity_provider_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityProviderSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProviderSchema"
                }
              }
            },
            "description": "Returns an updated identity provider"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Identity provider does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update a particular identity provider by id"
      }
    },
    "/auth/v1/auth/saml/login/": {
      "post": {
        "deprecated": true,
        "description": "",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SAMLLoginSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "url": {
                      "description": "saml sso url",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Returns an saml sso url"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "SAML Single sign-on url by domain"
      }
    },
    "/auth/v1/auth/saml/logout/{public_id}/": {
      "post": {
        "description": "",
        "parameters": [
          {
            "in": "path",
            "name": "public_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "url": {
                      "description": "saml sso url. No url is returned if Single Logout is unsupported by IdP",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Returns an saml slo url"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Initiate SAML Single logout"
      }
    },
    "/auth/v1/auth/saml/metadata/{public_id}/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "path",
            "name": "public_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "Return SAML SP metadata"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "SAML Single Logout Service"
      }
    },
    "/auth/v1/auth/saml/metadata/{system_domain_id}/{identity_provider_id}/": {
      "get": {
        "deprecated": true,
        "description": "",
        "parameters": [
          {
            "in": "path",
            "name": "system_domain_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "identity_provider_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "Return SAML SP metadata"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "SAML Single Logout Service"
      }
    },
    "/auth/v1/auth/saml/multidomain/login/": {
      "post": {
        "description": "",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SAMLLoginSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultiDomainUserSystemsSchema"
                }
              }
            },
            "description": "Returns list of SSO domains"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "SAML Single sign-on url by domain"
      }
    },
    "/auth/v1/auth/saml/slo/{public_id}/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "path",
            "name": "public_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect on SAML IDP for SLO"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "SAML Single Logout Service"
      }
    },
    "/auth/v1/auth/saml/slo/{system_domain_id}/{identity_provider_id}/": {
      "get": {
        "deprecated": true,
        "description": "",
        "parameters": [
          {
            "in": "path",
            "name": "system_domain_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "identity_provider_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect on SAML IDP for SLO"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "SAML Single Logout Service"
      }
    },
    "/auth/v1/auth/saml/sso/{public_id}/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "path",
            "name": "public_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect on SAML IDP for SSO"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "SAML Single sign-on Service"
      }
    },
    "/auth/v1/auth/saml/sso/{system_domain_id}/{identity_provider_id}/": {
      "get": {
        "deprecated": true,
        "description": "",
        "parameters": [
          {
            "in": "path",
            "name": "system_domain_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "identity_provider_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect on SAML IDP for SSO"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "SAML Single sign-on Service"
      }
    },
    "/auth/v1/auth/simple/login/": {
      "post": {
        "description": "",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimpleLoginSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenSchema"
                }
              }
            },
            "description": "Returns a new generated token for particular user"
          },
          "400": {
            "description": "Bad request"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Login by using email and password"
      }
    },
    "/auth/v1/auth/token/": {
      "delete": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns if token was revoked"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Revoke token"
      },
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns if token valid"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Check if auth token valid"
      },
      "post": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenSchema"
                }
              }
            },
            "description": "Returns a new token"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create new token without invalidating the old one"
      },
      "put": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenSchema"
                }
              }
            },
            "description": "Returns a new token"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Refresh token"
      }
    },
    "/auth/v1/auth/token/{token_id}/": {
      "delete": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "token_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns if token was revoked"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Revoke token by ID"
      },
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "token_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a token"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get token by ID"
      }
    },
    "/auth/v1/auth/tokens/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "ID of a last file set on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokensSchema"
                }
              }
            },
            "description": "Returns a list of tokens"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "List of tokens"
      }
    },
    "/auth/v1/marketplace/google/link/": {
      "post": {
        "description": "",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarketplaceGoogleLinkSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully linked google account to existing system domain"
          },
          "400": {
            "description": "Bad request"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Google cloud marketplace link to existing system domain"
      }
    },
    "/auth/v1/marketplace/google/signup/": {
      "post": {
        "description": "",
        "parameters": [],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/MarketplaceGoogleSignupSchema"
              }
            }
          },
          "description": "A request multipart/form-data"
        },
        "responses": {
          "302": {
            "description": "Redirects to the registration page"
          },
          "400": {
            "description": "Bad request"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Google cloud marketplace signup"
      }
    },
    "/auth/v1/password/checks/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordChecksSchema"
                }
              }
            },
            "description": "Password checks"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a list of password checks required for the password to be safe"
      }
    },
    "/auth/v1/password/forgot/": {
      "post": {
        "description": "",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Reset password email was sent to an email"
          },
          "400": {
            "description": "Bad request"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Receives email address and sends email to this address with link for resetting password"
      }
    },
    "/auth/v1/password/reset/{reset_hash}/": {
      "put": {
        "description": "",
        "parameters": [
          {
            "in": "path",
            "name": "reset_hash",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Password was changed"
          },
          "400": {
            "description": "Bad request"
          },
          "419": {
            "description": "Authentication token expired"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Changes password to a new one"
      }
    },
    "/auth/v1/password/{reset_hash}/checks/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "path",
            "name": "reset_hash",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordChecksSchema"
                }
              }
            },
            "description": "Password checks"
          },
          "400": {
            "description": "Bad request"
          },
          "419": {
            "description": "Reset password token expired"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a list of password checks required for the password to be safe"
      }
    },
    "/auth/v1/referral_codes/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferralCodesSchema"
                }
              }
            },
            "description": "Returns a referral_code"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get all referral_codes"
      },
      "post": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferralCodeSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferralCodeSchema"
                }
              }
            },
            "description": "Returns a created referral_code"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "409": {
            "description": "Code already exists"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new referral_code"
      }
    },
    "/auth/v1/referral_codes/{code}/": {
      "delete": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "code",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a referral_code"
      },
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "code",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferralCodeSchema"
                }
              }
            },
            "description": "Returns a referral_code"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get a referral_code"
      }
    },
    "/auth/v1/registrations/": {
      "post": {
        "description": "",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationSchema"
                }
              }
            },
            "description": "Returns a created registration"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new registration"
      }
    },
    "/auth/v1/registrations/countries/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountriesSchema"
                }
              }
            },
            "description": "Returns a list of countries"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns list of countries"
      }
    },
    "/auth/v1/registrations/verify/{email_hash}/": {
      "post": {
        "description": "",
        "parameters": [
          {
            "in": "path",
            "name": "email_hash",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemDomainFromTemplateSchema"
                }
              }
            },
            "description": "Returns a created system domain"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Verify email address and create system domain from template is email address valid"
      }
    },
    "/auth/v1/system_domains/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Query the name",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Comma separated list of statuses to show",
            "in": "query",
            "name": "statuses",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemDomainsSchema"
                }
              }
            },
            "description": "Returns a list of system domains"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "List of system domains"
      },
      "post": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemDomainSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemDomainSchema"
                }
              }
            },
            "description": "Returns a created system domain"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new system domain"
      }
    },
    "/auth/v1/system_domains/referral_code/{referral_code}/": {
      "post": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "referral_code",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemDomainFromReferralCodeSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemDomainFromTemplateSchema"
                }
              }
            },
            "description": "Returns a created system domain"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new system domain from a referral code (That is associated to your domain)"
      }
    },
    "/auth/v1/system_domains/templates/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemDomainsSchema"
                }
              }
            },
            "description": "Returns a list of system domain templates"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "List of system domain templates"
      }
    },
    "/auth/v1/system_domains/{system_domain_id}/": {
      "delete": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "system_domain_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular system_domain by id"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_system_domains\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "system_domain_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemDomainSchema"
                }
              }
            },
            "description": "Returns a system domain"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "System domain does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a particular system domain by id"
      },
      "patch": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "system_domain_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemDomainSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemDomainSchema"
                }
              }
            },
            "description": "Returns an updated system domain"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "System domain does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update system domain"
      },
      "put": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "system_domain_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemDomainSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemDomainSchema"
                }
              }
            },
            "description": "Returns an updated system domain"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "System domain does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update system domain"
      }
    },
    "/auth/v1/system_domains/{system_domain_id}/e2e/": {
      "delete": {
        "description": "(For internal use. Should not be displayed in Swagger docs)",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "system_domain_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular system_domain by id."
      }
    },
    "/auth/v1/system_domains/{system_domain_id}/logo/": {
      "delete": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "system_domain_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "No body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "System domain does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete system domain logo image."
      },
      "post": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "system_domain_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "image/*": {
              "schema": {
                "properties": {
                  "logo": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "logo": {
                      "description": "Url for the system domain logo",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Returns url for system domain logo"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "System domain does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Upload system domain logo image."
      }
    },
    "/files/v1/analysis/profiles/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "ID of a last profile set on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalysisProfilesSchema"
                }
              }
            },
            "description": "Returns analysis profiles"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Profiles don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get analysis profiles"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_analysis_profiles\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnalysisProfileSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalysisProfileSchema"
                }
              }
            },
            "description": "Returns an analysis profile"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new analysis profile"
      }
    },
    "/files/v1/analysis/profiles/{media_type}/default/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "media_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalysisProfileSchema"
                }
              }
            },
            "description": "The default analysis profile"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Analysis profile does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get a default analysis profile"
      }
    },
    "/files/v1/analysis/profiles/{profile_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_analysis_profiles\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "profile_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Analysis profile doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete an analysis profile"
      },
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "profile_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalysisProfileSchema"
                }
              }
            },
            "description": "Returns an analysis profile for provided media type"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Profile doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get an analysis profile"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_analysis_profiles\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "profile_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnalysisProfileSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalysisProfileSchema"
                }
              }
            },
            "description": "Returns an analysis profile that was updated"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Profile doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update an analysis profile information"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_analysis_profiles\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "profile_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnalysisProfileSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalysisProfileSchema"
                }
              }
            },
            "description": "Returns an analysis profile that was updated"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Profile doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update an analysis profile information"
      }
    },
    "/files/v1/analysis/profiles/{profile_id}/default/": {
      "delete": {
        "description": "\nRequired roles:\n - can_write_analysis_profiles\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "profile_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Removes the default flag on an analysis profile"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_analysis_profiles\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "profile_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Set an analysis profile to the default of its media type"
      }
    },
    "/files/v1/analysis/service_accounts/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_analysis_service_accounts\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "ID of a last service account set on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalysisServiceAccountsSchema"
                }
              }
            },
            "description": "Returns analysis service accounts"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Service accounts don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get analysis service accounts"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_analysis_service_accounts\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnalysisServiceAccountSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalysisServiceAccountReadSchema"
                }
              }
            },
            "description": "Returns an analysis service account"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new analysis service account"
      }
    },
    "/files/v1/analysis/service_accounts/{analysis_service_account_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_analysis_service_accounts\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "analysis_service_account_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Analysis service account doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete an analysis service account"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_analysis_service_accounts\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "analysis_service_account_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalysisServiceAccountReadSchema"
                }
              }
            },
            "description": "Returns an analysis service account"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Service account doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get an analysis service account"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_analysis_service_accounts\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "analysis_service_account_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnalysisServiceAccountSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalysisServiceAccountSchema"
                }
              }
            },
            "description": "Returns an analysis service account that was updated"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Service account doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update an analysis service account information"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_analysis_service_accounts\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "analysis_service_account_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnalysisServiceAccountSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalysisServiceAccountSchema"
                }
              }
            },
            "description": "Returns an analysis service account that was updated"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Service account doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update an analysis service account information"
      }
    },
    "/files/v1/assets/bulk/keyframes/": {
      "post": {
        "description": "\nRequired roles:\n - can_create_transcode_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkTranscodeSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a transcode job for proxy and keyframes generation of multiple assets"
      }
    },
    "/files/v1/assets/export_locations/{export_location_id}/": {
      "post": {
        "deprecated": true,
        "description": "\nRequired roles:\n - can_write_exports\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "export_location_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Enable transfer through iconik host (creates egress)",
            "in": "query",
            "name": "allow_host_transfer",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetBatchExportSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns an export job id"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Export multiple assets to export location"
      }
    },
    "/files/v1/assets/{asset_id}/custom_keyframe/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_keyframes\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyframeSchema"
                }
              }
            },
            "description": "Returns created keyframe"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create keyframe of type poster for asset"
      }
    },
    "/files/v1/assets/{asset_id}/custom_keyframe/{poster_id}/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_keyframes\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "poster_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "set to false to keep current custom_poster and custom_keyframe on asset",
            "in": "query",
            "name": "overwrite",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyframeSchema"
                }
              }
            },
            "description": "Returns custom keyframe"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Set keyframe of type poster as asset keyframe"
      }
    },
    "/files/v1/assets/{asset_id}/export_locations/{export_location_id}/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_exports\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "export_location_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Enable transfer through iconik host (creates egress)",
            "in": "query",
            "name": "allow_host_transfer",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetExportSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns an export job id"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Export asset to export location"
      }
    },
    "/files/v1/assets/{asset_id}/file_sets/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "ID of a last file set on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Set to true if you need a total amount of files in a file set",
            "in": "query",
            "name": "file_count",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileSetsSchema"
                }
              }
            },
            "description": "Returns all file sets associated with this asset"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "FileSets for this asset don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get all asset's file sets"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileSetSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileSetSchema"
                }
              }
            },
            "description": "Returns a file set that was created for this asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create file set and associate to asset"
      }
    },
    "/files/v1/assets/{asset_id}/file_sets/{file_set_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_set_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "If true, keep source objects",
            "in": "query",
            "name": "keep_source",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "File set that has been marked as deleted"
          },
          "204": {
            "description": "Without body in case `immediately` option was provided"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "File set for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete asset's file set, file entries, and actual files"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_set_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileSetSchema"
                }
              }
            },
            "description": "Returns a file set associated with this asset"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "File set for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get asset's file set"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_set_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileSetSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileSetSchema"
                }
              }
            },
            "description": "Returns a file set that was updated"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "File set for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update file set information"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_set_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileSetSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileSetSchema"
                }
              }
            },
            "description": "Returns a file set that was updated"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "File set for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update file set information"
      }
    },
    "/files/v1/assets/{asset_id}/file_sets/{file_set_id}/files/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_set_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Set to false if you don't need a URL, will speed things up",
            "in": "query",
            "name": "generate_signed_url",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "Set to true if you need a total amount of files in a file set",
            "in": "query",
            "name": "file_count",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesSchema"
                }
              }
            },
            "description": "Returns files from a file set"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get files from a file set"
      }
    },
    "/files/v1/assets/{asset_id}/file_sets/{file_set_id}/purge/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_set_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "File set for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Purge deleted asset's file set, file entries, and actual files."
      }
    },
    "/files/v1/assets/{asset_id}/file_sets/{file_set_id}/restore/": {
      "put": {
        "description": "\nRequired roles:\n - can_write_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_set_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "File set that has been restored"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "File set for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Restore delete asset's file set"
      }
    },
    "/files/v1/assets/{asset_id}/files/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Set to True if you do need a URL, this makes the request slower.",
            "in": "query",
            "name": "generate_signed_url",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "Set to attachment if you want a download link. Note that this will not create a download in asset history",
            "in": "query",
            "name": "content_disposition",
            "schema": {
              "default": "inline",
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "ID of a last file on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesSchema"
                }
              }
            },
            "description": "Returns all files associated with this asset"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Files for this asset don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get all asset's files"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileCreateSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileSchema"
                }
              }
            },
            "description": "Returns a file that was created for this asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create file and associate to asset"
      }
    },
    "/files/v1/assets/{asset_id}/files/{file_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "File for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete asset's file entry (Not the actual file, use DELETE file_set for that)"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Set to true to get a new upload url for the file",
            "in": "query",
            "name": "generate_signed_post_url",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "Set to attachment if you want a download link. Note that this will not create a asset history entry for the download",
            "in": "query",
            "name": "content_disposition",
            "schema": {
              "default": "inline",
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Set to true to get a new url for the file rather than using a cached url",
            "in": "query",
            "name": "bypass_url_cache",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileSchema"
                }
              }
            },
            "description": "Returns a file associated with this asset"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "File for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get asset's file"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileSchema"
                }
              }
            },
            "description": "Returns a file that was updated"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "File for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update file information"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileSchema"
                }
              }
            },
            "description": "Returns a file that was updated"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "File for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update file information"
      }
    },
    "/files/v1/assets/{asset_id}/files/{file_id}/capture/{milliseconds}/": {
      "post": {
        "description": "\nRequired roles:\n - can_create_poster\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "milliseconds",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TranscodeRequestSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranscodeResponseSchema"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "File or asset not found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a transcode job for creating still keyframe"
      }
    },
    "/files/v1/assets/{asset_id}/files/{file_id}/download_url/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileDownloadURLSchema"
                }
              }
            },
            "description": "Returns a file download url"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "File for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get asset's file download URL"
      }
    },
    "/files/v1/assets/{asset_id}/files/{file_id}/edit_proxies/": {
      "post": {
        "description": "\nRequired roles:\n - can_create_transcode_jobs\n- can_write_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditProxySchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditProxyResponseSchema"
                }
              }
            },
            "description": "ID and status of the job"
          },
          "204": {
            "description": "No edit proxy created"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create format, file_set, and file for edit proxy if storage has edit proxy transcoder configured"
      }
    },
    "/files/v1/assets/{asset_id}/files/{file_id}/isg_handler_url/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISGHandlerURLSchema"
                }
              }
            },
            "description": "Returns a file handler URL for ISG"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "File for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get asset's file handler URL for ISG"
      }
    },
    "/files/v1/assets/{asset_id}/files/{file_id}/keyframes/": {
      "post": {
        "description": "\nRequired roles:\n - can_create_transcode_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TranscodeRequestSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranscodeResponseSchema"
                }
              }
            },
            "description": "OK"
          },
          "204": {
            "description": "Transcode was ignored by Storage ignore pattern"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "File or asset not found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a transcode job for proxy and keyframes"
      }
    },
    "/files/v1/assets/{asset_id}/files/{file_id}/mediainfo/": {
      "post": {
        "description": "\nRequired roles:\n - can_create_transcode_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TranscodeRequestSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranscodeResponseSchema"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "File or asset not found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a job for extracting mediainfo"
      }
    },
    "/files/v1/assets/{asset_id}/files/{file_id}/multipart/": {
      "post": {
        "deprecated": true,
        "description": "\nRequired roles:\n - can_write_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Use temporary file record",
            "in": "query",
            "name": "temporary",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultipartUploadSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Complete multipart upload (GCS)."
      }
    },
    "/files/v1/assets/{asset_id}/files/{file_id}/multipart/b2/cancel/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Use temporary file record",
            "in": "query",
            "name": "temporary",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultipartB2CancelUpload"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Upload canceled"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Cancel Backblaze B2 multipart upload."
      }
    },
    "/files/v1/assets/{asset_id}/files/{file_id}/multipart/b2/finish/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Use temporary file record",
            "in": "query",
            "name": "temporary",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultipartB2FinishUpload"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful upload"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Complete Backblaze B2 multipart upload."
      }
    },
    "/files/v1/assets/{asset_id}/files/{file_id}/multipart/b2/start/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Use temporary file record",
            "in": "query",
            "name": "temporary",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultipartB2StartUpload"
              }
            }
          },
          "description": "body",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultipartB2StartUpload"
                }
              }
            },
            "description": "Returns part upload url"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Start Backblaze B2 multipart upload."
      }
    },
    "/files/v1/assets/{asset_id}/files/{file_id}/multipart/cleanup/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultipartUploadCleanupSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Cleanup multipart upload (GCS, S3)."
      }
    },
    "/files/v1/assets/{asset_id}/files/{file_id}/multipart/gcs/compose_url/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Use temporary file record",
            "in": "query",
            "name": "temporary",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultipartUploadComposeSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultiPartUploadComposeURLSchema"
                }
              }
            },
            "description": "Return pre-signed compose url"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get object compose url for GCS parallel upload."
      }
    },
    "/files/v1/assets/{asset_id}/files/{file_id}/multipart_url/": {
      "get": {
        "description": "\nRequired roles:\n - can_write_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Multipart UploadId",
            "in": "query",
            "name": "upload_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "List of multipart upload urls of required type",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Maximum PartNumber that multipart upload has",
            "in": "query",
            "name": "max_part_number",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Use temporary file record",
            "in": "query",
            "name": "temporary",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultiPartURLsSchema"
                }
              }
            },
            "description": "Returns presigned urls for multipart upload"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get presigned urls for multipart upload (S3)."
      }
    },
    "/files/v1/assets/{asset_id}/files/{file_id}/multipart_url/part/": {
      "get": {
        "description": "\nRequired roles:\n - can_write_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Multipart UploadId",
            "in": "query",
            "name": "upload_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Number of parts to upload",
            "in": "query",
            "name": "parts_num",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Use temporary file record",
            "in": "query",
            "name": "temporary",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultiPartUploadURLsSchema"
                }
              }
            },
            "description": "Returns presigned urls for multipart part upload"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get presigned urls for multipart part upload (S3 & GCS)."
      }
    },
    "/files/v1/assets/{asset_id}/files/{file_id}/multipart_url/s3/part/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Use temporary file record",
            "in": "query",
            "name": "temporary",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiPartS3UrlPartsSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultiPartS3UrlPartsSchema"
                }
              }
            },
            "description": "Returns presigned urls for S3 multipart part upload"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "File or asset not found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create presigned urls for multipart part S3 upload."
      }
    },
    "/files/v1/assets/{asset_id}/files/{file_id}/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_storages\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "description": "ID and status of the job"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Trigger reindexing of a file"
      }
    },
    "/files/v1/assets/{asset_id}/files/{file_id}/subtitles/": {
      "post": {
        "description": "\nRequired roles:\n - can_create_transcode_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubtitleRequestSchema"
              }
            }
          },
          "description": "body",
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "File or asset not found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a transcode job for subtitle files"
      }
    },
    "/files/v1/assets/{asset_id}/formats/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_formats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "ID of a last format on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormatsSchema"
                }
              }
            },
            "description": "Returns all formats associated with this asset"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Formats for this asset don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get all asset's formats"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_formats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormatSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormatSchema"
                }
              }
            },
            "description": "Returns a format that was created for this asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create format and associate to asset"
      }
    },
    "/files/v1/assets/{asset_id}/formats/{format_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_formats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "format_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Permanently delete format without sending it to the Recycle Bin",
            "in": "query",
            "name": "delete_immediately",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "Format that marked as deleted"
          },
          "204": {
            "description": "Without body in case `immediately` option was provided"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Format for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete asset's format"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_formats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "format_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormatSchema"
                }
              }
            },
            "description": "Returns a format associated with this asset"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Format for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get asset's format"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_formats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "format_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormatSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormatSchema"
                }
              }
            },
            "description": "Returns a format that was updated"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Format for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update format information"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_formats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "format_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormatSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormatSchema"
                }
              }
            },
            "description": "Returns a format that was updated"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Format for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update format information"
      }
    },
    "/files/v1/assets/{asset_id}/formats/{format_id}/archive/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_archived_formats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "format_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormatDeleteArchiveSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "202": {
            "description": "No body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Format for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete archived format"
      },
      "post": {
        "description": "\nRequired roles:\n - can_archive_formats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "format_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormatArchiveSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "202": {
            "description": "No body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Format for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Archive format"
      }
    },
    "/files/v1/assets/{asset_id}/formats/{format_id}/components/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_formats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "format_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentsSchema"
                }
              }
            },
            "description": "Returns all formats associated with this asset"
          },
          "400": {
            "description": "Invalid input (Wrong type of UUID or JSON)"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset/Format/Component don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get all components for a format in an asset"
      },
      "post": {
        "description": "\nRequired roles:\n - can_create_formats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "format_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComponentSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentsSchema"
                }
              }
            },
            "description": "Returns all formats associated with this asset"
          },
          "400": {
            "description": "Invalid input (Wrong type of UUID or JSON)"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Formats for this asset don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Add a new format component"
      }
    },
    "/files/v1/assets/{asset_id}/formats/{format_id}/components/{component_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_formats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "format_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "component_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentsSchema"
                }
              }
            },
            "description": "Returns all formats associated with this asset"
          },
          "400": {
            "description": "Invalid input (Wrong type of UUID or JSON)"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Formats for this asset don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a component in a format"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_formats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "format_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "component_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentsSchema"
                }
              }
            },
            "description": "Returns all formats associated with this asset"
          },
          "400": {
            "description": "Invalid input (Wrong type of UUID or JSON)"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Asset/Format/Component don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get a component for a format in an asset"
      },
      "put": {
        "description": "\nRequired roles:\n - can_create_formats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "format_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "component_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentsSchema"
                }
              }
            },
            "description": "Returns all formats associated with this asset"
          },
          "400": {
            "description": "Invalid input (Wrong type of UUID or JSON)"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Formats for this asset don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update a component in a format"
      }
    },
    "/files/v1/assets/{asset_id}/formats/{format_id}/file_sets/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "format_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "ID of a last file set on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileSetsSchema"
                }
              }
            },
            "description": "Returns all file sets associated with this asset"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "FileSets for this asset don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get all asset's file sets in a specific format"
      }
    },
    "/files/v1/assets/{asset_id}/formats/{format_id}/file_sets/sources/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "format_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileSetSourcesSchema"
                }
              }
            },
            "description": "Returns a files"
          },
          "400": {
            "description": "Invalid input (Wrong type of UUID or JSON)"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get all file sets with matching format and storage method"
      }
    },
    "/files/v1/assets/{asset_id}/formats/{format_id}/file_sets/sources/{storage_method}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "format_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_method",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileSetsSchema"
                }
              }
            },
            "description": "Returns a files"
          },
          "400": {
            "description": "Invalid input (Wrong type of UUID or JSON)"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get all file sets with matching format and storage method"
      }
    },
    "/files/v1/assets/{asset_id}/formats/{format_id}/purge/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_formats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "format_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Format for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Purge deleted asset's format"
      }
    },
    "/files/v1/assets/{asset_id}/formats/{format_id}/restore/": {
      "post": {
        "description": "\nRequired roles:\n - can_restore_archived_formats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "format_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormatRestoreSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "202": {
            "description": "No body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Format for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Restore archived format"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_formats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "format_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "Format that has been restored"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Format for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Restore deleted asset's format"
      }
    },
    "/files/v1/assets/{asset_id}/formats/{format_id}/storages/{storage_id}/file_sets/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "format_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "ID of a last file set on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileSetsSchema"
                }
              }
            },
            "description": "Returns all file sets associated with this asset"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "FileSets for this asset don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get all asset's file sets in a specific format on a specific storage"
      }
    },
    "/files/v1/assets/{asset_id}/formats/{name}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_formats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormatSchema"
                }
              }
            },
            "description": "Returns a format associated with this asset"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Format for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get asset's format"
      }
    },
    "/files/v1/assets/{asset_id}/keyframes/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Set to false if you don't need a URL, will speed things up",
            "in": "query",
            "name": "generate_signed_url",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "Set to attachment if you do not want a download link",
            "in": "query",
            "name": "content_disposition",
            "schema": {
              "default": "inline",
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "ID of a last keyframe on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "If true return asset's keyframes for all versions",
            "in": "query",
            "name": "include_all_versions",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyframesSchema"
                }
              }
            },
            "description": "Returns all keyframes associated with this asset"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Keyframes for this asset don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get all asset's keyframes"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_keyframes\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Set to True to get a google resumable upload link",
            "in": "query",
            "name": "use_google_resumable_upload",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeyframeSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyframeCreateSchema"
                }
              }
            },
            "description": "Returns a keyframe that was created for this asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create keyframe and associate to asset"
      }
    },
    "/files/v1/assets/{asset_id}/keyframes/{keyframe_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_write_keyframes\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "keyframe_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "keep_poster",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Keyframe for this asset don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete asset's keyframe"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "keyframe_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Set to attachment if you do not want a download link",
            "in": "query",
            "name": "content_disposition",
            "schema": {
              "default": "inline",
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileSchema"
                }
              }
            },
            "description": "Returns all files associated with this asset"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Keyframe for this asset don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get asset's proxy"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_keyframes\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "keyframe_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeyframeSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyframeSchema"
                }
              }
            },
            "description": "Returns a keyframe that was updated"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Keyframe for this asset don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update keyframe information"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_keyframes\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "keyframe_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeyframeSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyframeSchema"
                }
              }
            },
            "description": "Returns a keyframe that was updated"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Keyframe for this asset don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update keyframe information"
      }
    },
    "/files/v1/assets/{asset_id}/keyframes/{keyframe_id}/public/": {
      "delete": {
        "description": "\nRequired roles:\n - can_write_keyframes\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "keyframe_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyframeSchema"
                }
              }
            },
            "description": "Returns a keyframe that was updated"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Make the keyframe link private"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_keyframes\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "keyframe_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyframeSchema"
                }
              }
            },
            "description": "Returns a keyframe that was updated"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Make the keyframe link public"
      }
    },
    "/files/v1/assets/{asset_id}/method/{storage_method}/keyframes/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_keyframes\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_method",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Set to True to get a google resumable upload link",
            "in": "query",
            "name": "use_google_resumable_upload",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeyframeSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyframeCreateSchema"
                }
              }
            },
            "description": "Returns a keyframe that was created for this asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create keyframe and associate to asset"
      }
    },
    "/files/v1/assets/{asset_id}/method/{storage_method}/proxies/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_proxies\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_method",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProxySchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyCreateSchema"
                }
              }
            },
            "description": "Returns a proxy that was created for this asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create proxy and associate to asset"
      }
    },
    "/files/v1/assets/{asset_id}/proxies/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_proxies\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Set to false if you don't need a URL, will speed things up",
            "in": "query",
            "name": "generate_signed_url",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "Set to attachment if you want a download link",
            "in": "query",
            "name": "content_disposition",
            "schema": {
              "default": "inline",
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "ID of a last proxy on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Set to true to get a new url for the file rather than using a cached url",
            "in": "query",
            "name": "bypass_url_cache",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxiesSchema"
                }
              }
            },
            "description": "Returns all proxies associated with this asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Proxies for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get all asset's proxies"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_proxies\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProxySchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyCreateSchema"
                }
              }
            },
            "description": "Returns a proxy that was created for this asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create proxy and associate to asset"
      }
    },
    "/files/v1/assets/{asset_id}/proxies/{proxy_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_proxies\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "proxy_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Proxy for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete asset's proxy"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_proxies\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "proxy_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Set to attachment if you want a download link",
            "in": "query",
            "name": "content_disposition",
            "schema": {
              "default": "inline",
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxySchema"
                }
              }
            },
            "description": "Returns proxy associated with this asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Proxy for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get asset's proxy"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_proxies\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "proxy_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProxySchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxySchema"
                }
              }
            },
            "description": "Returns a proxy that was updated"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Proxy for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update proxy information"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_proxies\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "proxy_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProxySchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxySchema"
                }
              }
            },
            "description": "Returns a proxy that was updated"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Proxy for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update proxy information"
      }
    },
    "/files/v1/assets/{asset_id}/proxies/{proxy_id}/download_url/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_proxies\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "proxy_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyDownloadURLSchema"
                }
              }
            },
            "description": "Returns proxy associated with this asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Proxy for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get asset's proxy download url"
      }
    },
    "/files/v1/assets/{asset_id}/proxies/{proxy_id}/keyframes/": {
      "post": {
        "description": "\nRequired roles:\n - can_create_transcode_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "proxy_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TranscodeRequestSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranscodeResponseSchema"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "File or asset not found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a transcode job for keyframes from a proxy"
      }
    },
    "/files/v1/assets/{asset_id}/proxies/{proxy_id}/multipart/cleanup/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_proxies\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "proxy_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultipartUploadProxyCleanupSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Cleanup S3 multipart upload"
      }
    },
    "/files/v1/assets/{asset_id}/proxies/{proxy_id}/multipart_url/": {
      "get": {
        "description": "\nRequired roles:\n - can_write_proxies\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "proxy_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Multipart UploadId",
            "in": "query",
            "name": "upload_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "List of multipart upload urls of required type",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Maximum PartNumber that multipart upload has",
            "in": "query",
            "name": "max_part_number",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultiPartURLsSchema"
                }
              }
            },
            "description": "Returns presigned urls for multipart upload"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get presigned urls for S3 multipart upload."
      }
    },
    "/files/v1/assets/{asset_id}/proxies/{proxy_id}/multipart_url/part/": {
      "get": {
        "description": "\nRequired roles:\n - can_write_proxies\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "proxy_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Multipart UploadId",
            "in": "query",
            "name": "upload_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Number of parts to upload",
            "in": "query",
            "name": "parts_num",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultiPartUploadURLsSchema"
                }
              }
            },
            "description": "Returns presigned urls for multipart part upload"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get presigned urls for S3 multipart part upload."
      }
    },
    "/files/v1/assets/{asset_id}/proxies/{proxy_id}/public/": {
      "delete": {
        "description": "\nRequired roles:\n - can_write_proxies\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "proxy_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxySchema"
                }
              }
            },
            "description": "Returns a proxy that was updated"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Make the proxy link private"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_proxies\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "proxy_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxySchema"
                }
              }
            },
            "description": "Returns a proxy that was updated"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Make the proxy link public"
      }
    },
    "/files/v1/assets/{asset_id}/subtitles/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_asset_subtitles\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "ID of a last subtitle on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubtitlesSchema"
                }
              }
            },
            "description": "Returns all subtitles associated with this asset"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Subtitles for this asset don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get all asset's subtitles"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_asset_subtitles\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubtitleSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubtitleSchema"
                }
              }
            },
            "description": "Returns a format that was created for this asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create subtitle proxy and associate to asset"
      }
    },
    "/files/v1/assets/{asset_id}/subtitles/{language}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_asset_subtitles\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "language",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubtitleSchema"
                }
              }
            },
            "description": "Returns a format associated with this asset"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Subtitle for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get asset's subtitle for a particular language"
      }
    },
    "/files/v1/assets/{asset_id}/subtitles/{language}/cc/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_asset_subtitles\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "language",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubtitleSchema"
                }
              }
            },
            "description": "Returns a subtitle associated with this asset"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Subtitle for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get asset's closed captions subtitle for a particular language"
      }
    },
    "/files/v1/assets/{asset_id}/subtitles/{language}/cc/webvtt/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_asset_subtitles\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "language",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/vtt": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns a subtitle file associated with this asset in a particular language"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Subtitle for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get asset's closed captions subtitle file for a particular language"
      }
    },
    "/files/v1/assets/{asset_id}/subtitles/{language}/webvtt/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_asset_subtitles\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "language",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/vtt": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns a subtitle file associated with this asset in a particular language"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Subtitle for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get asset's subtitle file for a particular language"
      }
    },
    "/files/v1/assets/{asset_id}/subtitles/{subtitle_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "subtitle_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Subtitle for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete asset's subtitle"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_asset_subtitles\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "subtitle_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubtitleSchema"
                }
              }
            },
            "description": "Returns a subtitle associated with this asset"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Subtitle for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get asset's subtitle for a language"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_asset_subtitles\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "subtitle_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubtitleSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubtitleSchema"
                }
              }
            },
            "description": "Returns a subtitle that was updated"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Subtitle for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update subtitle information"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_asset_subtitles\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "subtitle_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubtitleSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubtitleSchema"
                }
              }
            },
            "description": "Returns a subtitle that was updated"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Subtitle for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update subtitle information"
      }
    },
    "/files/v1/assets/{asset_id}/subtitles/{subtitle_id}/cc/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "subtitle_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Subtitle for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete asset's subtitle"
      }
    },
    "/files/v1/assets/{asset_id}/temporary_file_sets/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemporaryFileSetSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemporaryFileSetSchema"
                }
              }
            },
            "description": "Returns a file set that was created for this asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create temporary file set and associate to asset"
      }
    },
    "/files/v1/assets/{asset_id}/temporary_file_sets/{file_set_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_set_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "delete_cloud_objects",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "File set for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete temporary file set with files"
      }
    },
    "/files/v1/assets/{asset_id}/temporary_file_sets/{file_set_id}/files/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_set_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Set to false if you don't need a URL, will speed things up",
            "in": "query",
            "name": "generate_signed_url",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesSchema"
                }
              }
            },
            "description": "Returns files from a file set"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get files from a temporary file set"
      }
    },
    "/files/v1/assets/{asset_id}/temporary_files/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "store",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemporaryFileCreateSchema"
                }
              }
            },
            "description": "Returns a file that was created for this asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create temporary transfer file for FILE storage transfers"
      }
    },
    "/files/v1/assets/{asset_id}/temporary_files/{file_id}/": {
      "patch": {
        "description": "\nRequired roles:\n - can_write_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileSchema"
                }
              }
            },
            "description": "Returns updated file"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Asset access denied"
          },
          "404": {
            "description": "No file found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update temporary file's info"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileSchema"
                }
              }
            },
            "description": "Returns updated file"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Asset access denied"
          },
          "404": {
            "description": "No file found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update temporary file's info"
      }
    },
    "/files/v1/assets/{asset_id}/versions/all/file_sets/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "ID of a last file set on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "File sets were scheduled for deletion"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "FileSets for this asset don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete asset's file sets"
      }
    },
    "/files/v1/assets/{asset_id}/versions/all/files/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "File for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete asset's files entries by version (Not the actual file, use DELETE file_set for that)"
      }
    },
    "/files/v1/assets/{asset_id}/versions/all/formats/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_formats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "Formats were scheduled for deletion"
          },
          "204": {
            "description": "Without body in case `immediately` option was provided"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Format for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete asset's formats all versions"
      }
    },
    "/files/v1/assets/{asset_id}/versions/all/keyframes/": {
      "delete": {
        "description": "\nRequired roles:\n - can_write_keyframes\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Keyframe for this asset don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete asset's keyframes all versions"
      }
    },
    "/files/v1/assets/{asset_id}/versions/all/proxies/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_proxies\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Proxy for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete asset's proxies all versions"
      }
    },
    "/files/v1/assets/{asset_id}/versions/all/subtitles/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Subtitle for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete asset's subtitles all versions"
      }
    },
    "/files/v1/assets/{asset_id}/versions/{version_id}/file_sets/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "ID of a last file set on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "File sets were scheduled for deletion"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "FileSets for this asset don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete asset's file sets by version"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "ID of a last file set on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Set to true if you need a total amount of files in a file set",
            "in": "query",
            "name": "file_count",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileSetsSchema"
                }
              }
            },
            "description": "Returns all file sets associated with this asset"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "FileSets for this asset don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get all asset's file sets by version"
      }
    },
    "/files/v1/assets/{asset_id}/versions/{version_id}/files/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "File for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete asset's files entries by version (Not the actual file, use DELETE file_set for that)"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Set to False if you do not need a URL, will slow things down otherwise",
            "in": "query",
            "name": "generate_signed_url",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "Set to attachment if you want a download link. Note that this will not create a download in asset history",
            "in": "query",
            "name": "content_disposition",
            "schema": {
              "default": "inline",
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "ID of a last file on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesSchema"
                }
              }
            },
            "description": "Returns all files associated with this asset"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Files for this asset don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get all asset's files by version"
      }
    },
    "/files/v1/assets/{asset_id}/versions/{version_id}/formats/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_formats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "Formats were scheduled for deletion"
          },
          "204": {
            "description": "Without body in case `immediately` option was provided"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Format for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete asset's formats by version"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_formats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "ID of a last format on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormatsSchema"
                }
              }
            },
            "description": "Returns all formats associated with this asset"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Formats for this asset don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get all asset's formats by version"
      }
    },
    "/files/v1/assets/{asset_id}/versions/{version_id}/keyframes/": {
      "delete": {
        "description": "\nRequired roles:\n - can_write_keyframes\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "keep_poster",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Keyframe for this asset don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete asset's keyframes by version"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Set to false if you don't need a URL, will speed things up",
            "in": "query",
            "name": "generate_signed_url",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "Set to attachment if you do not want a download link",
            "in": "query",
            "name": "content_disposition",
            "schema": {
              "default": "inline",
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "ID of a last keyframe on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyframesSchema"
                }
              }
            },
            "description": "Returns all keyframes associated with this asset"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Keyframes for this asset don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get all asset's keyframes by version"
      }
    },
    "/files/v1/assets/{asset_id}/versions/{version_id}/proxies/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_proxies\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Proxy for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete asset's proxies by version"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_proxies\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Set to false if you don't need a URL, will speed things up",
            "in": "query",
            "name": "generate_signed_url",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "Set to attachment if you want a download link",
            "in": "query",
            "name": "content_disposition",
            "schema": {
              "default": "inline",
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "ID of a last proxy on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxiesSchema"
                }
              }
            },
            "description": "Returns all proxies associated with this asset"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Proxies for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get all asset's proxies by version"
      }
    },
    "/files/v1/assets/{asset_id}/versions/{version_id}/subtitles/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_assets\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Subtitle for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete asset's subtitles by version"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_asset_subtitles\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "ID of a last subtitle on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubtitlesSchema"
                }
              }
            },
            "description": "Returns all subtitles associated with this asset"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Subtitles for this asset don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get all asset's subtitles by version"
      }
    },
    "/files/v1/assets/{asset_id}/versions/{version_id}/subtitles/{language}/cc/webvtt/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_asset_subtitles\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "language",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/vtt": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns a subtitle file associated with this asset in a particular language"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Subtitle for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get asset's closed captions subtitle file for a particular language by version"
      }
    },
    "/files/v1/assets/{asset_id}/versions/{version_id}/subtitles/{language}/webvtt/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_asset_subtitles\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "language",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/vtt": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns a subtitle file associated with this asset in a particular language"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Subtitle for this asset doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get asset's subtitle file for a particular language by version"
      }
    },
    "/files/v1/collections/{collection_id}/custom_keyframe/{poster_id}/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_keyframes\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "poster_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "set to false to keep current custom_poster and custom_keyframe on asset",
            "in": "query",
            "name": "overwrite",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionKeyframeSchema"
                }
              }
            },
            "description": "Returns custom keyframe"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Set keyframe of type poster as collection keyframe"
      }
    },
    "/files/v1/collections/{collection_id}/export_locations/{export_location_id}/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_exports\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "export_location_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Enable transfer through iconik host (creates egress)",
            "in": "query",
            "name": "allow_host_transfer",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionExportSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns an export job id"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Export collection assets to export location"
      }
    },
    "/files/v1/collections/{collection_id}/keyframes/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Set to false if you don't need a URL, will speed things up",
            "in": "query",
            "name": "generate_signed_url",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "ID of a last collection keyframe on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionKeyframesSchema"
                }
              }
            },
            "description": "Returns all keyframes associated with this collection"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Keyframes for this collection don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get all collection's keyframes"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_keyframes\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionKeyframeSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionKeyframeCreateSchema"
                }
              }
            },
            "description": "Returns a keyframe that was created for this collection"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create keyframe and associate to collection"
      }
    },
    "/files/v1/collections/{collection_id}/keyframes/{keyframe_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_write_keyframes\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "keyframe_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "set to true to force a regeneration of default keyframes",
            "in": "query",
            "name": "regenerate_keyframes",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Keyframe for this collection don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete collection's keyframe"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_collections\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "keyframe_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionKeyframeSchema"
                }
              }
            },
            "description": "Returns a keyframe associated with this collection"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Keyframe for this collection don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get collection's proxy"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_keyframes\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "keyframe_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionKeyframeSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionKeyframeSchema"
                }
              }
            },
            "description": "Returns a keyframe that was updated"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Keyframe for this collection don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update keyframe information"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_keyframes\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "keyframe_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionKeyframeSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionKeyframeSchema"
                }
              }
            },
            "description": "Returns a keyframe that was updated"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Keyframe for this collection don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update keyframe information"
      }
    },
    "/files/v1/delete_queue/file_sets/": {
      "delete": {
        "description": "\nRequired roles:\n - can_write_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteQueueSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Restore file sets from delete queue"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search using query",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "filter by field_name",
            "in": "query",
            "name": "field_name",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileSetsElasticSchema"
                }
              }
            },
            "description": "Returns a list of file sets"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get deleted file sets"
      }
    },
    "/files/v1/delete_queue/file_sets/purge/": {
      "post": {
        "description": "\nRequired roles:\n - can_purge_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteQueueSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Purge file sets from delete queue (Permanently delete)"
      }
    },
    "/files/v1/delete_queue/file_sets/purge/all/": {
      "post": {
        "description": "\nRequired roles:\n - can_purge_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "User does not have permission"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Purge all file sets from delete queue (Permanently delete)"
      }
    },
    "/files/v1/delete_queue/formats/": {
      "delete": {
        "description": "\nRequired roles:\n - can_write_formats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteQueueSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Restore formats from delete queue"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_formats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search using query",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "filter by field_name",
            "in": "query",
            "name": "field_name",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormatsElasticSchema"
                }
              }
            },
            "description": "Returns a list of formats"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get deleted formats"
      }
    },
    "/files/v1/delete_queue/formats/purge/": {
      "post": {
        "description": "\nRequired roles:\n - can_purge_formats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteQueueSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Purge formats from delete queue (Permanently delete)"
      }
    },
    "/files/v1/delete_queue/formats/purge/all/": {
      "post": {
        "description": "\nRequired roles:\n - can_purge_formats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "User does not have permission"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Purge all formats from delete queue (Permanently delete)"
      }
    },
    "/files/v1/export_locations/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_export_locations\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Search query",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter list of id:s (comma separated)",
            "in": "query",
            "name": "ids",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "ID of a last export_location on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - name,asc;id,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportLocationsSchema"
                }
              }
            },
            "description": "Returns a list of export_locations"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get all export_locations"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_export_locations\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportLocationSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportLocationSchema"
                }
              }
            },
            "description": "Returns a created export_location entry"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new export_location"
      }
    },
    "/files/v1/export_locations/{export_location_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_export_locations\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "export_location_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "ExportLocation doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular export_location by id"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_export_locations\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "export_location_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportLocationSchema"
                }
              }
            },
            "description": "Returns a export_location"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "ExportLocation doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a particular export_location by id"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_export_locations\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "export_location_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportLocationSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportLocationSchema"
                }
              }
            },
            "description": "Returns an updated export_location"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update export_location"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_export_locations\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "export_location_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportLocationSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportLocationSchema"
                }
              }
            },
            "description": "Returns an updated export_location"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update export_location"
      }
    },
    "/files/v1/export_locations/{export_location_id}/bulk_export/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_exports\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "export_location_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Enable transfer through iconik host (creates egress)",
            "in": "query",
            "name": "allow_host_transfer",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkFilesetExportSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns an export job id"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Export multiple objects to export location"
      }
    },
    "/files/v1/export_locations/{export_location_id}/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_export_locations\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "export_location_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "description": "ID and status of the job"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Trigger reindexing of a export location"
      }
    },
    "/files/v1/exports/temporary_file_sets/{file_set_id}/storages/{storage_id}/": {
      "post": {
        "description": "\nRequired roles:\n - can_read_files\n- can_write_transfers\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_set_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Destination storage_id",
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteExportToLocalStorageSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Export queued"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Permission on storage denied"
          },
          "404": {
            "description": "File set or storage not found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Queue export job completion between local storages"
      }
    },
    "/files/v1/file_sets/{file_set_id}/files/": {
      "get": {
        "deprecated": true,
        "description": "\nRequired roles:\n - can_read_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_set_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Set to false if you don't need a URL, will speed things up",
            "in": "query",
            "name": "generate_signed_url",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesSchema"
                }
              }
            },
            "description": "Returns files from a file set"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get files from a file set"
      }
    },
    "/files/v1/file_sets/{file_set_id}/storages/{storage_id}/": {
      "post": {
        "description": "\nRequired roles:\n - can_read_files\n- can_write_transfers\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_set_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Destination storage_id",
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Enable transfer through iconik host (creates egress)",
            "in": "query",
            "name": "allow_host_transfer",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferFromStorageSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Copy job created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Permission on storage denied"
          },
          "404": {
            "description": "File set or storage not found"
          },
          "409": {
            "description": "File set with same components already exists on storage."
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Queue copying of a file set with files from one storage to another"
      }
    },
    "/files/v1/file_sets/{file_set_id}/transfers_from/{storage_id}/": {
      "delete": {
        "deprecated": true,
        "description": "\nRequired roles:\n - can_write_transfers\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_set_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "failed",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "204": {
            "description": "Transfer job was deleted"
          },
          "404": {
            "description": "Transfer job does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete file set transfer after handling it"
      }
    },
    "/files/v1/file_sets/{file_set_id}/transfers_to/{storage_id}/": {
      "delete": {
        "deprecated": true,
        "description": "\nRequired roles:\n - can_write_transfers\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_set_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "failed",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "204": {
            "description": "Transfer job was deleted"
          },
          "404": {
            "description": "Transfer job does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete file set transfer after handling it"
      }
    },
    "/files/v1/files/checksum/{checksum}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "checksum",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesSchema"
                }
              }
            },
            "description": "Returns all files that has specified checksum"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Files with this checksum don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get files by checksum"
      }
    },
    "/files/v1/files/missing/storages/{storage_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "remove_assets",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "202": {
            "description": "Files cleanup scheduled"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Permission denied"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete all missing files from storage"
      }
    },
    "/files/v1/files/storages/{storage_id}/": {
      "post": {
        "description": "\nRequired roles:\n - can_read_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "get_file_size",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileExistenceCheckSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "File exists"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "File doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Check file is on storage"
      }
    },
    "/files/v1/files/{file_id}/deletions_from/{storage_id}/": {
      "delete": {
        "deprecated": true,
        "description": "\nRequired roles:\n - is_storage_worker\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Deletion job was deleted"
          },
          "404": {
            "description": "Deletion job does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete file deletion job after handling it"
      }
    },
    "/files/v1/formats/{format_id}/storages/{storage_id}/": {
      "post": {
        "description": "\nRequired roles:\n - can_read_formats\n- can_write_transfers\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "format_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Destination storage_id",
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferFromStorageSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Copy job created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Permission on storage denied"
          },
          "404": {
            "description": "File set or storage not found"
          },
          "409": {
            "description": "File set with same components already exists on storage."
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Queue copying of a formats file sets with files from one storage to another"
      }
    },
    "/files/v1/formats/{format_name}/archive/bulk/": {
      "post": {
        "description": "\nRequired roles:\n - can_archive_formats\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "format_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkFilesetArchiveSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Archive job created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Storage not found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Queue bulk archiving of assets, collections and saved_searches"
      }
    },
    "/files/v1/formats/{format_name}/restore/bulk/": {
      "post": {
        "description": "\nRequired roles:\n - can_restore_archived_formats\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "format_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkFilesetRestoreSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Restore job created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Storage not found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Queue bulk restore of previously archived assets, collections or saved_searches"
      }
    },
    "/files/v1/shares/storages/{storage_id}/files/": {
      "get": {
        "description": "\nRequired roles:\n - can_write_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "directory_path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by name",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "204": {
            "description": "File exists"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "No files found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Check if a specific file is already on the storage for shares"
      }
    },
    "/files/v1/storages/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_storages\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - status,asc;last_scanned,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by id",
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by name",
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by method",
            "in": "query",
            "name": "method",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by status",
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by purpose",
            "in": "query",
            "name": "purpose",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by last_scanned",
            "in": "query",
            "name": "last_scanned",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by scanner_status",
            "in": "query",
            "name": "scanner_status",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by any of the above with wildcard support",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter list of id:s (comma separated)",
            "in": "query",
            "name": "ids",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoragesReadSchema"
                }
              }
            },
            "description": "Returns a list of storages"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get all storages"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_storages\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorageSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageSchema"
                }
              }
            },
            "description": "Returns a created storage entry"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new storage"
      }
    },
    "/files/v1/storages/files/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_storages\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "description": "ID and status of the job"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Trigger reindexing of all files"
      }
    },
    "/files/v1/storages/isg/latest_version/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_storages\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "version": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Returns version"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Storage does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get latest ISG version"
      }
    },
    "/files/v1/storages/matching/{purpose}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_storages\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "purpose",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "storage_id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageSchema"
                }
              }
            },
            "description": "Returns a storage"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "No matching storage exists"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a remote storage matching type"
      }
    },
    "/files/v1/storages/matching/{purpose}/method/{method}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_storages\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "purpose",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "method",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageSchema"
                }
              }
            },
            "description": "Returns a storage"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "No matching storage exists"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a remote storage matching type and method"
      }
    },
    "/files/v1/storages/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_storages\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "description": "ID and status of the job"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Trigger reindexing of all storages"
      }
    },
    "/files/v1/storages/{purpose}/default/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_storages\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "purpose",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageSchema"
                }
              }
            },
            "description": "The default storage"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Permission denied"
          },
          "404": {
            "description": "Storage does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get a purpose default storage"
      }
    },
    "/files/v1/storages/{storage_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_storages\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Storage doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular storage by id"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_storages\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageSchema"
                }
              }
            },
            "description": "Returns a storage"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Storage doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a particular storage by id"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_storages\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorageSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageSchema"
                }
              }
            },
            "description": "Returns an updated storage"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update storage"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_storages\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorageSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageSchema"
                }
              }
            },
            "description": "Returns an updated storage"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update storage"
      }
    },
    "/files/v1/storages/{storage_id}/auto_scan/": {
      "delete": {
        "description": "\nRequired roles:\n - can_scan_bucket\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Storage auto scan disabled"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Storage auto scan already disabled"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Disable cloud storage auto scan"
      },
      "get": {
        "description": "\nRequired roles:\n - can_scan_bucket\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageAutoScanSchema"
                }
              }
            },
            "description": "Storage auto scan settings"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Storage auto scan is disabled"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get cloud storage auto scan settings"
      },
      "post": {
        "description": "\nRequired roles:\n - can_scan_bucket\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorageAutoScanSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageAutoScanSchema"
                }
              }
            },
            "description": "Storage auto scan enabled"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "No matching storage exists"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Enable cloud storage auto scan"
      }
    },
    "/files/v1/storages/{storage_id}/bulk/": {
      "post": {
        "description": "\nRequired roles:\n - can_read_files\n- can_write_transfers\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Destination storage_id",
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Enable transfer through iconik host (creates egress)",
            "in": "query",
            "name": "allow_host_transfer",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkTransferToStorageSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Copy job created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Storage not found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Queue copying of files from current storage to specified one"
      }
    },
    "/files/v1/storages/{storage_id}/default/": {
      "delete": {
        "description": "\nRequired roles:\n - can_write_storages\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Removes the default flag on a storage"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_storages\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Set a storage to the default of its purpose"
      }
    },
    "/files/v1/storages/{storage_id}/deletions/": {
      "get": {
        "deprecated": true,
        "description": "\nRequired roles:\n - is_storage_worker\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "ID of a last file deletion entity on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileDeletionsSchema"
                }
              }
            },
            "description": "Returns pending deletions to be handled"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get pending deletions of files from a local storage"
      }
    },
    "/files/v1/storages/{storage_id}/deletions/{deletion_id}/": {
      "delete": {
        "deprecated": true,
        "description": "\nRequired roles:\n - is_storage_worker\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "deletion_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Deletion job was deleted"
          },
          "404": {
            "description": "Deletion job does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete file deletion job after handling it"
      }
    },
    "/files/v1/storages/{storage_id}/deletions_from/": {
      "get": {
        "description": "\nRequired roles:\n - is_storage_worker\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "ID of a last file deletion entity on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileDeletionsSchema"
                }
              }
            },
            "description": "Returns pending deletions to be handled"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get pending deletions of files from a local storage"
      }
    },
    "/files/v1/storages/{storage_id}/files/": {
      "delete": {
        "description": "\nRequired roles:\n - can_read_storages\n- can_delete_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "path",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "path_separator",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "directory_path",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "checksum",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by id",
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by name",
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by type",
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by status",
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by date_created",
            "in": "query",
            "name": "date_created",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by date_modified",
            "in": "query",
            "name": "date_modified",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesElasticSchema"
                }
              }
            },
            "description": "Returns files"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "No files found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "DELETE files (with copies in different storages) from a storage folder, or all files on a storage"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_storages\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "path",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "path_separator",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "directory_path",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "checksum",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "If true passed then uses scroll pagination instead of default one",
            "in": "query",
            "name": "scroll",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "In order to get next batch of results using scroll pagination the scroll_id is required",
            "in": "query",
            "name": "scroll_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by id",
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by name",
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by type",
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by status",
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by date_created",
            "in": "query",
            "name": "date_created",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by date_modified",
            "in": "query",
            "name": "date_modified",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesElasticSchema"
                }
              }
            },
            "description": "Returns files"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "No files found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get files in a storage folder, or all files on a storage"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileBaseSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileBaseSchema"
                }
              }
            },
            "description": "Returns updated file"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Asset access denied"
          },
          "404": {
            "description": "No file found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update file by storage ID and path"
      },
      "post": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileBaseSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileBaseSchema"
                }
              }
            },
            "description": "Returns a file that was created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create file without associating it to an asset"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileBaseSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileBaseSchema"
                }
              }
            },
            "description": "Returns updated file"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Asset access denied"
          },
          "404": {
            "description": "No file found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update file by storage ID and path"
      }
    },
    "/files/v1/storages/{storage_id}/files/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_storages\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "description": "ID and status of the job"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Trigger reindexing of all files"
      }
    },
    "/files/v1/storages/{storage_id}/files/{file_id}/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_storages\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "description": "ID and status of the job"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Trigger reindexing for a file on a storage"
      }
    },
    "/files/v1/storages/{storage_id}/gateway/events/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "last_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IconikStorageGatewayEventsSchema"
                }
              }
            },
            "description": "Returns a gateway storage events"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "No matching storage exists"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get pending storage gateway events"
      },
      "post": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IconikStorageGatewayEventSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IconikStorageGatewayEventSchema"
                }
              }
            },
            "description": "Returns a created gateway storage event"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "No matching storage exists"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create new storage gateway event"
      }
    },
    "/files/v1/storages/{storage_id}/gateway/events/purge/": {
      "post": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IconikStorageGatewayEventsPurgeSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete storage gateway events in bulk"
      }
    },
    "/files/v1/storages/{storage_id}/gateway/events/{event_id}/": {
      "delete": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "event_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete storage gateway event"
      }
    },
    "/files/v1/storages/{storage_id}/gateway/report/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayReportSchema"
                }
              }
            },
            "description": "Returns storage gateway report"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "No matching storage exists"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get storage gateway report"
      },
      "put": {
        "description": "\nRequired roles:\n - is_storage_worker\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GatewayReportSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns empty dict"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "No matching storage exists"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create storage gateway report"
      }
    },
    "/files/v1/storages/{storage_id}/gateway/status/": {
      "put": {
        "description": "\nRequired roles:\n - is_storage_worker\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GatewayStatusSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns empty dict"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "No matching storage exists"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update storage gateway status"
      }
    },
    "/files/v1/storages/{storage_id}/logs/": {
      "post": {
        "description": "\nRequired roles:\n - is_storage_worker\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "filename",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "path": {
                      "type": "string"
                    },
                    "upload_url": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Returns upload_url and path for storage logs"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Storage does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Upload storage logs"
      }
    },
    "/files/v1/storages/{storage_id}/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_storages\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "description": "ID and status of the job"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Trigger reindexing of a storage"
      }
    },
    "/files/v1/storages/{storage_id}/scan/": {
      "post": {
        "description": "\nRequired roles:\n - can_scan_bucket\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorageScanSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Scan started"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Requests to scan a storage"
      }
    },
    "/files/v1/storages/{storage_id}/search_document/": {
      "put": {
        "deprecated": true,
        "description": "\nRequired roles:\n - can_reindex_storages\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorageSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Storage document updated"
          },
          "400": {
            "description": "No document supplied"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Storage does not exist in search index"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update search document for storage"
      }
    },
    "/files/v1/storages/{storage_id}/temporary_files/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_storages\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 100,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "ID of a last file on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilesSchema"
                }
              }
            },
            "description": "Returns exported files"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get storage's exported files"
      }
    },
    "/files/v1/storages/{storage_id}/transcoders/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_storages\n- can_read_transcoders\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "ID of a last transcoder on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranscodersByStorageSchema"
                }
              }
            },
            "description": "Returns a list of transcoders"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get all transcoders for a particular storage"
      }
    },
    "/files/v1/storages/{storage_id}/transcoders/{transcoder_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_write_transcoders\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "transcoder_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Returns a created transcoder entry"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Storage or transcoder does not exists"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a transcoder from storage"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_transcoders\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "transcoder_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranscoderByStorageReadSchema"
                }
              }
            },
            "description": "Returns a created transcoder entry"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Storage or transcoder does not exists"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new transcoder for storage"
      }
    },
    "/files/v1/storages/{storage_id}/transfers_from/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_transfers\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "ID of a last transfer on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransfersFromStorageSchema"
                }
              }
            },
            "description": "Returns pending transfers to be handled"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get pending transfers of file sets from a local storage"
      }
    },
    "/files/v1/storages/{storage_id}/transfers_from/{transfer_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_write_transfers\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "transfer_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "failed",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "completed",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "204": {
            "description": "Transfer job was deleted"
          },
          "404": {
            "description": "Transfer job does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete file set transfer after handling it"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_transfers\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "transfer_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferFromStorageReadSchema"
                }
              }
            },
            "description": "Returns a file set transfer from local storage"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Transfer does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get file set transfer record"
      }
    },
    "/files/v1/storages/{storage_id}/transfers_to/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_transfers\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "ID of a last transfer on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransfersToStorageSchema"
                }
              }
            },
            "description": "Returns pending transfers to be handled"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get pending transfers of file sets to a local storage"
      }
    },
    "/files/v1/storages/{storage_id}/transfers_to/{transfer_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_write_transfers\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "transfer_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "failed",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "completed",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "204": {
            "description": "Transfer job was deleted"
          },
          "404": {
            "description": "Transfer job does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete file set transfer after handling it"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_transfers\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "transfer_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferToStorageReadSchema"
                }
              }
            },
            "description": "Returns a file set transfer to local storage"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Transfer does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get file set transfer record"
      }
    },
    "/files/v1/storages/{storage_id}/verifications/access/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_storages\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "access_check": {
                      "example": false,
                      "type": "boolean"
                    },
                    "error_message": {
                      "example": "The AWS Access Key Id you provided does not exist in our records.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Returns a document describing storage access"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Storage does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Verify storage access"
      }
    },
    "/files/v1/storages/{storage_id}/verifications/permissions/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_storages\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "cors": true,
                    "delete_access": true,
                    "read_access": true,
                    "write_access": false,
                    "write_access_error": "ERROR: no access"
                  },
                  "properties": {
                    "cors": {
                      "type": "boolean"
                    },
                    "cors_error": {
                      "type": "string"
                    },
                    "delete_access": {
                      "type": "boolean"
                    },
                    "delete_access_error": {
                      "type": "string"
                    },
                    "error_message": {
                      "type": "string"
                    },
                    "read_access": {
                      "type": "boolean"
                    },
                    "read_access_error": {
                      "type": "string"
                    },
                    "write_access": {
                      "type": "boolean"
                    },
                    "write_access_error": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Returns a document describing storage permissions"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Storage does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Verify storage permissions"
      }
    },
    "/files/v1/storages/{storage_id}/{object_type}/files/": {
      "delete": {
        "description": "\nRequired roles:\n - can_read_storages\n- can_delete_files\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorageFilesDeleteBulkSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Returns the updated objects"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "501": {
            "description": "Invalid object type"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete files from a particular storage from multiple objects"
      }
    },
    "/files/v1/transcoders/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_transcoders\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Search query",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter list of id:s (comma separated)",
            "in": "query",
            "name": "ids",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranscodersSchema"
                }
              }
            },
            "description": "Returns a list of transcoders"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get all transcoders"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_transcoders\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TranscoderSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranscoderSchema"
                }
              }
            },
            "description": "Returns a created transcoder entry"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new transcoder"
      }
    },
    "/files/v1/transcoders/{transcoder_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_transcoders\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "transcoder_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Transcoder doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular transcoder by id"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_transcoders\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "transcoder_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranscoderSchema"
                }
              }
            },
            "description": "Returns a transcoder"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Transcoder doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a particular transcoder by id"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_transcoders\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "transcoder_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TranscoderSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranscoderSchema"
                }
              }
            },
            "description": "Returns an updated transcoder"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update transcoder"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_transcoders\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "transcoder_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TranscoderSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranscoderSchema"
                }
              }
            },
            "description": "Returns an updated transcoder"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update transcoder"
      }
    },
    "/files/v1/transcoders/{transcoder_id}/logs/": {
      "post": {
        "description": "\nRequired roles:\n - is_storage_worker\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "transcoder_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "filename",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "path": {
                      "type": "string"
                    },
                    "upload_url": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Returns upload_url and path for transcoder logs"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Storage does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Upload transcoder logs"
      }
    },
    "/files/v1/transcoders/{transcoder_id}/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_transcoders\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "transcoder_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "description": "ID and status of the job"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Trigger reindexing of a transcoder"
      }
    },
    "/files/v1/transcoders/{transcoder_id}/storages/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_transcoders\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "transcoder_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "ID of a last storage on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoragesReadSchema"
                }
              }
            },
            "description": "Returns a list of storages"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get storages linked to a transcoder"
      }
    },
    "/files/v1/transfers/{transfer_id}/urls/": {
      "post": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "transfer_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferSignedURLSchema"
                }
              }
            },
            "description": "Generated signed url"
          },
          "400": {
            "description": "Failed to generate url"
          },
          "403": {
            "description": "User not authorized to get url for job"
          },
          "404": {
            "description": "Transfer job does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Generates a url for direct file downloads (for IGSs)"
      }
    },
    "/files/v1/transfers/{transfer_id}/urls/verify/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "transfer_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "signature",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "Verified signed url"
          },
          "400": {
            "description": "Not a valid signed url"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Verifies the signature of a url"
      }
    },
    "/jobs/v1/jobs/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobsBulkDeleteSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete multiple jobs by ids list"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "If facets should be returned",
            "in": "query",
            "name": "facets",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "List of aggregation keys if facets is true",
            "in": "query",
            "name": "aggregations",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "format": "int32",
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "If true passed then uses scroll pagination instead of default one",
            "in": "query",
            "name": "scroll",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "In order to get next batch of results using scroll pagination the scroll_id is required",
            "in": "query",
            "name": "scroll_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by type",
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by object_type",
            "in": "query",
            "name": "object_type",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by parent_id",
            "in": "query",
            "name": "parent_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by object_id",
            "in": "query",
            "name": "object_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by status",
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by created_by",
            "in": "query",
            "name": "created_by",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by date_created. Can either be a single ISO8601 timestamp or two timestamps separated by a semicolon `;`. The timestamp can also be expressed as number of milliseconds since Jan 1 1970 (epoch). Either timestamp can also be replaced with an asterisk `*` to make the query open ended.\nFor example: 2018-01-01T10:00:00Z;2018-01-01T15:00:00Z",
            "in": "query",
            "name": "date_created",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by date_modified Can either be a single ISO8601 timestamp or two timestamps separated by a semicolon `;`. The timestamp can also be expressed as number of milliseconds since Jan 1 1970 (epoch). Either timestamp can also be replaced with an asterisk `*` to make the query open ended.\nFor example: *;1544450400",
            "in": "query",
            "name": "date_modified",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by any of the above with wildcard support",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter list of id:s (comma separated)",
            "in": "query",
            "name": "ids",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobsSchema"
                }
              }
            },
            "description": "Returns a list of jobs"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get list of jobs"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobSchema"
                }
              }
            },
            "description": "Returns a created job"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new job"
      }
    },
    "/jobs/v1/jobs/priority/": {
      "put": {
        "description": "\nRequired roles:\n - can_write_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobsPrioritySchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "403": {
            "description": "Forbidden"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Change jobs priority"
      }
    },
    "/jobs/v1/jobs/state/": {
      "put": {
        "description": "\nRequired roles:\n - can_write_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobsStateSchema1"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Change jobs state"
      }
    },
    "/jobs/v1/jobs/{job_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "job_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Job does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular job by id"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "job_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobSchema"
                }
              }
            },
            "description": "Returns a job"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Job does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a particular job by id"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "job_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobSchema"
                }
              }
            },
            "description": "Returns an updated job"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update job"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "job_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobSchema"
                }
              }
            },
            "description": "Returns an updated job"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update job"
      }
    },
    "/jobs/v1/jobs/{job_id}/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "job_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReindexJobSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "202": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Reindex job"
      }
    },
    "/jobs/v1/jobs/{job_id}/steps/": {
      "patch": {
        "description": "\nRequired roles:\n - can_write_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "job_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobStepsUpdateSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobSchema"
                }
              }
            },
            "description": "Returns an updated job"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update multiple job steps"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "job_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobStepsUpdateSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobSchema"
                }
              }
            },
            "description": "Returns an updated job"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update multiple job steps"
      }
    },
    "/jobs/v1/jobs/{job_id}/steps/{job_step_id}/": {
      "patch": {
        "description": "\nRequired roles:\n - can_write_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "job_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "job_step_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobStepSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobSchema"
                }
              }
            },
            "description": "Returns an updated job"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update job step"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "job_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "job_step_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobStepSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobSchema"
                }
              }
            },
            "description": "Returns an updated job"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update job step"
      }
    },
    "/metadata/v1/assets/{asset_id}/versions/{version_id}/views/{view_id}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_metadata_values\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "view_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataValuesSchema"
                }
              }
            },
            "description": "Returns a metadata values for object and view if it exists"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Metadata values for this object and view doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get object metadata by object type, object ID, version ID and view ID"
      }
    },
    "/metadata/v1/assets/{asset_id}/{object_type}/{object_id}/views/{view_id}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_metadata_values\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "view_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataValuesSchema"
                }
              }
            },
            "description": "Returns a metadata values for object and view if it exists"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Metadata values for this object and view doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get asset metadata by object type, object ID and view ID"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_metadata_values\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "view_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataValuesSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataValuesSchema"
                }
              }
            },
            "description": "Returns a created metadata values for object and view"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Metadata view doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Edit view metadata values for sub-objects of an asset (Such as segments)"
      }
    },
    "/metadata/v1/assets/{object_type}/{object_id}/versions/{version_id}/views/{view_id}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_metadata_values\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "view_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataValuesSchema"
                }
              }
            },
            "description": "Returns a metadata values for object and view if it exists"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Metadata values for this object and view doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get asset metadata by object type, object ID, version ID and view ID"
      }
    },
    "/metadata/v1/fields/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_metadata_fields\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page (Default 500)",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "If your request returns per_page entries, send the last value of \"name\" to fetch next page",
            "in": "query",
            "name": "last_field_name",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames For example - first_name,last_name,salary",
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataFieldsSchema"
                }
              }
            },
            "description": "Returns a list of metadata entities"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "List the fields defined in the system"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_metadata_fields\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataFieldCreateSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataFieldSchema"
                }
              }
            },
            "description": "Returns a created field"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new field"
      }
    },
    "/metadata/v1/fields/{field_name}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_metadata_fields\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "field_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Metadata field doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular field by name"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_metadata_fields\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "field_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataFieldSchema"
                }
              }
            },
            "description": "Returns a field"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Metadata field doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a particular field by name"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_metadata_fields\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "field_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataFieldSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataFieldSchema"
                }
              }
            },
            "description": "Returns an updated field"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Metadata field doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update field by name"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_metadata_fields\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "field_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataFieldSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataFieldSchema"
                }
              }
            },
            "description": "Returns an updated field"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Metadata field doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update field by name"
      }
    },
    "/metadata/v1/mapping/fields/": {
      "post": {
        "description": "\nRequired roles:\n - can_read_metadata_fields\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataFieldMappingSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataFieldMappingSchema"
                }
              }
            },
            "description": "Returns a created field mapping"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new metadata field mapping"
      }
    },
    "/metadata/v1/mapping/fields/{field_name}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_metadata_fields\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "field_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataFieldMappingSchema"
                }
              }
            },
            "description": "Returns the metadata field mapping"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get the metadata field mapping"
      }
    },
    "/metadata/v1/mapping/options/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_metadata_fields\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataFieldMappingOptionsSchema"
                }
              }
            },
            "description": "Returns a list of metadata field mapping options"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "List the metadata field mapping options"
      }
    },
    "/metadata/v1/user/fields/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_metadata_fields\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataFieldsSchema"
                }
              }
            },
            "description": "Returns a list of metadata fields"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "List the fields that can be accessed by a user"
      }
    },
    "/metadata/v1/views/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_metadata_views\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataViewsSchema"
                }
              }
            },
            "description": "Returns a list of metadata views"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "List the views defined in the system"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_metadata_views\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataViewInputSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataViewSchema"
                }
              }
            },
            "description": "Returns a created view"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new view"
      }
    },
    "/metadata/v1/views/{view_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_metadata_views\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "view_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Metadata view doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular view by id"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_metadata_views\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "view_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "merge_fields",
            "required": false,
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataViewSchema"
                }
              }
            },
            "description": "Returns a view"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Metadata view doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a particular view by id"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_metadata_views\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "view_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataViewInputSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataViewSchema"
                }
              }
            },
            "description": "Returns an updated view"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Metadata view doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update view"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_metadata_views\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "view_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataViewInputSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataViewSchema"
                }
              }
            },
            "description": "Returns an updated view"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Metadata view doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update view"
      }
    },
    "/metadata/v1/{object_type}/categories/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_metadata_categories\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataCategoriesSchema"
                }
              }
            },
            "description": "Returns metadata categories for an object"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get metadata categories"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_metadata_categories\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataCategorySchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataCategorySchema"
                }
              }
            },
            "description": "Returns a metadata category"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "409": {
            "description": "A category with the same name and object_type already exists"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Add a metadata category for an object type"
      }
    },
    "/metadata/v1/{object_type}/categories/{name}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_metadata_categories\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Metadata category by object type and category name doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete metadata category by object type and category name"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_metadata_categories\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataCategorySchema"
                }
              }
            },
            "description": "Returns metadata category by object type and category name"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Metadata category by object type and category name doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get metadata category by object type and category name"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_metadata_categories\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataCategorySchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataCategorySchema"
                }
              }
            },
            "description": "Returns a metadata category"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Metadata category for this object type doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Edit metadata category for an object type"
      }
    },
    "/metadata/v1/{object_type}/categories/{name}/views/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_metadata_categories\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "ext_options",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "writable_only",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataCategorySchema"
                }
              }
            },
            "description": "Returns metadata views with field for object type and category"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Metadata views with field for object type and category doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get metadata views with field for object type and category"
      }
    },
    "/metadata/v1/{object_type}/content/views/{view_id}/": {
      "put": {
        "description": "\nRequired roles:\n - can_write_metadata_values\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "view_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionMetadataValuesBatchSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "202": {
            "description": "No body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Metadata view doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Edit view metadata values for collection or saved search content."
      }
    },
    "/metadata/v1/{object_type}/views/{view_id}/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_metadata_values\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "view_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMetadataValuesBatchSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Batch metadata update was successfully scheduled"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Metadata view doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Add view metadata values for multiple objects (Assets, Collections or Segments)"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_metadata_values\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "view_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataValuesBatchSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Batch metadata update was successfully scheduled"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Metadata view doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Edit view metadata values for multiple objects (Assets, Collections or Segments)"
      }
    },
    "/metadata/v1/{object_type}/{object_id}/": {
      "get": {
        "description": "This endpoint is available only for admins",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Filter out metadata field values, for deleted fields",
            "in": "query",
            "name": "include_values_for_deleted_fields",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataValuesSchema"
                }
              }
            },
            "description": "Returns a metadata values for object and view if it exists"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Metadata values for this object don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get object metadata by object type and object ID"
      },
      "put": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataValuesSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataValuesSchema"
                }
              }
            },
            "description": "Returns a created metadata values for object and view"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Metadata view doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Edit metadata values directly without a view. Admin access required."
      }
    },
    "/metadata/v1/{object_type}/{object_id}/views/{view_id}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_metadata_values\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "view_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataValuesSchema"
                }
              }
            },
            "description": "Returns a metadata values for object and view if it exists"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Metadata values for this object and view doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get object metadata by object type, object ID and view ID"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_metadata_values\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "view_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataValuesSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataValuesSchema"
                }
              }
            },
            "description": "Returns a created metadata values for object and view"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Metadata view doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Edit view metadata values for a single object"
      }
    },
    "/notifications/v1/webhooks/": {
      "get": {
        "summary": "Get all webhooks",
        "description": "\nRequired roles:\n - can_read_webhooks\n",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhooksSchema"
                }
              }
            },
            "description": "Returns a list of webhooks"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  },
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Auth-Token",
            "in": "header",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "App-ID",
            "in": "header",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "summary": "Create a new webhook",
        "description": "\nRequired roles:\n - can_write_webhooks\n",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSchema"
                }
              }
            },
            "description": "Returns a created webhook"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  },
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Auth-Token",
            "in": "header",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "App-ID",
            "in": "header",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookCreateSchema"
              }
            }
          }
        }
      }
    },
    "/notifications/v1/webhooks/{webhook_id}/": {
      "get": {
        "summary": "Get a webhook definition",
        "description": "\nRequired roles:\n - can_read_webhooks\n",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSchema"
                }
              }
            },
            "description": "Returns a webhook by it's ID"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  },
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Auth-Token",
            "in": "header",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "App-ID",
            "in": "header",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhook_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "put": {
        "summary": "Update a webhook",
        "description": "\nRequired roles:\n - can_write_webhooks\n",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSchema"
                }
              }
            },
            "description": "Returns the updated webhook"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  },
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Auth-Token",
            "in": "header",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "App-ID",
            "in": "header",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhook_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookCreateSchema"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a webhook",
        "description": "\nRequired roles:\n - can_delete_webhooks\n",
        "responses": {
          "204": {
            "description": "Returns an empty body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "description": "Error response",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  },
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Auth-Token",
            "in": "header",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "App-ID",
            "in": "header",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "webhook_id",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/search/v1/discovery/default/": {
      "put": {
        "description": "\nRequired roles:\n - can_write_discovery_entities\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscoveryViewSettingsSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscoveryViewSettingsSchema"
                }
              }
            },
            "description": "Returns updated default discovery view"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update default discovery view"
      }
    },
    "/search/v1/discovery/default/entities/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_discovery_entities\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscoveryEntitiesSchema"
                }
              }
            },
            "description": "Returns the configured discovery entities"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns the discovery entities that are used to build the discovery view."
      },
      "post": {
        "description": "<br/>This creates an entry for the discovery view to show collections and saved searches.<br/>Object Type should be one of COLLECTION, SAVED_SEARCH, ASSET, RECOMMENDATION or TRENDING<br/>Object ID is only needed in the case of COLLECTION, SAVED_SEARCH or ASSET<br/>metadata is for user defined extra data.<br/><br/>This creates an entry for the discovery view to show collections and saved searches.<br/>Object Type should be one of COLLECTION, SAVED_SEARCH, ASSET, RECOMMENDATION or TRENDING<br/>Object ID is only needed in the case of COLLECTION, SAVED_SEARCH or ASSET<br/>metadata is for user defined extra data.<br/>\nRequired roles:\n - can_write_discovery_entities\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscoveryEntitySchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscoveryEntitySchema"
                }
              }
            },
            "description": "Returns the configured discovery entities"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Adds a new discovery entity."
      }
    },
    "/search/v1/discovery/default/entities/admin/": {
      "get": {
        "description": "\nRequired roles:\n - can_write_discovery_entities\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscoveryEntitiesSchema"
                }
              }
            },
            "description": "Returns the configured discovery entities"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns the discovery entities that are used to build the discovery view."
      }
    },
    "/search/v1/discovery/default/entities/{entity_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_discovery_entities\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "entity_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Search History does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a discovery entity by id"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_discovery_entities\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "entity_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscoveryEntitySchema"
                }
              }
            },
            "description": "Returns Discovery entity"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns discovery entity"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_discovery_entities\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "entity_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscoveryEntitySchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns new entity"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Search History does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update a discovery entity by id"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_discovery_entities\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "entity_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscoveryEntitySchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns new entity"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Search History does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update a discovery entity by id"
      }
    },
    "/search/v1/discovery/entities/{object_type}/{object_id}/": {
      "patch": {
        "description": "\nRequired roles:\n - can_write_discovery_entities\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscoveryEntitySchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns updated entity"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Discovery entity does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update a discovery entity by object's type and id"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_discovery_entities\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscoveryEntitySchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns updated entity"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Discovery entity does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update a discovery entity by object's type and id"
      }
    },
    "/search/v1/search/": {
      "post": {
        "description": "\nRequired roles:\n - can_search\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of documents for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "format": "int32",
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "deprecated": true,
            "description": "If true passed then uses scroll pagination instead of default one (Deprecated, user search_after body parameter instead)",
            "in": "query",
            "name": "scroll",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "deprecated": true,
            "description": "In order to get next batch of results using scroll pagination the scroll_id is required",
            "in": "query",
            "name": "scroll_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Set to false if you don't need a URL, will speed things up",
            "in": "query",
            "name": "generate_signed_url",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "Set to true if you also want the file download URLs generated",
            "in": "query",
            "name": "generate_signed_download_url",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "Set to false if you don't want to save the search to the history",
            "in": "query",
            "name": "save_search_history",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchCriteriaSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchDocumentsSchema"
                }
              }
            },
            "description": "Returns the result of search"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Search"
      }
    },
    "/search/v1/search/history/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_search_history\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchHistoryListSchema"
                }
              }
            },
            "description": "Returns list of last 25 searches"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns the current search history"
      }
    },
    "/search/v1/search/history/{search_history_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_search_history\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "search_history_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Search History does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a search from history by its id"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_search_history\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "search_history_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchDocumentsSchema"
                }
              }
            },
            "description": "Returns results of search history"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns results of search history"
      }
    },
    "/search/v1/search/saved/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_saved_searches\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "format": "int32",
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "If true passed then uses scroll pagination instead of default one",
            "in": "query",
            "name": "scroll",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "description": "In order to get next batch of results using scroll pagination the scroll_id is required",
            "in": "query",
            "name": "scroll_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - name,asc;group_id,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Group ID",
            "in": "query",
            "name": "group_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter list of id:s (comma separated)",
            "in": "query",
            "name": "ids",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Search using query",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavedSearchesSchema"
                }
              }
            },
            "description": "Returns results of saved search"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns list of saved searches"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_saved_searches\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SavedSearchSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavedSearchSchema"
                }
              }
            },
            "description": "Returns the result of search"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Search, save and return result of this search"
      }
    },
    "/search/v1/search/saved/group/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_saved_search_groups\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SavedSearchGroupSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavedSearchGroupSchema"
                }
              }
            },
            "description": "Returns the result of creation of search group instance"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create and return saved search group data"
      }
    },
    "/search/v1/search/saved/group/{group_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_saved_search_groups\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Saved search does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a saved search group by it's id"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_saved_searches\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavedSearchGroupSchema"
                }
              }
            },
            "description": "Returns saved search group info"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Saved search does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns saved search group data"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_saved_search_groups\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SavedSearchGroupSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavedSearchGroupSchema"
                }
              }
            },
            "description": "Returns the result of updating group"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Saved search group does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update and return saved search group data"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_saved_search_groups\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SavedSearchGroupSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavedSearchGroupSchema"
                }
              }
            },
            "description": "Returns the result of updating group"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Saved search group does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update and return saved search group data"
      }
    },
    "/search/v1/search/saved/group/{group_id}/search/{search_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_write_saved_searches\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "search_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Saved search does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete saved search from search group"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_saved_searches\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "search_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Saved search does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Adds saved search to group"
      }
    },
    "/search/v1/search/saved/groups/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_saved_searches\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "format": "int32",
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of IDs. for example - 3c2db7d8-1f39-46e3-8c77-992101e5e616,683a2c63-63a0-42b0-aed8-5b62dedba840",
            "in": "query",
            "name": "ids",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavedSearchGroupsSchema"
                }
              }
            },
            "description": "Returns a list of groups info"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Page number does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns paginated list of search groups"
      }
    },
    "/search/v1/search/saved/groups/{group_id}/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_saved_searches\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a job info"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Group does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Reindex a particular saved search group by id"
      }
    },
    "/search/v1/search/saved/{search_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_saved_searches\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "search_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Saved search does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a saved search by its id"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_saved_searches\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "search_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "format": "int32",
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Set to false if you only want the search definition",
            "in": "query",
            "name": "include_results",
            "schema": {
              "default": true,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SavedSearchResultsSchema"
                }
              }
            },
            "description": "Returns results of saved search"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Saved search does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns results of saved search"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_saved_searches\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "search_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SavedSearchSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchDocumentsSchema"
                }
              }
            },
            "description": "Returns the result of search"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Saved search does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Search and save this search"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_saved_searches\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "search_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SavedSearchSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchDocumentsSchema"
                }
              }
            },
            "description": "Returns the result of search"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Saved search does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Search and save this search"
      }
    },
    "/search/v1/search/saved/{search_id}/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_saved_searches\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "search_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReindexSavedSearchSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns a job"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "User does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Reindex a particular saved search by id"
      }
    },
    "/search/v1/search/suggest/": {
      "post": {
        "description": "\nRequired roles:\n - can_search\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchSuggestSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSuggestsResponseSchema"
                }
              }
            },
            "description": "Returns search suggestions for a particular query."
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns search suggestions for a particular query."
      }
    },
    "/settings/v1/cors_hosts/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_cors_hosts\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CORSHostsSchema"
                }
              }
            },
            "description": "Returns a system settings"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Realm does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "List of CORS hosts"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_cors_hosts\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CORSHostSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CORSHostSchema"
                }
              }
            },
            "description": "Returns a created CORS host"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new CORS host"
      }
    },
    "/settings/v1/cors_hosts/{cors_host_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_cors_hosts\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "cors_host_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular CORS host by id"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_cors_hosts\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "cors_host_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CORSHostSchema"
                }
              }
            },
            "description": "Returns a CORS host"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "CORS host does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a particular CORS host by id"
      }
    },
    "/settings/v1/group/{group_id}/": {
      "delete": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete group settings"
      },
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSettingPublicSchema"
                }
              }
            },
            "description": "Returns a group settings"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Realm does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Group settings"
      },
      "patch": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupSettingPublicSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSettingPublicSchema"
                }
              }
            },
            "description": "Returns changed group settings"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Change group settings"
      },
      "put": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupSettingPublicSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSettingPublicSchema"
                }
              }
            },
            "description": "Returns changed group settings"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Change group settings"
      }
    },
    "/settings/v1/kubernetes/{realm}/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "realm",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "format": "int32",
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KubernetesSettingSchema"
                }
              }
            },
            "description": "Returns a list of settings"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Realm does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "List of settings"
      },
      "patch": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "realm",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KubernetesSettingSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KubernetesSettingSchema"
                }
              }
            },
            "description": "Returns changed settings"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Change settings"
      }
    },
    "/settings/v1/kubernetes/{realm}/{setting_name}/": {
      "delete": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "realm",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "setting_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular setting by name"
      },
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "realm",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "setting_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KubernetesSettingSchema"
                }
              }
            },
            "description": "Returns value for the setting"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns value for the setting"
      }
    },
    "/settings/v1/merged/current/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "ignore_logo_url",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergedSettingsSchema"
                }
              }
            },
            "description": "Returns a merged settings"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Realm does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get merged settings for current user"
      }
    },
    "/settings/v1/merged/{user_id}/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "ignore_logo_url",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergedSettingsSchema"
                }
              }
            },
            "description": "Returns a merged settings"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Realm does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get merged settings for a specific user"
      }
    },
    "/settings/v1/system/current/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "ignore_logo_url",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemSettingPublicSchema"
                }
              }
            },
            "description": "Returns a system settings"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Realm does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "System settings"
      },
      "patch": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemSettingPublicSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemSettingPublicSchema"
                }
              }
            },
            "description": "Returns changed system settings"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Change system settings"
      },
      "put": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemSettingPublicSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemSettingPublicSchema"
                }
              }
            },
            "description": "Returns changed system settings"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Change system settings"
      }
    },
    "/settings/v1/system/{system_domain_id}/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "system_domain_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "ignore_logo_url",
            "schema": {
              "default": false,
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemSettingPublicSchema"
                }
              }
            },
            "description": "Returns a system settings"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Realm does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "System settings"
      },
      "patch": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "system_domain_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemSettingPublicSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemSettingPublicSchema"
                }
              }
            },
            "description": "Returns changed system settings"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Change system settings"
      },
      "put": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "system_domain_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemSettingPublicSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemSettingPublicSchema"
                }
              }
            },
            "description": "Returns changed system settings"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Change system settings"
      }
    },
    "/settings/v1/user/attributes/": {
      "delete": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSettingRemoveAttributesSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns changed user settings"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Remove attributes from user settings"
      }
    },
    "/settings/v1/user/{user_id}/": {
      "delete": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete user settings"
      },
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSettingSchema"
                }
              }
            },
            "description": "Returns a user settings"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Realm does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "User settings"
      },
      "patch": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSettingSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSettingSchema"
                }
              }
            },
            "description": "Returns changed user settings"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Change user settings"
      },
      "put": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSettingSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSettingSchema"
                }
              }
            },
            "description": "Returns changed user settings"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Change user settings"
      }
    },
    "/stats/v1/assets/": {
      "post": {
        "description": "<br/>system_domain_id will be automatically added when<br/>posting to this end point.",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetUsageSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetUsageSchema"
                }
              }
            },
            "description": "Usage entered"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Sets asset usage."
      }
    },
    "/stats/v1/assets/by/{period}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_stats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Period of stats (month or day)",
            "in": "path",
            "name": "period",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Filter by from_date",
            "in": "query",
            "name": "from_date",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by to_date",
            "in": "query",
            "name": "to_date",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetUsageSchema"
                }
              }
            },
            "description": "Returns asset usage"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns all asset usage"
      }
    },
    "/stats/v1/billing/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_stats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Filter by from_date",
            "in": "query",
            "name": "from_date",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by from_date",
            "in": "query",
            "name": "to_date",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 100,
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "ID of a last file on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingsSchema"
                }
              }
            },
            "description": "Returns billing data"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns billing info"
      },
      "post": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingSchema"
                }
              }
            },
            "description": "Usage entered"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Updates Billing (Requires super admin access)."
      }
    },
    "/stats/v1/billing/charges/{charge_id}/receipt_url/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_billing\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "charge_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingReceiptSchema"
                }
              }
            },
            "description": "Billing receipts"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns billing receipt"
      }
    },
    "/stats/v1/billing/credits/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_billing\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingCreditsSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingCreditsSchema"
                }
              }
            },
            "description": "Credits entered"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Add credits to an account"
      }
    },
    "/stats/v1/billing/credits/price/": {
      "get": {
        "description": "\nRequired roles:\n - can_write_billing\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "credits",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditsSchema"
                }
              }
            },
            "description": "Credits entered"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Checks the total price that needs to be paid including VAT if it's needed"
      }
    },
    "/stats/v1/billing/credits/verify/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_billing\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingCreditsVerifySchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingCreditsVerifySchema"
                }
              }
            },
            "description": "Credits entered"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Verify status of add credits to an account"
      }
    },
    "/stats/v1/billing/customer/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_billing\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingSchema"
                }
              }
            },
            "description": "Usage entered"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns billing customer"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_billing\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingCustomerSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingCustomerSchema"
                }
              }
            },
            "description": "Usage entered"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Updates billing customer"
      }
    },
    "/stats/v1/billing/customer/card/": {
      "delete": {
        "description": "\nRequired roles:\n - can_write_billing\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "Card deleted"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Creates billing customer card"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_billing\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingCustomerCardSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingCustomerCardSchema"
                }
              }
            },
            "description": "Usage entered"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Creates billing customer card"
      }
    },
    "/stats/v1/billing/invoices/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_billing\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "starting_after",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "Billing invoices"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns billing invoices"
      }
    },
    "/stats/v1/billing/price_lists/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricesSchema"
                }
              }
            },
            "description": "Prices"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get All Price Lists"
      },
      "put": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PriceSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceSchema"
                }
              }
            },
            "description": "Prices"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Creates or updates a Price List"
      }
    },
    "/stats/v1/billing/price_lists/{name}/{currency}/": {
      "delete": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "currency",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "No body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a Price list"
      },
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "currency",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceSchema"
                }
              }
            },
            "description": "Prices"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get a Price List"
      }
    },
    "/stats/v1/billing/recipients/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_billing\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingRecipientsSchema"
                }
              }
            },
            "description": "Email recipients"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Updates Billing Recipients"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_billing\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingRecipientsSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingRecipientsSchema"
                }
              }
            },
            "description": "Email recipients"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Updates Billing Recipients"
      }
    },
    "/stats/v1/billing/settings/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_billing\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingSettingsSchema"
                }
              }
            },
            "description": "Email recipients"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Updates Billing Settings"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_billing\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingSettingsSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingSettingsSchema"
                }
              }
            },
            "description": "Email recipients"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Updates Billing Settings"
      }
    },
    "/stats/v1/billing/status/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_billing\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingStatsSchema"
                }
              }
            },
            "description": "Billing status"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns billing status"
      }
    },
    "/stats/v1/billing/{system_domain_id}/{billing_id}/": {
      "delete": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "system_domain_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "billing_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Usage deleted"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete billing record (Requires super admin access)."
      }
    },
    "/stats/v1/collections/by/{period}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_stats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Period of stats (month or day)",
            "in": "path",
            "name": "period",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Filter by from_date",
            "in": "query",
            "name": "from_date",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by to_date",
            "in": "query",
            "name": "to_date",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionUsageSchema"
                }
              }
            },
            "description": "Returns Collection usage"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns all collection usage"
      }
    },
    "/stats/v1/id/{object_id}/info/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Object ID",
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns asset usage"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Internal endpoint to convert ID to system domain"
      }
    },
    "/stats/v1/ordway/billing/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_stats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Filter by from_date",
            "in": "query",
            "name": "from_date",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by from_date",
            "in": "query",
            "name": "to_date",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingsSchema"
                }
              }
            },
            "description": "Returns billing data"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns billing info"
      }
    },
    "/stats/v1/ordway/billing/customer/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_billing\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingSchema"
                }
              }
            },
            "description": "Usage entered"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns billing customer"
      }
    },
    "/stats/v1/ordway/billing/invoices/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_billing\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "Billing invoices"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns billing invoices"
      }
    },
    "/stats/v1/storage/access/by/{period}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_stats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Period of stats (month or day)",
            "in": "path",
            "name": "period",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Filter by from_date",
            "in": "query",
            "name": "from_date",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by to_date",
            "in": "query",
            "name": "to_date",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageAccessesSchema"
                }
              }
            },
            "description": "Returns a object for storage access"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns storage_access for all storages"
      }
    },
    "/stats/v1/storage/usage/by/{period}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_stats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Period of stats (month or day)",
            "in": "path",
            "name": "period",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Filter by from_date",
            "in": "query",
            "name": "from_date",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by to_date",
            "in": "query",
            "name": "to_date",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageUsagesSchema"
                }
              }
            },
            "description": "Returns storage usage"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns storage_usage for all storages"
      }
    },
    "/stats/v1/system/logs/recipients/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_logs_recipients\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "ID of a last service account set on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogsRecipientsSchema"
                }
              }
            },
            "description": "Returns logs recipients settings"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Logs recipients settings don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get logs recipients settings"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_logs_recipients\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogsRecipientSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogsRecipientReadSchema"
                }
              }
            },
            "description": "Returns a logs_recipient object"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create logs recipient settings"
      }
    },
    "/stats/v1/system/logs/recipients/{logs_recipient_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_logs_recipients\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "logs_recipient_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Logs recipient doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete logs recipient settings"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_logs_recipients\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "logs_recipient_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogsRecipientReadSchema"
                }
              }
            },
            "description": "Returns settings for a logs recipients"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Logs recipients settings don't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get settings of a logs recipient"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_logs_recipients\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "logs_recipient_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogsRecipientSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogsRecipientReadSchema"
                }
              }
            },
            "description": "Returns changed system settings"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Logs recipient doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Change logs recipient settings"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_logs_recipients\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "logs_recipient_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "access_check": {
                      "example": false,
                      "type": "boolean"
                    },
                    "error_message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Returns a document describing storage access"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Logs recipient doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Test logs recipient connection"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_logs_recipients\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "logs_recipient_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogsRecipientSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogsRecipientReadSchema"
                }
              }
            },
            "description": "Returns changed system settings"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Logs recipient doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Change logs recipient settings"
      }
    },
    "/stats/v1/transcoder/usage/by/{period}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_stats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "period",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Filter by from_date",
            "in": "query",
            "name": "from_date",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by to_date",
            "in": "query",
            "name": "to_date",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranscoderUsagesSchema"
                }
              }
            },
            "description": "Returns a transcoder usage objects"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns transcoder_usage for all transcoders"
      }
    },
    "/stats/v1/user/audit/by/{period}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_stats\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Period of stats (month, day or day_detailed)",
            "in": "path",
            "name": "period",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Filter by from_date",
            "in": "query",
            "name": "from_date",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by to_date",
            "in": "query",
            "name": "to_date",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by system_domain_id (Only for super admins)",
            "in": "query",
            "name": "system_domain_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUsagesSchema"
                }
              }
            },
            "description": "Returns user usage"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns all audit"
      }
    },
    "/transcode/v1/analyze/assets/{asset_id}/": {
      "post": {
        "deprecated": true,
        "description": "\nRequired roles:\n - can_analyze_content\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnalyzeSchema"
              }
            }
          },
          "description": "body",
          "required": false
        },
        "responses": {
          "201": {
            "description": "Returns a definition of the started job"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Start a job that sends an asset for analysis"
      }
    },
    "/transcode/v1/analyze/assets/{asset_id}/profiles/default/": {
      "post": {
        "description": "\nRequired roles:\n - can_analyze_content\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnalyzeSchema"
              }
            }
          },
          "description": "body",
          "required": false
        },
        "responses": {
          "201": {
            "description": "Returns a definition of the started job"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Start a job that sends an asset for analysis with a default analysis profile"
      }
    },
    "/transcode/v1/analyze/assets/{asset_id}/profiles/default/{media_type}/": {
      "post": {
        "description": "with a default analysis profile of specified media typewith a default analysis profile of specified media type\nRequired roles:\n - can_analyze_content\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "media_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnalyzeSchema"
              }
            }
          },
          "description": "body",
          "required": false
        },
        "responses": {
          "201": {
            "description": "Returns a definition of the started job"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Start a job that sends an asset for analysis"
      }
    },
    "/transcode/v1/analyze/assets/{asset_id}/profiles/{profile_id}/": {
      "post": {
        "description": "\nRequired roles:\n - can_analyze_content\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "profile_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnalyzeSchema"
              }
            }
          },
          "description": "body",
          "required": false
        },
        "responses": {
          "201": {
            "description": "Returns a definition of the started job"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Start a job that sends an asset for analysis with a custom analysis profile"
      }
    },
    "/transcode/v1/analyze/bulk/": {
      "post": {
        "description": "\nRequired roles:\n - can_analyze_content\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkAnalyzeSchema"
              }
            }
          },
          "description": "body",
          "required": false
        },
        "responses": {
          "201": {
            "description": "Returns a definition of the started job"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Analysis account/profile was not found"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Start a job that sends objects for analysis using a custom analysis profile"
      }
    },
    "/transcode/v1/assets/link/metadata/": {
      "post": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetLinkURLSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetLinkData"
                }
              }
            },
            "description": "Returns the title and the site-name"
          },
          "400": {
            "description": "Bad URL"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Could not extract data"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Gets metadata info from the link"
      }
    },
    "/transcode/v1/edge_transcode/jobs/{job_id}/acknowledge/": {
      "post": {
        "description": "\nRequired roles:\n - can_read_transcode_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "job_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "Acknowledge an edge transcode job"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Edge transcode job doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Acknowledge an edge transcode job"
      }
    },
    "/transcode/v1/edge_transcode/workers/": {
      "get": {
        "description": "\nRequired roles:\n - is_storage_worker\n- can_read_transcoders\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeTranscodeWorkersSchema"
                }
              }
            },
            "description": "Returns edge transcode workers"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get edge transcode workers"
      },
      "post": {
        "description": "\nRequired roles:\n - is_storage_worker\n- can_write_transcoders\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EdgeTranscodeWorkerSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeTranscodeWorkerSchema"
                }
              }
            },
            "description": "Returns an edge transcode worker"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new edge transcode worker"
      }
    },
    "/transcode/v1/edge_transcode/workers/{worker_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - is_storage_worker\n- can_write_transcoders\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "worker_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Edge transcode worker doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a edge transcode worker"
      },
      "get": {
        "description": "\nRequired roles:\n - is_storage_worker\n- can_read_transcoders\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "worker_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeTranscodeWorkerSchema"
                }
              }
            },
            "description": "Returns a edge transcode worker"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Edge transcode worker doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get a edge transcode worker"
      },
      "patch": {
        "description": "\nRequired roles:\n - is_storage_worker\n- can_write_transcoders\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "worker_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EdgeTranscodeWorkerSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeTranscodeWorkerSchema"
                }
              }
            },
            "description": "Returns a edge transcode worker that was updated"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Edge transcode worker doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update a edge transcode worker"
      },
      "put": {
        "description": "\nRequired roles:\n - is_storage_worker\n- can_write_transcoders\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "worker_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EdgeTranscodeWorkerSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeTranscodeWorkerSchema"
                }
              }
            },
            "description": "Returns a edge transcode worker that was updated"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Edge transcode worker doesn't exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update a edge transcode worker"
      }
    },
    "/transcode/v1/keyframes/collections/{collection_id}/": {
      "post": {
        "description": "\nRequired roles:\n - can_write_transcode_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "collection_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateCollectionKeyframeSchema"
              }
            }
          },
          "description": "body",
          "required": false
        },
        "responses": {
          "201": {
            "description": "Returns a definiton of the started job"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Start a job that creates a collection keyframe"
      }
    },
    "/transcode/v1/storages/{storage_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_transcode_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AbortStorageTranscodeJobsSchema"
              }
            }
          },
          "description": "body",
          "required": false
        },
        "responses": {
          "202": {
            "description": "Successfully scheduled operation"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "User does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Cancel all transcode jobs linked to the storage"
      }
    },
    "/transcode/v1/storages/{storage_id}/edge_transcode/jobs/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_transcode_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The max number of items to fetch",
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeTranscodeJobsSchema"
                }
              }
            },
            "description": "Returns all analysis service accounts"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get a edge transcode jobs from the job queue"
      }
    },
    "/transcode/v1/storages/{storage_id}/files/{file_id}/transcode/": {
      "delete": {
        "deprecated": true,
        "description": "\nRequired roles:\n - can_read_transcode_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Transcode job was deleted"
          },
          "404": {
            "description": "Transcode job does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete local storage transcode job."
      }
    },
    "/transcode/v1/storages/{storage_id}/transcode/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_transcode_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "ID of a last transcode job entity on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocalStorageFileTranscodeJobsSchema"
                }
              }
            },
            "description": "Returns pending transcode jobs to be handled"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get pending local storage transcode jobs."
      }
    },
    "/transcode/v1/storages/{storage_id}/transcode/{record_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_read_transcode_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "record_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Transcode job was deleted"
          },
          "404": {
            "description": "Transcode job does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete local storage transcode job."
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_transcode_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "storage_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "record_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocalStorageFileTranscodeJobSchema"
                }
              }
            },
            "description": "Returns pending transcode job to be handled"
          },
          "404": {
            "description": "Transcode job does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get local storage transcode job."
      }
    },
    "/transcode/v1/transcode/": {
      "post": {
        "deprecated": true,
        "description": "Use /API/files/v1/assets/ID/files/ID/keyframes insteadUse /API/files/v1/assets/ID/files/ID/keyframes instead\nRequired roles:\n - can_write_transcode_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobSchema1"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobSchema1"
                }
              }
            },
            "description": "Returns a definiton of the started job"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Starts a new transcode."
      }
    },
    "/transcode/v1/transcode/queue/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_transcode_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames without spaces. object_type,user_id,retry_count,priority,type,status",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranscodeQueueSchema"
                }
              }
            },
            "description": "Returns the status of all ongoing transcode jobs"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get all the statuses of the queued transcode jobs"
      }
    },
    "/transcode/v1/transcode/queue/system/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "query",
            "name": "per_domain_id",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranscodeQueueSchema"
                }
              }
            },
            "description": "Returns the status of all ongoing transcode job queues for all domains"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get the status of the transcode job queues"
      }
    },
    "/transcode/v1/transcode/{object_type}/{object_id}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_transcode_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranscodeESQueueRecordsSchema"
                }
              }
            },
            "description": "Returns list of transcode queue records"
          },
          "400": {
            "description": "Bad request - malformed parameters"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns list of transcode queue records by object_id"
      }
    },
    "/transcode/v1/transcode/{object_type}/{object_id}/versions/{version_id}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_transcode_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TranscodeESQueueRecordsSchema"
                }
              }
            },
            "description": "Returns list of transcode queue records"
          },
          "400": {
            "description": "Bad request - malformed parameters"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns list of transcode queue records by version_id"
      }
    },
    "/transcode/v1/transcode/{transcode_job_id}/": {
      "delete": {
        "deprecated": true,
        "description": "\nRequired roles:\n - can_delete_transcode_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "transcode_job_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Transcode does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Cancel a particular transcode job by id"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_transcode_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "transcode_job_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobSchema1"
                }
              }
            },
            "description": "Returns the status of a particular transcode job"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get transcode job"
      }
    },
    "/transcode/v1/transcode/{transcode_job_id}/position/{position}/": {
      "post": {
        "deprecated": true,
        "description": "\nRequired roles:\n - can_write_transcode_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "transcode_job_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "move transcode job to \"top\" or \"bottom\" position",
            "in": "path",
            "name": "position",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Transcode does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Move transcode job to top or bottom of the queue"
      }
    },
    "/transcode/v1/transcode/{transcode_job_id}/priority/{priority}/": {
      "put": {
        "deprecated": true,
        "description": "\nRequired roles:\n - can_write_transcode_jobs\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "transcode_job_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "priority",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Transcode does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Change transcode job priority"
      }
    },
    "/transcode/v1/transcribe/assets/{asset_id}/profiles/default/": {
      "post": {
        "description": "\nRequired roles:\n - can_transcribe_content\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "asset_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TranscribeSchema"
              }
            }
          },
          "description": "body",
          "required": false
        },
        "responses": {
          "201": {
            "description": "Returns a definition of the started job"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Start a job that sends an asset to default transcription service"
      }
    },
    "/transcode/v1/transcribe/bulk/": {
      "post": {
        "description": "\nRequired roles:\n - can_transcribe_content\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkTranscribeSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Returns a definition of the started job"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Start a job that sends multiple objects to transcription service"
      }
    },
    "/users/v1/groups/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_groups\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "format": "int32",
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by alias",
            "in": "query",
            "name": "alias",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by descripton",
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by name",
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by roles",
            "in": "query",
            "name": "roles",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by date_created",
            "in": "query",
            "name": "date_created",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by date_modified",
            "in": "query",
            "name": "date_modified",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by any of field with wildcard support",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter list of id:s (comma separated)",
            "in": "query",
            "name": "ids",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupsSchema"
                }
              }
            },
            "description": "Returns a list of groups"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "List groups with details"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_groups\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSchema"
                }
              }
            },
            "description": "Returns a created group"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new group"
      }
    },
    "/users/v1/groups/basic/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "format": "int32",
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "format": "int32",
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by alias",
            "in": "query",
            "name": "alias",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by descripton",
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by name",
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by roles",
            "in": "query",
            "name": "roles",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by date_created",
            "in": "query",
            "name": "date_created",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by date_modified",
            "in": "query",
            "name": "date_modified",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by any of first_name, last_name and email with wildcard support",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter list of id:s (comma separated)",
            "in": "query",
            "name": "ids",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupsSchema"
                }
              }
            },
            "description": "Returns a list of groups"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "List groups info without details"
      }
    },
    "/users/v1/groups/mappings/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_group_mappings\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupMappingsSchema"
                }
              }
            },
            "description": "Returns a list of group mappings"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get all group mappings"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_group_mappings\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupMappingSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupMappingSchema"
                }
              }
            },
            "description": "Returns a created group mapping"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "409": {
            "description": "Group mapping already exists"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new group mapping"
      }
    },
    "/users/v1/groups/mappings/{name}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_group_mappings\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Group mapping does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete group mapping by name"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_group_mappings\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupMappingSchema"
                }
              }
            },
            "description": "Returns a group mapping"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Requested page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Get a group mapping"
      }
    },
    "/users/v1/groups/{group_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_groups\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Group does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular group by id"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_groups\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSchema"
                }
              }
            },
            "description": "Returns a group"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Group does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a particular group by id"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_groups\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSchema"
                }
              }
            },
            "description": "Returns an updated group"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Group does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update group"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_groups\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSchema"
                }
              }
            },
            "description": "Returns an updated group"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Group does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update group"
      }
    },
    "/users/v1/groups/{group_id}/logo/": {
      "delete": {
        "description": "\nRequired roles:\n - can_write_groups\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "No body"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Group does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete group logo image."
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_groups\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "image/*": {
              "schema": {
                "properties": {
                  "logo": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "logo": {
                      "description": "Url for the group logo",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Returns url for group logo"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Group does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Upload group logo image."
      }
    },
    "/users/v1/groups/{group_id}/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_groups\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSchema1"
                }
              }
            },
            "description": "Returns a job"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Group does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Reindex a particular group by id"
      }
    },
    "/users/v1/groups/{group_id}/users/{user_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_groups\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSchema1"
                }
              }
            },
            "description": "Returns a user"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "User or Group does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a user from group"
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_groups\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSchema1"
                }
              }
            },
            "description": "Returns a user"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "User or Group does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Add user into a group"
      }
    },
    "/users/v1/users/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_users\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by date_created",
            "in": "query",
            "name": "date_created",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by date_modified",
            "in": "query",
            "name": "date_modified",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by email",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by first_name",
            "in": "query",
            "name": "first_name",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by last_name",
            "in": "query",
            "name": "last_name",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by groups",
            "in": "query",
            "name": "groups",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by hide_email",
            "in": "query",
            "name": "hide_email",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by hide_phone",
            "in": "query",
            "name": "hide_phone",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by is_admin",
            "in": "query",
            "name": "is_admin",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by password_changed",
            "in": "query",
            "name": "password_changed",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by phone",
            "in": "query",
            "name": "phone",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by photo",
            "in": "query",
            "name": "photo",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by status",
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by any of first_name, last_name and email with wildcard support",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter list of id:s (comma separated)",
            "in": "query",
            "name": "ids",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersSchema1"
                }
              }
            },
            "description": "Returns a list of users"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Specified page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "List of users with details"
      },
      "post": {
        "description": "\nRequired roles:\n - can_create_users\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSchema1"
                }
              }
            },
            "description": "Returns a created user"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new user"
      }
    },
    "/users/v1/users/basic/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "Which page number to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "maximum": 100,
              "minimum": 1,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "A comma separated list of fieldnames with order. For example - first_name,asc;last_name,desc",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by date_created",
            "in": "query",
            "name": "date_created",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by date_modified",
            "in": "query",
            "name": "date_modified",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by email",
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by first_name",
            "in": "query",
            "name": "first_name",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by last_name",
            "in": "query",
            "name": "last_name",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by groups",
            "in": "query",
            "name": "groups",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by hide_email",
            "in": "query",
            "name": "hide_email",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by hide_phone",
            "in": "query",
            "name": "hide_phone",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by is_admin",
            "in": "query",
            "name": "is_admin",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by password_changed",
            "in": "query",
            "name": "password_changed",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by phone",
            "in": "query",
            "name": "phone",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by photo",
            "in": "query",
            "name": "photo",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by status",
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter by any of first_name, last_name and email with wildcard support",
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "description": "Filter list of id:s (comma separated)",
            "in": "query",
            "name": "ids",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersSchema1"
                }
              }
            },
            "description": "Returns a list of users"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Specified page does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "List of users without details"
      }
    },
    "/users/v1/users/current/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSchema1"
                }
              }
            },
            "description": "Returns a user"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "User does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns current user"
      },
      "patch": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSchema1"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSchema1"
                }
              }
            },
            "description": "Returns an updated user"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "User does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update user"
      },
      "put": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSchema1"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSchema1"
                }
              }
            },
            "description": "Returns an updated user"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "User does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update user"
      }
    },
    "/users/v1/users/current/photo/": {
      "delete": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "No body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "User does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete current user photo image."
      },
      "post": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "image/*": {
              "schema": {
                "properties": {
                  "photo": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "photo": {
                      "description": "Url for the user original photo",
                      "type": "string"
                    },
                    "photo_big": {
                      "description": "Url for the user re-sized big photo",
                      "type": "string"
                    },
                    "photo_small": {
                      "description": "Url for the user re-sized small photo",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Returns url for user photo"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "User does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Upload current user photo image."
      }
    },
    "/users/v1/users/current/roles/": {
      "get": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRolesSchema"
                }
              }
            },
            "description": "Returns a user's roles"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns current user roles"
      }
    },
    "/users/v1/users/{user_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_users\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "User does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular user by id"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_users\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSchema1"
                }
              }
            },
            "description": "Returns a user"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "User does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a particular user by id"
      },
      "patch": {
        "description": "\nRequired roles:\n - can_write_users\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSchema1"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSchema1"
                }
              }
            },
            "description": "Returns an updated user"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "User does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update user"
      },
      "put": {
        "description": "\nRequired roles:\n - can_write_users\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSchema1"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSchema1"
                }
              }
            },
            "description": "Returns an updated user"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "User does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update user"
      }
    },
    "/users/v1/users/{user_id}/photo/": {
      "delete": {
        "description": "\nRequired roles:\n - can_write_users\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "No body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "User does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a photo image of a specified user."
      },
      "post": {
        "description": "\nRequired roles:\n - can_write_users\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "image/*": {
              "schema": {
                "properties": {
                  "photo": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "photo": {
                      "description": "Url for the user original photo",
                      "type": "string"
                    },
                    "photo_big": {
                      "description": "Url for the user re-sized big photo",
                      "type": "string"
                    },
                    "photo_small": {
                      "description": "Url for the user re-sized small photo",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Returns url for user photo"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "User does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Upload user photo image."
      }
    },
    "/users/v1/users/{user_id}/reindex/": {
      "post": {
        "description": "\nRequired roles:\n - can_reindex_users\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSchema1"
                }
              }
            },
            "description": "Returns a job"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "User does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Reindex a particular user by id"
      }
    },
    "/users/v1/users/{user_id}/roles/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_users\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRolesSchema"
                }
              }
            },
            "description": "Returns a user's roles"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns user roles by user_id"
      }
    },
    "/users/v1/users/{user_id}/roles/{role}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_users\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "role",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns 200 if user has role"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Returns 404 if user doesn't have role"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns user roles by user_id"
      }
    },
    "/users/v1/users/{user_id}/saml/": {
      "delete": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSchema1"
                }
              }
            },
            "description": "Returns an updated user"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "User does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Remove a user's SAML IdP setting"
      },
      "put": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSamlIdpUpdateSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSchema1"
                }
              }
            },
            "description": "Returns an updated user"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "User does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update a user's SAML IdP settings"
      }
    },
    "/users-notifications/v1/notification_settings/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_notification_settings\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "ID of a last file set on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSettingsSchema"
                }
              }
            },
            "description": "Returns a notification_setting"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Subscription does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a particular notification_setting by id"
      }
    },
    "/users-notifications/v1/notification_settings/{object_type}/{sub_object_type}/{event_type}/{protocol}/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_notification_settings\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "sub_object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "event_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "protocol",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSettingSchema"
                }
              }
            },
            "description": "Returns a notification_setting"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "NotificationSetting does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a particular notification_setting by id"
      },
      "put": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "sub_object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "event_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "protocol",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationSettingSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSettingSchema"
                }
              }
            },
            "description": "Returns a created notification_setting"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new notification_setting"
      }
    },
    "/users-notifications/v1/notifications/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_notifications\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "description": "The number of items for each page",
            "in": "query",
            "name": "per_page",
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            },
            "style": "form"
          },
          {
            "description": "ID of a last file set on previous page",
            "in": "query",
            "name": "last_id",
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationsSchema"
                }
              }
            },
            "description": "Returns a notification"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Notification does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a list of notifications"
      },
      "post": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSchema"
                }
              }
            },
            "description": "Returns a created notification"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new notification"
      }
    },
    "/users-notifications/v1/notifications/all/read/": {
      "put": {
        "description": "\nRequired roles:\n - can_read_notifications\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Update notification"
      }
    },
    "/users-notifications/v1/notifications/system/": {
      "post": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemNotificationSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSchema"
                }
              }
            },
            "description": "Returns a created notification"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new system notification"
      }
    },
    "/users-notifications/v1/notifications/{notification_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_delete_notifications\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "notification_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Notification does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular notification by id"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_notifications\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "notification_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSchema"
                }
              }
            },
            "description": "Returns a notification"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Notification does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a particular notification by id"
      }
    },
    "/users-notifications/v1/subscriptions/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_subscriptions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionSchema"
                }
              }
            },
            "description": "Returns a subscription"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Subscription does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns all user subscriptions"
      },
      "post": {
        "description": "",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionSchema"
              }
            }
          },
          "description": "body",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionSchema"
                }
              }
            },
            "description": "Returns a created subscription"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Create a new subscription"
      }
    },
    "/users-notifications/v1/subscriptions/{subscription_id}/": {
      "delete": {
        "description": "\nRequired roles:\n - can_write_subscriptions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "subscription_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Without body"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Subscription does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete a particular subscription by id"
      },
      "get": {
        "description": "\nRequired roles:\n - can_read_subscriptions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "subscription_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionSchema"
                }
              }
            },
            "description": "Returns a subscription"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Subscription does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns a particular subscription by id"
      }
    },
    "/users-notifications/v1/{object_type}/{object_id}/subscriptions/": {
      "get": {
        "description": "\nRequired roles:\n - can_read_subscriptions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionsSchema"
                }
              }
            },
            "description": "Returns a list of subscriptions"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Subscription does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Returns user subscriptions for a specific object_type and object_id"
      }
    },
    "/users-notifications/v1/{object_type}/{object_id}/subscriptions/all/": {
      "delete": {
        "description": "\nRequired roles:\n - can_read_subscriptions\n",
        "parameters": [
          {
            "in": "header",
            "name": "App-ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "header",
            "name": "Auth-Token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "object_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionSchema"
                }
              }
            },
            "description": "Returns a subscription"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Token is invalid"
          },
          "404": {
            "description": "Subscription does not exist"
          },
          "default": {
            "content": {
              "application/json": {
                "examples": {
                  "multiple": {
                    "summary": "Example multiple messages.",
                    "value": {
                      "errors": {
                        "field1": "Error message for field1",
                        "field2": "Error message for field2"
                      }
                    }
                  },
                  "single": {
                    "summary": "Example single message.",
                    "value": {
                      "errors": [
                        "Example error message."
                      ]
                    }
                  }
                },
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "errors": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    {
                      "properties": {
                        "errors": {
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            },
            "description": "Error response"
          }
        },
        "summary": "Delete all user subscriptions for a specific object_type and object_id"
      }
    }
  },
  "components": {
    "schemas": {
      "ACLSchema": {
        "properties": {
          "groups_acl": {
            "items": {
              "$ref": "#/components/schemas/GroupACL"
            },
            "readOnly": true,
            "type": "array"
          },
          "inherited_groups_acl": {
            "items": {
              "$ref": "#/components/schemas/GroupACL1"
            },
            "readOnly": true,
            "type": "array"
          },
          "inherited_users_acl": {
            "items": {
              "$ref": "#/components/schemas/UserACL"
            },
            "readOnly": true,
            "type": "array"
          },
          "propagating_groups_acl": {
            "items": {
              "$ref": "#/components/schemas/GroupACL1"
            },
            "readOnly": true,
            "type": "array"
          },
          "propagating_users_acl": {
            "items": {
              "$ref": "#/components/schemas/UserACL"
            },
            "readOnly": true,
            "type": "array"
          },
          "users_acl": {
            "items": {
              "$ref": "#/components/schemas/UserACL1"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "ACLTemplateSchema": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "ACLTemplatesSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/ACLTemplateSchema"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "ACLsSchema": {
        "properties": {
          "object_keys": {
            "description": "The number of object_keys in the list is limited to a minimum of 0 and a maximum of 500",
            "items": {
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 0,
            "type": "array"
          }
        },
        "type": "object"
      },
      "BulkACLSchema": {
        "properties": {
          "access_denied": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "access_granted": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "BulkACLsObjectSchema": {
        "properties": {
          "object_keys": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "object_type": {
            "type": "string"
          },
          "permissions": {
            "items": {
              "enum": [
                "read",
                "write",
                "delete",
                "change-acl"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "object_keys",
          "object_type",
          "permissions"
        ],
        "type": "object"
      },
      "BulkCreateShareACLs": {
        "properties": {
          "permissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "share_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "permissions",
          "share_ids"
        ],
        "type": "object"
      },
      "BulkDeleteShareACLs": {
        "properties": {
          "share_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "share_ids"
        ],
        "type": "object"
      },
      "CheckBulkACLsSchema": {
        "properties": {
          "objects": {
            "description": "The number of objects in the list is limited to a minimum of 0 and a maximum of 500",
            "items": {
              "$ref": "#/components/schemas/BulkACLsObjectSchema"
            },
            "maxItems": 500,
            "minItems": 0,
            "type": "array"
          }
        },
        "required": [
          "objects"
        ],
        "type": "object"
      },
      "CombinedPermissionsSchema": {
        "properties": {
          "permissions": {
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "CopyInheritedACLSchema": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "from_collection_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "object_key": {
            "type": "string"
          },
          "object_type": {
            "type": "string"
          }
        },
        "required": [
          "from_collection_ids",
          "object_key",
          "object_type"
        ],
        "type": "object"
      },
      "CreateACLsResultSchema": {
        "properties": {
          "updated_object_keys": {
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "CreateACLsSchema": {
        "properties": {
          "group_ids": {
            "items": {
              "format": "uuid",
              "readOnly": true,
              "type": "string"
            },
            "type": "array"
          },
          "mode": {
            "default": "OVERWRITE",
            "enum": [
              "APPEND",
              "OVERWRITE"
            ],
            "type": "string",
            "writeOnly": true
          },
          "object_keys": {
            "description": "The number of object_keys in the list is limited to a minimum of 0 and a maximum of 500",
            "items": {
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 0,
            "type": "array"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "user_ids": {
            "items": {
              "format": "uuid",
              "readOnly": true,
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "object_keys",
          "permissions"
        ],
        "type": "object"
      },
      "CreateBulkACLsSchema": {
        "properties": {
          "group_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "include_assets": {
            "type": "boolean"
          },
          "include_collections": {
            "type": "boolean"
          },
          "mode": {
            "default": "OVERWRITE",
            "enum": [
              "APPEND",
              "OVERWRITE"
            ],
            "type": "string",
            "writeOnly": true
          },
          "object_ids": {
            "description": "The number of object_ids in the list is limited to a minimum of 0 and a maximum of 500",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 0,
            "type": "array"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "user_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "include_assets",
          "include_collections",
          "permissions"
        ],
        "type": "object"
      },
      "CreateShareACLsSchema": {
        "properties": {
          "object_keys": {
            "description": "The number of object_keys in the list is limited to a min of 0 and a maximum of 500",
            "items": {
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 0,
            "type": "array"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "share_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "permissions"
        ],
        "type": "object"
      },
      "DeleteACLsSchema": {
        "properties": {
          "group_ids": {
            "items": {
              "format": "uuid",
              "readOnly": true,
              "type": "string"
            },
            "type": "array"
          },
          "object_keys": {
            "description": "The number of object_keys in the list is limitedto a minimum of 0 and a maximum of 500",
            "items": {
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 0,
            "type": "array"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "user_ids": {
            "items": {
              "format": "uuid",
              "readOnly": true,
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DeleteBulkACLsSchema": {
        "properties": {
          "group_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "include_assets": {
            "type": "boolean"
          },
          "include_collections": {
            "type": "boolean"
          },
          "object_ids": {
            "description": "The number of object_ids in the list is limited to a minimum of 0 and a maximum of 500",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 0,
            "type": "array"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "user_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "include_assets",
          "include_collections"
        ],
        "type": "object"
      },
      "GroupACL": {
        "properties": {
          "group_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "permissions"
        ],
        "type": "object"
      },
      "GroupACL1": {
        "properties": {
          "group_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "object_key": {
            "readOnly": true,
            "type": "string"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "permissions"
        ],
        "type": "object"
      },
      "GroupACLSchema": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "group_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "object_key": {
            "readOnly": true,
            "type": "string"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "permissions"
        ],
        "type": "object"
      },
      "GroupIDsSchema": {
        "properties": {
          "group_ids": {
            "items": {
              "format": "uuid",
              "readOnly": true,
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "InheritedACLSchema": {
        "properties": {
          "collection_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "object_key": {
            "readOnly": true,
            "type": "string"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "collection_ids"
        ],
        "type": "object"
      },
      "ListObjectsSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ReindexPropagatingACLSchema": {
        "properties": {
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ShareACLSchema": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "object_key": {
            "readOnly": true,
            "type": "string"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "share_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "permissions"
        ],
        "type": "object"
      },
      "SharesACLSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/ShareACLSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "UserACL": {
        "properties": {
          "object_key": {
            "readOnly": true,
            "type": "string"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "user_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "permissions"
        ],
        "type": "object"
      },
      "UserACL1": {
        "properties": {
          "permissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "user_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "permissions"
        ],
        "type": "object"
      },
      "UserACLSchema": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "object_key": {
            "readOnly": true,
            "type": "string"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "user_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "permissions"
        ],
        "type": "object"
      },
      "UserIDsSchema": {
        "properties": {
          "user_ids": {
            "items": {
              "format": "uuid",
              "readOnly": true,
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UsersCheckAclSchema": {
        "properties": {
          "group_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "user_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UsersSchema": {
        "properties": {
          "users": {
            "items": {
              "$ref": "#/components/schemas/UsersCheckAclSchema"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApprovalBySchema": {
        "properties": {
          "change_date": {
            "format": "date-time",
            "type": "string"
          },
          "external": {
            "type": "string"
          },
          "object_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "APPROVED",
              "NOT_APPROVED",
              "MIXED"
            ],
            "type": "string"
          },
          "user": {
            "format": "uuid",
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApprovalSchema": {
        "properties": {
          "approvals_by": {
            "items": {
              "$ref": "#/components/schemas/ApprovalBySchema"
            },
            "nullable": true,
            "readOnly": true,
            "type": "array"
          },
          "change_date": {
            "format": "date-time",
            "type": "string"
          },
          "externals": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "groups": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "min_number": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "object_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "request_date": {
            "format": "date-time",
            "type": "string"
          },
          "requested_by": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "share_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "APPROVED",
              "NOT_APPROVED",
              "MIXED"
            ],
            "type": "string"
          },
          "user_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "APPROVED",
              "NOT_APPROVED",
              "MIXED"
            ],
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "users": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "users_info": {
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "readOnly": true,
            "type": "array"
          },
          "version_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApprovalsBySchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/ApprovalBySchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AssetBaseSchema": {
        "properties": {
          "analyze_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "archive_status": {
            "enum": [
              "NOT_ARCHIVED",
              "ARCHIVING",
              "FAILED_TO_ARCHIVE",
              "ARCHIVED"
            ],
            "type": "string"
          },
          "category": {
            "nullable": true,
            "type": "string"
          },
          "created_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "created_by_user_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "readOnly": true
          },
          "custom_keyframe": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "custom_poster": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_deleted": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_imported": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_viewed": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user_info": {
            "$ref": "#/components/schemas/User"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "external_link": {
            "format": "url",
            "nullable": true,
            "type": "string"
          },
          "favoured": {
            "readOnly": true,
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_blocked": {
            "format": "bool",
            "type": "boolean"
          },
          "is_online": {
            "format": "bool",
            "type": "boolean"
          },
          "original_asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_segment_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_version_id": {
            "format": "uuid",
            "type": "string"
          },
          "site_name": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "DELETED"
            ],
            "type": "string"
          },
          "time_end_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "time_start_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "enum": [
              "ASSET",
              "SEQUENCE",
              "NLE_PROJECT",
              "PLACEHOLDER",
              "CUSTOM",
              "LINK",
              "SUBCLIP"
            ],
            "type": "string"
          },
          "updated_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "updated_by_user_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "readOnly": true
          },
          "warning": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "title"
        ],
        "type": "object"
      },
      "AssetCreateSchema": {
        "properties": {
          "analyze_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "archive_status": {
            "enum": [
              "NOT_ARCHIVED",
              "ARCHIVING",
              "FAILED_TO_ARCHIVE",
              "ARCHIVED"
            ],
            "type": "string"
          },
          "category": {
            "nullable": true,
            "type": "string"
          },
          "collection_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "created_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "created_by_user_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "readOnly": true
          },
          "custom_keyframe": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "custom_poster": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "date_deleted": {
            "format": "date-time",
            "type": "string"
          },
          "date_imported": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "type": "string"
          },
          "date_viewed": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user_info": {
            "$ref": "#/components/schemas/User"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "external_link": {
            "format": "url",
            "nullable": true,
            "type": "string"
          },
          "favoured": {
            "readOnly": true,
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_blocked": {
            "format": "bool",
            "type": "boolean"
          },
          "is_online": {
            "format": "bool",
            "type": "boolean"
          },
          "original_asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_segment_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_version_id": {
            "format": "uuid",
            "type": "string"
          },
          "site_name": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "DELETED"
            ],
            "type": "string"
          },
          "time_end_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "time_start_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "enum": [
              "ASSET",
              "SEQUENCE",
              "NLE_PROJECT",
              "PLACEHOLDER",
              "CUSTOM",
              "LINK",
              "SUBCLIP"
            ],
            "type": "string"
          },
          "updated_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "updated_by_user_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "readOnly": true
          },
          "warning": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "title"
        ],
        "type": "object"
      },
      "AssetEditSchema": {
        "properties": {
          "analyze_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "archive_status": {
            "enum": [
              "NOT_ARCHIVED",
              "ARCHIVING",
              "FAILED_TO_ARCHIVE",
              "ARCHIVED"
            ],
            "type": "string"
          },
          "category": {
            "nullable": true,
            "type": "string"
          },
          "created_by_user": {
            "format": "uuid",
            "type": "string"
          },
          "created_by_user_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "readOnly": true
          },
          "custom_keyframe": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "custom_poster": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_deleted": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_imported": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_viewed": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user": {
            "format": "uuid",
            "type": "string"
          },
          "deleted_by_user_info": {
            "$ref": "#/components/schemas/User"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "external_link": {
            "format": "url",
            "nullable": true,
            "type": "string"
          },
          "favoured": {
            "readOnly": true,
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "is_blocked": {
            "format": "bool",
            "type": "boolean"
          },
          "is_online": {
            "format": "bool",
            "type": "boolean"
          },
          "original_asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_segment_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_version_id": {
            "format": "uuid",
            "type": "string"
          },
          "site_name": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "DELETED"
            ],
            "type": "string"
          },
          "time_end_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "time_start_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "enum": [
              "ASSET",
              "SEQUENCE",
              "NLE_PROJECT",
              "PLACEHOLDER",
              "CUSTOM",
              "LINK",
              "SUBCLIP"
            ],
            "type": "string"
          },
          "updated_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "updated_by_user_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "readOnly": true
          },
          "warning": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "AssetElasticSchema": {
        "properties": {
          "analyze_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "archive_status": {
            "enum": [
              "NOT_ARCHIVED",
              "ARCHIVING",
              "FAILED_TO_ARCHIVE",
              "ARCHIVED"
            ],
            "type": "string"
          },
          "category": {
            "nullable": true,
            "type": "string"
          },
          "comments_count": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "created_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "created_by_user_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "readOnly": true
          },
          "custom_keyframe": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "custom_poster": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_deleted": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_imported": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_viewed": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user_info": {
            "$ref": "#/components/schemas/User"
          },
          "duration_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "external_link": {
            "format": "url",
            "nullable": true,
            "type": "string"
          },
          "favoured": {
            "readOnly": true,
            "type": "boolean"
          },
          "files": {
            "items": {
              "type": "object"
            },
            "readOnly": true,
            "type": "array"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "in_collections": {
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "is_blocked": {
            "format": "bool",
            "type": "boolean"
          },
          "is_online": {
            "format": "bool",
            "type": "boolean"
          },
          "keyframes": {
            "items": {
              "type": "object"
            },
            "readOnly": true,
            "type": "array"
          },
          "media_type": {
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "readOnly": true,
            "type": "object"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "original_asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_segment_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_version_id": {
            "format": "uuid",
            "type": "string"
          },
          "position": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "proxies": {
            "items": {
              "type": "object"
            },
            "readOnly": true,
            "type": "array"
          },
          "relations": {
            "items": {
              "$ref": "#/components/schemas/RelationElastic"
            },
            "readOnly": true,
            "type": "array"
          },
          "site_name": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "DELETED"
            ],
            "type": "string"
          },
          "time_end_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "time_start_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "enum": [
              "ASSET",
              "SEQUENCE",
              "NLE_PROJECT",
              "PLACEHOLDER",
              "CUSTOM",
              "LINK",
              "SUBCLIP"
            ],
            "type": "string"
          },
          "updated_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "updated_by_user_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "readOnly": true
          },
          "versions": {
            "items": {
              "$ref": "#/components/schemas/AssetVersion"
            },
            "readOnly": true,
            "type": "array"
          },
          "versions_number": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "warning": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "title"
        ],
        "type": "object"
      },
      "AssetHistoryBaseSchema": {
        "properties": {
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "job_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "operation_description": {
            "nullable": true,
            "type": "string"
          },
          "operation_type": {
            "enum": [
              "EXPORT",
              "TRANSCODE",
              "ANALYZE",
              "ADD_FORMAT",
              "DELETE_FORMAT",
              "RESTORE_FORMAT",
              "DELETE_FILESET",
              "DELETE_FILE",
              "RESTORE_FILESET",
              "MODIFY_FILESET",
              "APPROVE",
              "REJECT",
              "DOWNLOAD",
              "METADATA",
              "CUSTOM",
              "TRANSCRIPTION",
              "VERSION_CREATE",
              "VERSION_DELETE",
              "VERSION_UPDATE",
              "VERSION_PROMOTE",
              "RESTORE",
              "RESTORE_FROM_GLACIER",
              "ARCHIVE",
              "RESTORE_ARCHIVE",
              "DELETE",
              "TRANSFER",
              "UNLINK_SUBCLIP",
              "FACE_RECOGNITION"
            ],
            "type": "string"
          },
          "share_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "share_user_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "operation_type"
        ],
        "type": "object"
      },
      "AssetHistoryBulkSchema": {
        "properties": {
          "asset_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "assets_jobs_map": {
            "type": "object"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "job_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "operation_description": {
            "nullable": true,
            "type": "string"
          },
          "operation_type": {
            "enum": [
              "EXPORT",
              "TRANSCODE",
              "ANALYZE",
              "ADD_FORMAT",
              "DELETE_FORMAT",
              "RESTORE_FORMAT",
              "DELETE_FILESET",
              "DELETE_FILE",
              "RESTORE_FILESET",
              "MODIFY_FILESET",
              "APPROVE",
              "REJECT",
              "DOWNLOAD",
              "METADATA",
              "CUSTOM",
              "TRANSCRIPTION",
              "VERSION_CREATE",
              "VERSION_DELETE",
              "VERSION_UPDATE",
              "VERSION_PROMOTE",
              "RESTORE",
              "RESTORE_FROM_GLACIER",
              "ARCHIVE",
              "RESTORE_ARCHIVE",
              "DELETE",
              "TRANSFER",
              "UNLINK_SUBCLIP",
              "FACE_RECOGNITION"
            ],
            "type": "string"
          },
          "share_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "share_user_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "asset_ids",
          "operation_type"
        ],
        "type": "object"
      },
      "AssetHistoryElasticSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "job_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "operation_description": {
            "nullable": true,
            "type": "string"
          },
          "operation_type": {
            "enum": [
              "EXPORT",
              "TRANSCODE",
              "ANALYZE",
              "ADD_FORMAT",
              "DELETE_FORMAT",
              "RESTORE_FORMAT",
              "DELETE_FILESET",
              "DELETE_FILE",
              "RESTORE_FILESET",
              "MODIFY_FILESET",
              "APPROVE",
              "REJECT",
              "DOWNLOAD",
              "METADATA",
              "CUSTOM",
              "TRANSCRIPTION",
              "VERSION_CREATE",
              "VERSION_DELETE",
              "VERSION_UPDATE",
              "VERSION_PROMOTE",
              "RESTORE",
              "RESTORE_FROM_GLACIER",
              "ARCHIVE",
              "RESTORE_ARCHIVE",
              "DELETE",
              "TRANSFER",
              "UNLINK_SUBCLIP",
              "FACE_RECOGNITION"
            ],
            "type": "string"
          },
          "share_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "share_user_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "operation_type"
        ],
        "type": "object"
      },
      "AssetHistoryEntitiesSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/AssetHistoryElasticSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AssetHistorySchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "job_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "operation_description": {
            "nullable": true,
            "type": "string"
          },
          "operation_type": {
            "enum": [
              "EXPORT",
              "TRANSCODE",
              "ANALYZE",
              "ADD_FORMAT",
              "DELETE_FORMAT",
              "RESTORE_FORMAT",
              "DELETE_FILESET",
              "DELETE_FILE",
              "RESTORE_FILESET",
              "MODIFY_FILESET",
              "APPROVE",
              "REJECT",
              "DOWNLOAD",
              "METADATA",
              "CUSTOM",
              "TRANSCRIPTION",
              "VERSION_CREATE",
              "VERSION_DELETE",
              "VERSION_UPDATE",
              "VERSION_PROMOTE",
              "RESTORE",
              "RESTORE_FROM_GLACIER",
              "ARCHIVE",
              "RESTORE_ARCHIVE",
              "DELETE",
              "TRANSFER",
              "UNLINK_SUBCLIP",
              "FACE_RECOGNITION"
            ],
            "type": "string"
          },
          "share_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "share_user_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "operation_type"
        ],
        "type": "object"
      },
      "AssetOrCollectionSchema": {
        "discriminator": {
          "mapping": {
            "assets": "#/components/schemas/AssetElasticSchema",
            "collections": "#/components/schemas/CollectionElastic"
          },
          "propertyName": "object_type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/AssetElasticSchema"
          },
          {
            "$ref": "#/components/schemas/CollectionElastic"
          }
        ]
      },
      "AssetSchema": {
        "properties": {
          "analyze_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "archive_status": {
            "enum": [
              "NOT_ARCHIVED",
              "ARCHIVING",
              "FAILED_TO_ARCHIVE",
              "ARCHIVED"
            ],
            "type": "string"
          },
          "category": {
            "nullable": true,
            "type": "string"
          },
          "created_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "created_by_user_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "readOnly": true
          },
          "custom_keyframe": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "custom_poster": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "date_deleted": {
            "format": "date-time",
            "type": "string"
          },
          "date_imported": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_viewed": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user_info": {
            "$ref": "#/components/schemas/User"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "external_link": {
            "format": "url",
            "nullable": true,
            "type": "string"
          },
          "favoured": {
            "readOnly": true,
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "in_collections": {
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "is_blocked": {
            "format": "bool",
            "type": "boolean"
          },
          "is_online": {
            "format": "bool",
            "type": "boolean"
          },
          "original_asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_segment_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_version_id": {
            "format": "uuid",
            "type": "string"
          },
          "site_name": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "DELETED"
            ],
            "type": "string"
          },
          "time_end_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "time_start_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "enum": [
              "ASSET",
              "SEQUENCE",
              "NLE_PROJECT",
              "PLACEHOLDER",
              "CUSTOM",
              "LINK",
              "SUBCLIP"
            ],
            "type": "string"
          },
          "updated_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "updated_by_user_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ],
            "readOnly": true
          },
          "versions": {
            "items": {
              "$ref": "#/components/schemas/AssetVersion"
            },
            "readOnly": true,
            "type": "array"
          },
          "warning": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "title"
        ],
        "type": "object"
      },
      "AssetTranscriptionFromSubtitleSchema": {
        "properties": {
          "content": {
            "type": "string"
          },
          "delete_old_transcriptions": {
            "type": "boolean"
          },
          "format": {
            "enum": [
              "VTT",
              "WEBVTT",
              "SRT"
            ],
            "nullable": true,
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "source_subtitle_id": {
            "description": "Set to source subtitle_id or do not set and use the content fields instead",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AssetTranscriptionPropertiesSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "speaker_labels": {
            "type": "object"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AssetTranscriptionsPropertiesSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/AssetTranscriptionPropertiesSchema"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "AssetVersion": {
        "properties": {
          "analyze_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "archive_status": {
            "enum": [
              "NOT_ARCHIVED",
              "ARCHIVING",
              "FAILED_TO_ARCHIVE",
              "ARCHIVED"
            ],
            "type": "string"
          },
          "created_by_user": {
            "format": "uuid",
            "type": "string"
          },
          "created_by_user_info": {
            "$ref": "#/components/schemas/User"
          },
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_online": {
            "type": "boolean"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "IN_PROGRESS",
              "FAILED",
              "DELETING",
              "DELETED"
            ],
            "type": "string"
          },
          "transcribe_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "AssetVersionSchema": {
        "properties": {
          "analyze_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "archive_status": {
            "enum": [
              "NOT_ARCHIVED",
              "ARCHIVING",
              "FAILED_TO_ARCHIVE",
              "ARCHIVED"
            ],
            "type": "string"
          },
          "created_by_user": {
            "format": "uuid",
            "type": "string"
          },
          "created_by_user_info": {
            "$ref": "#/components/schemas/User"
          },
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_online": {
            "type": "boolean"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "IN_PROGRESS",
              "FAILED",
              "DELETING",
              "DELETED"
            ],
            "type": "string"
          },
          "transcribe_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "AssetVersionsSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "versions": {
            "items": {
              "$ref": "#/components/schemas/EditAssetVersion"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "asset_id"
        ],
        "type": "object"
      },
      "AssetsHistoryQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AssetsQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "scroll": {
            "type": "boolean"
          },
          "scroll_id": {
            "format": "uuid",
            "type": "string"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AssetsSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/AssetElasticSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "BaseQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BulkActionSchema": {
        "properties": {
          "object_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "object_type": {
            "enum": [
              "assets",
              "collections",
              "saved_searches"
            ],
            "type": "string"
          }
        },
        "required": [
          "object_ids",
          "object_type"
        ],
        "type": "object"
      },
      "BulkAddToFavoritesSchema": {
        "properties": {
          "object_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "object_type": {
            "enum": [
              "assets",
              "collections"
            ],
            "type": "string"
          }
        },
        "required": [
          "object_ids",
          "object_type"
        ],
        "type": "object"
      },
      "BulkAssetEditSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/AssetEditSchema"
            },
            "type": "array"
          }
        },
        "required": [
          "objects"
        ],
        "type": "object"
      },
      "BulkAssetVersionEditSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/AssetVersionsSchema"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "objects"
        ],
        "type": "object"
      },
      "BulkCollectionACLsUpdateSchema": {
        "properties": {
          "collection_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "include_assets": {
            "type": "boolean"
          },
          "include_collections": {
            "type": "boolean"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "collection_ids",
          "include_assets",
          "include_collections",
          "job_id"
        ],
        "type": "object"
      },
      "BulkCollectionActionSchema": {
        "properties": {
          "collection_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "include_assets": {
            "type": "boolean"
          },
          "include_collections": {
            "type": "boolean"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "collection_ids",
          "include_assets",
          "include_collections",
          "job_id"
        ],
        "type": "object"
      },
      "BulkCollectionAnalyzeSchema": {
        "properties": {
          "collection_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "include_assets": {
            "type": "boolean"
          },
          "include_collections": {
            "type": "boolean"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "collection_ids",
          "include_assets",
          "include_collections",
          "job_id"
        ],
        "type": "object"
      },
      "BulkCollectionDeleteSchema": {
        "properties": {
          "collection_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "collection_ids",
          "job_id",
          "storage_id"
        ],
        "type": "object"
      },
      "BulkCollectionFaceExtractionSchema": {
        "properties": {
          "collection_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "include_assets": {
            "type": "boolean"
          },
          "include_collections": {
            "type": "boolean"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "collection_ids",
          "include_assets",
          "include_collections",
          "job_id"
        ],
        "type": "object"
      },
      "BulkCollectionMetadataUpdateSchema": {
        "properties": {
          "collection_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "include_assets": {
            "type": "boolean"
          },
          "include_collections": {
            "type": "boolean"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "collection_ids",
          "include_assets",
          "include_collections",
          "job_id"
        ],
        "type": "object"
      },
      "BulkCollectionTranscodeSchema": {
        "properties": {
          "collection_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "include_assets": {
            "type": "boolean"
          },
          "include_collections": {
            "type": "boolean"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "collection_ids",
          "include_assets",
          "include_collections",
          "job_id"
        ],
        "type": "object"
      },
      "BulkCollectionTranscribeSchema": {
        "properties": {
          "collection_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "include_assets": {
            "type": "boolean"
          },
          "include_collections": {
            "type": "boolean"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "collection_ids",
          "include_assets",
          "include_collections",
          "job_id"
        ],
        "type": "object"
      },
      "BulkCollectionTransferSchema": {
        "properties": {
          "collection_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "include_assets": {
            "type": "boolean"
          },
          "include_collections": {
            "type": "boolean"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          },
          "keep_collection_structure": {
            "type": "boolean"
          }
        },
        "required": [
          "collection_ids",
          "include_assets",
          "include_collections",
          "job_id"
        ],
        "type": "object"
      },
      "BulkCreateSegmentsSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/Segment"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "objects"
        ],
        "type": "object"
      },
      "BulkDeleteFromFavoritesSchema": {
        "properties": {
          "object_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "object_type": {
            "enum": [
              "assets",
              "collections"
            ],
            "type": "string"
          }
        },
        "required": [
          "object_ids",
          "object_type"
        ],
        "type": "object"
      },
      "BulkDeleteSchema": {
        "properties": {
          "content_only": {
            "default": true,
            "description": "If set to `False`, will also delete entities of type `object_type` specified in `object_ids`.",
            "type": "boolean",
            "writeOnly": true
          },
          "object_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "object_type": {
            "enum": [
              "assets",
              "collections",
              "saved_searches"
            ],
            "type": "string"
          }
        },
        "required": [
          "object_ids",
          "object_type"
        ],
        "type": "object"
      },
      "BulkRemoveApprovalSchema": {
        "properties": {
          "object_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "object_type": {
            "enum": [
              "assets",
              "collections",
              "saved_searches"
            ],
            "type": "string"
          }
        },
        "required": [
          "object_ids",
          "object_type"
        ],
        "type": "object"
      },
      "BulkSetApprovalSchema": {
        "properties": {
          "object_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "object_type": {
            "enum": [
              "assets",
              "collections",
              "saved_searches"
            ],
            "type": "string"
          },
          "status": {
            "enum": [
              "APPROVED",
              "NOT_APPROVED"
            ],
            "type": "string"
          }
        },
        "required": [
          "object_ids",
          "object_type",
          "status"
        ],
        "type": "object"
      },
      "BulkShareCreateSchema": {
        "properties": {
          "allow_approving_comments": {
            "type": "boolean"
          },
          "allow_comments": {
            "type": "boolean"
          },
          "allow_custom_actions": {
            "type": "boolean"
          },
          "allow_download": {
            "type": "boolean"
          },
          "allow_download_proxy": {
            "type": "boolean"
          },
          "allow_setting_approve_status": {
            "type": "boolean"
          },
          "allow_upload": {
            "type": "boolean"
          },
          "allow_user_search_for_mentions": {
            "type": "boolean"
          },
          "allow_view_transcriptions": {
            "type": "boolean"
          },
          "allow_view_versions": {
            "type": "boolean"
          },
          "app_id": {
            "type": "string"
          },
          "emails": {
            "items": {
              "format": "email",
              "type": "string"
            },
            "type": "array"
          },
          "expires": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "metadata_views": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "object_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "object_type": {
            "enum": [
              "assets"
            ],
            "readOnly": true,
            "type": "string"
          },
          "owner_id": {
            "readOnly": true,
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "share_by_url": {
            "type": "boolean"
          },
          "system_domain_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "upload_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "allow_approving_comments",
          "allow_comments",
          "allow_download",
          "allow_setting_approve_status",
          "object_ids",
          "title"
        ],
        "type": "object"
      },
      "CollectionBaseSchema": {
        "properties": {
          "category": {
            "nullable": true,
            "type": "string"
          },
          "created_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "custom_keyframe": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "custom_order_status": {
            "enum": [
              "DISABLED",
              "ENABLING",
              "ENABLED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "custom_poster": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "deleted_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "favoured": {
            "readOnly": true,
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "in_collections": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "is_root": {
            "type": "boolean"
          },
          "keyframe_asset_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "keyframes": {
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "metadata": {
            "readOnly": true,
            "type": "object"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "parent_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "parents": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "position": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "HIDDEN",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "title"
        ],
        "type": "object"
      },
      "CollectionContentInfoSchema": {
        "properties": {
          "assets_count": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "collections_count": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CollectionContentOrderingSchema": {
        "properties": {
          "after_object_id": {
            "format": "uuid",
            "type": "string"
          },
          "before_object_id": {
            "format": "uuid",
            "type": "string"
          },
          "position": {
            "description": "Position the member will be moved to. To insert athe the end send -1",
            "format": "int32",
            "minimum": -1,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CollectionContentQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CollectionContentSchema": {
        "properties": {
          "collection_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "object_id": {
            "format": "uuid",
            "type": "string"
          },
          "object_type": {
            "type": "string"
          }
        },
        "required": [
          "object_id",
          "object_type"
        ],
        "type": "object"
      },
      "CollectionElastic": {
        "properties": {
          "category": {
            "nullable": true,
            "type": "string"
          },
          "created_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "custom_keyframe": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "custom_order_status": {
            "enum": [
              "DISABLED",
              "ENABLING",
              "ENABLED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "custom_poster": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_deleted": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "favoured": {
            "readOnly": true,
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "in_collections": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "is_root": {
            "type": "boolean"
          },
          "keyframe_asset_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "keyframes": {
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "metadata": {
            "readOnly": true,
            "type": "object"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "parent_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "parents": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "position": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "HIDDEN",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "title"
        ],
        "type": "object"
      },
      "CollectionElasticSchema": {
        "properties": {
          "category": {
            "nullable": true,
            "type": "string"
          },
          "created_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "custom_keyframe": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "custom_order_status": {
            "enum": [
              "DISABLED",
              "ENABLING",
              "ENABLED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "custom_poster": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_deleted": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "favoured": {
            "readOnly": true,
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "in_collections": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "is_root": {
            "type": "boolean"
          },
          "keyframe_asset_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "keyframes": {
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "metadata": {
            "readOnly": true,
            "type": "object"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "parent_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "parents": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "position": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "HIDDEN",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "title"
        ],
        "type": "object"
      },
      "CollectionInputSchema": {
        "properties": {
          "category": {
            "nullable": true,
            "type": "string"
          },
          "custom_keyframe": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "custom_poster": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "is_root": {
            "type": "boolean"
          },
          "keyframe_asset_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "parent_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "HIDDEN",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "title"
        ],
        "type": "object"
      },
      "CollectionSchema": {
        "properties": {
          "category": {
            "nullable": true,
            "type": "string"
          },
          "created_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "custom_keyframe": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "custom_order_status": {
            "enum": [
              "DISABLED",
              "ENABLING",
              "ENABLED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "custom_poster": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_deleted": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "favoured": {
            "readOnly": true,
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "in_collections": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "is_root": {
            "type": "boolean"
          },
          "keyframe_asset_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "keyframes": {
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "metadata": {
            "readOnly": true,
            "type": "object"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "parent_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "parents": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "position": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "HIDDEN",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "title"
        ],
        "type": "object"
      },
      "CollectionSizeSchema": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "size": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CollectionsQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "scroll": {
            "type": "boolean"
          },
          "scroll_id": {
            "format": "uuid",
            "type": "string"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CollectionsSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/CollectionElasticSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CreateAssetVersionFromAssetSchema": {
        "properties": {
          "copy_previous_version_segments": {
            "type": "boolean"
          },
          "include_segment_types": {
            "items": {
              "enum": [
                "MARKER",
                "QC",
                "GENERIC",
                "COMMENT",
                "TAG",
                "TRANSCRIPTION",
                "SCENE",
                "PERSON"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "source_metadata_asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateAssetVersionFromVersionSchema": {
        "properties": {
          "copy_previous_version_segments": {
            "type": "boolean"
          },
          "exclude_format_ids": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "include_segment_types": {
            "items": {
              "enum": [
                "MARKER",
                "QC",
                "GENERIC",
                "COMMENT",
                "TAG",
                "TRANSCRIPTION",
                "SCENE",
                "PERSON"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "source_metadata_asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateAssetVersionSchema": {
        "properties": {
          "copy_metadata": {
            "type": "boolean"
          },
          "copy_segments": {
            "type": "boolean"
          },
          "include_segment_types": {
            "items": {
              "enum": [
                "MARKER",
                "QC",
                "GENERIC",
                "COMMENT",
                "TAG",
                "TRANSCRIPTION",
                "SCENE",
                "PERSON"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "source_version_id": {
            "format": "uuid",
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateCollectionContentOrderingSchema": {
        "properties": {
          "custom_order_sort": {
            "description": "Initial sort order for an ordered collection. Specified as a comma separated list of fieldnames with direction. For example - date_created,asc;status,desc",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CustomActionCallbackReplySchema": {
        "properties": {
          "redirect_url": {
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CustomActionCallbackSchema": {
        "properties": {
          "asset_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "collection_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "metadata_values": {
            "type": "object"
          },
          "metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "saved_search_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CustomActionSchema": {
        "properties": {
          "app_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "context": {
            "enum": [
              "ASSET",
              "ASSET_SUBCLIP",
              "SHARED_ASSET",
              "COLLECTION",
              "SHARED_COLLECTION",
              "BULK",
              "SAVED_SEARCH",
              "NONE"
            ],
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "disabled": {
            "type": "boolean"
          },
          "headers": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "last_error": {
            "readOnly": true,
            "type": "string"
          },
          "metadata_view": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "FAILING",
              "HEALTHY"
            ],
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "enum": [
              "OPEN",
              "POST"
            ],
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "context",
          "title",
          "url"
        ],
        "type": "object"
      },
      "CustomActionsSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/CustomActionSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DeleteQueueAssetsQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteQueueCollectionsQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteQueueSchema": {
        "properties": {
          "ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "ids"
        ],
        "type": "object"
      },
      "DeleteSegmentsSchema": {
        "properties": {
          "segment_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "segment_type": {
            "enum": [
              "MARKER",
              "QC",
              "GENERIC",
              "COMMENT",
              "TAG",
              "TRANSCRIPTION",
              "SCENE",
              "PERSON"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Drawing": {
        "properties": {
          "primitives": {
            "items": {
              "$ref": "#/components/schemas/DrawingPrimitive"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DrawingPoint": {
        "properties": {
          "x": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "y": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "required": [
          "x",
          "y"
        ],
        "type": "object"
      },
      "DrawingPointSchema": {
        "properties": {
          "x": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "y": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "required": [
          "x",
          "y"
        ],
        "type": "object"
      },
      "DrawingPrimitive": {
        "properties": {
          "color": {
            "type": "string"
          },
          "points": {
            "items": {
              "$ref": "#/components/schemas/DrawingPoint"
            },
            "type": "array"
          },
          "text": {
            "type": "string"
          },
          "type": {
            "enum": [
              "LINE",
              "RECTANGLE",
              "ARROW",
              "ELLIPSE",
              "PENCIL",
              "TEXT"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "DrawingPrimitiveSchema": {
        "properties": {
          "color": {
            "type": "string"
          },
          "points": {
            "items": {
              "$ref": "#/components/schemas/DrawingPointSchema"
            },
            "type": "array"
          },
          "text": {
            "type": "string"
          },
          "type": {
            "enum": [
              "LINE",
              "RECTANGLE",
              "ARROW",
              "ELLIPSE",
              "PENCIL",
              "TEXT"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "DrawingSchema": {
        "properties": {
          "primitives": {
            "items": {
              "$ref": "#/components/schemas/DrawingPrimitiveSchema"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EditAssetVersion": {
        "properties": {
          "analyze_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "archive_status": {
            "enum": [
              "NOT_ARCHIVED",
              "ARCHIVING",
              "FAILED_TO_ARCHIVE",
              "ARCHIVED"
            ],
            "type": "string"
          },
          "created_by_user": {
            "format": "uuid",
            "type": "string"
          },
          "created_by_user_info": {
            "$ref": "#/components/schemas/User"
          },
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "is_online": {
            "type": "boolean"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "IN_PROGRESS",
              "FAILED",
              "DELETING",
              "DELETED"
            ],
            "type": "string"
          },
          "transcribe_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "EditAssetVersionSchema": {
        "properties": {
          "analyze_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          },
          "archive_status": {
            "enum": [
              "NOT_ARCHIVED",
              "ARCHIVING",
              "FAILED_TO_ARCHIVE",
              "ARCHIVED"
            ],
            "type": "string"
          },
          "created_by_user": {
            "format": "uuid",
            "type": "string"
          },
          "created_by_user_info": {
            "$ref": "#/components/schemas/User"
          },
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "is_online": {
            "type": "boolean"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "IN_PROGRESS",
              "FAILED",
              "DELETING",
              "DELETED"
            ],
            "type": "string"
          },
          "transcribe_status": {
            "enum": [
              "N/A",
              "REQUESTED",
              "IN_PROGRESS",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "EditSegmentSchema": {
        "properties": {
          "asset_id": {
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "drawing": {
            "$ref": "#/components/schemas/DrawingSchema"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string"
          },
          "keyframe_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "parent_id": {
            "readOnly": true,
            "type": "string"
          },
          "path": {
            "readOnly": true,
            "type": "string"
          },
          "segment_checked": {
            "type": "boolean"
          },
          "segment_color": {
            "type": "string"
          },
          "segment_text": {
            "nullable": true,
            "type": "string"
          },
          "segment_track": {
            "nullable": true,
            "type": "string"
          },
          "segment_type": {
            "enum": [
              "MARKER",
              "QC",
              "GENERIC",
              "COMMENT",
              "TAG",
              "TRANSCRIPTION",
              "SCENE",
              "PERSON"
            ],
            "type": "string"
          },
          "share_user_email": {
            "format": "email",
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "DELETED"
            ],
            "type": "string"
          },
          "subclip_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "time_end_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "time_start_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "top_level": {
            "readOnly": true,
            "type": "boolean"
          },
          "transcription": {
            "$ref": "#/components/schemas/TranscriptionType"
          },
          "transcription_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "user_first_name": {
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "readOnly": true,
            "type": "string"
          },
          "user_info": {
            "$ref": "#/components/schemas/User"
          },
          "user_last_name": {
            "readOnly": true,
            "type": "string"
          },
          "user_photo": {
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "type": "string"
          }
        },
        "required": [
          "segment_type"
        ],
        "type": "object"
      },
      "FavoritesSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AssetOrCollectionSchema"
              }
            ],
            "readOnly": true
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GetAssetsLatestVersionSchema": {
        "properties": {
          "include_in_progress": {
            "default": false,
            "type": "boolean"
          },
          "object_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "object_type": {
            "default": "assets",
            "enum": [
              "assets"
            ],
            "type": "string"
          }
        },
        "required": [
          "object_ids"
        ],
        "type": "object"
      },
      "ListObjectsSchema1": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "MetadataFieldValueSchema": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "field_values": {
            "items": {
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ReindexAllAssetsSchema": {
        "properties": {
          "asset_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "realms": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ReindexAllCollectionsSchema": {
        "properties": {
          "collection_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "realms": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "required": [
          "collection_ids"
        ],
        "type": "object"
      },
      "ReindexAllSegmentsSchema": {
        "properties": {
          "asset_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "ignore_comments": {
            "type": "boolean"
          },
          "realms": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "required": [
          "asset_ids"
        ],
        "type": "object"
      },
      "ReindexAssetHistorySchema": {
        "properties": {
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ReindexAssetSchema": {
        "properties": {
          "realms": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ReindexCollectionContentSchema": {
        "properties": {
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ReindexCollectionSchema": {
        "properties": {
          "realms": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ReindexInheritedCollectionsACLSchema": {
        "properties": {
          "collection_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "content": {
            "default": true,
            "type": "boolean"
          },
          "recursive": {
            "default": true,
            "type": "boolean"
          }
        },
        "required": [
          "collection_ids"
        ],
        "type": "object"
      },
      "ReindexSegmentSchema": {
        "properties": {
          "ignore_comments": {
            "type": "boolean"
          },
          "realms": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ReindexSegmentsSchema": {
        "properties": {
          "ignore_comments": {
            "type": "boolean"
          },
          "realms": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "segment_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "required": [
          "segment_ids"
        ],
        "type": "object"
      },
      "RelationElastic": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "related_from_asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "related_to_asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "relation_type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RelationElasticSchema": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "related_from_asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "related_to_asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "relation_type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RelationSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "related_to_asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "relation_type": {
            "type": "string"
          }
        },
        "required": [
          "related_to_asset_id",
          "relation_type"
        ],
        "type": "object"
      },
      "RelationTypeSchema": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "destination_label": {
            "type": "string"
          },
          "is_directional": {
            "type": "boolean"
          },
          "is_system": {
            "readOnly": true,
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "source_label": {
            "type": "string"
          }
        },
        "required": [
          "destination_label",
          "name",
          "source_label"
        ],
        "type": "object"
      },
      "RelationTypesSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/RelationTypeSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "RelationsQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RelationsSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/RelationSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Segment": {
        "properties": {
          "asset_id": {
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "drawing": {
            "$ref": "#/components/schemas/Drawing"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "has_drawing": {
            "readOnly": true
          },
          "id": {
            "readOnly": true,
            "type": "string"
          },
          "keyframe_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "parent_id": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "segment_checked": {
            "type": "boolean"
          },
          "segment_color": {
            "type": "string"
          },
          "segment_text": {
            "nullable": true,
            "type": "string"
          },
          "segment_track": {
            "nullable": true,
            "type": "string"
          },
          "segment_type": {
            "enum": [
              "MARKER",
              "QC",
              "GENERIC",
              "COMMENT",
              "TAG",
              "TRANSCRIPTION",
              "SCENE",
              "PERSON"
            ],
            "type": "string"
          },
          "share_user_email": {
            "format": "email",
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "DELETED"
            ],
            "type": "string"
          },
          "subclip_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "time_end_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "time_start_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "top_level": {
            "type": "boolean"
          },
          "transcription": {
            "$ref": "#/components/schemas/TranscriptionType"
          },
          "transcription_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "user_first_name": {
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "user_info": {
            "$ref": "#/components/schemas/User"
          },
          "user_last_name": {
            "readOnly": true,
            "type": "string"
          },
          "user_photo": {
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "type": "string"
          }
        },
        "required": [
          "segment_type"
        ],
        "type": "object"
      },
      "SegmentBaseSchema": {
        "properties": {
          "asset_id": {
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "drawing": {
            "$ref": "#/components/schemas/DrawingSchema"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string"
          },
          "keyframe_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "parent_id": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "segment_checked": {
            "type": "boolean"
          },
          "segment_color": {
            "type": "string"
          },
          "segment_text": {
            "nullable": true,
            "type": "string"
          },
          "segment_track": {
            "nullable": true,
            "type": "string"
          },
          "segment_type": {
            "enum": [
              "MARKER",
              "QC",
              "GENERIC",
              "COMMENT",
              "TAG",
              "TRANSCRIPTION",
              "SCENE",
              "PERSON"
            ],
            "type": "string"
          },
          "share_user_email": {
            "format": "email",
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "DELETED"
            ],
            "type": "string"
          },
          "subclip_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "time_end_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "time_start_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "top_level": {
            "type": "boolean"
          },
          "transcription": {
            "$ref": "#/components/schemas/TranscriptionType"
          },
          "transcription_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "user_first_name": {
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "user_info": {
            "$ref": "#/components/schemas/User"
          },
          "user_last_name": {
            "readOnly": true,
            "type": "string"
          },
          "user_photo": {
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "type": "string"
          }
        },
        "required": [
          "segment_type"
        ],
        "type": "object"
      },
      "SegmentElasticSchema": {
        "properties": {
          "asset_id": {
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "drawing": {
            "$ref": "#/components/schemas/DrawingSchema"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "has_drawing": {
            "readOnly": true,
            "type": "boolean"
          },
          "id": {
            "readOnly": true,
            "type": "string"
          },
          "keyframe_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "parent_id": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "segment_checked": {
            "type": "boolean"
          },
          "segment_color": {
            "type": "string"
          },
          "segment_text": {
            "nullable": true,
            "type": "string"
          },
          "segment_track": {
            "nullable": true,
            "type": "string"
          },
          "segment_type": {
            "enum": [
              "MARKER",
              "QC",
              "GENERIC",
              "COMMENT",
              "TAG",
              "TRANSCRIPTION",
              "SCENE",
              "PERSON"
            ],
            "type": "string"
          },
          "share_user_email": {
            "format": "email",
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "DELETED"
            ],
            "type": "string"
          },
          "subclip_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "time_end_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "time_start_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "top_level": {
            "type": "boolean"
          },
          "transcription": {
            "$ref": "#/components/schemas/TranscriptionType"
          },
          "transcription_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "user_first_name": {
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "user_info": {
            "$ref": "#/components/schemas/User"
          },
          "user_last_name": {
            "readOnly": true,
            "type": "string"
          },
          "user_photo": {
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "type": "string"
          }
        },
        "required": [
          "segment_type"
        ],
        "type": "object"
      },
      "SegmentQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "scroll": {
            "type": "boolean"
          },
          "scroll_id": {
            "format": "uuid",
            "type": "string"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SegmentSchema": {
        "properties": {
          "asset_id": {
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "drawing": {
            "$ref": "#/components/schemas/DrawingSchema"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "has_drawing": {
            "readOnly": true,
            "type": "boolean"
          },
          "id": {
            "readOnly": true,
            "type": "string"
          },
          "keyframe_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "parent_id": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "segment_checked": {
            "type": "boolean"
          },
          "segment_color": {
            "type": "string"
          },
          "segment_text": {
            "nullable": true,
            "type": "string"
          },
          "segment_track": {
            "nullable": true,
            "type": "string"
          },
          "segment_type": {
            "enum": [
              "MARKER",
              "QC",
              "GENERIC",
              "COMMENT",
              "TAG",
              "TRANSCRIPTION",
              "SCENE",
              "PERSON"
            ],
            "type": "string"
          },
          "share_user_email": {
            "format": "email",
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "DELETED"
            ],
            "type": "string"
          },
          "subclip_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "time_end_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "time_start_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "top_level": {
            "type": "boolean"
          },
          "transcription": {
            "$ref": "#/components/schemas/TranscriptionType"
          },
          "transcription_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "user_first_name": {
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "user_info": {
            "$ref": "#/components/schemas/User"
          },
          "user_last_name": {
            "readOnly": true,
            "type": "string"
          },
          "user_photo": {
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "type": "string"
          }
        },
        "required": [
          "segment_type"
        ],
        "type": "object"
      },
      "SegmentsSchema": {
        "properties": {
          "facets": {
            "type": "object"
          },
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/SegmentElasticSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ShareBaseSchema": {
        "properties": {
          "allow_approving_comments": {
            "type": "boolean"
          },
          "allow_comments": {
            "type": "boolean"
          },
          "allow_custom_actions": {
            "type": "boolean"
          },
          "allow_download": {
            "type": "boolean"
          },
          "allow_download_proxy": {
            "type": "boolean"
          },
          "allow_setting_approve_status": {
            "type": "boolean"
          },
          "allow_upload": {
            "type": "boolean"
          },
          "allow_user_search_for_mentions": {
            "type": "boolean"
          },
          "allow_view_transcriptions": {
            "type": "boolean"
          },
          "allow_view_versions": {
            "type": "boolean"
          },
          "app_id": {
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "expires": {
            "format": "date-time",
            "type": "string"
          },
          "has_password": {
            "readOnly": true,
            "type": "boolean"
          },
          "id": {
            "readOnly": true,
            "type": "string"
          },
          "message": {
            "nullable": true,
            "type": "string"
          },
          "metadata_views": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "object_id": {
            "readOnly": true,
            "type": "string"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "owner_id": {
            "readOnly": true,
            "type": "string"
          },
          "system_domain_id": {
            "readOnly": true,
            "type": "string"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "upload_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "url": {
            "nullable": true,
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "allow_approving_comments",
          "allow_comments",
          "allow_download",
          "allow_setting_approve_status"
        ],
        "type": "object"
      },
      "ShareCreateSchema": {
        "properties": {
          "allow_approving_comments": {
            "type": "boolean"
          },
          "allow_comments": {
            "type": "boolean"
          },
          "allow_custom_actions": {
            "type": "boolean"
          },
          "allow_download": {
            "type": "boolean"
          },
          "allow_download_proxy": {
            "type": "boolean"
          },
          "allow_setting_approve_status": {
            "type": "boolean"
          },
          "allow_upload": {
            "type": "boolean"
          },
          "allow_user_search_for_mentions": {
            "type": "boolean"
          },
          "allow_view_transcriptions": {
            "type": "boolean"
          },
          "allow_view_versions": {
            "type": "boolean"
          },
          "emails": {
            "items": {
              "format": "email",
              "type": "string"
            },
            "type": "array"
          },
          "expires": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "metadata_views": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "object_id": {
            "type": "string"
          },
          "object_type": {
            "type": "string"
          },
          "owner_id": {
            "readOnly": true,
            "type": "string"
          },
          "password": {
            "default": null,
            "nullable": true,
            "type": "string"
          },
          "system_domain_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "upload_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "allow_approving_comments",
          "allow_comments",
          "allow_download",
          "allow_setting_approve_status",
          "emails"
        ],
        "type": "object"
      },
      "ShareLoginSchema": {
        "properties": {
          "hash": {
            "type": "string"
          },
          "object_id": {
            "type": "string"
          },
          "object_type": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "hash"
        ],
        "type": "object"
      },
      "ShareOptionsBaseSchema": {
        "properties": {},
        "type": "object"
      },
      "ShareRoles": {
        "properties": {
          "roles": {
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "ShareSchema": {
        "properties": {
          "allow_approving_comments": {
            "type": "boolean"
          },
          "allow_comments": {
            "type": "boolean"
          },
          "allow_custom_actions": {
            "type": "boolean"
          },
          "allow_download": {
            "type": "boolean"
          },
          "allow_download_proxy": {
            "type": "boolean"
          },
          "allow_setting_approve_status": {
            "type": "boolean"
          },
          "allow_upload": {
            "type": "boolean"
          },
          "allow_user_search_for_mentions": {
            "type": "boolean"
          },
          "allow_view_transcriptions": {
            "type": "boolean"
          },
          "allow_view_versions": {
            "type": "boolean"
          },
          "app_id": {
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "expires": {
            "format": "date-time",
            "type": "string"
          },
          "has_password": {
            "readOnly": true,
            "type": "boolean"
          },
          "id": {
            "readOnly": true,
            "type": "string"
          },
          "message": {
            "nullable": true,
            "type": "string"
          },
          "metadata_views": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "object_id": {
            "readOnly": true,
            "type": "string"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "owner_id": {
            "readOnly": true,
            "type": "string"
          },
          "system_domain_id": {
            "readOnly": true,
            "type": "string"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "upload_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "url": {
            "nullable": true,
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "allow_approving_comments",
          "allow_comments",
          "allow_download",
          "allow_setting_approve_status"
        ],
        "type": "object"
      },
      "ShareTokenSchema": {
        "properties": {
          "app_id": {
            "readOnly": true,
            "type": "string"
          },
          "email": {
            "format": "email",
            "type": "string"
          },
          "expires": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "object_id": {
            "readOnly": true,
            "type": "string"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "roles": {
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "share_id": {
            "readOnly": true,
            "type": "string"
          },
          "share_user_id": {
            "readOnly": true,
            "type": "string"
          },
          "system_domain_id": {
            "readOnly": true,
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "user_id": {
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ShareURLCreateSchema": {
        "properties": {
          "allow_approving_comments": {
            "type": "boolean"
          },
          "allow_comments": {
            "type": "boolean"
          },
          "allow_custom_actions": {
            "type": "boolean"
          },
          "allow_download": {
            "type": "boolean"
          },
          "allow_download_proxy": {
            "type": "boolean"
          },
          "allow_setting_approve_status": {
            "type": "boolean"
          },
          "allow_upload": {
            "type": "boolean"
          },
          "allow_user_search_for_mentions": {
            "type": "boolean"
          },
          "allow_view_transcriptions": {
            "type": "boolean"
          },
          "allow_view_versions": {
            "type": "boolean"
          },
          "expires": {
            "format": "date-time",
            "type": "string"
          },
          "metadata_views": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "object_id": {
            "type": "string"
          },
          "object_type": {
            "type": "string"
          },
          "owner_id": {
            "type": "string"
          },
          "password": {
            "default": null,
            "nullable": true,
            "type": "string"
          },
          "system_domain_id": {
            "type": "string"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "upload_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "allow_approving_comments",
          "allow_comments",
          "allow_download",
          "allow_setting_approve_status"
        ],
        "type": "object"
      },
      "ShareURLSchema": {
        "properties": {
          "allow_approving_comments": {
            "type": "boolean"
          },
          "allow_comments": {
            "type": "boolean"
          },
          "allow_custom_actions": {
            "type": "boolean"
          },
          "allow_download": {
            "type": "boolean"
          },
          "allow_download_proxy": {
            "type": "boolean"
          },
          "allow_setting_approve_status": {
            "type": "boolean"
          },
          "allow_upload": {
            "type": "boolean"
          },
          "allow_user_search_for_mentions": {
            "type": "boolean"
          },
          "allow_view_transcriptions": {
            "type": "boolean"
          },
          "allow_view_versions": {
            "type": "boolean"
          },
          "app_id": {
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "expires": {
            "format": "date-time",
            "type": "string"
          },
          "has_password": {
            "readOnly": true,
            "type": "boolean"
          },
          "id": {
            "readOnly": true,
            "type": "string"
          },
          "message": {
            "nullable": true,
            "type": "string"
          },
          "metadata_views": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "object_id": {
            "readOnly": true,
            "type": "string"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "owner_id": {
            "readOnly": true,
            "type": "string"
          },
          "system_domain_id": {
            "readOnly": true,
            "type": "string"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "upload_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "allow_approving_comments",
          "allow_comments",
          "allow_download",
          "allow_setting_approve_status"
        ],
        "type": "object"
      },
      "ShareUserSchema": {
        "properties": {
          "access_count": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "email": {
            "format": "email",
            "type": "string"
          },
          "first_name": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "internal_user_id": {
            "readOnly": true,
            "type": "string"
          },
          "last_access_date": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "last_name": {
            "readOnly": true,
            "type": "string"
          },
          "object_id": {
            "readOnly": true,
            "type": "string"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "password": {
            "type": "string",
            "writeOnly": true
          },
          "photo": {
            "readOnly": true,
            "type": "string"
          },
          "photo_big": {
            "readOnly": true,
            "type": "string"
          },
          "photo_small": {
            "readOnly": true,
            "type": "string"
          },
          "share_id": {
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "ShareUsersSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/ShareUserSchema"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "SharesSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/ShareSchema"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "SynchronizeCollectionKeyframesSchema": {
        "properties": {
          "asset_ids": {
            "items": {
              "type": "string"
            },
            "maxItems": 3,
            "minItems": 0,
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "TranscriptionElementType": {
        "properties": {
          "end_ms": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "score": {
            "type": "number"
          },
          "start_ms": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "end_ms",
          "start_ms",
          "value"
        ],
        "type": "object"
      },
      "TranscriptionElementTypeSchema": {
        "properties": {
          "end_ms": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "score": {
            "type": "number"
          },
          "start_ms": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "end_ms",
          "start_ms",
          "value"
        ],
        "type": "object"
      },
      "TranscriptionType": {
        "properties": {
          "speaker": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "words": {
            "items": {
              "$ref": "#/components/schemas/TranscriptionElementType"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "words"
        ],
        "type": "object"
      },
      "TranscriptionTypeSchema": {
        "properties": {
          "speaker": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "words": {
            "items": {
              "$ref": "#/components/schemas/TranscriptionElementTypeSchema"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "words"
        ],
        "type": "object"
      },
      "User": {
        "properties": {
          "email": {
            "format": "email",
            "readOnly": true,
            "type": "string"
          },
          "first_name": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "last_name": {
            "readOnly": true,
            "type": "string"
          },
          "photo": {
            "readOnly": true,
            "type": "string"
          },
          "photo_big": {
            "readOnly": true,
            "type": "string"
          },
          "photo_small": {
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserSchema": {
        "properties": {
          "email": {
            "format": "email",
            "readOnly": true,
            "type": "string"
          },
          "first_name": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "last_name": {
            "readOnly": true,
            "type": "string"
          },
          "photo": {
            "readOnly": true,
            "type": "string"
          },
          "photo_big": {
            "readOnly": true,
            "type": "string"
          },
          "photo_small": {
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AppSchema": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "default_user_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "url": {
            "format": "url",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "ApprovedAppInstanceSchema": {
        "properties": {
          "app_id": {
            "format": "uuid",
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "app_id",
          "id"
        ],
        "type": "object"
      },
      "AppsSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/AppSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Auth0SettingsSchema": {
        "properties": {
          "auth0_client_id": {
            "type": "string"
          },
          "auth0_name": {
            "type": "string"
          },
          "auth0_region": {
            "type": "string"
          },
          "cert_fingerprint": {
            "type": "string"
          },
          "cert_fingerprint_algorithm": {
            "enum": [
              "http://www.w3.org/2000/09/xmldsig#sha1",
              "http://www.w3.org/2001/04/xmlenc#sha256",
              "http://www.w3.org/2001/04/xmldsig-more#sha384",
              "http://www.w3.org/2001/04/xmlenc#sha512"
            ],
            "type": "string"
          },
          "digest_algorithm": {
            "enum": [
              "http://www.w3.org/2000/09/xmldsig#sha1",
              "http://www.w3.org/2001/04/xmlenc#sha256",
              "http://www.w3.org/2001/04/xmldsig-more#sha384",
              "http://www.w3.org/2001/04/xmlenc#sha512"
            ],
            "type": "string"
          },
          "domain_name": {
            "readOnly": true,
            "type": "string"
          },
          "idp_x509cert": {
            "type": "string"
          },
          "signature_algorithm": {
            "enum": [
              "http://www.w3.org/2000/09/xmldsig#dsa-sha1",
              "http://www.w3.org/2000/09/xmldsig#rsa-sha1",
              "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256",
              "http://www.w3.org/2001/04/xmldsig-more#rsa-sha384",
              "http://www.w3.org/2001/04/xmldsig-more#rsa-sha512"
            ],
            "type": "string"
          }
        },
        "required": [
          "auth0_client_id",
          "auth0_name",
          "auth0_region"
        ],
        "type": "object"
      },
      "CountriesSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/Country"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Country": {
        "properties": {
          "alpha2": {
            "type": "string"
          },
          "alpha3": {
            "type": "string"
          },
          "apolitical_name": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "numeric": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "CountrySchema": {
        "properties": {
          "alpha2": {
            "type": "string"
          },
          "alpha3": {
            "type": "string"
          },
          "apolitical_name": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "numeric": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "DomainIdentityProviderMapSchema": {
        "properties": {
          "domain": {
            "type": "string"
          },
          "identity_provider_id": {
            "format": "uuid",
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "domain",
          "identity_provider_id",
          "system_domain_id"
        ],
        "type": "object"
      },
      "EmailLoginSchema": {
        "properties": {
          "app_name": {
            "type": "string"
          },
          "email": {
            "format": "email",
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "ExternalAuthRequestResponseSchema": {
        "properties": {
          "app_id": {
            "format": "uuid",
            "type": "string"
          },
          "redirect_info": {
            "$ref": "#/components/schemas/RedirectInfoType"
          }
        },
        "type": "object"
      },
      "ExternalAuthRequestSchema": {
        "properties": {
          "app_id": {
            "format": "uuid",
            "type": "string"
          },
          "app_name": {
            "type": "string"
          },
          "redirect_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RedirectInfoType"
              }
            ],
            "nullable": true
          },
          "secret": {
            "type": "string"
          }
        },
        "required": [
          "secret"
        ],
        "type": "object"
      },
      "ExternalAuthSchema": {
        "properties": {
          "app_id": {
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "redirect_info": {
            "$ref": "#/components/schemas/RedirectInfoType"
          },
          "token": {
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ForgotPasswordSchema": {
        "properties": {
          "email": {
            "format": "email",
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "GenericSettingsSchema": {
        "properties": {
          "cert_fingerprint": {
            "type": "string"
          },
          "cert_fingerprint_algorithm": {
            "enum": [
              "http://www.w3.org/2000/09/xmldsig#sha1",
              "http://www.w3.org/2001/04/xmlenc#sha256",
              "http://www.w3.org/2001/04/xmldsig-more#sha384",
              "http://www.w3.org/2001/04/xmlenc#sha512"
            ],
            "type": "string"
          },
          "digest_algorithm": {
            "enum": [
              "http://www.w3.org/2000/09/xmldsig#sha1",
              "http://www.w3.org/2001/04/xmlenc#sha256",
              "http://www.w3.org/2001/04/xmldsig-more#sha384",
              "http://www.w3.org/2001/04/xmlenc#sha512"
            ],
            "type": "string"
          },
          "domain_name": {
            "readOnly": true,
            "type": "string"
          },
          "idp_entity_id": {
            "type": "string"
          },
          "idp_sls_redirect_url": {
            "type": "string"
          },
          "idp_sso_post_url": {
            "type": "string"
          },
          "idp_x509cert": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "name_id_encrypted": {
            "type": "boolean"
          },
          "signature_algorithm": {
            "enum": [
              "http://www.w3.org/2000/09/xmldsig#dsa-sha1",
              "http://www.w3.org/2000/09/xmldsig#rsa-sha1",
              "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256",
              "http://www.w3.org/2001/04/xmldsig-more#rsa-sha384",
              "http://www.w3.org/2001/04/xmldsig-more#rsa-sha512"
            ],
            "type": "string"
          },
          "want_assertions_signed": {
            "type": "boolean"
          },
          "want_messages_signed": {
            "type": "boolean"
          }
        },
        "required": [
          "idp_entity_id",
          "idp_sso_post_url",
          "name"
        ],
        "type": "object"
      },
      "IdentityProviderBaseSchema": {
        "properties": {
          "saml_settings": {
            "readOnly": true
          }
        },
        "type": "object"
      },
      "IdentityProviderBaseSettingsSchema": {
        "properties": {
          "cert_fingerprint": {
            "type": "string"
          },
          "cert_fingerprint_algorithm": {
            "enum": [
              "http://www.w3.org/2000/09/xmldsig#sha1",
              "http://www.w3.org/2001/04/xmlenc#sha256",
              "http://www.w3.org/2001/04/xmldsig-more#sha384",
              "http://www.w3.org/2001/04/xmlenc#sha512"
            ],
            "type": "string"
          },
          "digest_algorithm": {
            "enum": [
              "http://www.w3.org/2000/09/xmldsig#sha1",
              "http://www.w3.org/2001/04/xmlenc#sha256",
              "http://www.w3.org/2001/04/xmldsig-more#sha384",
              "http://www.w3.org/2001/04/xmlenc#sha512"
            ],
            "type": "string"
          },
          "domain_name": {
            "readOnly": true,
            "type": "string"
          },
          "idp_x509cert": {
            "type": "string"
          },
          "signature_algorithm": {
            "enum": [
              "http://www.w3.org/2000/09/xmldsig#dsa-sha1",
              "http://www.w3.org/2000/09/xmldsig#rsa-sha1",
              "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256",
              "http://www.w3.org/2001/04/xmldsig-more#rsa-sha384",
              "http://www.w3.org/2001/04/xmldsig-more#rsa-sha512"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "IdentityProviderSchema": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "public_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "saml_settings": {
            "readOnly": true
          },
          "settings": {},
          "type": {
            "enum": [
              "onelogin.com",
              "auth0.com",
              "okta.com",
              "GENERIC"
            ],
            "type": "string"
          },
          "verbose_logging": {
            "type": "boolean"
          }
        },
        "required": [
          "settings",
          "type"
        ],
        "type": "object"
      },
      "IdentityProvidersSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/IdentityProviderSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "MarketplaceGoogleLinkSchema": {
        "properties": {
          "marketplace_signup_nonce": {
            "type": "string"
          }
        },
        "required": [
          "marketplace_signup_nonce"
        ],
        "type": "object"
      },
      "MarketplaceGoogleSignupSchema": {
        "properties": {
          "x-gcp-marketplace-token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MultiDomainLoginSchema": {
        "properties": {
          "app_name": {
            "type": "string"
          },
          "email": {
            "format": "email",
            "type": "string"
          },
          "marketplace_signup_nonce": {
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "email",
          "system_domain_id"
        ],
        "type": "object"
      },
      "MultiDomainUserSystemSchema": {
        "properties": {
          "logo_url": {
            "format": "url",
            "readOnly": true,
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "type": "string"
          },
          "system_domain_name": {
            "readOnly": true,
            "type": "string"
          },
          "url": {
            "format": "url",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "system_domain_id"
        ],
        "type": "object"
      },
      "MultiDomainUserSystemsSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/MultiDomainUserSystemSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "OktaSettingsSchema": {
        "properties": {
          "cert_fingerprint": {
            "type": "string"
          },
          "cert_fingerprint_algorithm": {
            "enum": [
              "http://www.w3.org/2000/09/xmldsig#sha1",
              "http://www.w3.org/2001/04/xmlenc#sha256",
              "http://www.w3.org/2001/04/xmldsig-more#sha384",
              "http://www.w3.org/2001/04/xmlenc#sha512"
            ],
            "type": "string"
          },
          "digest_algorithm": {
            "enum": [
              "http://www.w3.org/2000/09/xmldsig#sha1",
              "http://www.w3.org/2001/04/xmlenc#sha256",
              "http://www.w3.org/2001/04/xmldsig-more#sha384",
              "http://www.w3.org/2001/04/xmlenc#sha512"
            ],
            "type": "string"
          },
          "domain_name": {
            "readOnly": true,
            "type": "string"
          },
          "idp_x509cert": {
            "type": "string"
          },
          "okta_app_id": {
            "type": "string"
          },
          "okta_name": {
            "type": "string"
          },
          "okta_preview": {
            "type": "boolean"
          },
          "okta_sso": {
            "type": "string"
          },
          "signature_algorithm": {
            "enum": [
              "http://www.w3.org/2000/09/xmldsig#dsa-sha1",
              "http://www.w3.org/2000/09/xmldsig#rsa-sha1",
              "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256",
              "http://www.w3.org/2001/04/xmldsig-more#rsa-sha384",
              "http://www.w3.org/2001/04/xmldsig-more#rsa-sha512"
            ],
            "type": "string"
          }
        },
        "required": [
          "okta_name"
        ],
        "type": "object"
      },
      "OneloginSettingsSchema": {
        "properties": {
          "cert_fingerprint": {
            "type": "string"
          },
          "cert_fingerprint_algorithm": {
            "enum": [
              "http://www.w3.org/2000/09/xmldsig#sha1",
              "http://www.w3.org/2001/04/xmlenc#sha256",
              "http://www.w3.org/2001/04/xmldsig-more#sha384",
              "http://www.w3.org/2001/04/xmlenc#sha512"
            ],
            "type": "string"
          },
          "digest_algorithm": {
            "enum": [
              "http://www.w3.org/2000/09/xmldsig#sha1",
              "http://www.w3.org/2001/04/xmlenc#sha256",
              "http://www.w3.org/2001/04/xmldsig-more#sha384",
              "http://www.w3.org/2001/04/xmlenc#sha512"
            ],
            "type": "string"
          },
          "domain_name": {
            "readOnly": true,
            "type": "string"
          },
          "idp_x509cert": {
            "type": "string"
          },
          "onelogin_client_id": {
            "type": "string"
          },
          "onelogin_name": {
            "type": "string"
          },
          "signature_algorithm": {
            "enum": [
              "http://www.w3.org/2000/09/xmldsig#dsa-sha1",
              "http://www.w3.org/2000/09/xmldsig#rsa-sha1",
              "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256",
              "http://www.w3.org/2001/04/xmldsig-more#rsa-sha384",
              "http://www.w3.org/2001/04/xmldsig-more#rsa-sha512"
            ],
            "type": "string"
          }
        },
        "required": [
          "onelogin_client_id",
          "onelogin_name"
        ],
        "type": "object"
      },
      "PasswordChecksSchema": {
        "properties": {
          "digits": {
            "format": "int32",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "lowercase": {
            "format": "int32",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "max_length": {
            "format": "int32",
            "maximum": 64,
            "minimum": 8,
            "nullable": true,
            "type": "integer"
          },
          "min_length": {
            "format": "int32",
            "maximum": 56,
            "minimum": 8,
            "nullable": true,
            "type": "integer"
          },
          "special_symbols": {
            "format": "int32",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "uppercase": {
            "format": "int32",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "RedirectInfoType": {
        "properties": {
          "headers": {
            "nullable": true,
            "type": "object"
          },
          "url": {
            "format": "url",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "RedirectInfoTypeSchema": {
        "properties": {
          "headers": {
            "nullable": true,
            "type": "object"
          },
          "url": {
            "format": "url",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReferralCodeSchema": {
        "properties": {
          "code": {
            "type": "string"
          },
          "do_not_delete": {
            "nullable": true,
            "type": "boolean"
          },
          "manage_system_domain_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "ordway_customer_id": {
            "nullable": true,
            "type": "string"
          },
          "sales_force_id": {
            "nullable": true,
            "type": "string"
          },
          "valid_to": {
            "format": "date-time",
            "type": "string"
          },
          "value": {
            "type": "number"
          }
        },
        "required": [
          "code",
          "valid_to",
          "value"
        ],
        "type": "object"
      },
      "ReferralCodesSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/ReferralCodeSchema"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "RegistrationSchema": {
        "properties": {
          "base_url": {
            "readOnly": true,
            "type": "string"
          },
          "company_name": {
            "nullable": true,
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "email": {
            "format": "email",
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "marketplace_signup_nonce": {
            "type": "string"
          },
          "ordway_customer_id": {
            "type": "string"
          },
          "ordway_subscription_id": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "writeOnly": true
          },
          "referral_code": {
            "type": "string"
          },
          "stripe_id": {
            "type": "string"
          }
        },
        "required": [
          "country",
          "email",
          "first_name",
          "last_name",
          "password"
        ],
        "type": "object"
      },
      "ResetPasswordSchema": {
        "properties": {
          "password": {
            "type": "string",
            "writeOnly": true
          },
          "repeat_password": {
            "type": "string",
            "writeOnly": true
          }
        },
        "required": [
          "password",
          "repeat_password"
        ],
        "type": "object"
      },
      "SAMLLoginSchema": {
        "properties": {
          "email": {
            "format": "email",
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "SimpleLoginSchema": {
        "properties": {
          "app_name": {
            "type": "string"
          },
          "email": {
            "format": "email",
            "type": "string"
          },
          "marketplace_signup_nonce": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "writeOnly": true
          }
        },
        "required": [
          "email",
          "password"
        ],
        "type": "object"
      },
      "SystemDomainFromReferralCodeSchema": {
        "properties": {
          "admin_email": {
            "type": "string"
          },
          "admin_first_name": {
            "type": "string"
          },
          "admin_last_name": {
            "type": "string"
          },
          "admin_password": {
            "type": "string"
          },
          "country_code": {
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "admin_email",
          "admin_first_name",
          "admin_password",
          "country_code",
          "name"
        ],
        "type": "object"
      },
      "SystemDomainFromTemplateSchema": {
        "properties": {
          "admin_email": {
            "type": "string"
          },
          "admin_first_name": {
            "type": "string"
          },
          "admin_last_name": {
            "type": "string"
          },
          "admin_password": {
            "type": "string"
          },
          "base_url": {
            "type": "string"
          },
          "custom_terms": {
            "type": "boolean"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "enum": [
              "TRIAL",
              "CUSTOMER",
              "PARTNER",
              "INTERNAL"
            ],
            "type": "string"
          }
        },
        "required": [
          "admin_email",
          "name"
        ],
        "type": "object"
      },
      "SystemDomainSchema": {
        "properties": {
          "base_url": {
            "type": "string"
          },
          "custom_terms": {
            "readOnly": true,
            "type": "boolean"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deactivate_date": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "discount_percent": {
            "readOnly": true,
            "type": "number"
          },
          "do_not_charge_edge_transcoder": {
            "readOnly": true,
            "type": "boolean"
          },
          "do_not_charge_remote_proxies": {
            "readOnly": true,
            "type": "boolean"
          },
          "do_not_charge_shield": {
            "readOnly": true,
            "type": "boolean"
          },
          "freeze_date": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "invoice_end_of_month": {
            "readOnly": true,
            "type": "boolean"
          },
          "is_template": {
            "readOnly": true,
            "type": "boolean"
          },
          "marketplace_customer_id": {
            "readOnly": true,
            "type": "string"
          },
          "marketplace_entitlement_id": {
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "ordway_customer_id": {
            "readOnly": true,
            "type": "string"
          },
          "ordway_subscription_id": {
            "readOnly": true,
            "type": "string"
          },
          "price_list": {
            "readOnly": true,
            "type": "string"
          },
          "referral_code": {
            "readOnly": true,
            "type": "string"
          },
          "sales_force_id": {
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "WARNING",
              "FROZEN",
              "DEACTIVATED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "stripe_id": {
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "enum": [
              "TRIAL",
              "CUSTOMER",
              "PARTNER",
              "INTERNAL"
            ],
            "readOnly": true,
            "type": "string"
          },
          "warning_message": {
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "base_url",
          "name"
        ],
        "type": "object"
      },
      "SystemDomainSuperAdminSchema": {
        "properties": {
          "base_url": {
            "type": "string"
          },
          "custom_terms": {
            "type": "boolean"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deactivate_date": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "discount_percent": {
            "nullable": true,
            "type": "number"
          },
          "do_not_charge_edge_transcoder": {
            "type": "boolean"
          },
          "do_not_charge_remote_proxies": {
            "type": "boolean"
          },
          "do_not_charge_shield": {
            "type": "boolean"
          },
          "freeze_date": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "invoice_end_of_month": {
            "type": "boolean"
          },
          "is_template": {
            "type": "boolean"
          },
          "marketplace_customer_id": {
            "nullable": true,
            "type": "string"
          },
          "marketplace_entitlement_id": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "ordway_customer_id": {
            "nullable": true,
            "type": "string"
          },
          "ordway_subscription_id": {
            "nullable": true,
            "type": "string"
          },
          "price_list": {
            "nullable": true,
            "type": "string"
          },
          "referral_code": {
            "nullable": true,
            "type": "string"
          },
          "sales_force_id": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "WARNING",
              "FROZEN",
              "DEACTIVATED"
            ],
            "type": "string"
          },
          "stripe_id": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "enum": [
              "TRIAL",
              "CUSTOMER",
              "PARTNER",
              "INTERNAL"
            ],
            "type": "string"
          },
          "warning_message": {
            "type": "string"
          }
        },
        "required": [
          "base_url",
          "name"
        ],
        "type": "object"
      },
      "SystemDomainsSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/SystemDomainSchema"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "TemporaryPasswordTokenSchema": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "email": {
            "format": "email",
            "type": "string"
          },
          "expires": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "token"
        ],
        "type": "object"
      },
      "TokenBaseSchema": {
        "properties": {
          "app_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "auth_system_domains": {
            "items": {
              "$ref": "#/components/schemas/MultiDomainUserSystemSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "expires": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_admin": {
            "readOnly": true,
            "type": "boolean"
          },
          "is_super_admin": {
            "readOnly": true,
            "type": "boolean"
          },
          "is_super_admin_light": {
            "readOnly": true,
            "type": "boolean"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "system_domain_status": {
            "enum": [
              "ACTIVE",
              "WARNING",
              "FROZEN",
              "DEACTIVATED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "system_domain_warning_message": {
            "readOnly": true,
            "type": "string"
          },
          "system_domains": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "user_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "TokenOutputSchema": {
        "properties": {
          "app_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "auth_system_domains": {
            "items": {
              "$ref": "#/components/schemas/MultiDomainUserSystemSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "expires": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_admin": {
            "readOnly": true,
            "type": "boolean"
          },
          "is_super_admin": {
            "readOnly": true,
            "type": "boolean"
          },
          "is_super_admin_light": {
            "readOnly": true,
            "type": "boolean"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "system_domain_status": {
            "enum": [
              "ACTIVE",
              "WARNING",
              "FROZEN",
              "DEACTIVATED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "system_domain_warning_message": {
            "readOnly": true,
            "type": "string"
          },
          "system_domains": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "user_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "TokenSchema": {
        "properties": {
          "app_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "auth_system_domains": {
            "items": {
              "$ref": "#/components/schemas/MultiDomainUserSystemSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "expires": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_admin": {
            "readOnly": true,
            "type": "boolean"
          },
          "is_super_admin": {
            "readOnly": true,
            "type": "boolean"
          },
          "is_super_admin_light": {
            "readOnly": true,
            "type": "boolean"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "system_domain_status": {
            "enum": [
              "ACTIVE",
              "WARNING",
              "FROZEN",
              "DEACTIVATED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "system_domain_warning_message": {
            "readOnly": true,
            "type": "string"
          },
          "system_domains": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "token": {
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "TokensSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/TokenOutputSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "UserSystemDomainInviteSchema": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "is_existing_user_invitation": {
            "type": "boolean"
          },
          "system_domain_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id",
          "system_domain_id"
        ],
        "type": "object"
      },
      "AnalysisAmazonRekognitionSettingsSchema": {
        "properties": {
          "access_key": {
            "type": "string"
          },
          "bucket": {
            "type": "string"
          },
          "endpoint": {
            "type": "string"
          },
          "is_system": {
            "type": "boolean"
          },
          "path": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "secret_key": {
            "type": "string"
          }
        },
        "required": [
          "access_key",
          "bucket",
          "endpoint",
          "path",
          "region",
          "secret_key"
        ],
        "type": "object"
      },
      "AnalysisGoogleAISettingsSchema": {
        "properties": {
          "bucket_name": {
            "type": "string"
          },
          "is_system": {
            "type": "boolean"
          },
          "json_key": {
            "type": "string"
          }
        },
        "required": [
          "bucket_name",
          "json_key"
        ],
        "type": "object"
      },
      "AnalysisIconikSettingsSchema": {
        "properties": {
          "is_system": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "AnalysisProfileAmazonRekognitionSettingsSchema": {
        "properties": {
          "is_system": {
            "type": "boolean"
          },
          "min_confidence": {
            "format": "int32",
            "maximum": 100,
            "minimum": 0,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AnalysisProfileBaseSchema": {
        "properties": {},
        "type": "object"
      },
      "AnalysisProfileGoogleVideoIntelligenceSettingsSchema": {
        "properties": {
          "frame_confidence_threshold": {
            "maximum": 0.9,
            "minimum": 0.1,
            "type": "number"
          },
          "is_system": {
            "type": "boolean"
          },
          "video_confidence_threshold": {
            "maximum": 0.9,
            "minimum": 0.1,
            "type": "number"
          }
        },
        "type": "object"
      },
      "AnalysisProfileGoogleVisionSettingsSchema": {
        "properties": {
          "is_system": {
            "type": "boolean"
          },
          "min_confidence": {
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          }
        },
        "type": "object"
      },
      "AnalysisProfileIconikFaceRecognitionSettingsSchema": {
        "properties": {
          "confirmed_face_match_threshold": {
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "detection_threshold": {
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "directory_path": {
            "type": "string"
          },
          "is_system": {
            "type": "boolean"
          },
          "storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "unconfirmed_face_match_threshold": {
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          }
        },
        "required": [
          "directory_path",
          "storage_id"
        ],
        "type": "object"
      },
      "AnalysisProfileSchema": {
        "properties": {
          "analysis_service_account_id": {
            "format": "uuid",
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_default": {
            "readOnly": true,
            "type": "boolean"
          },
          "media_type": {
            "enum": [
              "image",
              "video",
              "transcription",
              "face_image",
              "face_video"
            ],
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "service_type": {
            "enum": [
              "GOOGLE_VISION",
              "GOOGLE_VIDEO_INTELLIGENCE",
              "AMAZON_REKOGNITION",
              "REV_AI",
              "ICONIK",
              "ICONIK_FACE_RECOGNITION"
            ],
            "type": "string"
          },
          "settings": {
            "type": "object"
          }
        },
        "required": [
          "analysis_service_account_id",
          "media_type",
          "name"
        ],
        "type": "object"
      },
      "AnalysisProfileServiceIdSchema": {
        "properties": {
          "analysis_service_account_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "analysis_service_account_id"
        ],
        "type": "object"
      },
      "AnalysisProfileSettingsSchema": {
        "properties": {
          "is_system": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "AnalysisProfilesSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/AnalysisProfileSchema"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "AnalysisRevAISettingsSchema": {
        "properties": {
          "access_token": {
            "type": "string"
          },
          "custom_vocabulary": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "is_system": {
            "type": "boolean"
          }
        },
        "required": [
          "access_token"
        ],
        "type": "object"
      },
      "AnalysisServiceAccountBaseSchema": {
        "properties": {},
        "type": "object"
      },
      "AnalysisServiceAccountReadSchema": {
        "properties": {
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "method": {
            "enum": [
              "GOOGLE_AI",
              "AMAZON",
              "REV_AI",
              "ICONIK"
            ],
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "settings": {
            "type": "object"
          }
        },
        "required": [
          "method",
          "name",
          "settings"
        ],
        "type": "object"
      },
      "AnalysisServiceAccountSchema": {
        "properties": {
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "method": {
            "enum": [
              "GOOGLE_AI",
              "AMAZON",
              "REV_AI",
              "ICONIK"
            ],
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "settings": {
            "type": "object"
          }
        },
        "required": [
          "method",
          "name",
          "settings"
        ],
        "type": "object"
      },
      "AnalysisServiceAccountsSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/AnalysisServiceAccountReadSchema"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "AssetBatchExportItemSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "file_name": {
            "nullable": true,
            "type": "string"
          },
          "format_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "asset_id"
        ],
        "type": "object"
      },
      "AssetBatchExportSchema": {
        "properties": {
          "assets": {
            "items": {
              "$ref": "#/components/schemas/AssetBatchExportItemSchema"
            },
            "type": "array"
          },
          "export_metadata": {
            "nullable": true,
            "type": "boolean"
          },
          "export_to_asset_folder": {
            "nullable": true,
            "type": "boolean"
          },
          "metadata_format": {
            "enum": [
              "CSV",
              "JSON",
              "XML"
            ],
            "nullable": true,
            "type": "string"
          },
          "metadata_view": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "overwrite": {
            "nullable": true,
            "type": "boolean"
          },
          "preferred_original_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "transcode_profile_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "required": [
          "assets"
        ],
        "type": "object"
      },
      "AssetExportSchema": {
        "properties": {
          "export_metadata": {
            "nullable": true,
            "type": "boolean"
          },
          "export_to_asset_folder": {
            "nullable": true,
            "type": "boolean"
          },
          "file_name": {
            "nullable": true,
            "type": "string"
          },
          "format_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "metadata_format": {
            "enum": [
              "CSV",
              "JSON",
              "XML"
            ],
            "nullable": true,
            "type": "string"
          },
          "metadata_view": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "overwrite": {
            "nullable": true,
            "type": "boolean"
          },
          "preferred_original_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "transcode_profile_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "AssetLinkProxySchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "format": "url",
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "asset_id",
          "url",
          "version_id"
        ],
        "type": "object"
      },
      "AssetSubclipKeyframesSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "original_asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_segment_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_version_id": {
            "format": "uuid",
            "type": "string"
          },
          "time_end_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "time_start_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "asset_id",
          "original_asset_id",
          "original_version_id",
          "time_end_milliseconds",
          "time_start_milliseconds",
          "version_id"
        ],
        "type": "object"
      },
      "AzureSettingsSchema": {
        "properties": {
          "access_group_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "acl_template_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "add_uuid_to_filenames": {
            "type": "boolean"
          },
          "aggregate_identical_files": {
            "type": "boolean"
          },
          "aggregate_ignore": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "aggregate_only_on_same_storage": {
            "type": "boolean"
          },
          "connection_string": {
            "type": "string"
          },
          "container": {
            "type": "string"
          },
          "delete": {
            "type": "boolean"
          },
          "enable_collection_directory_mapping": {
            "type": "boolean"
          },
          "filename_is_external_id": {
            "type": "boolean"
          },
          "folder_name_tags_metadata_field_name": {
            "type": "string"
          },
          "folder_name_tags_metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "is_system": {
            "type": "boolean"
          },
          "metadata_conversion_url": {
            "type": "string"
          },
          "metadata_conversion_url_headers": {
            "nullable": true,
            "type": "string"
          },
          "metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "preload_edge_jobs": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "read": {
            "type": "boolean"
          },
          "root_collection_id": {
            "format": "uuid",
            "type": "string"
          },
          "scan": {
            "type": "boolean"
          },
          "scan_directories": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "scan_ignore": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sidecar_metadata_required": {
            "type": "boolean"
          },
          "title_includes_extension": {
            "type": "boolean"
          },
          "transcode_ignore": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "write": {
            "type": "boolean"
          }
        },
        "required": [
          "connection_string",
          "container",
          "path"
        ],
        "type": "object"
      },
      "B2SettingsSchema": {
        "properties": {
          "access_group_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "account_id": {
            "type": "string"
          },
          "acl_template_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "add_uuid_to_filenames": {
            "type": "boolean"
          },
          "aggregate_identical_files": {
            "type": "boolean"
          },
          "aggregate_ignore": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "aggregate_only_on_same_storage": {
            "type": "boolean"
          },
          "authorization_token": {
            "type": "string"
          },
          "bucket_id": {
            "type": "string"
          },
          "bucket_name": {
            "type": "string"
          },
          "delete": {
            "type": "boolean"
          },
          "enable_collection_directory_mapping": {
            "type": "boolean"
          },
          "filename_is_external_id": {
            "type": "boolean"
          },
          "folder_name_tags_metadata_field_name": {
            "type": "string"
          },
          "folder_name_tags_metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "is_system": {
            "type": "boolean"
          },
          "metadata_conversion_url": {
            "type": "string"
          },
          "metadata_conversion_url_headers": {
            "nullable": true,
            "type": "string"
          },
          "metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "preload_edge_jobs": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "read": {
            "type": "boolean"
          },
          "root_collection_id": {
            "format": "uuid",
            "type": "string"
          },
          "scan": {
            "type": "boolean"
          },
          "scan_directories": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "scan_ignore": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sidecar_metadata_required": {
            "type": "boolean"
          },
          "title_includes_extension": {
            "type": "boolean"
          },
          "transcode_ignore": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "write": {
            "type": "boolean"
          }
        },
        "required": [
          "account_id",
          "authorization_token",
          "bucket_id",
          "bucket_name",
          "path"
        ],
        "type": "object"
      },
      "BaseExportSchema": {
        "properties": {
          "export_metadata": {
            "nullable": true,
            "type": "boolean"
          },
          "export_to_asset_folder": {
            "nullable": true,
            "type": "boolean"
          },
          "metadata_format": {
            "enum": [
              "CSV",
              "JSON",
              "XML"
            ],
            "nullable": true,
            "type": "string"
          },
          "metadata_view": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "overwrite": {
            "nullable": true,
            "type": "boolean"
          },
          "preferred_original_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "BulkAssetIdsWithFiles": {
        "properties": {
          "asset_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "BulkCheckAssetHasFilesSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/CheckAssetHasFiles"
            },
            "type": "array"
          }
        },
        "required": [
          "objects"
        ],
        "type": "object"
      },
      "BulkFilesetArchiveSchema": {
        "properties": {
          "allow_duplicate_transfers": {
            "default": false,
            "type": "boolean"
          },
          "delete_only_from_source_folder": {
            "default": false,
            "type": "boolean"
          },
          "delete_original": {
            "default": false,
            "type": "boolean"
          },
          "destination_storage_id": {
            "default": null,
            "nullable": true,
            "type": "string"
          },
          "keep_collection_structure": {
            "default": false,
            "type": "boolean"
          },
          "object_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "object_type": {
            "enum": [
              "assets",
              "collections",
              "saved_searches"
            ],
            "type": "string"
          },
          "preferred_original_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "object_ids",
          "object_type"
        ],
        "type": "object"
      },
      "BulkFilesetExportSchema": {
        "properties": {
          "allow_duplicate_transfers": {
            "default": false,
            "type": "boolean"
          },
          "delete_only_from_source_folder": {
            "default": false,
            "type": "boolean"
          },
          "delete_original": {
            "default": false,
            "type": "boolean"
          },
          "export_metadata": {
            "nullable": true,
            "type": "boolean"
          },
          "export_to_asset_folder": {
            "nullable": true,
            "type": "boolean"
          },
          "keep_collection_structure": {
            "default": false,
            "type": "boolean"
          },
          "metadata_format": {
            "enum": [
              "CSV",
              "JSON",
              "XML"
            ],
            "nullable": true,
            "type": "string"
          },
          "metadata_view": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "object_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "object_type": {
            "enum": [
              "assets",
              "collections"
            ],
            "type": "string"
          },
          "overwrite": {
            "nullable": true,
            "type": "boolean"
          },
          "preferred_original_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "object_ids",
          "object_type"
        ],
        "type": "object"
      },
      "BulkFilesetRestoreSchema": {
        "properties": {
          "allow_duplicate_transfers": {
            "default": false,
            "type": "boolean"
          },
          "delete_only_from_source_folder": {
            "default": false,
            "type": "boolean"
          },
          "delete_original": {
            "default": false,
            "type": "boolean"
          },
          "destination_directory_path": {
            "nullable": true,
            "type": "string"
          },
          "destination_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "keep_collection_structure": {
            "default": false,
            "type": "boolean"
          },
          "object_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "object_type": {
            "enum": [
              "assets",
              "collections",
              "saved_searches"
            ],
            "type": "string"
          },
          "preferred_original_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "object_ids",
          "object_type"
        ],
        "type": "object"
      },
      "BulkTranscodeSchema": {
        "properties": {
          "format_name": {
            "default": "ORIGINAL",
            "type": "string"
          },
          "object_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "object_type": {
            "enum": [
              "assets",
              "collections",
              "saved_searches"
            ],
            "type": "string"
          },
          "prefer_any_cloud": {
            "type": "boolean"
          },
          "preferred_storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "preferred_storage_method": {
            "enum": [
              "FILE",
              "HTTP",
              "FTP",
              "SFTP",
              "S3",
              "B2",
              "GCS",
              "PORTAL",
              "CUSTOM",
              "AZURE"
            ],
            "type": "string"
          },
          "priority": {
            "format": "int32",
            "maximum": 10,
            "minimum": 1,
            "type": "integer"
          }
        },
        "required": [
          "object_ids",
          "object_type"
        ],
        "type": "object"
      },
      "BulkTransferSchema": {
        "properties": {
          "allow_duplicate_transfers": {
            "default": false,
            "type": "boolean"
          },
          "delete_only_from_source_folder": {
            "default": false,
            "type": "boolean"
          },
          "delete_original": {
            "default": false,
            "type": "boolean"
          },
          "keep_collection_structure": {
            "default": false,
            "type": "boolean"
          },
          "object_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "object_type": {
            "enum": [
              "assets",
              "collections",
              "saved_searches"
            ],
            "type": "string"
          },
          "preferred_original_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "object_ids",
          "object_type"
        ],
        "type": "object"
      },
      "BulkTransferToStorageSchema": {
        "properties": {
          "allow_duplicate_transfers": {
            "default": false,
            "type": "boolean"
          },
          "delete_only_from_source_folder": {
            "default": false,
            "type": "boolean"
          },
          "delete_original": {
            "default": false,
            "type": "boolean"
          },
          "file_path": {
            "nullable": true,
            "type": "string"
          },
          "format_name": {
            "default": "ORIGINAL",
            "type": "string"
          },
          "keep_collection_structure": {
            "default": false,
            "type": "boolean"
          },
          "object_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "object_type": {
            "enum": [
              "assets",
              "collections",
              "saved_searches"
            ],
            "type": "string"
          },
          "overwrite": {
            "default": false,
            "type": "boolean"
          },
          "preferred_original_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "object_ids",
          "object_type"
        ],
        "type": "object"
      },
      "CheckAssetHasFiles": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "asset_id",
          "version_id"
        ],
        "type": "object"
      },
      "CheckAssetHasFilesSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "asset_id",
          "version_id"
        ],
        "type": "object"
      },
      "CollectionExportSchema": {
        "properties": {
          "delete_original": {
            "nullable": true,
            "type": "boolean"
          },
          "export_metadata": {
            "nullable": true,
            "type": "boolean"
          },
          "export_to_asset_folder": {
            "nullable": true,
            "type": "boolean"
          },
          "keep_collection_structure": {
            "nullable": true,
            "type": "boolean"
          },
          "metadata_format": {
            "enum": [
              "CSV",
              "JSON",
              "XML"
            ],
            "nullable": true,
            "type": "string"
          },
          "metadata_view": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "overwrite": {
            "nullable": true,
            "type": "boolean"
          },
          "preferred_original_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CollectionKeyframeCreateSchema": {
        "properties": {
          "collection_id": {
            "format": "uuid",
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_custom_keyframe": {
            "type": "boolean"
          },
          "is_public": {
            "readOnly": true,
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "resolution": {
            "$ref": "#/components/schemas/ResolutionType"
          },
          "rotation": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "size": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "enum": [
              "OPEN",
              "GROWING",
              "AWAITED",
              "CLOSED",
              "FAILED",
              "ARCHIVED",
              "MISSING",
              "REDISCOVERED",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "time_code": {
            "$ref": "#/components/schemas/TimeCodeType"
          },
          "type": {
            "enum": [
              "KEYFRAME_MAP",
              "KEYFRAME",
              "POSTER"
            ],
            "type": "string"
          },
          "upload_credentials": {
            "readOnly": true,
            "type": "object"
          },
          "upload_method": {
            "readOnly": true,
            "type": "string"
          },
          "upload_url": {
            "readOnly": true,
            "type": "string"
          },
          "url": {
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "storage_id",
          "type"
        ],
        "type": "object"
      },
      "CollectionKeyframeSchema": {
        "properties": {
          "collection_id": {
            "format": "uuid",
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_custom_keyframe": {
            "type": "boolean"
          },
          "is_public": {
            "readOnly": true,
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "resolution": {
            "$ref": "#/components/schemas/ResolutionType"
          },
          "rotation": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "size": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "enum": [
              "OPEN",
              "GROWING",
              "AWAITED",
              "CLOSED",
              "FAILED",
              "ARCHIVED",
              "MISSING",
              "REDISCOVERED",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "time_code": {
            "$ref": "#/components/schemas/TimeCodeType"
          },
          "type": {
            "enum": [
              "KEYFRAME_MAP",
              "KEYFRAME",
              "POSTER"
            ],
            "type": "string"
          },
          "url": {
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "storage_id",
          "type"
        ],
        "type": "object"
      },
      "CollectionKeyframeUpdateSchema": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "is_custom_keyframe": {
            "type": "boolean"
          },
          "is_public": {
            "readOnly": true,
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "resolution": {
            "$ref": "#/components/schemas/ResolutionType"
          },
          "rotation": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "size": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "enum": [
              "OPEN",
              "GROWING",
              "AWAITED",
              "CLOSED",
              "FAILED",
              "ARCHIVED",
              "MISSING",
              "REDISCOVERED",
              "DELETED"
            ],
            "type": "string"
          },
          "time_code": {
            "$ref": "#/components/schemas/TimeCodeType"
          },
          "type": {
            "enum": [
              "KEYFRAME_MAP",
              "KEYFRAME",
              "POSTER"
            ],
            "type": "string"
          },
          "url": {
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "CollectionKeyframesSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/CollectionKeyframeSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CompleteExportToLocalStorageSchema": {
        "properties": {
          "add_file_set": {
            "type": "boolean"
          },
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "asset_paths": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "collection_storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "component_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "delete_only_from_source_folder": {
            "type": "boolean"
          },
          "delete_remote_file_set_after_download": {
            "type": "boolean"
          },
          "delete_source_file_set_after_download": {
            "type": "boolean"
          },
          "destination_base_directory": {
            "type": "string"
          },
          "destination_directory_path": {
            "type": "string"
          },
          "destination_file_set_name": {
            "type": "string"
          },
          "destination_filename": {
            "type": "string"
          },
          "export_metadata_format": {
            "type": "string"
          },
          "export_metadata_view": {
            "format": "uuid",
            "type": "string"
          },
          "export_posters": {
            "type": "boolean"
          },
          "export_transcription_format": {
            "type": "string"
          },
          "file_set_id": {
            "format": "uuid",
            "type": "string"
          },
          "format_id": {
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          },
          "job_steps": {
            "type": "object"
          },
          "local_storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_url": {
            "format": "url",
            "type": "string"
          },
          "overwrite": {
            "type": "boolean"
          },
          "parent_job_id": {
            "format": "uuid",
            "type": "string"
          },
          "temporary_file_set_source": {
            "type": "boolean"
          },
          "transfer_type": {
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "destination_directory_path",
          "destination_file_set_name"
        ],
        "type": "object"
      },
      "ComponentSchema": {
        "properties": {
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Sequence cannot have more than 10000. Excess values will be stripped",
            "type": "object"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "enum": [
              "VIDEO",
              "AUDIO",
              "IMAGE",
              "TEXT",
              "OTHER",
              "NON_MEDIA",
              "EXIF",
              "IPTC",
              "XMP",
              "GENERAL"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "type"
        ],
        "type": "object"
      },
      "ComponentsSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/ComponentSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CustomSettingsSchema": {
        "properties": {
          "custom": {
            "type": "string"
          },
          "delete": {
            "type": "boolean"
          },
          "is_system": {
            "type": "boolean"
          },
          "read": {
            "type": "boolean"
          },
          "write": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DeleteQueueFileSetsQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteQueueFormatsQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditProxyResponseSchema": {
        "properties": {
          "audio_bitrate": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "audio_codec": {
            "type": "string"
          },
          "bitrate": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "codec": {
            "type": "string"
          },
          "directory_path": {
            "type": "string"
          },
          "file_set_id": {
            "format": "uuid",
            "type": "string"
          },
          "format_id": {
            "format": "uuid",
            "type": "string"
          },
          "height": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "transcoder_id": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "width": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "EditProxySchema": {
        "properties": {
          "allow_mxf": {
            "nullable": true,
            "type": "boolean"
          },
          "directory_path": {
            "nullable": true,
            "type": "string"
          },
          "file_suffix": {
            "nullable": true,
            "type": "string"
          },
          "force_storage_id": {
            "type": "boolean"
          },
          "height": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "ignore_transcoder_settings": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "type": "string"
          },
          "width": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "required": [
          "directory_path",
          "height",
          "name",
          "storage_id",
          "version_id",
          "width"
        ],
        "type": "object"
      },
      "EditProxySettingsSchema": {
        "properties": {
          "audio_bitrate": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "audio_codec": {
            "nullable": true,
            "type": "string"
          },
          "bitrate": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "codec": {
            "type": "string"
          },
          "data": {
            "type": "string"
          },
          "delete_after_upload": {
            "type": "boolean"
          },
          "destination_path": {
            "nullable": true,
            "type": "string"
          },
          "exclude_patterns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "height": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "include_patterns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "local": {
            "type": "boolean"
          },
          "local_destination_path": {
            "nullable": true,
            "type": "string"
          },
          "min_height": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "min_width": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "priority": {
            "format": "int32",
            "maximum": 10,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "width": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "required": [
          "height",
          "width"
        ],
        "type": "object"
      },
      "EditReadyTranscoderSchema": {
        "properties": {
          "apply_color_conversion": {
            "type": "boolean"
          },
          "bitrate": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "create_edit_proxy": {
            "type": "boolean"
          },
          "delete_after_upload": {
            "type": "boolean"
          },
          "edit_proxy_height": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "edit_proxy_local_storage_path": {
            "type": "string"
          },
          "edit_proxy_upload_storage_id": {
            "type": "string"
          },
          "edit_proxy_upload_storage_path": {
            "type": "string"
          },
          "edit_proxy_width": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "editready_preset": {
            "type": "string"
          },
          "exclude_patterns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "include_patterns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "local": {
            "type": "boolean"
          },
          "min_height": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "min_width": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "overwrite_edit_proxy": {
            "type": "boolean"
          },
          "videocodec": {
            "enum": [
              "Apple_ProRes_422_HQ",
              "Apple_ProRes_422",
              "Apple_ProRes_4444",
              "Apple_ProRes_422_LT",
              "Apple_ProRes_422_Proxy"
            ],
            "type": "string"
          },
          "width": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "required": [
          "width"
        ],
        "type": "object"
      },
      "ElementalMediaConvertSchema": {
        "properties": {
          "access_key": {
            "type": "string"
          },
          "edit_proxy_directory_path": {
            "nullable": true,
            "type": "string"
          },
          "edit_proxy_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "endpoint_url": {
            "type": "string"
          },
          "exclude_patterns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "file_group_custom_name": {
            "type": "string"
          },
          "iam_role": {
            "type": "string"
          },
          "include_patterns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "job_template_name": {
            "type": "string"
          },
          "keyframe_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "local": {
            "type": "boolean"
          },
          "priority": {
            "format": "int32",
            "maximum": 10,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "proxy_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "queue_name": {
            "type": "string"
          },
          "region_name": {
            "type": "string"
          },
          "s3_endpoint_url": {
            "type": "string"
          },
          "s3_region_name": {
            "type": "string"
          },
          "secret_key": {
            "type": "string"
          },
          "temp_upload_path": {
            "type": "string"
          }
        },
        "required": [
          "access_key",
          "endpoint_url",
          "file_group_custom_name",
          "iam_role",
          "job_template_name",
          "region_name",
          "s3_endpoint_url",
          "secret_key"
        ],
        "type": "object"
      },
      "ElementalServerSchema": {
        "properties": {
          "api_key": {
            "type": "string"
          },
          "base_url": {
            "type": "string"
          },
          "exclude_patterns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "include_patterns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "keyframe_map_output_group_order": {
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          },
          "keyframe_output_group_order": {
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          },
          "local": {
            "type": "boolean"
          },
          "mount_point": {
            "type": "string"
          },
          "priority": {
            "format": "int32",
            "maximum": 10,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "profile": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "proxy_output_group_order": {
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          },
          "username": {
            "type": "string"
          }
        },
        "required": [
          "api_key",
          "base_url",
          "mount_point",
          "profile",
          "username"
        ],
        "type": "object"
      },
      "EncodingComSettingsSchema": {
        "properties": {
          "exclude_patterns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "include_patterns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "local": {
            "type": "boolean"
          },
          "priority": {
            "format": "int32",
            "maximum": 10,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "user_id": {
            "type": "string"
          },
          "user_key": {
            "type": "string"
          }
        },
        "required": [
          "user_id",
          "user_key"
        ],
        "type": "object"
      },
      "ExportLocationSchema": {
        "properties": {
          "description": {
            "type": "string"
          },
          "export_metadata": {
            "type": "boolean"
          },
          "export_original": {
            "type": "boolean"
          },
          "export_posters": {
            "type": "boolean"
          },
          "export_proxy": {
            "type": "boolean"
          },
          "export_to_asset_folder": {
            "type": "boolean"
          },
          "export_transcriptions": {
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "metadata_format": {
            "enum": [
              "CSV",
              "JSON",
              "XML"
            ],
            "type": "string"
          },
          "metadata_view": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "transcode_profile_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "transcription_format": {
            "enum": [
              "WEBVTT",
              "SRT"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "path",
          "storage_id"
        ],
        "type": "object"
      },
      "ExportLocationsSchema": {
        "properties": {
          "facets": {
            "type": "object"
          },
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/ExportLocationSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "FFmpegSettingsSchema": {
        "properties": {
          "audio_bitrate": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "bitrate": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "data": {
            "type": "string"
          },
          "edit_proxy_folder": {
            "nullable": true,
            "type": "string"
          },
          "exclude_patterns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "hdr_brightness": {
            "maximum": 1,
            "minimum": -1,
            "nullable": true,
            "type": "number"
          },
          "hdr_contrast": {
            "maximum": 2,
            "minimum": 0,
            "nullable": true,
            "type": "number"
          },
          "hdr_gamma": {
            "maximum": 10,
            "minimum": 0,
            "nullable": true,
            "type": "number"
          },
          "hdr_saturation": {
            "maximum": 3,
            "minimum": 0,
            "nullable": true,
            "type": "number"
          },
          "hdr_tonemap_desat": {
            "maximum": 100,
            "minimum": 0,
            "nullable": true,
            "type": "number"
          },
          "hdr_tonemap_peak": {
            "maximum": 1000,
            "minimum": 0,
            "nullable": true,
            "type": "number"
          },
          "include_patterns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "local": {
            "type": "boolean"
          },
          "overlay_coordinates": {
            "nullable": true,
            "type": "string"
          },
          "overlay_url": {
            "nullable": true,
            "type": "string"
          },
          "priority": {
            "format": "int32",
            "maximum": 10,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "scaling_method": {
            "enum": [
              "fast_bilinear",
              "bilinear",
              "bicubic",
              "experimental",
              "neighbor",
              "area",
              "bicublin",
              "gauss",
              "sinc",
              "lanczos",
              "spline",
              "accurate_rnd",
              "full_chroma_int",
              "full_chroma_inp",
              "bitexact"
            ],
            "type": "string"
          },
          "width": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "FileBaseSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "checksum": {
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "directory_path": {
            "type": "string"
          },
          "file_date_created": {
            "format": "date-time",
            "type": "string"
          },
          "file_date_modified": {
            "format": "date-time",
            "type": "string"
          },
          "file_set_id": {
            "format": "uuid",
            "type": "string"
          },
          "format_id": {
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "If not specified, name will be autogenerated based on `id` and `original_name`",
            "type": "string"
          },
          "original_name": {
            "type": "string"
          },
          "parent_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "size": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "status": {
            "enum": [
              "OPEN",
              "GROWING",
              "AWAITED",
              "CLOSED",
              "FAILED",
              "ARCHIVED",
              "MISSING",
              "REDISCOVERED",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "enum": [
              "FILE",
              "DIRECTORY",
              "SYMLINK"
            ],
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "directory_path",
          "original_name",
          "type"
        ],
        "type": "object"
      },
      "FileCreateSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "checksum": {
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "directory_path": {
            "type": "string"
          },
          "file_date_created": {
            "format": "date-time",
            "type": "string"
          },
          "file_date_modified": {
            "format": "date-time",
            "type": "string"
          },
          "file_set_id": {
            "format": "uuid",
            "type": "string"
          },
          "format_id": {
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "multipart_upload_url": {
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "If not specified, name will be autogenerated based on `id` and `original_name`",
            "type": "string"
          },
          "original_name": {
            "type": "string"
          },
          "parent_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "size": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "status": {
            "enum": [
              "OPEN",
              "GROWING",
              "AWAITED",
              "CLOSED",
              "FAILED",
              "ARCHIVED",
              "MISSING",
              "REDISCOVERED",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "storage_method": {
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "enum": [
              "FILE",
              "DIRECTORY",
              "SYMLINK"
            ],
            "type": "string"
          },
          "upload_credentials": {
            "readOnly": true,
            "type": "object"
          },
          "upload_filename": {
            "readOnly": true,
            "type": "string"
          },
          "upload_method": {
            "readOnly": true,
            "type": "string"
          },
          "upload_url": {
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "directory_path",
          "original_name",
          "type"
        ],
        "type": "object"
      },
      "FileDeletionFromLocalStorageSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "directory_path": {
            "type": "string"
          },
          "file_id": {
            "format": "uuid",
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "format_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          },
          "keep_source": {
            "type": "boolean"
          },
          "storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "file_id",
          "filename",
          "job_id",
          "storage_id"
        ],
        "type": "object"
      },
      "FileDeletionsSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/FileDeletionFromLocalStorageSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "FileDownloadURLSchema": {
        "properties": {
          "url": {
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "FileElasticSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "checksum": {
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "directory_path": {
            "type": "string"
          },
          "file_date_created": {
            "format": "date-time",
            "type": "string"
          },
          "file_date_modified": {
            "format": "date-time",
            "type": "string"
          },
          "file_set_id": {
            "format": "uuid",
            "type": "string"
          },
          "file_set_status": {
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "format_id": {
            "format": "uuid",
            "type": "string"
          },
          "format_status": {
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "If not specified, name will be autogenerated based on `id` and `original_name`",
            "type": "string"
          },
          "original_name": {
            "type": "string"
          },
          "parent_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "size": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "status": {
            "enum": [
              "OPEN",
              "GROWING",
              "AWAITED",
              "CLOSED",
              "FAILED",
              "ARCHIVED",
              "MISSING",
              "REDISCOVERED",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "enum": [
              "FILE",
              "DIRECTORY",
              "SYMLINK"
            ],
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "directory_path",
          "original_name",
          "type"
        ],
        "type": "object"
      },
      "FileExistenceCheckSchema": {
        "properties": {
          "directory_path": {
            "type": "string"
          },
          "file_name": {
            "type": "string"
          }
        },
        "required": [
          "directory_path",
          "file_name"
        ],
        "type": "object"
      },
      "FileSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "checksum": {
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "directory_path": {
            "type": "string"
          },
          "file_date_created": {
            "format": "date-time",
            "type": "string"
          },
          "file_date_modified": {
            "format": "date-time",
            "type": "string"
          },
          "file_set_id": {
            "format": "uuid",
            "type": "string"
          },
          "file_set_status": {
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "format_id": {
            "format": "uuid",
            "type": "string"
          },
          "format_status": {
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "multipart_upload_url": {
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "If not specified, name will be autogenerated based on `id` and `original_name`",
            "type": "string"
          },
          "original_name": {
            "type": "string"
          },
          "parent_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "size": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "status": {
            "enum": [
              "OPEN",
              "GROWING",
              "AWAITED",
              "CLOSED",
              "FAILED",
              "ARCHIVED",
              "MISSING",
              "REDISCOVERED",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "storage_method": {
            "readOnly": true,
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "enum": [
              "FILE",
              "DIRECTORY",
              "SYMLINK"
            ],
            "type": "string"
          },
          "upload_credentials": {
            "readOnly": true,
            "type": "object"
          },
          "upload_filename": {
            "readOnly": true,
            "type": "string"
          },
          "upload_method": {
            "readOnly": true,
            "type": "string"
          },
          "upload_url": {
            "description": "On a file creation for Backblaze B2 storage in case when request to Backblaze failed, upload_url field will be empty. You can try getting upload_url again by requesting created file with `generate_signed_post_url` set to true. ",
            "readOnly": true,
            "type": "string"
          },
          "url": {
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "directory_path",
          "file_set_id",
          "original_name",
          "type"
        ],
        "type": "object"
      },
      "FileSetElasticSchema": {
        "properties": {
          "archive_file_set_id": {
            "format": "uuid",
            "type": "string"
          },
          "asset_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "base_dir": {
            "type": "string"
          },
          "component_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_deleted": {
            "format": "date-time",
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "file_count": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "format_id": {
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_archive": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "original_storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "ARCHIVED",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "base_dir",
          "component_ids",
          "format_id",
          "name"
        ],
        "type": "object"
      },
      "FileSetSchema": {
        "properties": {
          "archive_file_set_id": {
            "format": "uuid",
            "type": "string"
          },
          "asset_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "base_dir": {
            "type": "string"
          },
          "component_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_deleted": {
            "format": "date-time",
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "file_count": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "format_id": {
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_archive": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "original_storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "ARCHIVED",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "base_dir",
          "component_ids",
          "format_id",
          "name"
        ],
        "type": "object"
      },
      "FileSetSourceSchema": {
        "properties": {
          "archive_file_set_id": {
            "format": "uuid",
            "type": "string"
          },
          "asset_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "base_dir": {
            "type": "string"
          },
          "component_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_deleted": {
            "format": "date-time",
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "file_count": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "format_id": {
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_archive": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "original_storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "ARCHIVED",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "storage_method": {
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "base_dir",
          "component_ids",
          "format_id",
          "name",
          "storage_id",
          "storage_method"
        ],
        "type": "object"
      },
      "FileSetSourcesSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/FileSetSourceSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "FileSetsElasticSchema": {
        "properties": {
          "facets": {
            "type": "object"
          },
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/FileSetElasticSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "FileSetsSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/FileSetSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "FileSettingsSchema": {
        "properties": {
          "access_group_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "acl_template_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "aggregate_identical_files": {
            "type": "boolean"
          },
          "aggregate_ignore": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "aggregate_only_on_same_storage": {
            "type": "boolean"
          },
          "allow_access_outside_scan_directories": {
            "type": "boolean"
          },
          "asset_versions_suffix": {
            "type": "string"
          },
          "auto_version_ignore": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "auto_version_ingest_throttle_value": {
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "delete": {
            "type": "boolean"
          },
          "directory_assets_original_patterns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "directory_assets_transcode_patterns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "enable_auto_versioning": {
            "type": "boolean"
          },
          "enable_collection_directory_mapping": {
            "type": "boolean"
          },
          "enable_directory_assets": {
            "type": "boolean"
          },
          "filename_is_external_id": {
            "type": "boolean"
          },
          "folder_name_tags_metadata_field_name": {
            "type": "string"
          },
          "folder_name_tags_metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "gateway_user_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "growing_files_threshold": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "is_system": {
            "type": "boolean"
          },
          "local_keyframe_creation": {
            "type": "boolean"
          },
          "local_proxy_creation": {
            "type": "boolean"
          },
          "metadata_conversion_url": {
            "type": "string"
          },
          "metadata_conversion_url_headers": {
            "nullable": true,
            "type": "string"
          },
          "metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "mount_point": {
            "type": "string"
          },
          "prio_dirs": {
            "items": {
              "$ref": "#/components/schemas/PrioDir"
            },
            "nullable": true,
            "type": "array"
          },
          "public_identity": {
            "type": "string"
          },
          "read": {
            "type": "boolean"
          },
          "remote_path": {
            "type": "string"
          },
          "remote_storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "scan": {
            "type": "boolean"
          },
          "scan_directories": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "scan_ignore": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "scan_interval_seconds": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "sidecar_metadata_required": {
            "type": "boolean"
          },
          "skip_upload_on_any_remote_copy_found": {
            "type": "boolean"
          },
          "storage_addr": {
            "type": "string"
          },
          "title_includes_extension": {
            "type": "boolean"
          },
          "transcode_ignore": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "upload_files": {
            "type": "boolean"
          },
          "upload_ignore": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "write": {
            "type": "boolean"
          }
        },
        "required": [
          "mount_point"
        ],
        "type": "object"
      },
      "FileShareUploadEditSchema": {
        "properties": {
          "size": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "status": {
            "enum": [
              "OPEN",
              "GROWING",
              "AWAITED",
              "CLOSED",
              "FAILED",
              "ARCHIVED",
              "MISSING",
              "REDISCOVERED",
              "DELETED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "FilesElasticSchema": {
        "properties": {
          "facets": {
            "type": "object"
          },
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/FileElasticSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "FilesSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/FileSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "FilesetTransferBaseSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "asset_paths": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "collection_storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "component_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "delete_only_from_source_folder": {
            "type": "boolean"
          },
          "destination_filename": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          },
          "job_steps": {
            "type": "object"
          },
          "original_storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_url": {
            "format": "url",
            "type": "string"
          },
          "parent_job_id": {
            "format": "uuid",
            "type": "string"
          },
          "transfer_type": {
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "FormatArchiveSchema": {
        "properties": {
          "delete_original": {
            "type": "boolean"
          },
          "destination_directory_path": {
            "type": "string"
          },
          "destination_file_set_name": {
            "readOnly": true,
            "type": "string"
          },
          "destination_storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "destination_storage_method": {
            "type": "string"
          },
          "format_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_file_set_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FormatDeleteArchiveSchema": {
        "properties": {
          "file_set_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FormatElasticSchema": {
        "properties": {
          "archive_status": {
            "enum": [
              "NOT_ARCHIVED",
              "ARCHIVING",
              "FAILED_TO_ARCHIVE",
              "ARCHIVED"
            ],
            "type": "string"
          },
          "asset_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "components": {
            "items": {
              "$ref": "#/components/schemas/ComponentSchema"
            },
            "type": "array"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_deleted": {
            "format": "date-time",
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_online": {
            "type": "boolean"
          },
          "metadata": {
            "description": "Sequence cannot have more than 10000. Excess values will be stripped",
            "items": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_methods": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "user_id": {
            "format": "uuid",
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "type": "string"
          },
          "warnings": {
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "FormatRestoreSchema": {
        "properties": {
          "destination_directory_path": {
            "nullable": true,
            "type": "string"
          },
          "destination_storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "storage_id": {
            "description": "Deprecated field. Use destination_storage_id instead",
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FormatSchema": {
        "properties": {
          "archive_status": {
            "enum": [
              "NOT_ARCHIVED",
              "ARCHIVING",
              "FAILED_TO_ARCHIVE",
              "ARCHIVED"
            ],
            "type": "string"
          },
          "asset_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "components": {
            "items": {
              "$ref": "#/components/schemas/ComponentSchema"
            },
            "type": "array"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_deleted": {
            "format": "date-time",
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_online": {
            "type": "boolean"
          },
          "metadata": {
            "description": "Sequence cannot have more than 10000. Excess values will be stripped",
            "items": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_methods": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "user_id": {
            "format": "uuid",
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "type": "string"
          },
          "warnings": {
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "FormatsElasticSchema": {
        "properties": {
          "facets": {
            "type": "object"
          },
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/FormatElasticSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "FormatsSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/FormatSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "FtpSettingsSchema": {
        "properties": {
          "address": {
            "type": "string"
          },
          "delete": {
            "type": "boolean"
          },
          "is_system": {
            "type": "boolean"
          },
          "password": {
            "type": "string"
          },
          "read": {
            "type": "boolean"
          },
          "scan": {
            "type": "boolean"
          },
          "user": {
            "type": "string"
          },
          "write": {
            "type": "boolean"
          }
        },
        "required": [
          "address",
          "password",
          "user"
        ],
        "type": "object"
      },
      "GatewayReportSchema": {
        "properties": {
          "await_checksum_files_number": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "date_reported": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "empty_files_number": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "error_log_lines": {
            "items": {
              "maxLength": 2000,
              "type": "string"
            },
            "maxItems": 10,
            "type": "array"
          },
          "exported_files_number": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "faulty_files_number": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "host_info": {
            "maxLength": 1000,
            "type": "string"
          },
          "host_name": {
            "maxLength": 1000,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "ingested_files_number": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "ingested_files_uploads_number": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "ingesting_files_number": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "last_scan_time": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "log_lines": {
            "items": {
              "maxLength": 2000,
              "type": "string"
            },
            "maxItems": 50,
            "type": "array"
          },
          "logs_url": {
            "readOnly": true,
            "type": "string"
          },
          "missing_files_number": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "scanned_files_number": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "skipped_files_number": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "start_last_date": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "start_status": {
            "enum": [
              "SUCCESS",
              "FAILED"
            ],
            "type": "string"
          },
          "start_status_message": {
            "maxLength": 1000,
            "type": "string"
          },
          "status": {
            "enum": [
              "OFFLINE",
              "LIVE",
              "UNKNOWN"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "total_files_number": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "total_folders_number": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "version": {
            "maxLength": 100,
            "type": "string"
          },
          "waiting_preview_transcode_jobs_number": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "waiting_transcode_jobs_number": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GatewayStatusSchema": {
        "properties": {
          "status": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudStorageSettingsSchema": {
        "properties": {
          "access_group_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "acl_template_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "add_uuid_to_filenames": {
            "type": "boolean"
          },
          "aggregate_identical_files": {
            "type": "boolean"
          },
          "aggregate_ignore": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "aggregate_only_on_same_storage": {
            "type": "boolean"
          },
          "bucket": {
            "type": "string"
          },
          "delete": {
            "type": "boolean"
          },
          "enable_collection_directory_mapping": {
            "type": "boolean"
          },
          "filename_is_external_id": {
            "type": "boolean"
          },
          "folder_name_tags_metadata_field_name": {
            "type": "string"
          },
          "folder_name_tags_metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "is_system": {
            "type": "boolean"
          },
          "json_key": {
            "type": "string"
          },
          "metadata_conversion_url": {
            "type": "string"
          },
          "metadata_conversion_url_headers": {
            "nullable": true,
            "type": "string"
          },
          "metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "preload_edge_jobs": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "project": {
            "type": "string"
          },
          "read": {
            "type": "boolean"
          },
          "root_collection_id": {
            "format": "uuid",
            "type": "string"
          },
          "scan": {
            "type": "boolean"
          },
          "scan_directories": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "scan_ignore": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sidecar_metadata_required": {
            "type": "boolean"
          },
          "title_includes_extension": {
            "type": "boolean"
          },
          "transcode_ignore": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "write": {
            "type": "boolean"
          }
        },
        "required": [
          "bucket",
          "json_key",
          "path",
          "project"
        ],
        "type": "object"
      },
      "HttpSettingsSchema": {
        "properties": {
          "address": {
            "type": "string"
          },
          "auto": {
            "type": "boolean"
          },
          "delete": {
            "type": "boolean"
          },
          "is_system": {
            "type": "boolean"
          },
          "read": {
            "type": "boolean"
          },
          "scan": {
            "type": "boolean"
          }
        },
        "required": [
          "address"
        ],
        "type": "object"
      },
      "ISGHandlerURLSchema": {
        "properties": {
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "IconikEdgeTranscoderSchema": {
        "properties": {
          "exclude_patterns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "include_patterns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "local": {
            "type": "boolean"
          },
          "max_transcoding_jobs": {
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          },
          "priority": {
            "format": "int32",
            "maximum": 10,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "IconikStorageGatewayEventSchema": {
        "properties": {
          "data": {
            "type": "object"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "enum": [
              "RESTART",
              "DOWNLOAD",
              "DOWNLOAD_ABORT",
              "DOWNLOAD_CHANGE_PRIORITY",
              "UPLOAD",
              "UPLOAD_ABORT",
              "UPLOAD_CHANGE_PRIORITY",
              "INGEST_UPLOAD",
              "DELETE",
              "TRANSCODE",
              "ASSET_MERGED",
              "TRANSCODE_ABORT",
              "TRANSCODE_CHANGE_PRIORITY",
              "REQUEST_COLLECTION_MAP",
              "ABORT_COLLECTION_MAP",
              "COLLECTION_DELETED",
              "RESET_INGEST_VALIDATION",
              "SCHEDULE_CHECKSUM_CALCULATION",
              "ABORT_JOBS_BULK",
              "MARK_MISSING_OUTSIDE_SCAN_DIRS"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "IconikStorageGatewayEventsPurgeSchema": {
        "properties": {
          "event_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 100,
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "event_ids"
        ],
        "type": "object"
      },
      "IconikStorageGatewayEventsSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/IconikStorageGatewayEventSchema"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "ImageMagickSettingsSchema": {
        "properties": {
          "data": {
            "type": "string"
          },
          "exclude_patterns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "height": {
            "format": "int32",
            "maximum": 16000,
            "minimum": 1,
            "type": "integer"
          },
          "include_patterns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "local": {
            "type": "boolean"
          },
          "overlay_coordinates": {
            "nullable": true,
            "type": "string"
          },
          "overlay_url": {
            "nullable": true,
            "type": "string"
          },
          "priority": {
            "format": "int32",
            "maximum": 10,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "width": {
            "format": "int32",
            "maximum": 16000,
            "minimum": 1,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "JobsPrioritySchema": {
        "properties": {
          "job_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "priority": {
            "format": "int32",
            "maximum": 10,
            "minimum": 1,
            "type": "integer"
          }
        },
        "required": [
          "job_ids",
          "priority"
        ],
        "type": "object"
      },
      "JobsStateSchema": {
        "properties": {
          "action": {
            "enum": [
              "RESTART",
              "ABORT"
            ],
            "type": "string"
          },
          "job_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "action",
          "job_ids"
        ],
        "type": "object"
      },
      "KeyframeBaseSchema": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "is_custom_keyframe": {
            "type": "boolean"
          },
          "is_public": {
            "readOnly": true,
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "resolution": {
            "$ref": "#/components/schemas/ResolutionType"
          },
          "rotation": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "size": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "enum": [
              "OPEN",
              "GROWING",
              "AWAITED",
              "CLOSED",
              "FAILED",
              "ARCHIVED",
              "MISSING",
              "REDISCOVERED",
              "DELETED"
            ],
            "type": "string"
          },
          "time_code": {
            "$ref": "#/components/schemas/TimeCodeType"
          },
          "type": {
            "enum": [
              "KEYFRAME_MAP",
              "KEYFRAME",
              "POSTER"
            ],
            "type": "string"
          },
          "url": {
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "KeyframeCreateSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "collection_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_custom_keyframe": {
            "type": "boolean"
          },
          "is_public": {
            "readOnly": true,
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "resolution": {
            "$ref": "#/components/schemas/ResolutionType"
          },
          "rotation": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "size": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "enum": [
              "OPEN",
              "GROWING",
              "AWAITED",
              "CLOSED",
              "FAILED",
              "ARCHIVED",
              "MISSING",
              "REDISCOVERED",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "storage_method": {
            "readOnly": true,
            "type": "string"
          },
          "time_code": {
            "$ref": "#/components/schemas/TimeCodeType"
          },
          "type": {
            "enum": [
              "KEYFRAME_MAP",
              "KEYFRAME",
              "POSTER"
            ],
            "type": "string"
          },
          "upload_credentials": {
            "readOnly": true,
            "type": "object"
          },
          "upload_method": {
            "readOnly": true,
            "type": "string"
          },
          "upload_url": {
            "readOnly": true,
            "type": "string"
          },
          "url": {
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "storage_id",
          "type"
        ],
        "type": "object"
      },
      "KeyframeSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "collection_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_custom_keyframe": {
            "type": "boolean"
          },
          "is_public": {
            "readOnly": true,
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "resolution": {
            "$ref": "#/components/schemas/ResolutionType"
          },
          "rotation": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "size": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "enum": [
              "OPEN",
              "GROWING",
              "AWAITED",
              "CLOSED",
              "FAILED",
              "ARCHIVED",
              "MISSING",
              "REDISCOVERED",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "storage_method": {
            "readOnly": true,
            "type": "string"
          },
          "time_code": {
            "$ref": "#/components/schemas/TimeCodeType"
          },
          "type": {
            "enum": [
              "KEYFRAME_MAP",
              "KEYFRAME",
              "POSTER"
            ],
            "type": "string"
          },
          "upload_credentials": {
            "readOnly": true,
            "type": "object"
          },
          "upload_method": {
            "readOnly": true,
            "type": "string"
          },
          "upload_url": {
            "readOnly": true,
            "type": "string"
          },
          "url": {
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "storage_id",
          "type"
        ],
        "type": "object"
      },
      "KeyframeUpdateSchema": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "is_custom_keyframe": {
            "type": "boolean"
          },
          "is_public": {
            "readOnly": true,
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "resolution": {
            "$ref": "#/components/schemas/ResolutionType"
          },
          "rotation": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "size": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "enum": [
              "OPEN",
              "GROWING",
              "AWAITED",
              "CLOSED",
              "FAILED",
              "ARCHIVED",
              "MISSING",
              "REDISCOVERED",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "time_code": {
            "$ref": "#/components/schemas/TimeCodeType"
          },
          "type": {
            "enum": [
              "KEYFRAME_MAP",
              "KEYFRAME",
              "POSTER"
            ],
            "type": "string"
          },
          "url": {
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "KeyframesSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/KeyframeSchema"
            },
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ListObjectsSchema2": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "MoveAssetResourceSchema": {
        "properties": {
          "destination_asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "destination_version_id": {
            "format": "uuid",
            "type": "string"
          },
          "exclude_format_ids": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "source_version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "destination_asset_id",
          "destination_version_id",
          "source_version_id"
        ],
        "type": "object"
      },
      "MultiPartS3UrlPartSchema": {
        "properties": {
          "checksum": {
            "description": "base64-encoded md5 digest",
            "nullable": true,
            "type": "string"
          },
          "part_number": {
            "maximum": 10000,
            "minimum": 1,
            "type": "integer"
          },
          "url": {
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "MultiPartS3UrlPartsSchema": {
        "properties": {
          "parts": {
            "items": {
              "$ref": "#/components/schemas/MultiPartS3UrlPartSchema"
            },
            "minItems": 1,
            "type": "array"
          },
          "upload_id": {
            "type": "string"
          }
        },
        "required": [
          "parts",
          "upload_id"
        ],
        "type": "object"
      },
      "MultiPartURLsSchema": {
        "properties": {
          "abort_url": {
            "readOnly": true,
            "type": "string"
          },
          "complete_url": {
            "readOnly": true,
            "type": "string"
          },
          "list_parts_url": {
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "MultiPartUploadComposeURLSchema": {
        "properties": {
          "compose_url": {
            "readOnly": true,
            "type": "string"
          },
          "delete_url": {
            "readOnly": true,
            "type": "string"
          },
          "key": {
            "readOnly": true,
            "type": "string"
          },
          "url": {
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "MultiPartUploadURLSchema": {
        "properties": {
          "delete_url": {
            "readOnly": true,
            "type": "string"
          },
          "download_url": {
            "readOnly": true,
            "type": "string"
          },
          "key": {
            "readOnly": true,
            "type": "string"
          },
          "number": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          },
          "url": {
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "MultiPartUploadURLsSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/MultiPartUploadURLSchema"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "MultipartB2CancelUpload": {
        "properties": {
          "upload_file_id": {
            "type": "string"
          }
        },
        "required": [
          "upload_file_id"
        ],
        "type": "object"
      },
      "MultipartB2FinishUpload": {
        "properties": {
          "sha1_list": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "upload_file_id": {
            "type": "string"
          }
        },
        "required": [
          "sha1_list",
          "upload_file_id"
        ],
        "type": "object"
      },
      "MultipartB2StartUpload": {
        "properties": {
          "authorization_token": {
            "readOnly": true,
            "type": "string"
          },
          "error": {
            "readOnly": true,
            "type": "string"
          },
          "error_code": {
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "readOnly": true,
            "type": "string"
          },
          "upload_file_id": {
            "nullable": true,
            "type": "string"
          },
          "upload_url": {
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "MultipartUploadCleanupSchema": {
        "properties": {
          "abort_upload": {
            "type": "boolean"
          },
          "parts_group_number": {
            "default": null,
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "parts_number": {
            "format": "int64",
            "minimum": 1,
            "type": "integer"
          },
          "temporary": {
            "default": false,
            "type": "boolean"
          },
          "upload_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MultipartUploadComposeSchema": {
        "properties": {
          "content_type": {
            "nullable": true,
            "type": "string"
          },
          "parts_group": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "MultipartUploadProxyCleanupSchema": {
        "properties": {
          "abort_upload": {
            "type": "boolean"
          },
          "upload_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MultipartUploadSchema": {
        "properties": {
          "parts_group": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "parts_range": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "parts_range"
        ],
        "type": "object"
      },
      "PortalSettingsSchema": {
        "properties": {
          "delete": {
            "type": "boolean"
          },
          "is_system": {
            "type": "boolean"
          },
          "read": {
            "type": "boolean"
          },
          "scan": {
            "type": "boolean"
          },
          "write": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PrioDir": {
        "properties": {
          "directory": {
            "type": "string"
          },
          "priority": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PrioDirSchema": {
        "properties": {
          "directory": {
            "type": "string"
          },
          "priority": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ProxiesSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/Proxy"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Proxy": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "audio_bitrate": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "bit_rate": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "codec": {
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "frame_rate": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_drop_frame": {
            "nullable": true,
            "type": "boolean"
          },
          "is_public": {
            "readOnly": true,
            "type": "boolean"
          },
          "multipart_upload_url": {
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "resolution": {
            "$ref": "#/components/schemas/ResolutionType"
          },
          "rotation": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "size": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "start_time_code": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "OPEN",
              "GROWING",
              "AWAITED",
              "CLOSED",
              "FAILED",
              "ARCHIVED",
              "MISSING",
              "REDISCOVERED",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "storage_method": {
            "readOnly": true,
            "type": "string"
          },
          "upload_credentials": {
            "readOnly": true,
            "type": "object"
          },
          "upload_method": {
            "readOnly": true,
            "type": "string"
          },
          "upload_url": {
            "readOnly": true,
            "type": "string"
          },
          "url": {
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "storage_id"
        ],
        "type": "object"
      },
      "ProxyBaseSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "audio_bitrate": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "bit_rate": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "codec": {
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "frame_rate": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_drop_frame": {
            "nullable": true,
            "type": "boolean"
          },
          "is_public": {
            "readOnly": true,
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "resolution": {
            "$ref": "#/components/schemas/ResolutionType"
          },
          "rotation": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "size": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "start_time_code": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "OPEN",
              "GROWING",
              "AWAITED",
              "CLOSED",
              "FAILED",
              "ARCHIVED",
              "MISSING",
              "REDISCOVERED",
              "DELETED"
            ],
            "type": "string"
          },
          "url": {
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProxyCreateSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "audio_bitrate": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "bit_rate": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "codec": {
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "frame_rate": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_drop_frame": {
            "nullable": true,
            "type": "boolean"
          },
          "is_public": {
            "readOnly": true,
            "type": "boolean"
          },
          "multipart_upload_url": {
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "resolution": {
            "$ref": "#/components/schemas/ResolutionType"
          },
          "rotation": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "size": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "start_time_code": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "OPEN",
              "GROWING",
              "AWAITED",
              "CLOSED",
              "FAILED",
              "ARCHIVED",
              "MISSING",
              "REDISCOVERED",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "storage_method": {
            "readOnly": true,
            "type": "string"
          },
          "upload_credentials": {
            "readOnly": true,
            "type": "object"
          },
          "upload_method": {
            "readOnly": true,
            "type": "string"
          },
          "upload_url": {
            "readOnly": true,
            "type": "string"
          },
          "url": {
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "storage_id"
        ],
        "type": "object"
      },
      "ProxyDownloadURLSchema": {
        "properties": {
          "url": {
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProxySchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "audio_bitrate": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "bit_rate": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "codec": {
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "frame_rate": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_drop_frame": {
            "nullable": true,
            "type": "boolean"
          },
          "is_public": {
            "readOnly": true,
            "type": "boolean"
          },
          "multipart_upload_url": {
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "resolution": {
            "$ref": "#/components/schemas/ResolutionType"
          },
          "rotation": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "size": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "start_time_code": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "OPEN",
              "GROWING",
              "AWAITED",
              "CLOSED",
              "FAILED",
              "ARCHIVED",
              "MISSING",
              "REDISCOVERED",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "storage_method": {
            "readOnly": true,
            "type": "string"
          },
          "upload_credentials": {
            "readOnly": true,
            "type": "object"
          },
          "upload_method": {
            "readOnly": true,
            "type": "string"
          },
          "upload_url": {
            "readOnly": true,
            "type": "string"
          },
          "url": {
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "storage_id"
        ],
        "type": "object"
      },
      "ProxyUpdateSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "audio_bitrate": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "bit_rate": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "codec": {
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "frame_rate": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_drop_frame": {
            "nullable": true,
            "type": "boolean"
          },
          "is_public": {
            "readOnly": true,
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "resolution": {
            "$ref": "#/components/schemas/ResolutionType"
          },
          "rotation": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "size": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "start_time_code": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "OPEN",
              "GROWING",
              "AWAITED",
              "CLOSED",
              "FAILED",
              "ARCHIVED",
              "MISSING",
              "REDISCOVERED",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "url": {
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "RedlineSchema": {
        "properties": {
          "edit_proxy_local_storage_path": {
            "type": "string"
          },
          "edit_proxy_upload_storage_id": {
            "type": "string"
          },
          "edit_proxy_upload_storage_path": {
            "type": "string"
          },
          "exclude_patterns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "format": {
            "enum": [
              "QT transcode",
              "Apple ProRes",
              ""
            ],
            "type": "string"
          },
          "include_patterns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "keep_redline_proxy": {
            "type": "boolean"
          },
          "local": {
            "type": "boolean"
          },
          "opencl_device_indexes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "priority": {
            "format": "int32",
            "maximum": 10,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "qt_codec": {
            "enum": [
              "H264",
              "H263",
              "AVID_1080P_DNxHD_36_8-bit",
              "AVID_1080P_DNxHD_115/120_8-bit",
              "AVID_1080P_DNxHD_175/185_8-bit",
              "AVID_1080P_DNxHD_175/185_10-bit",
              "AVID_720P_DNxHD_60/75_8-bit",
              "AVID_720P_DNxHD_90/110_8-bit",
              "AVID_720P_DNxHD_90/110_10-bit",
              "AVID_720P_DNxHD_120/145_8-bit",
              "AVID_720P_DNxHD_185/220_8-bit",
              "AVID_720P_DNxHD_185/220_10-bit",
              "Apple_ProRes_422_HQ",
              "Apple_ProRes_422",
              "Apple_ProRes_4444",
              "Apple_ProRes_422_LT",
              "Apple_ProRes_422_Proxy",
              ""
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReindexExportLocationSchema": {
        "properties": {
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ReindexFileSchema": {
        "properties": {
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ReindexFileSetSchema": {
        "properties": {
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ReindexFormatSchema": {
        "properties": {
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ReindexStorageSchema": {
        "properties": {
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ReindexTranscoderSchema": {
        "properties": {
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ResolutionType": {
        "properties": {
          "height": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "width": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ResolutionTypeSchema": {
        "properties": {
          "height": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "width": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "S3SettingsSchema": {
        "properties": {
          "access_group_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "access_key": {
            "type": "string"
          },
          "acl_template_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "add_uuid_to_filenames": {
            "type": "boolean"
          },
          "aggregate_identical_files": {
            "type": "boolean"
          },
          "aggregate_ignore": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "aggregate_only_on_same_storage": {
            "type": "boolean"
          },
          "bucket": {
            "type": "string"
          },
          "delete": {
            "type": "boolean"
          },
          "enable_collection_directory_mapping": {
            "type": "boolean"
          },
          "endpoint": {
            "type": "string"
          },
          "filename_is_external_id": {
            "type": "boolean"
          },
          "folder_name_tags_metadata_field_name": {
            "type": "string"
          },
          "folder_name_tags_metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "glacier_restore_timeout": {
            "description": "Keep restored assets online for this many days to allow them to be copied before going back to Glacier",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "is_system": {
            "type": "boolean"
          },
          "metadata_conversion_url": {
            "type": "string"
          },
          "metadata_conversion_url_headers": {
            "nullable": true,
            "type": "string"
          },
          "metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "notification_sqs_url": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "preload_edge_jobs": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "presign_md5_checksum": {
            "type": "boolean"
          },
          "read": {
            "type": "boolean"
          },
          "region": {
            "type": "string"
          },
          "root_collection_id": {
            "format": "uuid",
            "type": "string"
          },
          "scan": {
            "type": "boolean"
          },
          "scan_directories": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "scan_ignore": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "secret_key": {
            "type": "string"
          },
          "session_token": {
            "type": "string"
          },
          "sidecar_metadata_required": {
            "type": "boolean"
          },
          "title_includes_extension": {
            "type": "boolean"
          },
          "transcode_ignore": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "use_acceleration": {
            "type": "boolean"
          },
          "write": {
            "type": "boolean"
          }
        },
        "required": [
          "bucket",
          "endpoint",
          "path",
          "region"
        ],
        "type": "object"
      },
      "SftpSettingsSchema": {
        "properties": {
          "address": {
            "type": "string"
          },
          "delete": {
            "type": "boolean"
          },
          "is_system": {
            "type": "boolean"
          },
          "password": {
            "type": "string"
          },
          "read": {
            "type": "boolean"
          },
          "scan": {
            "type": "boolean"
          },
          "user": {
            "type": "string"
          },
          "write": {
            "type": "boolean"
          }
        },
        "required": [
          "address",
          "password",
          "user"
        ],
        "type": "object"
      },
      "StorageAutoScanSchema": {
        "properties": {
          "hours_interval": {
            "default": 24,
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "StorageBaseSchema": {
        "properties": {},
        "type": "object"
      },
      "StorageFileSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "checksum": {
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "destination_storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "directory_path": {
            "type": "string"
          },
          "file_date_created": {
            "format": "date-time",
            "type": "string"
          },
          "file_date_modified": {
            "format": "date-time",
            "type": "string"
          },
          "file_set_id": {
            "format": "uuid",
            "type": "string"
          },
          "format_id": {
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "If not specified, name will be autogenerated based on `id` and `original_name`",
            "type": "string"
          },
          "original_name": {
            "type": "string"
          },
          "parent_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "size": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "status": {
            "enum": [
              "OPEN",
              "GROWING",
              "AWAITED",
              "CLOSED",
              "FAILED",
              "ARCHIVED",
              "MISSING",
              "REDISCOVERED",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_id": {
            "description": "Deprecated field. Use destination_storage_id instead",
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "enum": [
              "FILE",
              "DIRECTORY",
              "SYMLINK"
            ],
            "type": "string"
          },
          "url": {
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "directory_path",
          "original_name",
          "type"
        ],
        "type": "object"
      },
      "StorageFileUpdateSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "checksum": {
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "directory_path": {
            "type": "string"
          },
          "file_date_created": {
            "format": "date-time",
            "type": "string"
          },
          "file_date_modified": {
            "format": "date-time",
            "type": "string"
          },
          "file_set_id": {
            "format": "uuid",
            "type": "string"
          },
          "format_id": {
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "original_name": {
            "type": "string"
          },
          "parent_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "size": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "status": {
            "enum": [
              "OPEN",
              "GROWING",
              "AWAITED",
              "CLOSED",
              "FAILED",
              "ARCHIVED",
              "MISSING",
              "REDISCOVERED",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "enum": [
              "FILE",
              "DIRECTORY",
              "SYMLINK"
            ],
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "directory_path",
          "name"
        ],
        "type": "object"
      },
      "StorageFilesDeleteBulkSchema": {
        "properties": {
          "object_ids": {
            "description": "The number of object_ids in the list is limited to a minimum of 0 and a maximum of 500",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 0,
            "type": "array"
          },
          "object_type": {
            "type": "string"
          }
        },
        "required": [
          "object_ids",
          "object_type"
        ],
        "type": "object"
      },
      "StorageFilesQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "scroll": {
            "type": "boolean"
          },
          "scroll_id": {
            "format": "uuid",
            "type": "string"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StoragePrivateDataSchema": {
        "properties": {
          "bucket_location": {
            "readOnly": true,
            "type": "string"
          },
          "default": {
            "readOnly": true,
            "type": "boolean"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "last_scanned": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "method": {
            "enum": [
              "FILE",
              "HTTP",
              "FTP",
              "SFTP",
              "S3",
              "B2",
              "GCS",
              "PORTAL",
              "CUSTOM",
              "AZURE"
            ],
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "purpose": {
            "enum": [
              "KEYFRAMES",
              "FILES",
              "PROXIES",
              "EXPORTS",
              "ARCHIVE",
              "FACES"
            ],
            "type": "string"
          },
          "scanner_status": {
            "nullable": true,
            "type": "string"
          },
          "settings": {
            "type": "object"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "FAILING"
            ],
            "type": "string"
          },
          "status_message": {
            "nullable": true,
            "type": "string"
          },
          "version": {
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "method",
          "name",
          "purpose",
          "settings"
        ],
        "type": "object"
      },
      "StorageReadSchema": {
        "properties": {
          "default": {
            "readOnly": true,
            "type": "boolean"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "isg_version": {
            "readOnly": true,
            "type": "string"
          },
          "last_scanned": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "method": {
            "enum": [
              "FILE",
              "HTTP",
              "FTP",
              "SFTP",
              "S3",
              "B2",
              "GCS",
              "PORTAL",
              "CUSTOM",
              "AZURE"
            ],
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "purpose": {
            "enum": [
              "KEYFRAMES",
              "FILES",
              "PROXIES",
              "EXPORTS",
              "ARCHIVE",
              "FACES"
            ],
            "type": "string"
          },
          "scanner_status": {
            "nullable": true,
            "type": "string"
          },
          "settings": {
            "type": "object"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "FAILING"
            ],
            "type": "string"
          },
          "status_message": {
            "nullable": true,
            "type": "string"
          },
          "version": {
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "method",
          "name",
          "purpose",
          "settings"
        ],
        "type": "object"
      },
      "StorageScanSchema": {
        "properties": {
          "files": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "ignore_already_active": {
            "description": "Will force scanning even if the scan is already active if any of `paths` or `files` are specified.",
            "type": "boolean"
          },
          "paths": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "StorageSchema": {
        "properties": {
          "default": {
            "readOnly": true,
            "type": "boolean"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "last_scanned": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "method": {
            "enum": [
              "FILE",
              "HTTP",
              "FTP",
              "SFTP",
              "S3",
              "B2",
              "GCS",
              "PORTAL",
              "CUSTOM",
              "AZURE"
            ],
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "purpose": {
            "enum": [
              "KEYFRAMES",
              "FILES",
              "PROXIES",
              "EXPORTS",
              "ARCHIVE",
              "FACES"
            ],
            "type": "string"
          },
          "scanner_status": {
            "nullable": true,
            "type": "string"
          },
          "settings": {
            "type": "object"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "FAILING"
            ],
            "type": "string"
          },
          "status_message": {
            "nullable": true,
            "type": "string"
          },
          "version": {
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "method",
          "name",
          "purpose",
          "settings"
        ],
        "type": "object"
      },
      "StoragesQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StoragesReadSchema": {
        "properties": {
          "facets": {
            "type": "object"
          },
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/StorageReadSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Subtitle": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "closed_captions": {
            "type": "boolean"
          },
          "format_id": {
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "asset_id",
          "closed_captions",
          "format_id",
          "id",
          "language"
        ],
        "type": "object"
      },
      "SubtitleRequestSchema": {
        "properties": {
          "create_transcription": {
            "type": "boolean"
          },
          "priority": {
            "format": "int32",
            "maximum": 10,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SubtitleSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "closed_captions": {
            "type": "boolean"
          },
          "content": {
            "type": "string"
          },
          "format_id": {
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "asset_id",
          "closed_captions",
          "format_id",
          "id",
          "language"
        ],
        "type": "object"
      },
      "SubtitlesSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/Subtitle"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TelestreamCloudSchema": {
        "properties": {
          "access_key": {
            "type": "string"
          },
          "api_host": {
            "type": "string"
          },
          "api_port": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "exclude_patterns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "factory_id": {
            "type": "string"
          },
          "include_patterns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "keyframes_profile_id": {
            "type": "string"
          },
          "local": {
            "type": "boolean"
          },
          "priority": {
            "format": "int32",
            "maximum": 10,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "proxy_profile_id": {
            "type": "string"
          },
          "secret_key": {
            "type": "string"
          },
          "storage_id": {
            "type": "string"
          }
        },
        "required": [
          "access_key",
          "factory_id",
          "keyframes_profile_id",
          "proxy_profile_id",
          "secret_key",
          "storage_id"
        ],
        "type": "object"
      },
      "TemporaryFileCreateSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "checksum": {
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "directory_path": {
            "type": "string"
          },
          "file_date_created": {
            "format": "date-time",
            "type": "string"
          },
          "file_date_modified": {
            "format": "date-time",
            "type": "string"
          },
          "file_set_id": {
            "format": "uuid",
            "type": "string"
          },
          "format_id": {
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "multipart_upload_url": {
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "If not specified, name will be autogenerated based on `id` and `original_name`",
            "type": "string"
          },
          "original_name": {
            "type": "string"
          },
          "parent_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "path_exist": {
            "readOnly": true,
            "type": "boolean"
          },
          "size": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "status": {
            "enum": [
              "OPEN",
              "GROWING",
              "AWAITED",
              "CLOSED",
              "FAILED",
              "ARCHIVED",
              "MISSING",
              "REDISCOVERED",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "storage_method": {
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "enum": [
              "FILE",
              "DIRECTORY",
              "SYMLINK"
            ],
            "type": "string"
          },
          "upload_credentials": {
            "readOnly": true,
            "type": "object"
          },
          "upload_filename": {
            "readOnly": true,
            "type": "string"
          },
          "upload_method": {
            "readOnly": true,
            "type": "string"
          },
          "upload_url": {
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "directory_path",
          "original_name",
          "type"
        ],
        "type": "object"
      },
      "TemporaryFileSetSchema": {
        "properties": {
          "archive_file_set_id": {
            "format": "uuid",
            "type": "string"
          },
          "asset_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "base_dir": {
            "type": "string"
          },
          "component_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_deleted": {
            "format": "date-time",
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "deleted_by_user": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "file_count": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "format_id": {
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_archive": {
            "type": "boolean"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "original_storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "ARCHIVED",
              "DELETED"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "base_dir",
          "component_ids",
          "format_id",
          "job_id",
          "name"
        ],
        "type": "object"
      },
      "TimeBaseType": {
        "properties": {
          "denominator": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "numerator": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TimeBaseTypeSchema": {
        "properties": {
          "denominator": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "numerator": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TimeCodeType": {
        "properties": {
          "frames_number": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "is_drop_frame": {
            "type": "boolean"
          },
          "time_base": {
            "$ref": "#/components/schemas/TimeBaseType"
          }
        },
        "type": "object"
      },
      "TimeCodeTypeSchema": {
        "properties": {
          "frames_number": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "is_drop_frame": {
            "type": "boolean"
          },
          "time_base": {
            "$ref": "#/components/schemas/TimeBaseTypeSchema"
          }
        },
        "type": "object"
      },
      "TranscodeRequestSchema": {
        "properties": {
          "priority": {
            "format": "int32",
            "maximum": 10,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "set_as_custom_keyframe": {
            "nullable": true,
            "type": "boolean"
          },
          "update_proxy_mediainfo": {
            "type": "boolean"
          },
          "use_storage_transcode_ignore_pattern": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "TranscodeResponseSchema": {
        "properties": {
          "job_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "TranscoderBaseSchema": {
        "properties": {},
        "type": "object"
      },
      "TranscoderByStorageReadSchema": {
        "properties": {
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "settings": {
            "type": "object"
          },
          "storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "enum": [
              "VANTAGE",
              "FFMPEG",
              "EDIT_PROXY",
              "IMAGEMAGICK",
              "ENCODING_COM",
              "ZENCODER",
              "TELESTREAM_CLOUD",
              "ELEMENTAL_MEDIACONVERT",
              "ELEMENTAL_SERVER",
              "REDLINE",
              "ICONIK_EDGE_TRANSCODER",
              "WATCH_FOLDER_VIDEO",
              "EDITREADY"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "TranscoderReadSchema": {
        "properties": {
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "settings": {
            "type": "object"
          },
          "type": {
            "enum": [
              "VANTAGE",
              "FFMPEG",
              "EDIT_PROXY",
              "IMAGEMAGICK",
              "ENCODING_COM",
              "ZENCODER",
              "TELESTREAM_CLOUD",
              "ELEMENTAL_MEDIACONVERT",
              "ELEMENTAL_SERVER",
              "REDLINE",
              "ICONIK_EDGE_TRANSCODER",
              "WATCH_FOLDER_VIDEO",
              "EDITREADY"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "settings",
          "type"
        ],
        "type": "object"
      },
      "TranscoderSchema": {
        "properties": {
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "settings": {
            "type": "object"
          },
          "type": {
            "enum": [
              "VANTAGE",
              "FFMPEG",
              "EDIT_PROXY",
              "IMAGEMAGICK",
              "ENCODING_COM",
              "ZENCODER",
              "TELESTREAM_CLOUD",
              "ELEMENTAL_MEDIACONVERT",
              "ELEMENTAL_SERVER",
              "REDLINE",
              "ICONIK_EDGE_TRANSCODER",
              "WATCH_FOLDER_VIDEO",
              "EDITREADY"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "settings",
          "type"
        ],
        "type": "object"
      },
      "TranscodersByStorageSchema": {
        "properties": {
          "facets": {
            "type": "object"
          },
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/TranscoderByStorageReadSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TranscodersQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TranscodersSchema": {
        "properties": {
          "facets": {
            "type": "object"
          },
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/TranscoderReadSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TransferCloudSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "asset_paths": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "celery_task_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "collection_storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "component_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "delete_only_from_source_folder": {
            "type": "boolean"
          },
          "delete_original": {
            "readOnly": true,
            "type": "boolean"
          },
          "destination_directory_path": {
            "readOnly": true,
            "type": "string"
          },
          "destination_filename": {
            "readOnly": true,
            "type": "string"
          },
          "destination_storage_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "job_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "job_steps": {
            "type": "object"
          },
          "original_file_set_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "original_storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_url": {
            "format": "url",
            "type": "string"
          },
          "parent_job_id": {
            "format": "uuid",
            "type": "string"
          },
          "priority": {
            "format": "int32",
            "maximum": 10,
            "minimum": 1,
            "readOnly": true,
            "type": "integer"
          },
          "status": {
            "enum": [
              "Q",
              "U",
              "E",
              "D"
            ],
            "readOnly": true,
            "type": "string"
          },
          "success": {
            "readOnly": true,
            "type": "string"
          },
          "transfer_type": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "TransferFromStorageReadSchema": {
        "properties": {
          "add_file_set": {
            "readOnly": true,
            "type": "boolean"
          },
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "asset_paths": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "collection_storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "component_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "delete_local_file_set_after_upload": {
            "type": "boolean"
          },
          "delete_only_from_source_folder": {
            "type": "boolean"
          },
          "delete_source_file_set_after_download": {
            "type": "boolean"
          },
          "destination_directory_path": {
            "type": "string"
          },
          "destination_file_set_name": {
            "readOnly": true,
            "type": "string"
          },
          "destination_filename": {
            "type": "string"
          },
          "destination_storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "destination_storage_method": {
            "type": "string"
          },
          "export_metadata_format": {
            "readOnly": true,
            "type": "string"
          },
          "export_metadata_view": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "export_posters": {
            "readOnly": true,
            "type": "boolean"
          },
          "export_proxy": {
            "readOnly": true,
            "type": "boolean"
          },
          "export_transcription_format": {
            "readOnly": true,
            "type": "string"
          },
          "format_id": {
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          },
          "job_steps": {
            "type": "object"
          },
          "original_file_set_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_url": {
            "format": "url",
            "type": "string"
          },
          "overwrite": {
            "readOnly": true,
            "type": "boolean"
          },
          "parent_job_id": {
            "format": "uuid",
            "type": "string"
          },
          "temporary_file_set_source": {
            "type": "boolean"
          },
          "transfer_type": {
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "TransferFromStorageSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "asset_paths": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "collection_storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "component_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "delete_local_file_set_after_upload": {
            "type": "boolean"
          },
          "delete_only_from_source_folder": {
            "type": "boolean"
          },
          "delete_source_file_set_after_download": {
            "type": "boolean"
          },
          "destination_directory_path": {
            "type": "string"
          },
          "destination_file_set_name": {
            "readOnly": true,
            "type": "string"
          },
          "destination_filename": {
            "type": "string"
          },
          "destination_storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "destination_storage_method": {
            "type": "string"
          },
          "format_id": {
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          },
          "job_steps": {
            "type": "object"
          },
          "original_file_set_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_url": {
            "format": "url",
            "type": "string"
          },
          "parent_job_id": {
            "format": "uuid",
            "type": "string"
          },
          "temporary_file_set_source": {
            "type": "boolean"
          },
          "transfer_type": {
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "TransferSignedURLSchema": {
        "properties": {
          "url": {
            "format": "url",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TransferToStorageReadSchema": {
        "properties": {
          "add_file_set": {
            "readOnly": true,
            "type": "boolean"
          },
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "asset_paths": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "collection_storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "component_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "delete_only_from_source_folder": {
            "type": "boolean"
          },
          "delete_remote_file_set_after_download": {
            "type": "boolean"
          },
          "delete_source_file_set_after_download": {
            "type": "boolean"
          },
          "destination_base_directory": {
            "type": "string"
          },
          "destination_directory_path": {
            "type": "string"
          },
          "destination_file_set_name": {
            "type": "string"
          },
          "destination_filename": {
            "type": "string"
          },
          "export_metadata_format": {
            "readOnly": true,
            "type": "string"
          },
          "export_metadata_view": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "export_original": {
            "readOnly": true,
            "type": "boolean"
          },
          "export_posters": {
            "readOnly": true,
            "type": "boolean"
          },
          "export_proxy": {
            "readOnly": true,
            "type": "boolean"
          },
          "export_transcription_format": {
            "readOnly": true,
            "type": "string"
          },
          "file_set_id": {
            "format": "uuid",
            "type": "string"
          },
          "format_id": {
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          },
          "job_steps": {
            "type": "object"
          },
          "local_storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_url": {
            "format": "url",
            "type": "string"
          },
          "overwrite": {
            "readOnly": true,
            "type": "boolean"
          },
          "parent_job_id": {
            "format": "uuid",
            "type": "string"
          },
          "temporary_file_set_source": {
            "type": "boolean"
          },
          "transfer_type": {
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "destination_directory_path",
          "destination_file_set_name"
        ],
        "type": "object"
      },
      "TransferToStorageSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "asset_paths": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "collection_storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "component_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "delete_only_from_source_folder": {
            "type": "boolean"
          },
          "delete_remote_file_set_after_download": {
            "type": "boolean"
          },
          "delete_source_file_set_after_download": {
            "type": "boolean"
          },
          "destination_base_directory": {
            "type": "string"
          },
          "destination_directory_path": {
            "type": "string"
          },
          "destination_file_set_name": {
            "type": "string"
          },
          "destination_filename": {
            "type": "string"
          },
          "file_set_id": {
            "format": "uuid",
            "type": "string"
          },
          "format_id": {
            "format": "uuid",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          },
          "job_steps": {
            "type": "object"
          },
          "local_storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_storage_id": {
            "format": "uuid",
            "type": "string"
          },
          "original_url": {
            "format": "url",
            "type": "string"
          },
          "parent_job_id": {
            "format": "uuid",
            "type": "string"
          },
          "temporary_file_set_source": {
            "type": "boolean"
          },
          "transfer_type": {
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "destination_directory_path",
          "destination_file_set_name"
        ],
        "type": "object"
      },
      "TransfersFromStorageSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/TransferFromStorageReadSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TransfersToStorageSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/TransferToStorageReadSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "UploadIconikStorageGatewayLogsSchema": {
        "properties": {
          "filename": {
            "maxLength": 100,
            "type": "string"
          }
        },
        "required": [
          "filename"
        ],
        "type": "object"
      },
      "VantageSettingsSchema": {
        "properties": {
          "exclude_patterns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "host": {
            "type": "string"
          },
          "include_patterns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "local": {
            "type": "boolean"
          },
          "port": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "priority": {
            "format": "int32",
            "maximum": 10,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "share_name": {
            "type": "string"
          },
          "temp_proxy_folder": {
            "type": "string"
          },
          "workflow_id": {
            "type": "string"
          }
        },
        "required": [
          "host",
          "port",
          "share_name",
          "temp_proxy_folder",
          "workflow_id"
        ],
        "type": "object"
      },
      "WatchFolderVideoTranscoderSchema": {
        "properties": {
          "create_web_proxy_from_edit_proxy": {
            "type": "boolean"
          },
          "edit_proxy_local_storage_path": {
            "type": "string"
          },
          "edit_proxy_upload_storage_id": {
            "type": "string"
          },
          "edit_proxy_upload_storage_path": {
            "type": "string"
          },
          "exclude_patterns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "file_grow_threshold": {
            "format": "int32",
            "minimum": 5,
            "type": "integer"
          },
          "include_patterns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "keep_as_edit_proxy": {
            "type": "boolean"
          },
          "keyframe_folder_name": {
            "type": "string"
          },
          "keyframe_map_folder_name": {
            "type": "string"
          },
          "local": {
            "type": "boolean"
          },
          "proxy_folder_name": {
            "type": "string"
          },
          "proxy_timeout": {
            "format": "int32",
            "maximum": 86400,
            "minimum": 10,
            "type": "integer"
          },
          "use_symlink": {
            "description": "If enabled a soft link is used to add original to the watch folder, if disabled a hard link is used with a fallback to copy.",
            "type": "boolean"
          },
          "use_unique_sub_folder_workflow": {
            "description": "A sub-folder is created with a unique name inside the watch folder per job.",
            "type": "boolean"
          },
          "watch_folder_location": {
            "type": "string"
          }
        },
        "required": [
          "file_grow_threshold",
          "keyframe_folder_name",
          "keyframe_map_folder_name",
          "proxy_folder_name",
          "watch_folder_location"
        ],
        "type": "object"
      },
      "ZencoderSettingsSchema": {
        "properties": {
          "api_key": {
            "type": "string"
          },
          "exclude_patterns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "include_patterns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "local": {
            "type": "boolean"
          },
          "priority": {
            "format": "int32",
            "maximum": 10,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "api_key"
        ],
        "type": "object"
      },
      "ActionContextSchema": {
        "properties": {
          "ABORT": {
            "$ref": "#/components/schemas/ActionContextValue"
          },
          "CHANGE_PRIORITY": {
            "$ref": "#/components/schemas/ActionContextValue"
          },
          "PAUSE": {
            "$ref": "#/components/schemas/ActionContextValue"
          },
          "RESTART": {
            "$ref": "#/components/schemas/ActionContextValue"
          },
          "RESUME": {
            "$ref": "#/components/schemas/ActionContextValue"
          }
        },
        "type": "object"
      },
      "ActionContextValue": {
        "properties": {
          "bulk": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActionContextValueSchema": {
        "properties": {
          "bulk": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "JobBaseSchema": {
        "properties": {
          "action_context": {
            "$ref": "#/components/schemas/ActionContextSchema"
          },
          "children_progress": {
            "readOnly": true,
            "type": "object"
          },
          "completed_at": {
            "format": "date-time",
            "type": "string"
          },
          "custom_type": {
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "error_message": {
            "type": "string"
          },
          "has_children": {
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "job_context": {
            "type": "object"
          },
          "message": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "object_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "object_type": {
            "nullable": true,
            "type": "string"
          },
          "parent_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "priority": {
            "format": "int32",
            "maximum": 10,
            "minimum": 1,
            "readOnly": true,
            "type": "integer"
          },
          "progress": {
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "progress_processed": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "progress_total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "related_objects": {
            "items": {
              "$ref": "#/components/schemas/RelatedObject"
            },
            "minItems": 1,
            "type": "array"
          },
          "started_at": {
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "enum": [
              "READY",
              "STARTED",
              "FINISHED",
              "FINISHED_WITH_WARNING",
              "FAILED",
              "WAITING",
              "ABORT_PENDING",
              "ABORTED",
              "SKIPPED",
              "PAUSED"
            ],
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "enum": [
              "MEDIAINFO",
              "TRANSCODE",
              "KEYFRAMES",
              "EXPORT",
              "DELETE",
              "REINDEX",
              "MOVE",
              "TRANSFER",
              "ANALYZE",
              "METADATA",
              "CUSTOM",
              "SCAN",
              "ARCHIVE",
              "RESTORE",
              "RESTORE_FROM_GLACIER",
              "ACL",
              "COPY",
              "TRANSCRIPTION",
              "REQUEST_COLLECTION_MAP",
              "COLLECTION_CUSTOM_ORDER",
              "STORAGE_GATEWAY_FILE_INGEST",
              "MARK_MISSING",
              "FACE_RECOGNITION",
              "SET_APPROVAL"
            ],
            "type": "string"
          }
        },
        "required": [
          "status",
          "title",
          "type"
        ],
        "type": "object"
      },
      "JobChildProgressSchema": {
        "properties": {
          "progress_processed": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "progress_total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "status": {
            "enum": [
              "READY",
              "STARTED",
              "FINISHED",
              "FINISHED_WITH_WARNING",
              "FAILED",
              "WAITING",
              "ABORT_PENDING",
              "ABORTED",
              "SKIPPED",
              "PAUSED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "JobCreateSchema": {
        "properties": {
          "action_context": {
            "$ref": "#/components/schemas/ActionContextSchema"
          },
          "children_progress": {
            "readOnly": true,
            "type": "object"
          },
          "completed_at": {
            "format": "date-time",
            "type": "string"
          },
          "created_by": {
            "format": "uuid",
            "type": "string"
          },
          "custom_type": {
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "error_message": {
            "type": "string"
          },
          "has_children": {
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "job_context": {
            "type": "object"
          },
          "message": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "object_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "object_type": {
            "nullable": true,
            "type": "string"
          },
          "parent_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "priority": {
            "format": "int32",
            "maximum": 10,
            "minimum": 1,
            "readOnly": true,
            "type": "integer"
          },
          "progress": {
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "progress_processed": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "progress_total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "related_objects": {
            "items": {
              "$ref": "#/components/schemas/RelatedObject"
            },
            "minItems": 1,
            "type": "array"
          },
          "started_at": {
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "enum": [
              "READY",
              "STARTED",
              "FINISHED",
              "FINISHED_WITH_WARNING",
              "FAILED",
              "WAITING",
              "ABORT_PENDING",
              "ABORTED",
              "SKIPPED",
              "PAUSED"
            ],
            "type": "string"
          },
          "steps": {
            "items": {
              "$ref": "#/components/schemas/JobStep"
            },
            "type": "array"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "enum": [
              "MEDIAINFO",
              "TRANSCODE",
              "KEYFRAMES",
              "EXPORT",
              "DELETE",
              "REINDEX",
              "MOVE",
              "TRANSFER",
              "ANALYZE",
              "METADATA",
              "CUSTOM",
              "SCAN",
              "ARCHIVE",
              "RESTORE",
              "RESTORE_FROM_GLACIER",
              "ACL",
              "COPY",
              "TRANSCRIPTION",
              "REQUEST_COLLECTION_MAP",
              "COLLECTION_CUSTOM_ORDER",
              "STORAGE_GATEWAY_FILE_INGEST",
              "MARK_MISSING",
              "FACE_RECOGNITION",
              "SET_APPROVAL"
            ],
            "type": "string"
          }
        },
        "required": [
          "status",
          "title",
          "type"
        ],
        "type": "object"
      },
      "JobElasticSchema": {
        "properties": {
          "action_context": {
            "$ref": "#/components/schemas/ActionContextSchema"
          },
          "children_progress": {
            "readOnly": true,
            "type": "object"
          },
          "completed_at": {
            "format": "date-time",
            "type": "string"
          },
          "created_by": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "custom_type": {
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "readOnly": true,
            "type": "string"
          },
          "error_message": {
            "type": "string"
          },
          "has_children": {
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "job_context": {
            "type": "object"
          },
          "message": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "object_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "object_type": {
            "nullable": true,
            "type": "string"
          },
          "parent_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "priority": {
            "format": "int32",
            "maximum": 10,
            "minimum": 1,
            "readOnly": true,
            "type": "integer"
          },
          "progress": {
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "progress_processed": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "progress_total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "related_objects": {
            "items": {
              "$ref": "#/components/schemas/RelatedObject"
            },
            "minItems": 1,
            "type": "array"
          },
          "started_at": {
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "enum": [
              "READY",
              "STARTED",
              "FINISHED",
              "FINISHED_WITH_WARNING",
              "FAILED",
              "WAITING",
              "ABORT_PENDING",
              "ABORTED",
              "SKIPPED",
              "PAUSED"
            ],
            "type": "string"
          },
          "steps": {
            "items": {
              "$ref": "#/components/schemas/JobStepElastic"
            },
            "readOnly": true,
            "type": "array"
          },
          "storage_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "enum": [
              "MEDIAINFO",
              "TRANSCODE",
              "KEYFRAMES",
              "EXPORT",
              "DELETE",
              "REINDEX",
              "MOVE",
              "TRANSFER",
              "ANALYZE",
              "METADATA",
              "CUSTOM",
              "SCAN",
              "ARCHIVE",
              "RESTORE",
              "RESTORE_FROM_GLACIER",
              "ACL",
              "COPY",
              "TRANSCRIPTION",
              "REQUEST_COLLECTION_MAP",
              "COLLECTION_CUSTOM_ORDER",
              "STORAGE_GATEWAY_FILE_INGEST",
              "MARK_MISSING",
              "FACE_RECOGNITION",
              "SET_APPROVAL"
            ],
            "type": "string"
          }
        },
        "required": [
          "status",
          "title",
          "type"
        ],
        "type": "object"
      },
      "JobSchema": {
        "properties": {
          "action_context": {
            "$ref": "#/components/schemas/ActionContextSchema"
          },
          "children_progress": {
            "readOnly": true,
            "type": "object"
          },
          "completed_at": {
            "format": "date-time",
            "type": "string"
          },
          "created_by": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "custom_type": {
            "nullable": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "error_message": {
            "type": "string"
          },
          "has_children": {
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "job_context": {
            "type": "object"
          },
          "message": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "object_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "object_type": {
            "nullable": true,
            "type": "string"
          },
          "parent_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "priority": {
            "format": "int32",
            "maximum": 10,
            "minimum": 1,
            "readOnly": true,
            "type": "integer"
          },
          "progress": {
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "progress_processed": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "progress_total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "related_objects": {
            "items": {
              "$ref": "#/components/schemas/RelatedObject"
            },
            "minItems": 1,
            "type": "array"
          },
          "started_at": {
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "enum": [
              "READY",
              "STARTED",
              "FINISHED",
              "FINISHED_WITH_WARNING",
              "FAILED",
              "WAITING",
              "ABORT_PENDING",
              "ABORTED",
              "SKIPPED",
              "PAUSED"
            ],
            "type": "string"
          },
          "steps": {
            "items": {
              "$ref": "#/components/schemas/JobStep"
            },
            "readOnly": true,
            "type": "array"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "enum": [
              "MEDIAINFO",
              "TRANSCODE",
              "KEYFRAMES",
              "EXPORT",
              "DELETE",
              "REINDEX",
              "MOVE",
              "TRANSFER",
              "ANALYZE",
              "METADATA",
              "CUSTOM",
              "SCAN",
              "ARCHIVE",
              "RESTORE",
              "RESTORE_FROM_GLACIER",
              "ACL",
              "COPY",
              "TRANSCRIPTION",
              "REQUEST_COLLECTION_MAP",
              "COLLECTION_CUSTOM_ORDER",
              "STORAGE_GATEWAY_FILE_INGEST",
              "MARK_MISSING",
              "FACE_RECOGNITION",
              "SET_APPROVAL"
            ],
            "type": "string"
          }
        },
        "required": [
          "status",
          "title",
          "type"
        ],
        "type": "object"
      },
      "JobStep": {
        "properties": {
          "date_updated": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "error_message": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "message": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "IN_PROGRESS",
              "WAITING",
              "FAILED",
              "DONE",
              "SKIPPED"
            ],
            "type": "string"
          }
        },
        "required": [
          "label",
          "status"
        ],
        "type": "object"
      },
      "JobStepElastic": {
        "properties": {
          "date_updated": {
            "readOnly": true,
            "type": "string"
          },
          "error_message": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "message": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "label"
        ],
        "type": "object"
      },
      "JobStepElasticSchema": {
        "properties": {
          "date_updated": {
            "readOnly": true,
            "type": "string"
          },
          "error_message": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "message": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "label"
        ],
        "type": "object"
      },
      "JobStepSchema": {
        "properties": {
          "date_updated": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "error_message": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "message": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "IN_PROGRESS",
              "WAITING",
              "FAILED",
              "DONE",
              "SKIPPED"
            ],
            "type": "string"
          }
        },
        "required": [
          "label",
          "status"
        ],
        "type": "object"
      },
      "JobStepUpdateBulkSchema": {
        "properties": {
          "date_updated": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "error_message": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "message": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "IN_PROGRESS",
              "WAITING",
              "FAILED",
              "DONE",
              "SKIPPED"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "label",
          "status"
        ],
        "type": "object"
      },
      "JobStepUpdateSchema": {
        "properties": {
          "date_updated": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "error_message": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "message": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "IN_PROGRESS",
              "WAITING",
              "FAILED",
              "DONE",
              "SKIPPED"
            ],
            "type": "string"
          }
        },
        "required": [
          "label",
          "status"
        ],
        "type": "object"
      },
      "JobStepsSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/JobStepSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "JobStepsUpdateSchema": {
        "properties": {
          "steps": {
            "items": {
              "$ref": "#/components/schemas/JobStepUpdateBulkSchema"
            },
            "type": "array"
          }
        },
        "required": [
          "steps"
        ],
        "type": "object"
      },
      "JobsBulkActionSchema": {
        "properties": {
          "job_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "job_ids"
        ],
        "type": "object"
      },
      "JobsBulkDeleteSchema": {
        "properties": {
          "job_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "job_ids"
        ],
        "type": "object"
      },
      "JobsQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "scroll": {
            "type": "boolean"
          },
          "scroll_id": {
            "format": "uuid",
            "type": "string"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "JobsSchema": {
        "properties": {
          "facets": {
            "type": "object"
          },
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/JobElasticSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "JobsStateSchema1": {
        "properties": {
          "action": {
            "enum": [
              "PAUSE",
              "RESUME",
              "ABORT",
              "RESTART"
            ],
            "type": "string"
          },
          "job_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "action",
          "job_ids"
        ],
        "type": "object"
      },
      "ListObjectsSchema3": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ReindexJobSchema": {
        "properties": {
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "RelatedObject": {
        "properties": {
          "object_id": {
            "format": "uuid",
            "type": "string"
          },
          "object_type": {
            "type": "string"
          }
        },
        "required": [
          "object_id",
          "object_type"
        ],
        "type": "object"
      },
      "RelatedObjectSchema": {
        "properties": {
          "object_id": {
            "format": "uuid",
            "type": "string"
          },
          "object_type": {
            "type": "string"
          }
        },
        "required": [
          "object_id",
          "object_type"
        ],
        "type": "object"
      },
      "BulkMetadataCopySchema": {
        "properties": {
          "object_ids_mapping": {
            "items": {
              "$ref": "#/components/schemas/SegmentsCopyMapping"
            },
            "type": "array"
          }
        },
        "required": [
          "object_ids_mapping"
        ],
        "type": "object"
      },
      "BulkMetadataDeleteSchema": {
        "properties": {
          "object_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "object_ids"
        ],
        "type": "object"
      },
      "CollectionMetadataValuesBatchSchema": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "type": "string"
          },
          "include_assets": {
            "type": "boolean"
          },
          "include_collections": {
            "type": "boolean"
          },
          "metadata_values": {
            "type": "object"
          },
          "object_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "object_type": {
            "type": "string"
          }
        },
        "required": [
          "include_assets",
          "include_collections",
          "metadata_values",
          "object_ids"
        ],
        "type": "object"
      },
      "CopySourceQueryParamsSchema": {
        "properties": {
          "source_object_id": {
            "format": "uuid",
            "type": "string"
          },
          "source_object_type": {
            "type": "string"
          },
          "source_version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateMetadataValuesBatchSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "type": "string"
          },
          "metadata_values_object_id_mapping": {
            "items": {
              "$ref": "#/components/schemas/MetadataValuesObjectId"
            },
            "type": "array"
          },
          "object_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "object_type": {
            "type": "string"
          }
        },
        "required": [
          "metadata_values_object_id_mapping",
          "object_ids"
        ],
        "type": "object"
      },
      "ExternalSourceFieldOptionsSchema": {
        "properties": {
          "label": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "FacetFieldNamesSchema": {
        "properties": {
          "objects": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "FieldOptionsSchema": {
        "properties": {
          "label": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "MetadataCategoriesSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/MetadataCategory"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "MetadataCategory": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "view_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "views": {
            "items": {
              "$ref": "#/components/schemas/MetadataView"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "required": [
          "label",
          "name"
        ],
        "type": "object"
      },
      "MetadataCategorySchema": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "view_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "views": {
            "items": {
              "$ref": "#/components/schemas/MetadataView"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "required": [
          "label",
          "name"
        ],
        "type": "object"
      },
      "MetadataField": {
        "properties": {
          "auto_set": {
            "nullable": true,
            "type": "boolean"
          },
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "external_id": {
            "type": "string"
          },
          "field_type": {
            "type": "string"
          },
          "hide_if_not_set": {
            "nullable": true,
            "type": "boolean"
          },
          "is_block_field": {
            "type": "boolean"
          },
          "is_warning_field": {
            "type": "boolean"
          },
          "label": {
            "type": "string"
          },
          "mapped_field_name": {
            "readOnly": true,
            "type": "string"
          },
          "max_value": {
            "type": "number"
          },
          "min_value": {
            "type": "number"
          },
          "multi": {
            "type": "boolean"
          },
          "name": {
            "readOnly": true,
            "type": "string"
          },
          "options": {
            "items": {
              "$ref": "#/components/schemas/FieldOptionsSchema"
            },
            "type": "array"
          },
          "read_only": {
            "nullable": true,
            "type": "boolean"
          },
          "representative": {
            "type": "boolean"
          },
          "required": {
            "nullable": true,
            "type": "boolean"
          },
          "sortable": {
            "type": "boolean"
          },
          "source_url": {
            "description": "Will be used to upload MetadataField's `options`. Cannot be set or used as long as `options` are set.  **Example**: The value is `https://external-url.com/foo/`. In that case `GET` request will be sent to `https://external-url.com/foo/?user_id=uuid1&view_id=uuid1&field_name=bar&view_name=user_view&system_domain_id=uuid1`. Please note that some query parameters were added by *iconik* to get values that were predefined in your system for each user [user_id] and view [view_id]. Metadata field name [field_name], view's name [view_name] and system domain identifier [system_domain_id] will be also passed in each request. *iconik* will successfully parse the response from that URL if it will be sent in JSON formatted string: `{\"bar\": [{\"value\": \"1\", \"label\": \"1st\"}, {\"value\": \"2\", \"label\": \"2nd\"}]}`",
            "format": "url",
            "nullable": true,
            "type": "string"
          },
          "use_as_facet": {
            "type": "boolean"
          }
        },
        "required": [
          "field_type",
          "label",
          "name"
        ],
        "type": "object"
      },
      "MetadataFieldBaseSchema": {
        "properties": {
          "auto_set": {
            "nullable": true,
            "type": "boolean"
          },
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "external_id": {
            "type": "string"
          },
          "field_type": {
            "type": "string"
          },
          "hide_if_not_set": {
            "nullable": true,
            "type": "boolean"
          },
          "is_block_field": {
            "type": "boolean"
          },
          "is_warning_field": {
            "type": "boolean"
          },
          "mapped_field_name": {
            "readOnly": true,
            "type": "string"
          },
          "max_value": {
            "type": "number"
          },
          "min_value": {
            "type": "number"
          },
          "multi": {
            "type": "boolean"
          },
          "options": {
            "items": {
              "$ref": "#/components/schemas/FieldOptionsSchema"
            },
            "type": "array"
          },
          "read_only": {
            "nullable": true,
            "type": "boolean"
          },
          "representative": {
            "type": "boolean"
          },
          "required": {
            "nullable": true,
            "type": "boolean"
          },
          "sortable": {
            "type": "boolean"
          },
          "source_url": {
            "description": "Will be used to upload MetadataField's `options`. Cannot be set or used as long as `options` are set.  **Example**: The value is `https://external-url.com/foo/`. In that case `GET` request will be sent to `https://external-url.com/foo/?user_id=uuid1&view_id=uuid1&field_name=bar&view_name=user_view&system_domain_id=uuid1`. Please note that some query parameters were added by *iconik* to get values that were predefined in your system for each user [user_id] and view [view_id]. Metadata field name [field_name], view's name [view_name] and system domain identifier [system_domain_id] will be also passed in each request. *iconik* will successfully parse the response from that URL if it will be sent in JSON formatted string: `{\"bar\": [{\"value\": \"1\", \"label\": \"1st\"}, {\"value\": \"2\", \"label\": \"2nd\"}]}`",
            "format": "url",
            "nullable": true,
            "type": "string"
          },
          "use_as_facet": {
            "type": "boolean"
          }
        },
        "required": [
          "field_type"
        ],
        "type": "object"
      },
      "MetadataFieldCreateSchema": {
        "properties": {
          "auto_set": {
            "nullable": true,
            "type": "boolean"
          },
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "external_id": {
            "type": "string"
          },
          "field_type": {
            "type": "string"
          },
          "hide_if_not_set": {
            "nullable": true,
            "type": "boolean"
          },
          "is_block_field": {
            "type": "boolean"
          },
          "is_warning_field": {
            "type": "boolean"
          },
          "label": {
            "type": "string"
          },
          "mapped_field_name": {
            "readOnly": true,
            "type": "string"
          },
          "max_value": {
            "type": "number"
          },
          "min_value": {
            "type": "number"
          },
          "multi": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "options": {
            "items": {
              "$ref": "#/components/schemas/FieldOptionsSchema"
            },
            "type": "array"
          },
          "read_only": {
            "nullable": true,
            "type": "boolean"
          },
          "representative": {
            "type": "boolean"
          },
          "required": {
            "nullable": true,
            "type": "boolean"
          },
          "sortable": {
            "type": "boolean"
          },
          "source_url": {
            "description": "Will be used to upload MetadataField's `options`. Cannot be set or used as long as `options` are set.  **Example**: The value is `https://external-url.com/foo/`. In that case `GET` request will be sent to `https://external-url.com/foo/?user_id=uuid1&view_id=uuid1&field_name=bar&view_name=user_view&system_domain_id=uuid1`. Please note that some query parameters were added by *iconik* to get values that were predefined in your system for each user [user_id] and view [view_id]. Metadata field name [field_name], view's name [view_name] and system domain identifier [system_domain_id] will be also passed in each request. *iconik* will successfully parse the response from that URL if it will be sent in JSON formatted string: `{\"bar\": [{\"value\": \"1\", \"label\": \"1st\"}, {\"value\": \"2\", \"label\": \"2nd\"}]}`",
            "format": "url",
            "nullable": true,
            "type": "string"
          },
          "use_as_facet": {
            "type": "boolean"
          }
        },
        "required": [
          "field_type",
          "label",
          "name"
        ],
        "type": "object"
      },
      "MetadataFieldMappingOptionSchema": {
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "MetadataFieldMappingOptionsSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/MetadataFieldMappingOptionSchema"
            },
            "type": "array"
          }
        },
        "required": [
          "objects"
        ],
        "type": "object"
      },
      "MetadataFieldMappingSchema": {
        "properties": {
          "field_type": {
            "readOnly": true,
            "type": "string"
          },
          "mapped_field_name": {
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "mapped_field_name",
          "name"
        ],
        "type": "object"
      },
      "MetadataFieldMappingUpdateSchema": {
        "properties": {
          "field_type": {
            "readOnly": true,
            "type": "string"
          },
          "mapped_field_name": {
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "mapped_field_name"
        ],
        "type": "object"
      },
      "MetadataFieldMappingsSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/MetadataFieldMappingSchema"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MetadataFieldSchema": {
        "properties": {
          "auto_set": {
            "nullable": true,
            "type": "boolean"
          },
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "external_id": {
            "type": "string"
          },
          "field_type": {
            "type": "string"
          },
          "hide_if_not_set": {
            "nullable": true,
            "type": "boolean"
          },
          "is_block_field": {
            "type": "boolean"
          },
          "is_warning_field": {
            "type": "boolean"
          },
          "label": {
            "type": "string"
          },
          "mapped_field_name": {
            "readOnly": true,
            "type": "string"
          },
          "max_value": {
            "type": "number"
          },
          "min_value": {
            "type": "number"
          },
          "multi": {
            "type": "boolean"
          },
          "name": {
            "readOnly": true,
            "type": "string"
          },
          "options": {
            "items": {
              "$ref": "#/components/schemas/FieldOptionsSchema"
            },
            "type": "array"
          },
          "read_only": {
            "nullable": true,
            "type": "boolean"
          },
          "representative": {
            "type": "boolean"
          },
          "required": {
            "nullable": true,
            "type": "boolean"
          },
          "sortable": {
            "type": "boolean"
          },
          "source_url": {
            "description": "Will be used to upload MetadataField's `options`. Cannot be set or used as long as `options` are set.  **Example**: The value is `https://external-url.com/foo/`. In that case `GET` request will be sent to `https://external-url.com/foo/?user_id=uuid1&view_id=uuid1&field_name=bar&view_name=user_view&system_domain_id=uuid1`. Please note that some query parameters were added by *iconik* to get values that were predefined in your system for each user [user_id] and view [view_id]. Metadata field name [field_name], view's name [view_name] and system domain identifier [system_domain_id] will be also passed in each request. *iconik* will successfully parse the response from that URL if it will be sent in JSON formatted string: `{\"bar\": [{\"value\": \"1\", \"label\": \"1st\"}, {\"value\": \"2\", \"label\": \"2nd\"}]}`",
            "format": "url",
            "nullable": true,
            "type": "string"
          },
          "use_as_facet": {
            "type": "boolean"
          }
        },
        "required": [
          "field_type",
          "label",
          "name"
        ],
        "type": "object"
      },
      "MetadataFieldValueSchema1": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "field_values": {
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "mode": {
            "default": "overwrite",
            "enum": [
              "append",
              "delete",
              "overwrite"
            ],
            "type": "string",
            "writeOnly": true
          }
        },
        "type": "object"
      },
      "MetadataFieldsSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/MetadataFieldSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "MetadataValuesBatchSchema": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "type": "string"
          },
          "metadata_values": {
            "type": "object"
          },
          "object_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "object_type": {
            "type": "string"
          }
        },
        "required": [
          "metadata_values",
          "object_ids"
        ],
        "type": "object"
      },
      "MetadataValuesObjectId": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "metadata_values": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "metadata_values"
        ],
        "type": "object"
      },
      "MetadataValuesObjectIdSchema": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "metadata_values": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "metadata_values"
        ],
        "type": "object"
      },
      "MetadataValuesSchema": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "type": "string"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          },
          "metadata_values": {
            "type": "object"
          },
          "object_id": {
            "format": "uuid",
            "type": "string"
          },
          "object_type": {
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "metadata_values"
        ],
        "type": "object"
      },
      "MetadataView": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "view_fields": {
            "items": {
              "$ref": "#/components/schemas/MetadataField"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "view_fields"
        ],
        "type": "object"
      },
      "MetadataViewFieldSchema": {
        "properties": {
          "auto_set": {
            "nullable": true,
            "type": "boolean"
          },
          "hide_if_not_set": {
            "nullable": true,
            "type": "boolean"
          },
          "label": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "options": {
            "items": {
              "$ref": "#/components/schemas/FieldOptionsSchema"
            },
            "nullable": true,
            "type": "array"
          },
          "read_only": {
            "nullable": true,
            "type": "boolean"
          },
          "required": {
            "nullable": true,
            "type": "boolean"
          },
          "source_url": {
            "description": "Will be used to upload MetadataField's `options`. Cannot be set or used as long as `options` are set.  **Example**: The value is `https://external-url.com/foo/`. In that case `GET` request will be sent to `https://external-url.com/foo/?user_id=uuid1&view_id=uuid1&field_name=bar&view_name=user_view&system_domain_id=uuid1`. Please note that some query parameters were added by *iconik* to get values that were predefined in your system for each user [user_id] and view [view_id]. Metadata field name [field_name], view's name [view_name] and system domain identifier [system_domain_id] will be also passed in each request. *iconik* will successfully parse the response from that URL if it will be sent in JSON formatted string: `{\"bar\": [{\"value\": \"1\", \"label\": \"1st\"}, {\"value\": \"2\", \"label\": \"2nd\"}]}`",
            "format": "url",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "MetadataViewInputSchema": {
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "view_fields": {
            "items": {
              "$ref": "#/components/schemas/MetadataViewFieldSchema"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "view_fields"
        ],
        "type": "object"
      },
      "MetadataViewSchema": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "view_fields": {
            "items": {
              "$ref": "#/components/schemas/MetadataFieldSchema"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "view_fields"
        ],
        "type": "object"
      },
      "MetadataViewsSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/MetadataViewSchema"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "SegmentsCopyMapping": {
        "properties": {
          "destination_object_id": {
            "format": "uuid",
            "type": "string"
          },
          "destination_version_id": {
            "format": "uuid",
            "type": "string"
          },
          "source_object_id": {
            "format": "uuid",
            "type": "string"
          },
          "source_version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "destination_object_id",
          "destination_version_id",
          "source_object_id",
          "source_version_id"
        ],
        "type": "object"
      },
      "SegmentsCopyMappingSchema": {
        "properties": {
          "destination_object_id": {
            "format": "uuid",
            "type": "string"
          },
          "destination_version_id": {
            "format": "uuid",
            "type": "string"
          },
          "source_object_id": {
            "format": "uuid",
            "type": "string"
          },
          "source_version_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "destination_object_id",
          "destination_version_id",
          "source_object_id",
          "source_version_id"
        ],
        "type": "object"
      },
      "WebhookBaseSchema": {
        "type": "object",
        "properties": {
          "operation": {
            "type": "string",
            "nullable": true,
            "description": "Operation of event. Example create, update, delete",
            "example": "update"
          },
          "first_failed_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "event_type": {
            "type": "string",
            "description": "Type of events. Example assets, collections",
            "example": "assets"
          },
          "object_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "ID of a particular object you want to subscribe on",
            "example": "d7a5a7e8-4247-11ee-b3d8-a683e79fffaf"
          },
          "status": {
            "type": "string",
            "enum": [
              "ENABLED",
              "DISABLED",
              "FAILING",
              "DELETED"
            ],
            "example": "ENABLED"
          },
          "last_payload": {
            "type": "string"
          },
          "date_created": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "realm": {
            "type": "string",
            "nullable": true,
            "description": "Realm of event. Example entity, contents, acls, metadata",
            "example": "metadata"
          },
          "url": {
            "type": "string",
            "description": "URL you want to be called when notification is appeared",
            "example": "https://example.com/webhook_handler"
          },
          "query": {
            "type": "string",
            "description": "Adding a query allows filtering out messages so webhooks will be called only if for messages that match this query.",
            "example": "data.is_archived=false AND data.size>0 (data.status=\"CLOSED\" OR data.status=\"DELETED\") AND data.external_id!=null"
          },
          "date_modified": {
            "type": "string",
            "format": "date-time"
          },
          "headers": {
            "type": "object",
            "description": "Define the key-value pairs your third party provider requires here",
            "example": {
              "AUTH-TOKEN": "XYZ",
              "SECRET": "asdad",
              "S3_BUCKET_NAME": "iconik-examples",
              "S3_REGION": "eu-west-1"
            },
            "additionalProperties": {
              "type": "string"
            }
          },
          "last_error": {
            "type": "string"
          }
        },
        "required": [
          "event_type",
          "id",
          "status",
          "url"
        ]
      },
      "WebhookCreateSchema": {
        "type": "object",
        "properties": {
          "operation": {
            "type": "string",
            "nullable": true,
            "description": "Operation of event. Example create, update, delete",
            "example": "update"
          },
          "first_failed_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "event_type": {
            "type": "string",
            "description": "Type of events. Example assets, collections",
            "example": "assets"
          },
          "object_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "ID of a particular object you want to subscribe on",
            "example": "d7a5a7e8-4247-11ee-b3d8-a683e79fffaf"
          },
          "status": {
            "type": "string",
            "enum": [
              "ENABLED",
              "DISABLED",
              "FAILING",
              "DELETED"
            ],
            "example": "ENABLED"
          },
          "last_payload": {
            "type": "string"
          },
          "date_created": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "realm": {
            "type": "string",
            "nullable": true,
            "description": "Realm of event. Example entity, contents, acls, metadata",
            "example": "metadata"
          },
          "url": {
            "type": "string",
            "description": "URL you want to be called when notification is appeared",
            "example": "https://example.com/webhook_handler"
          },
          "query": {
            "type": "string",
            "description": "Adding a query allows filtering out messages so webhooks will be called only if for messages that match this query.",
            "example": "data.is_archived=false AND data.size>0 (data.status=\"CLOSED\" OR data.status=\"DELETED\") AND data.external_id!=null"
          },
          "date_modified": {
            "type": "string",
            "format": "date-time"
          },
          "headers": {
            "type": "object",
            "description": "Define the key-value pairs your third party provider requires here",
            "example": {
              "AUTH-TOKEN": "XYZ",
              "SECRET": "asdad",
              "S3_BUCKET_NAME": "iconik-examples",
              "S3_REGION": "eu-west-1"
            },
            "additionalProperties": {
              "type": "string"
            }
          },
          "last_error": {
            "type": "string"
          }
        },
        "required": [
          "event_type",
          "status",
          "url"
        ]
      },
      "WebhookInternalSchema": {
        "type": "object",
        "properties": {
          "operation": {
            "type": "string",
            "nullable": true,
            "description": "Operation of event. Example create, update, delete",
            "example": "update"
          },
          "first_failed_at": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "event_type": {
            "type": "string",
            "description": "Type of events. Example assets, collections",
            "example": "assets"
          },
          "object_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "ID of a particular object you want to subscribe on",
            "example": "d7a5a7e8-4247-11ee-b3d8-a683e79fffaf"
          },
          "status": {
            "type": "string",
            "enum": [
              "ENABLED",
              "DISABLED",
              "FAILING",
              "DELETED"
            ],
            "example": "ENABLED"
          },
          "last_payload": {
            "type": "string"
          },
          "date_created": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "realm": {
            "type": "string",
            "nullable": true,
            "description": "Realm of event. Example entity, contents, acls, metadata",
            "example": "metadata"
          },
          "url": {
            "type": "string",
            "description": "URL you want to be called when notification is appeared",
            "example": "https://example.com/webhook_handler"
          },
          "query": {
            "type": "string",
            "description": "Adding a query allows filtering out messages so webhooks will be called only if for messages that match this query.",
            "example": "data.is_archived=false AND data.size>0 (data.status=\"CLOSED\" OR data.status=\"DELETED\") AND data.external_id!=null"
          },
          "date_modified": {
            "type": "string",
            "format": "date-time"
          },
          "headers": {
            "type": "string"
          },
          "last_error": {
            "type": "string"
          }
        },
        "required": [
          "event_type",
          "id",
          "status",
          "url"
        ]
      },
      "WebhookSchema": {
        "type": "object",
        "properties": {
          "operation": {
            "type": "string",
            "nullable": true,
            "description": "Operation of event. Example create, update, delete",
            "example": "update"
          },
          "first_failed_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "event_type": {
            "type": "string",
            "description": "Type of events. Example assets, collections",
            "example": "assets"
          },
          "object_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "ID of a particular object you want to subscribe on",
            "example": "d7a5a7e8-4247-11ee-b3d8-a683e79fffaf"
          },
          "status": {
            "type": "string",
            "enum": [
              "ENABLED",
              "DISABLED",
              "FAILING",
              "DELETED"
            ],
            "example": "ENABLED"
          },
          "last_payload": {
            "type": "string"
          },
          "date_created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "realm": {
            "type": "string",
            "nullable": true,
            "description": "Realm of event. Example entity, contents, acls, metadata",
            "example": "metadata"
          },
          "url": {
            "type": "string",
            "description": "URL you want to be called when notification is appeared",
            "example": "https://example.com/webhook_handler"
          },
          "query": {
            "type": "string",
            "description": "Adding a query allows filtering out messages so webhooks will be called only if for messages that match this query.",
            "example": "data.is_archived=false AND data.size>0 (data.status=\"CLOSED\" OR data.status=\"DELETED\") AND data.external_id!=null"
          },
          "date_modified": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "headers": {
            "type": "object",
            "description": "Define the key-value pairs your third party provider requires here",
            "example": {
              "AUTH-TOKEN": "XYZ",
              "SECRET": "asdad",
              "S3_BUCKET_NAME": "iconik-examples",
              "S3_REGION": "eu-west-1"
            },
            "additionalProperties": {
              "type": "string"
            }
          },
          "last_error": {
            "type": "string"
          }
        },
        "required": [
          "event_type",
          "id",
          "status",
          "url"
        ]
      },
      "WebhooksSchema": {
        "type": "object",
        "properties": {
          "objects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookSchema"
            }
          }
        }
      },
      "BaseQueryParamsSchema1": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BulkSavedSearchActionSchema": {
        "properties": {
          "job_id": {
            "format": "uuid",
            "type": "string"
          },
          "search_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "job_id",
          "search_ids"
        ],
        "type": "object"
      },
      "BulkSavedSearchFaceExtractionSchema": {
        "properties": {
          "include_assets": {
            "type": "boolean"
          },
          "include_collections": {
            "type": "boolean"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          },
          "search_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "include_assets",
          "include_collections",
          "job_id",
          "search_ids"
        ],
        "type": "object"
      },
      "BulkSavedSearchFilesDeleteSchema": {
        "properties": {
          "job_id": {
            "format": "uuid",
            "type": "string"
          },
          "search_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "storage_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "job_id",
          "search_ids",
          "storage_id"
        ],
        "type": "object"
      },
      "BulkSavedSearchMetadataUpdateSchema": {
        "properties": {
          "include_assets": {
            "type": "boolean"
          },
          "include_collections": {
            "type": "boolean"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          },
          "search_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "include_assets",
          "include_collections",
          "job_id",
          "search_ids"
        ],
        "type": "object"
      },
      "BulkSavedSearchObjectsACLUpdateSchema": {
        "properties": {
          "include_assets": {
            "type": "boolean"
          },
          "include_collections": {
            "type": "boolean"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          },
          "search_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "include_assets",
          "include_collections",
          "job_id",
          "search_ids"
        ],
        "type": "object"
      },
      "BulkSavedSearchObjectsAnalyzeSchema": {
        "properties": {
          "job_id": {
            "format": "uuid",
            "type": "string"
          },
          "search_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "job_id",
          "search_ids"
        ],
        "type": "object"
      },
      "BulkSavedSearchObjectsDeleteSchema": {
        "properties": {
          "content_only": {
            "default": true,
            "type": "boolean",
            "writeOnly": true
          },
          "include_assets": {
            "type": "boolean"
          },
          "include_collections": {
            "type": "boolean"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          },
          "search_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "include_assets",
          "include_collections",
          "job_id",
          "search_ids"
        ],
        "type": "object"
      },
      "BulkSavedSearchObjectsSetApprovalSchema": {
        "properties": {
          "job_id": {
            "format": "uuid",
            "type": "string"
          },
          "search_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "job_id",
          "search_ids"
        ],
        "type": "object"
      },
      "BulkSavedSearchObjectsTranscodeSchema": {
        "properties": {
          "job_id": {
            "format": "uuid",
            "type": "string"
          },
          "search_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "job_id",
          "search_ids"
        ],
        "type": "object"
      },
      "BulkSavedSearchObjectsTranscribeSchema": {
        "properties": {
          "job_id": {
            "format": "uuid",
            "type": "string"
          },
          "search_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "job_id",
          "search_ids"
        ],
        "type": "object"
      },
      "BulkSavedSearchObjectsTransferSchema": {
        "properties": {
          "include_assets": {
            "type": "boolean"
          },
          "include_collections": {
            "type": "boolean"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          },
          "search_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "include_assets",
          "include_collections",
          "job_id",
          "search_ids"
        ],
        "type": "object"
      },
      "CriteriaFilterSchema": {
        "properties": {
          "filters": {
            "items": {
              "$ref": "#/components/schemas/CriteriaFilterSchema"
            },
            "type": "array"
          },
          "operator": {
            "type": "string"
          },
          "terms": {
            "items": {
              "$ref": "#/components/schemas/CriteriaTerm"
            },
            "type": "array"
          }
        },
        "required": [
          "operator"
        ],
        "type": "object"
      },
      "CriteriaRangeFilter": {
        "properties": {
          "max": {
            "type": "string"
          },
          "min": {
            "type": "string"
          },
          "timezone": {
            "description": "Format: +02:00. Results returned in UTC by default",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CriteriaRangeFilterSchema": {
        "properties": {
          "max": {
            "type": "string"
          },
          "min": {
            "type": "string"
          },
          "timezone": {
            "description": "Format: +02:00. Results returned in UTC by default",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CriteriaSortSchema": {
        "properties": {
          "name": {
            "type": "string"
          },
          "order": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "CriteriaTerm": {
        "properties": {
          "exists": {
            "type": "boolean"
          },
          "missing": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "range": {
            "$ref": "#/components/schemas/CriteriaRangeFilter"
          },
          "value": {
            "type": "string"
          },
          "value_in": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "CriteriaTermSchema": {
        "properties": {
          "exists": {
            "type": "boolean"
          },
          "missing": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "range": {
            "$ref": "#/components/schemas/CriteriaRangeFilterSchema"
          },
          "value": {
            "type": "string"
          },
          "value_in": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "DiscoveryEntitiesSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/DiscoveryEntity"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DiscoveryEntity": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "object_id": {
            "format": "uuid",
            "type": "string"
          },
          "object_type": {
            "enum": [
              "COLLECTION",
              "SAVED_SEARCH"
            ],
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          }
        },
        "required": [
          "object_id",
          "object_type",
          "title",
          "user_id"
        ],
        "type": "object"
      },
      "DiscoveryEntitySchema": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "object_id": {
            "format": "uuid",
            "type": "string"
          },
          "object_type": {
            "enum": [
              "COLLECTION",
              "SAVED_SEARCH"
            ],
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          }
        },
        "required": [
          "object_id",
          "object_type",
          "title",
          "user_id"
        ],
        "type": "object"
      },
      "DiscoveryViewSettingsSchema": {
        "properties": {
          "entity_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "entity_ids"
        ],
        "type": "object"
      },
      "FacetFilterSchema": {
        "properties": {
          "name": {
            "type": "string"
          },
          "value_in": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "ListObjectsSchema4": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ReindexSavedSearchGroupSchema": {
        "properties": {
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ReindexSavedSearchSchema": {
        "properties": {
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SavedSearch": {
        "properties": {
          "criteria": {
            "$ref": "#/components/schemas/SearchCriteria"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "group_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "criteria",
          "name"
        ],
        "type": "object"
      },
      "SavedSearchElasticSchema": {
        "properties": {
          "criteria": {
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "type": "string"
          },
          "group_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "SavedSearchGroupQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SavedSearchGroupSchema": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "SavedSearchGroupsSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/SavedSearchGroupSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SavedSearchQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SavedSearchResultsSchema": {
        "properties": {
          "facets": {
            "type": "object"
          },
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/SearchDocument"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "search_criteria_document": {
            "$ref": "#/components/schemas/SavedSearch"
          },
          "total": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SavedSearchSchema": {
        "properties": {
          "criteria": {
            "$ref": "#/components/schemas/SearchCriteria"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "group_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "criteria",
          "name"
        ],
        "type": "object"
      },
      "SavedSearchesSchema": {
        "properties": {
          "facets": {
            "type": "object"
          },
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/SavedSearchElasticSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SearchCriteria": {
        "properties": {
          "doc_types": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "exclude_fields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "facets": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "facets_filters": {
            "items": {
              "$ref": "#/components/schemas/FacetFilterSchema"
            },
            "type": "array"
          },
          "filter": {
            "$ref": "#/components/schemas/CriteriaFilterSchema"
          },
          "include_fields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "metadata_view_id": {
            "format": "uuid",
            "type": "string"
          },
          "query": {
            "type": "string"
          },
          "search_after": {
            "description": "This parameter is used for infinite scroll pagination instead of deprecatedscroll API. It accepts a list of sort keys that will be used for getting a next page and it can be obtained from `_sort` key of the last object of the previous response",
            "items": {},
            "type": "array"
          },
          "search_fields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sort": {
            "items": {
              "$ref": "#/components/schemas/CriteriaSortSchema"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SearchCriteriaSchema": {
        "properties": {
          "doc_types": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "exclude_fields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "facets": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "facets_filters": {
            "items": {
              "$ref": "#/components/schemas/FacetFilterSchema"
            },
            "type": "array"
          },
          "filter": {
            "$ref": "#/components/schemas/CriteriaFilterSchema"
          },
          "include_fields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "metadata_view_id": {
            "format": "uuid",
            "type": "string"
          },
          "query": {
            "type": "string"
          },
          "search_after": {
            "description": "This parameter is used for infinite scroll pagination instead of deprecatedscroll API. It accepts a list of sort keys that will be used for getting a next page and it can be obtained from `_sort` key of the last object of the previous response",
            "items": {},
            "type": "array"
          },
          "search_fields": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sort": {
            "items": {
              "$ref": "#/components/schemas/CriteriaSortSchema"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SearchDocument": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "object_type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "object_type",
          "title"
        ],
        "type": "object"
      },
      "SearchDocumentInputSchema": {
        "properties": {
          "fields": {
            "items": {
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "fields"
        ],
        "type": "object"
      },
      "SearchDocumentSchema": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "object_type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "object_type",
          "title"
        ],
        "type": "object"
      },
      "SearchDocumentsSchema": {
        "properties": {
          "facets": {
            "type": "object"
          },
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/SearchDocumentSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SearchHistory": {
        "properties": {
          "criteria": {
            "type": "object"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "criteria",
          "id"
        ],
        "type": "object"
      },
      "SearchHistoryListSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/SearchHistory"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "scroll_id": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SearchHistorySchema": {
        "properties": {
          "criteria": {
            "type": "object"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "criteria",
          "id"
        ],
        "type": "object"
      },
      "SearchQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "scroll": {
            "type": "boolean"
          },
          "scroll_id": {
            "format": "uuid",
            "type": "string"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SearchSuggestResponseSchema": {
        "properties": {
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SearchSuggestSchema": {
        "properties": {
          "doc_types": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "field_name": {
            "type": "string"
          },
          "metadata_view_id": {
            "format": "uuid",
            "type": "string"
          },
          "query": {
            "type": "string"
          }
        },
        "required": [
          "field_name",
          "query"
        ],
        "type": "object"
      },
      "SearchSuggestsResponseSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/SearchSuggestResponseSchema"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "AllowedIPSchema": {
        "properties": {
          "app_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "ip": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CORSHostSchema": {
        "properties": {
          "host": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "host"
        ],
        "type": "object"
      },
      "CORSHostsSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/CORSHostSchema"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "DefaultShareOptionsTypeSchema": {
        "properties": {
          "allow_approving_comments": {
            "type": "boolean"
          },
          "allow_comments": {
            "type": "boolean"
          },
          "allow_custom_actions": {
            "type": "boolean"
          },
          "allow_download": {
            "type": "boolean"
          },
          "allow_download_proxy": {
            "type": "boolean"
          },
          "allow_setting_approve_status": {
            "type": "boolean"
          },
          "allow_upload": {
            "type": "boolean"
          },
          "allow_view_transcriptions": {
            "type": "boolean"
          },
          "allow_view_versions": {
            "type": "boolean"
          },
          "can_change_allow_approving_comments": {
            "type": "boolean"
          },
          "can_change_allow_comments": {
            "type": "boolean"
          },
          "can_change_allow_custom_actions": {
            "type": "boolean"
          },
          "can_change_allow_download": {
            "type": "boolean"
          },
          "can_change_allow_download_proxy": {
            "type": "boolean"
          },
          "can_change_allow_setting_approve_status": {
            "type": "boolean"
          },
          "can_change_allow_upload": {
            "type": "boolean"
          },
          "can_change_allow_view_transcriptions": {
            "type": "boolean"
          },
          "can_change_allow_view_versions": {
            "type": "boolean"
          },
          "can_change_search_users_from_share": {
            "type": "boolean"
          },
          "can_change_share_expiration_time": {
            "type": "boolean"
          },
          "require_password": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "FacetFieldSchema": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "GlobalSettingsSchema": {
        "properties": {
          "debug": {
            "type": "boolean"
          },
          "log_level": {
            "enum": [
              "NOTSET",
              "DEBUG",
              "INFO",
              "WARNING",
              "ERROR",
              "CRITICAL"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GroupSettingPublicSchema": {
        "properties": {
          "acl_template_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "allowed_ips": {
            "items": {
              "$ref": "#/components/schemas/AllowedIPSchema"
            },
            "maxItems": 100,
            "minItems": 0,
            "type": "array"
          },
          "asset_default_sections": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "client_ip": {
            "readOnly": true,
            "type": "string"
          },
          "collections_get_parent_acls": {
            "nullable": true,
            "type": "boolean"
          },
          "date_format": {
            "nullable": true,
            "type": "string"
          },
          "datetime_format": {
            "nullable": true,
            "type": "string"
          },
          "default_upload_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "delete_grace_period": {
            "description": "Grace period that indicate how long objects will live in recycle bin. Unit: hours",
            "format": "int32",
            "maximum": 87600,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "facet_fields": {
            "items": {
              "$ref": "#/components/schemas/FacetFieldSchema"
            },
            "type": "array"
          },
          "filters_default_metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "group_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "hide_favourites": {
            "nullable": true,
            "type": "boolean"
          },
          "home_page": {
            "nullable": true,
            "type": "string"
          },
          "jobs_dashboard": {
            "allOf": [
              {
                "$ref": "#/components/schemas/JobsDashboard"
              }
            ],
            "nullable": true
          },
          "logo_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "logo_url": {
            "readOnly": true,
            "type": "string"
          },
          "required_metadata_views": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "search_default_sections": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "search_display_fields": {
            "items": {
              "$ref": "#/components/schemas/SearchDisplayField"
            },
            "type": "array"
          },
          "search_in_transcriptions": {
            "nullable": true,
            "type": "boolean"
          },
          "search_results_asset_metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "search_results_collection_metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "share_expiration_time": {
            "description": "Default share expiration time that indicate how long share will be valid. Unit: days",
            "format": "int32",
            "maximum": 3650,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "use_asset_name_on_download": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GroupSettingSchema": {
        "properties": {
          "group_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "logo_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "logo_url": {
            "nullable": true,
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "JobsDashboard": {
        "properties": {
          "widgets": {
            "items": {
              "$ref": "#/components/schemas/JobsDashboardWidget"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "JobsDashboardSchema": {
        "properties": {
          "widgets": {
            "items": {
              "$ref": "#/components/schemas/JobsDashboardWidget"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "JobsDashboardWidget": {
        "properties": {
          "id": {
            "type": "string"
          },
          "options": {
            "$ref": "#/components/schemas/JobsWidgetOption"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "enum": [
              "JOBS_LIST",
              "JOBS_STATS_LIST"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "JobsDashboardWidgetSchema": {
        "properties": {
          "id": {
            "type": "string"
          },
          "options": {
            "$ref": "#/components/schemas/JobsWidgetOption"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "type": {
            "enum": [
              "JOBS_LIST",
              "JOBS_STATS_LIST"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "JobsWidgetOption": {
        "properties": {
          "columns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "filters": {
            "type": "object"
          },
          "limit": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "sort": {
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "JobsWidgetOptionFilterSchema": {
        "properties": {
          "name": {
            "nullable": true,
            "type": "string"
          },
          "value": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "JobsWidgetOptionSchema": {
        "properties": {
          "columns": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "filters": {
            "type": "object"
          },
          "limit": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "sort": {
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "KubernetesSettingSchema": {
        "properties": {
          "settings": {
            "type": "object"
          }
        },
        "type": "object"
      },
      "LogoURLSchema": {
        "properties": {
          "logo_url": {
            "nullable": true,
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "LogoURLsSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/LogoURLSchema"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MergedSettingsSchema": {
        "properties": {
          "acl_template_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "allowed_ips": {
            "items": {
              "$ref": "#/components/schemas/AllowedIPSchema"
            },
            "maxItems": 100,
            "minItems": 0,
            "type": "array"
          },
          "asset_default_sections": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "client_ip": {
            "readOnly": true,
            "type": "string"
          },
          "collections_get_parent_acls": {
            "nullable": true,
            "type": "boolean"
          },
          "cors_hosts": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "custom_terms": {
            "readOnly": true,
            "type": "boolean"
          },
          "date_format": {
            "nullable": true,
            "type": "string"
          },
          "datetime_format": {
            "nullable": true,
            "type": "string"
          },
          "default_share_options": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DefaultShareOptionsTypeSchema"
              }
            ],
            "nullable": true
          },
          "default_upload_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "delete_grace_period": {
            "description": "Grace period that indicate how long objects will live in recycle bin. Unit: hours",
            "format": "int32",
            "maximum": 87600,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "enable_shield": {
            "nullable": true,
            "type": "boolean"
          },
          "external_share": {
            "nullable": true,
            "type": "boolean"
          },
          "facet_fields": {
            "items": {
              "$ref": "#/components/schemas/FacetFieldSchema"
            },
            "type": "array"
          },
          "filters_default_metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "group_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "hide_favourites": {
            "nullable": true,
            "type": "boolean"
          },
          "home_page": {
            "nullable": true,
            "type": "string"
          },
          "image_properties_metadata_field": {
            "nullable": true,
            "type": "string"
          },
          "jobs_dashboard": {
            "allOf": [
              {
                "$ref": "#/components/schemas/JobsDashboardSchema"
              }
            ],
            "nullable": true
          },
          "locations_metadata_field": {
            "nullable": true,
            "type": "string"
          },
          "lock_mapped_collections": {
            "description": "Forbid regular users to edit or delete mapped collections.",
            "nullable": true,
            "type": "boolean"
          },
          "logo_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "logo_url": {
            "readOnly": true,
            "type": "string"
          },
          "logos_metadata_field": {
            "nullable": true,
            "type": "string"
          },
          "max_browse_users": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "max_power_users": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "max_standard_users": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "max_storage_bytes": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "max_traffic_bytes": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "password_checks": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PasswordChecksType"
              }
            ],
            "nullable": true
          },
          "required_metadata_views": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "safe_searches_metadata_field": {
            "nullable": true,
            "type": "string"
          },
          "saml_require_groups": {
            "nullable": true,
            "type": "boolean"
          },
          "search_default_sections": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "search_display_fields": {
            "items": {
              "$ref": "#/components/schemas/SearchDisplayField"
            },
            "type": "array"
          },
          "search_in_transcriptions": {
            "nullable": true,
            "type": "boolean"
          },
          "search_results_asset_metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "search_results_collection_metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "search_users_from_share": {
            "nullable": true,
            "type": "boolean"
          },
          "share_expiration_time": {
            "description": "Default share expiration time that indicate how long share will be valid. Unit: days",
            "format": "int32",
            "maximum": 3650,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "support_access": {
            "nullable": true,
            "type": "boolean"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "system_domain_name": {
            "readOnly": true,
            "type": "string"
          },
          "tags_metadata_field": {
            "nullable": true,
            "type": "string"
          },
          "texts_metadata_field": {
            "nullable": true,
            "type": "string"
          },
          "update_saml_primary_group_on_login": {
            "nullable": true,
            "type": "boolean"
          },
          "use_asset_name_on_download": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PasswordChecksType": {
        "properties": {
          "digits": {
            "format": "int32",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "lowercase": {
            "format": "int32",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "max_length": {
            "format": "int32",
            "maximum": 64,
            "minimum": 8,
            "nullable": true,
            "type": "integer"
          },
          "min_length": {
            "format": "int32",
            "maximum": 56,
            "minimum": 8,
            "nullable": true,
            "type": "integer"
          },
          "special_symbols": {
            "format": "int32",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "uppercase": {
            "format": "int32",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PasswordChecksTypeSchema": {
        "properties": {
          "digits": {
            "format": "int32",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "lowercase": {
            "format": "int32",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "max_length": {
            "format": "int32",
            "maximum": 64,
            "minimum": 8,
            "nullable": true,
            "type": "integer"
          },
          "min_length": {
            "format": "int32",
            "maximum": 56,
            "minimum": 8,
            "nullable": true,
            "type": "integer"
          },
          "special_symbols": {
            "format": "int32",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "uppercase": {
            "format": "int32",
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SearchDisplayField": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "SearchDisplayFieldSchema": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "Sort": {
        "properties": {
          "name": {
            "type": "string"
          },
          "order": {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "SortSchema": {
        "properties": {
          "name": {
            "type": "string"
          },
          "order": {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "SystemSettingPublicSchema": {
        "properties": {
          "acl_template_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "allowed_ips": {
            "items": {
              "$ref": "#/components/schemas/AllowedIPSchema"
            },
            "maxItems": 100,
            "minItems": 0,
            "type": "array"
          },
          "asset_default_sections": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "client_ip": {
            "readOnly": true,
            "type": "string"
          },
          "collections_get_parent_acls": {
            "nullable": true,
            "type": "boolean"
          },
          "cors_hosts": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "custom_terms": {
            "readOnly": true,
            "type": "boolean"
          },
          "date_format": {
            "nullable": true,
            "type": "string"
          },
          "datetime_format": {
            "nullable": true,
            "type": "string"
          },
          "default_share_options": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DefaultShareOptionsTypeSchema"
              }
            ],
            "nullable": true
          },
          "default_upload_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "delete_grace_period": {
            "description": "Grace period that indicate how long objects will live in recycle bin. Unit: hours",
            "format": "int32",
            "maximum": 87600,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "enable_shield": {
            "nullable": true,
            "type": "boolean"
          },
          "external_share": {
            "nullable": true,
            "type": "boolean"
          },
          "facet_fields": {
            "items": {
              "$ref": "#/components/schemas/FacetFieldSchema"
            },
            "type": "array"
          },
          "filters_default_metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "hide_favourites": {
            "nullable": true,
            "type": "boolean"
          },
          "home_page": {
            "nullable": true,
            "type": "string"
          },
          "image_properties_metadata_field": {
            "nullable": true,
            "type": "string"
          },
          "jobs_dashboard": {
            "allOf": [
              {
                "$ref": "#/components/schemas/JobsDashboardSchema"
              }
            ],
            "nullable": true
          },
          "locations_metadata_field": {
            "nullable": true,
            "type": "string"
          },
          "lock_mapped_collections": {
            "description": "Forbid regular users to edit or delete mapped collections.",
            "nullable": true,
            "type": "boolean"
          },
          "logo_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "logo_url": {
            "readOnly": true,
            "type": "string"
          },
          "logos_metadata_field": {
            "nullable": true,
            "type": "string"
          },
          "max_browse_users": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "max_power_users": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "max_standard_users": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "max_storage_bytes": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "max_traffic_bytes": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "password_checks": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PasswordChecksTypeSchema"
              }
            ],
            "nullable": true
          },
          "required_metadata_views": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "safe_searches_metadata_field": {
            "nullable": true,
            "type": "string"
          },
          "saml_require_groups": {
            "nullable": true,
            "type": "boolean"
          },
          "search_default_sections": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "search_display_fields": {
            "items": {
              "$ref": "#/components/schemas/SearchDisplayFieldSchema"
            },
            "type": "array"
          },
          "search_in_transcriptions": {
            "nullable": true,
            "type": "boolean"
          },
          "search_results_asset_metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "search_results_collection_metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "search_users_from_share": {
            "nullable": true,
            "type": "boolean"
          },
          "share_expiration_time": {
            "description": "Default share expiration time that indicate how long share will be valid. Unit: days",
            "format": "int32",
            "maximum": 3650,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "support_access": {
            "nullable": true,
            "type": "boolean"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "system_domain_name": {
            "readOnly": true,
            "type": "string"
          },
          "tags_metadata_field": {
            "nullable": true,
            "type": "string"
          },
          "texts_metadata_field": {
            "nullable": true,
            "type": "string"
          },
          "update_saml_primary_group_on_login": {
            "nullable": true,
            "type": "boolean"
          },
          "use_asset_name_on_download": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SystemSettingSchema": {
        "properties": {
          "acl_template_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "allowed_ips": {
            "items": {
              "$ref": "#/components/schemas/AllowedIPSchema"
            },
            "maxItems": 100,
            "minItems": 0,
            "type": "array"
          },
          "asset_default_sections": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "client_ip": {
            "readOnly": true,
            "type": "string"
          },
          "collections_get_parent_acls": {
            "nullable": true,
            "type": "boolean"
          },
          "cors_hosts": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "date_format": {
            "nullable": true,
            "type": "string"
          },
          "datetime_format": {
            "nullable": true,
            "type": "string"
          },
          "default_share_options": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DefaultShareOptionsTypeSchema"
              }
            ],
            "nullable": true
          },
          "default_upload_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "delete_grace_period": {
            "description": "Grace period that indicate how long objects will live in recycle bin. Unit: hours",
            "format": "int32",
            "maximum": 87600,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "enable_shield": {
            "nullable": true,
            "type": "boolean"
          },
          "external_share": {
            "nullable": true,
            "type": "boolean"
          },
          "facet_fields": {
            "items": {
              "$ref": "#/components/schemas/FacetFieldSchema"
            },
            "type": "array"
          },
          "filters_default_metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "hide_favourites": {
            "nullable": true,
            "type": "boolean"
          },
          "home_page": {
            "nullable": true,
            "type": "string"
          },
          "image_properties_metadata_field": {
            "nullable": true,
            "type": "string"
          },
          "jobs_dashboard": {
            "allOf": [
              {
                "$ref": "#/components/schemas/JobsDashboardSchema"
              }
            ],
            "nullable": true
          },
          "locations_metadata_field": {
            "nullable": true,
            "type": "string"
          },
          "lock_mapped_collections": {
            "description": "Forbid regular users to edit or delete mapped collections.",
            "nullable": true,
            "type": "boolean"
          },
          "logo_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "logo_url": {
            "nullable": true,
            "type": "string"
          },
          "logos_metadata_field": {
            "nullable": true,
            "type": "string"
          },
          "max_browse_users": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "max_power_users": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "max_standard_users": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "max_storage_bytes": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "max_traffic_bytes": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "password_checks": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PasswordChecksTypeSchema"
              }
            ],
            "nullable": true
          },
          "required_metadata_views": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "safe_searches_metadata_field": {
            "nullable": true,
            "type": "string"
          },
          "saml_require_groups": {
            "nullable": true,
            "type": "boolean"
          },
          "search_default_sections": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "search_display_fields": {
            "items": {
              "$ref": "#/components/schemas/SearchDisplayFieldSchema"
            },
            "type": "array"
          },
          "search_in_transcriptions": {
            "nullable": true,
            "type": "boolean"
          },
          "search_results_asset_metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "search_results_collection_metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "search_users_from_share": {
            "nullable": true,
            "type": "boolean"
          },
          "share_expiration_time": {
            "description": "Default share expiration time that indicate how long share will be valid. Unit: days",
            "format": "int32",
            "maximum": 3650,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "support_access": {
            "nullable": true,
            "type": "boolean"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "system_domain_name": {
            "readOnly": true,
            "type": "string"
          },
          "tags_metadata_field": {
            "nullable": true,
            "type": "string"
          },
          "texts_metadata_field": {
            "nullable": true,
            "type": "string"
          },
          "update_saml_primary_group_on_login": {
            "nullable": true,
            "type": "boolean"
          },
          "use_asset_name_on_download": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "UserSettingRemoveAttributesSchema": {
        "properties": {
          "allowed_ips": {
            "items": {
              "$ref": "#/components/schemas/AllowedIPSchema"
            },
            "maxItems": 100,
            "minItems": 0,
            "type": "array"
          },
          "asset_default_sections": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "facet_fields": {
            "items": {
              "$ref": "#/components/schemas/FacetFieldSchema"
            },
            "type": "array"
          },
          "jobs_dashboard": {
            "allOf": [
              {
                "$ref": "#/components/schemas/JobsDashboardSchema"
              }
            ],
            "nullable": true
          },
          "search_default_sections": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "search_display_fields": {
            "items": {
              "$ref": "#/components/schemas/SearchDisplayFieldSchema"
            },
            "type": "array"
          },
          "user_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "user_ids"
        ],
        "type": "object"
      },
      "UserSettingSchema": {
        "properties": {
          "acl_template_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "allowed_ips": {
            "items": {
              "$ref": "#/components/schemas/AllowedIPSchema"
            },
            "maxItems": 100,
            "minItems": 0,
            "type": "array"
          },
          "asset_default_sections": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "client_ip": {
            "readOnly": true,
            "type": "string"
          },
          "collections_get_parent_acls": {
            "nullable": true,
            "type": "boolean"
          },
          "date_format": {
            "nullable": true,
            "type": "string"
          },
          "datetime_format": {
            "nullable": true,
            "type": "string"
          },
          "default_upload_storage_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "delete_grace_period": {
            "description": "Grace period that indicate how long objects will live in recycle bin. Unit: hours",
            "format": "int32",
            "maximum": 87600,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "facet_fields": {
            "items": {
              "$ref": "#/components/schemas/FacetFieldSchema"
            },
            "type": "array"
          },
          "filters_default_metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "hide_favourites": {
            "nullable": true,
            "type": "boolean"
          },
          "home_page": {
            "nullable": true,
            "type": "string"
          },
          "jobs_dashboard": {
            "allOf": [
              {
                "$ref": "#/components/schemas/JobsDashboardSchema"
              }
            ],
            "nullable": true
          },
          "search_default_sections": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "search_display_fields": {
            "items": {
              "$ref": "#/components/schemas/SearchDisplayFieldSchema"
            },
            "type": "array"
          },
          "search_in_transcriptions": {
            "nullable": true,
            "type": "boolean"
          },
          "search_results_asset_metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "search_results_collection_metadata_view_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "share_expiration_time": {
            "description": "Default share expiration time that indicate how long share will be valid. Unit: days",
            "format": "int32",
            "maximum": 3650,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "use_asset_name_on_download": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "AssetUsageSchema": {
        "properties": {
          "asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "asset_type": {
            "enum": [
              "ASSET",
              "SEQUENCE",
              "NLE_PROJECT",
              "PLACEHOLDER"
            ],
            "type": "string"
          },
          "date": {
            "format": "date",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "type": "string"
          },
          "operation_source": {
            "enum": [
              "COLLECTION",
              "SEARCH",
              "NOTIFICATION",
              "DISCOVERY",
              "SHARE",
              "EXTERNAL_SHARE",
              ""
            ],
            "type": "string"
          },
          "operation_type": {
            "enum": [
              "VIEW",
              "PLAY",
              "PAUSE",
              "DELETE",
              "CREATE",
              "APPROVE",
              "REJECT",
              "COMMENT",
              "RENAME",
              "EXIT",
              "UNFOCUS",
              "REFOCUS",
              "SEEK"
            ],
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "system_name": {
            "type": "string"
          },
          "time": {
            "format": "date-time",
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "asset_id",
          "operation_type",
          "system_name",
          "user_id"
        ],
        "type": "object"
      },
      "AssetUsagesElasticSchema": {
        "properties": {
          "count": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "date": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AssetUsagesSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/AssetUsagesElasticSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "BillingCreditsSchema": {
        "properties": {
          "auto_pay": {
            "type": "boolean"
          },
          "country": {
            "readOnly": true,
            "type": "string"
          },
          "credits": {
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          },
          "currency": {
            "readOnly": true,
            "type": "string"
          },
          "custom_message": {
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "readOnly": true,
            "type": "string"
          },
          "vat": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          }
        },
        "required": [
          "credits"
        ],
        "type": "object"
      },
      "BillingCreditsVerifySchema": {
        "properties": {
          "charge": {
            "readOnly": true,
            "type": "string"
          },
          "invoice_id": {
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "invoice_id"
        ],
        "type": "object"
      },
      "BillingCustomerCardSchema": {
        "properties": {
          "source": {
            "type": "string"
          }
        },
        "required": [
          "source"
        ],
        "type": "object"
      },
      "BillingCustomerSchema": {
        "properties": {
          "business_vat_id": {
            "type": "string"
          },
          "email": {
            "format": "email",
            "type": "string"
          },
          "enable_subscription": {
            "type": "boolean"
          },
          "shipping": {
            "$ref": "#/components/schemas/BillingCustomerShipping"
          }
        },
        "required": [
          "shipping"
        ],
        "type": "object"
      },
      "BillingCustomerShipping": {
        "properties": {
          "address": {
            "$ref": "#/components/schemas/BillingCustomerShippingAddress"
          },
          "name": {
            "type": "string"
          },
          "phone": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "address",
          "name"
        ],
        "type": "object"
      },
      "BillingCustomerShippingAddress": {
        "properties": {
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "line1": {
            "type": "string"
          },
          "line2": {
            "nullable": true,
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "state": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "city",
          "country",
          "line1",
          "postal_code"
        ],
        "type": "object"
      },
      "BillingCustomerShippingAddressSchema": {
        "properties": {
          "city": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "line1": {
            "type": "string"
          },
          "line2": {
            "nullable": true,
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "state": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "city",
          "country",
          "line1",
          "postal_code"
        ],
        "type": "object"
      },
      "BillingCustomerShippingSchema": {
        "properties": {
          "address": {
            "$ref": "#/components/schemas/BillingCustomerShippingAddressSchema"
          },
          "name": {
            "type": "string"
          },
          "phone": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "address",
          "name"
        ],
        "type": "object"
      },
      "BillingReceiptSchema": {
        "properties": {
          "receipt_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "BillingRecipientsSchema": {
        "properties": {
          "emails": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "BillingSchema": {
        "properties": {
          "balance": {
            "type": "number"
          },
          "consumption_subtype": {
            "type": "string"
          },
          "consumption_type": {
            "type": "string"
          },
          "currency": {
            "enum": [
              "USD",
              "EUR"
            ],
            "nullable": true,
            "type": "string"
          },
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "expiration_date": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "price_list": {
            "nullable": true,
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "type": "string"
          },
          "value": {
            "type": "number"
          }
        },
        "required": [
          "label",
          "system_domain_id",
          "value"
        ],
        "type": "object"
      },
      "BillingSettingsSchema": {
        "properties": {
          "auto_refill_amount": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "enable_auto_top_up": {
            "type": "boolean"
          },
          "low_balance_trigger": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "BillingStatsSchema": {
        "properties": {
          "current_balance": {
            "type": "number"
          },
          "invoice_end_of_month": {
            "type": "boolean"
          },
          "new_billing_enabled": {
            "type": "boolean"
          },
          "stripe_id": {
            "type": "boolean"
          },
          "system_domain_status": {
            "enum": [
              "USD",
              "EUR"
            ],
            "nullable": true,
            "type": "string"
          },
          "system_domain_type": {
            "type": "string"
          },
          "system_domain_warning_message": {
            "type": "string"
          }
        },
        "required": [
          "system_domain_type",
          "system_domain_warning_message"
        ],
        "type": "object"
      },
      "BillingsSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/BillingSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CollectionUsageSchema": {
        "properties": {
          "collection_id": {
            "format": "uuid",
            "type": "string"
          },
          "date": {
            "format": "date",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "type": "string"
          },
          "operation_source": {
            "enum": [
              "COLLECTION",
              "SEARCH",
              "NOTIFICATION"
            ],
            "type": "string"
          },
          "operation_type": {
            "enum": [
              "VIEW",
              "DELETE",
              "CREATE",
              "RENAME"
            ],
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "type": "string"
          },
          "system_name": {
            "type": "string"
          },
          "time": {
            "format": "date-time",
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "collection_id",
          "operation_type",
          "system_name",
          "user_id"
        ],
        "type": "object"
      },
      "CollectionUsagesElasticSchema": {
        "properties": {
          "count": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "date": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CollectionUsagesSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/CollectionUsagesElasticSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CreditsSchema": {
        "properties": {
          "country": {
            "readOnly": true,
            "type": "string"
          },
          "credits": {
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          },
          "currency": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "readOnly": true,
            "type": "number"
          },
          "vat": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          }
        },
        "required": [
          "credits"
        ],
        "type": "object"
      },
      "DateFilterSchema": {
        "properties": {
          "from_date": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "to_date": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "LogsRecipientReadSchema": {
        "properties": {
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "method": {
            "enum": [
              "GOOGLE",
              "AMAZON"
            ],
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "settings": {
            "type": "object"
          }
        },
        "required": [
          "method",
          "name",
          "settings"
        ],
        "type": "object"
      },
      "LogsRecipientSchema": {
        "properties": {
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "method": {
            "enum": [
              "GOOGLE",
              "AMAZON"
            ],
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "settings": {
            "type": "object"
          }
        },
        "required": [
          "method",
          "name",
          "settings"
        ],
        "type": "object"
      },
      "LogsRecipientsSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/LogsRecipientSchema"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "PriceSchema": {
        "properties": {
          "currency": {
            "enum": [
              "EUR",
              "USD"
            ],
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "prices": {
            "type": "object"
          }
        },
        "required": [
          "currency",
          "name",
          "prices"
        ],
        "type": "object"
      },
      "PricesSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/PriceSchema"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "StorageAccessElasticSchema": {
        "properties": {
          "bucket_name": {
            "type": "string"
          },
          "bytes_received": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "bytes_sent": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "date": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "operations": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "system_domain_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StorageAccessSchema": {
        "properties": {
          "bucket_name": {
            "type": "string"
          },
          "bytes_received": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "bytes_sent": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "operation_type": {
            "type": "string"
          },
          "operations": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "storage_type": {
            "enum": [
              "FILE",
              "HTTP",
              "FTP",
              "SFTP",
              "S3",
              "OMMS",
              "GCS",
              "B2",
              "AZURE",
              "TRANSFER"
            ],
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "type": "string"
          },
          "system_name": {
            "type": "string"
          }
        },
        "required": [
          "bucket_name",
          "operation_type",
          "storage_type",
          "system_name"
        ],
        "type": "object"
      },
      "StorageAccessesSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/StorageAccessElasticSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "StorageUsageSchema": {
        "properties": {
          "bucket_name": {
            "type": "string"
          },
          "bytes_stored": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "storage_type": {
            "enum": [
              "FILE",
              "HTTP",
              "FTP",
              "SFTP",
              "S3",
              "OMMS",
              "GCS",
              "B2",
              "AZURE",
              "TRANSFER"
            ],
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "type": "string"
          },
          "system_name": {
            "type": "string"
          }
        },
        "required": [
          "bucket_name",
          "storage_type",
          "system_name"
        ],
        "type": "object"
      },
      "StorageUsagesElasticSchema": {
        "properties": {
          "bucket_name": {
            "type": "string"
          },
          "bytes_stored": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "date": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StorageUsagesSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/StorageUsagesElasticSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TranscoderUsageSchema": {
        "properties": {
          "adjusted_duration_seconds": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "date": {
            "format": "date",
            "type": "string"
          },
          "destination_bytes": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "duration_seconds": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_user_transcoder": {
            "type": "boolean"
          },
          "job_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "object_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "object_type": {
            "nullable": true,
            "type": "string"
          },
          "operation_type": {
            "enum": [
              "TRANSCODE",
              "TRANSCODE_AUDIO",
              "TRANSCODE_VIDEO",
              "TRANSCODE_IMAGE",
              "TRANSCODE_KEYFRAMES",
              "MEDIAINFO",
              "CONFORM",
              "EXTRACT_AUDIO",
              "EXTRACT_IMAGE",
              "ANALYZE",
              "TRANSCRIBE",
              "TRANSCRIBE_HUMAN"
            ],
            "nullable": true,
            "type": "string"
          },
          "percent_done": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "source_bytes": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "status": {
            "enum": [
              "FAILED",
              "FINISHED",
              "ABORTED"
            ],
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "system_name": {
            "type": "string"
          },
          "time": {
            "format": "date-time",
            "type": "string"
          },
          "transcoder_type": {
            "enum": [
              "VANTAGE",
              "FFMPEG",
              "FFMPEG_FIRST_FRAME",
              "IMAGEMAGICK",
              "SUBTITLES",
              "ENCODING_COM",
              "ZENCODER",
              "TELESTREAM_CLOUD",
              "GOOGLE_VIDEO_INTELLIGENCE",
              "GOOGLE_VISION",
              "COLLECTION_KEYFRAMES",
              "AMAZON_REKOGNITION_IMAGE",
              "AMAZON_REKOGNITION_VIDEO",
              "ELEMENTAL_MEDIACONVERT",
              "ELEMENTAL_SERVER",
              "MEDIAINFO",
              "ICONIK_EDGE_TRANSCODER",
              "NONE",
              "REV_AI_TRANSCRIPTION",
              "GCVI_TRANSCRIPTION",
              "AMAZON_TRANSCRIBE",
              "OPEN_GRAPH"
            ],
            "type": "string"
          }
        },
        "required": [
          "status",
          "system_name",
          "transcoder_type"
        ],
        "type": "object"
      },
      "TranscoderUsagesElasticSchema": {
        "properties": {
          "count": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "date": {
            "type": "string"
          },
          "destination_bytes": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "duration_seconds": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_user_transcoder": {
            "type": "boolean"
          },
          "operation_type": {
            "enum": [
              "TRANSCODE",
              "TRANSCODE_AUDIO",
              "TRANSCODE_VIDEO",
              "TRANSCODE_IMAGE",
              "TRANSCODE_KEYFRAMES",
              "MEDIAINFO",
              "CONFORM",
              "EXTRACT_AUDIO",
              "EXTRACT_IMAGE",
              "ANALYZE",
              "TRANSCRIBE",
              "TRANSCRIBE_HUMAN"
            ],
            "type": "string"
          },
          "source_bytes": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "system_domain_id": {
            "format": "uuid",
            "type": "string"
          },
          "transcoder_type": {
            "enum": [
              "VANTAGE",
              "FFMPEG",
              "FFMPEG_FIRST_FRAME",
              "IMAGEMAGICK",
              "SUBTITLES",
              "ENCODING_COM",
              "ZENCODER",
              "TELESTREAM_CLOUD",
              "GOOGLE_VIDEO_INTELLIGENCE",
              "GOOGLE_VISION",
              "COLLECTION_KEYFRAMES",
              "AMAZON_REKOGNITION_IMAGE",
              "AMAZON_REKOGNITION_VIDEO",
              "ELEMENTAL_MEDIACONVERT",
              "ELEMENTAL_SERVER",
              "MEDIAINFO",
              "ICONIK_EDGE_TRANSCODER",
              "NONE",
              "REV_AI_TRANSCRIPTION",
              "GCVI_TRANSCRIPTION",
              "AMAZON_TRANSCRIBE",
              "OPEN_GRAPH"
            ],
            "type": "string"
          }
        },
        "required": [
          "transcoder_type"
        ],
        "type": "object"
      },
      "TranscoderUsagesSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/TranscoderUsagesElasticSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TransferStatsSchema": {
        "properties": {
          "bytes_sent": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "ip": {
            "type": "string"
          },
          "object_info": {
            "type": "string"
          },
          "object_name": {
            "type": "string"
          },
          "time_taken_us": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          }
        },
        "required": [
          "bytes_sent"
        ],
        "type": "object"
      },
      "UnpublishedUserAuditSchema": {
        "properties": {
          "app_id": {
            "format": "uuid",
            "type": "string"
          },
          "client_ip": {
            "type": "string"
          },
          "date": {
            "format": "date",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_acting_as_user": {
            "type": "boolean"
          },
          "log_recipient_id": {
            "format": "uuid",
            "type": "string"
          },
          "metadata": {
            "type": "string"
          },
          "operation_result": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "operation_type": {
            "enum": [
              "GET",
              "POST",
              "PUT",
              "PATCH",
              "DELETE",
              "OPTIONS"
            ],
            "type": "string"
          },
          "original_user_id": {
            "format": "uuid",
            "type": "string"
          },
          "payload": {
            "type": "string"
          },
          "request_id": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "share_id": {
            "format": "uuid",
            "type": "string"
          },
          "share_user_id": {
            "format": "uuid",
            "type": "string"
          },
          "sudo": {
            "type": "boolean"
          },
          "system_domain_id": {
            "format": "uuid",
            "type": "string"
          },
          "system_name": {
            "type": "string"
          },
          "time": {
            "format": "date-time",
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "log_recipient_id",
          "operation_type",
          "system_name"
        ],
        "type": "object"
      },
      "UserAuditSchema": {
        "properties": {
          "app_id": {
            "format": "uuid",
            "type": "string"
          },
          "client_ip": {
            "type": "string"
          },
          "date": {
            "format": "date",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_acting_as_user": {
            "type": "boolean"
          },
          "metadata": {
            "type": "string"
          },
          "operation_result": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "operation_type": {
            "enum": [
              "GET",
              "POST",
              "PUT",
              "PATCH",
              "DELETE",
              "OPTIONS"
            ],
            "type": "string"
          },
          "original_user_id": {
            "format": "uuid",
            "type": "string"
          },
          "payload": {
            "type": "string"
          },
          "request_id": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "share_id": {
            "format": "uuid",
            "type": "string"
          },
          "share_user_id": {
            "format": "uuid",
            "type": "string"
          },
          "sudo": {
            "type": "boolean"
          },
          "system_domain_id": {
            "format": "uuid",
            "type": "string"
          },
          "system_name": {
            "type": "string"
          },
          "time": {
            "format": "date-time",
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "operation_type",
          "system_name"
        ],
        "type": "object"
      },
      "UserUsagesDetailedSchema": {
        "properties": {
          "date": {
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserUsagesElasticSchema": {
        "properties": {
          "count": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "date": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "user_email": {
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "type": "string"
          },
          "user_name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserUsagesSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/UserUsagesElasticSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AbortStorageTranscodeJobsSchema": {
        "properties": {
          "error_message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AnalyzeSchema": {
        "properties": {
          "force": {
            "default": false,
            "type": "boolean"
          },
          "force_type": {
            "default": "APPEND",
            "enum": [
              "OVERWRITE",
              "APPEND"
            ],
            "nullable": true,
            "type": "string"
          },
          "service_name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AssetLinkData": {
        "properties": {
          "site_name": {
            "readOnly": true,
            "type": "string"
          },
          "title": {
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AssetLinkURLSchema": {
        "properties": {
          "url": {
            "format": "url",
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "BulkAnalyzeSchema": {
        "properties": {
          "force": {
            "default": false,
            "type": "boolean"
          },
          "force_type": {
            "default": "OVERWRITE",
            "enum": [
              "OVERWRITE",
              "APPEND"
            ],
            "nullable": true,
            "type": "string"
          },
          "object_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "object_type": {
            "enum": [
              "assets",
              "collections",
              "saved_searches"
            ],
            "type": "string"
          },
          "profile_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "object_ids",
          "object_type"
        ],
        "type": "object"
      },
      "BulkTranscribeSchema": {
        "properties": {
          "engine": {
            "nullable": true,
            "type": "string"
          },
          "force": {
            "default": false,
            "type": "boolean"
          },
          "language": {
            "nullable": true,
            "type": "string"
          },
          "object_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          },
          "object_type": {
            "enum": [
              "assets",
              "collections",
              "saved_searches"
            ],
            "type": "string"
          },
          "profile_id": {
            "format": "uuid",
            "type": "string"
          },
          "speakers": {
            "format": "int32",
            "maximum": 100,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "object_ids",
          "object_type"
        ],
        "type": "object"
      },
      "EdgeThumbnailJobFieldSchema": {
        "properties": {
          "height": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "max_number": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "min_interval": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "timestamp": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "width": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "EdgeTranscodeEndpointSchema": {
        "properties": {
          "data": {
            "type": "object"
          },
          "method": {
            "type": "string"
          },
          "storage_method": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "EdgeTranscodeInputSchema": {
        "properties": {
          "asset_id": {
            "type": "string"
          },
          "closed_captions": {
            "type": "boolean"
          },
          "directory_path": {
            "type": "string"
          },
          "endpoint": {
            "$ref": "#/components/schemas/EdgeTranscodeEndpointSchema"
          },
          "file_id": {
            "type": "string"
          },
          "file_set_id": {
            "nullable": true,
            "type": "string"
          },
          "format_id": {
            "nullable": true,
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "original_name": {
            "type": "string"
          },
          "proxy_id": {
            "nullable": true,
            "type": "string"
          },
          "storage_id": {
            "type": "string"
          }
        },
        "required": [
          "endpoint"
        ],
        "type": "object"
      },
      "EdgeTranscodeJobFieldSchema": {
        "properties": {
          "height": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "width": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "EdgeTranscodeJobSchema": {
        "properties": {
          "asset_id": {
            "type": "string"
          },
          "collection_id": {
            "type": "string"
          },
          "input": {
            "$ref": "#/components/schemas/EdgeTranscodeInputSchema"
          },
          "job_id": {
            "type": "string"
          },
          "job_steps": {
            "items": {
              "$ref": "#/components/schemas/JobStep1"
            },
            "type": "array"
          },
          "media_info": {
            "nullable": true,
            "type": "string"
          },
          "thumbnail": {
            "items": {
              "$ref": "#/components/schemas/EdgeThumbnailJobFieldSchema"
            },
            "type": "array"
          },
          "transcode": {
            "items": {
              "$ref": "#/components/schemas/EdgeTranscodeJobFieldSchema"
            },
            "type": "array"
          }
        },
        "required": [
          "input"
        ],
        "type": "object"
      },
      "EdgeTranscodeJobsSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/EdgeTranscodeJobSchema"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EdgeTranscodeWorkerSchema": {
        "properties": {
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "last_update_date": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ],
            "type": "string"
          },
          "storage_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "status",
          "storage_id"
        ],
        "type": "object"
      },
      "EdgeTranscodeWorkersSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/EdgeTranscodeWorkerSchema"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EndpointSchema": {
        "properties": {
          "data": {
            "type": "object"
          },
          "headers": {
            "type": "object"
          },
          "method": {
            "type": "string"
          },
          "storage_method": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "FacetBucketSchema": {
        "properties": {
          "doc_count": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "key": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "FacetSchema": {
        "properties": {
          "buckets": {
            "items": {
              "$ref": "#/components/schemas/FacetBucketSchema"
            },
            "type": "array"
          },
          "doc_count_error_upper_bound": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "sum_other_doc_count": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GenerateCollectionKeyframeSchema": {
        "properties": {
          "deleted_asset_id": {
            "format": "uuid",
            "type": "string"
          },
          "force": {
            "type": "boolean"
          },
          "specified_asset_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 4,
            "minItems": 0,
            "type": "array"
          },
          "specified_keyframes": {
            "items": {
              "$ref": "#/components/schemas/SpecifiedKeyframes"
            },
            "maxItems": 4,
            "minItems": 0,
            "type": "array"
          }
        },
        "type": "object"
      },
      "InputSchema": {
        "properties": {
          "asset_id": {
            "nullable": true,
            "type": "string"
          },
          "closed_captions": {
            "type": "boolean"
          },
          "collection_id": {
            "nullable": true,
            "type": "string"
          },
          "directory_path": {
            "nullable": true,
            "type": "string"
          },
          "endpoint": {
            "$ref": "#/components/schemas/EndpointSchema"
          },
          "engine": {
            "type": "string"
          },
          "file_id": {
            "nullable": true,
            "type": "string"
          },
          "file_set_id": {
            "nullable": true,
            "type": "string"
          },
          "format_id": {
            "nullable": true,
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "original_name": {
            "type": "string"
          },
          "proxy_id": {
            "nullable": true,
            "type": "string"
          },
          "storage_id": {
            "type": "string"
          },
          "update_proxy_mediainfo": {
            "nullable": true,
            "type": "boolean"
          },
          "version_id": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "endpoint"
        ],
        "type": "object"
      },
      "JobBaseSchema1": {
        "properties": {
          "asset_id": {
            "type": "string"
          },
          "collection_id": {
            "type": "string"
          },
          "input": {
            "$ref": "#/components/schemas/InputSchema"
          },
          "job_id": {
            "type": "string"
          },
          "job_steps": {
            "items": {
              "$ref": "#/components/schemas/JobStep1"
            },
            "type": "array"
          },
          "media_info": {
            "nullable": true,
            "type": "string"
          },
          "thumbnail": {
            "items": {
              "$ref": "#/components/schemas/ThumbnailJob"
            },
            "type": "array"
          },
          "transcode": {
            "items": {
              "$ref": "#/components/schemas/TranscodeJob"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "JobSchema1": {
        "properties": {
          "amazon_rekognition": {
            "type": "boolean"
          },
          "analysis_data": {
            "type": "object"
          },
          "analysis_query_default_service_account": {
            "type": "boolean"
          },
          "analyzed_before": {
            "type": "boolean"
          },
          "asset_id": {
            "type": "string"
          },
          "asset_link": {
            "type": "string"
          },
          "collection_id": {
            "type": "string"
          },
          "create_transcription": {
            "type": "boolean"
          },
          "force_transcoder": {
            "type": "string"
          },
          "google_cloud_video_intelligence": {
            "type": "boolean"
          },
          "input": {
            "$ref": "#/components/schemas/InputSchema"
          },
          "job_id": {
            "type": "string"
          },
          "job_steps": {
            "items": {
              "$ref": "#/components/schemas/JobStep1"
            },
            "type": "array"
          },
          "language": {
            "nullable": true,
            "type": "string"
          },
          "media_info": {
            "nullable": true,
            "type": "string"
          },
          "overwrite": {
            "type": "boolean"
          },
          "priority": {
            "format": "int32",
            "maximum": 10,
            "minimum": 1,
            "type": "integer"
          },
          "speakers": {
            "format": "int32",
            "maximum": 100,
            "minimum": 2,
            "nullable": true,
            "type": "integer"
          },
          "thumbnail": {
            "items": {
              "$ref": "#/components/schemas/ThumbnailJob"
            },
            "type": "array"
          },
          "transcode": {
            "items": {
              "$ref": "#/components/schemas/TranscodeJob"
            },
            "type": "array"
          },
          "valid_transcoders": {
            "items": {
              "$ref": "#/components/schemas/Transcoders"
            },
            "type": "array"
          },
          "version_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "JobStep1": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "date_updated": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "JobStepSchema1": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "date_updated": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "JobsStateSchema2": {
        "properties": {
          "action": {
            "enum": [
              "ABORT",
              "RESTART"
            ],
            "type": "string"
          },
          "job_ids": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "maxItems": 500,
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "action",
          "job_ids"
        ],
        "type": "object"
      },
      "LocalStorageFileTranscodeJobSchema": {
        "properties": {
          "asset_id": {
            "type": "string"
          },
          "checksum": {
            "nullable": true,
            "type": "string"
          },
          "collection_id": {
            "nullable": true,
            "type": "string"
          },
          "component_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "directory_path": {
            "type": "string"
          },
          "file_id": {
            "type": "string"
          },
          "file_set_id": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "format_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "job_id": {
            "type": "string"
          },
          "priority": {
            "format": "int32",
            "maximum": 10,
            "minimum": 1,
            "type": "integer"
          },
          "size": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "version_id": {
            "type": "string"
          }
        },
        "required": [
          "asset_id",
          "directory_path",
          "file_id",
          "file_set_id",
          "filename",
          "format_id",
          "job_id",
          "size",
          "version_id"
        ],
        "type": "object"
      },
      "LocalStorageFileTranscodeJobsSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/LocalStorageFileTranscodeJobSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "LocalTranscodeInputSchema": {
        "properties": {
          "asset_id": {
            "type": "string"
          },
          "checksum": {
            "nullable": true,
            "type": "string"
          },
          "closed_captions": {
            "type": "boolean"
          },
          "collection_id": {
            "nullable": true,
            "type": "string"
          },
          "component_ids": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "directory_path": {
            "type": "string"
          },
          "endpoint": {
            "$ref": "#/components/schemas/EndpointSchema"
          },
          "engine": {
            "type": "string"
          },
          "file_id": {
            "type": "string"
          },
          "file_set_id": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "format_id": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "original_name": {
            "type": "string"
          },
          "proxy_id": {
            "nullable": true,
            "type": "string"
          },
          "size": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "storage_id": {
            "type": "string"
          },
          "update_proxy_mediainfo": {
            "nullable": true,
            "type": "boolean"
          },
          "version_id": {
            "type": "string"
          }
        },
        "required": [
          "asset_id",
          "directory_path",
          "endpoint",
          "file_id",
          "file_set_id",
          "filename",
          "format_id",
          "size",
          "storage_id",
          "version_id"
        ],
        "type": "object"
      },
      "LocalTranscodeJobSchema": {
        "properties": {
          "amazon_rekognition": {
            "type": "boolean"
          },
          "analysis_data": {
            "type": "object"
          },
          "analysis_query_default_service_account": {
            "type": "boolean"
          },
          "analyzed_before": {
            "type": "boolean"
          },
          "asset_id": {
            "type": "string"
          },
          "asset_link": {
            "type": "string"
          },
          "collection_id": {
            "type": "string"
          },
          "create_transcription": {
            "type": "boolean"
          },
          "force_transcoder": {
            "type": "string"
          },
          "google_cloud_video_intelligence": {
            "type": "boolean"
          },
          "input": {
            "$ref": "#/components/schemas/LocalTranscodeInputSchema"
          },
          "job_id": {
            "type": "string"
          },
          "job_steps": {
            "items": {
              "$ref": "#/components/schemas/JobStepSchema1"
            },
            "type": "array"
          },
          "language": {
            "nullable": true,
            "type": "string"
          },
          "media_info": {
            "nullable": true,
            "type": "string"
          },
          "overwrite": {
            "type": "boolean"
          },
          "priority": {
            "format": "int32",
            "maximum": 10,
            "minimum": 1,
            "type": "integer"
          },
          "speakers": {
            "format": "int32",
            "maximum": 100,
            "minimum": 2,
            "nullable": true,
            "type": "integer"
          },
          "thumbnail": {
            "items": {
              "$ref": "#/components/schemas/ThumbnailJob"
            },
            "type": "array"
          },
          "transcode": {
            "items": {
              "$ref": "#/components/schemas/TranscodeJob"
            },
            "type": "array"
          },
          "valid_transcoders": {
            "items": {
              "$ref": "#/components/schemas/Transcoders"
            },
            "type": "array"
          },
          "version_id": {
            "type": "string"
          }
        },
        "required": [
          "input"
        ],
        "type": "object"
      },
      "OutputEndpoint": {
        "properties": {
          "headers": {
            "type": "object"
          },
          "key": {
            "type": "string"
          }
        },
        "required": [
          "key"
        ],
        "type": "object"
      },
      "OutputEndpointSchema": {
        "properties": {
          "headers": {
            "type": "object"
          },
          "key": {
            "type": "string"
          }
        },
        "required": [
          "key"
        ],
        "type": "object"
      },
      "ReindexQueueRecordSchema": {
        "properties": {
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SpecifiedKeyframes": {
        "properties": {
          "url": {
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "SpecifiedKeyframesSchema": {
        "properties": {
          "url": {
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "ThumbnailJob": {
        "properties": {
          "height": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "max_number": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "min_interval": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "output_endpoint": {
            "$ref": "#/components/schemas/OutputEndpoint"
          },
          "set_as_custom_keyframe": {
            "type": "boolean"
          },
          "time_end_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "time_start_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "timestamp": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "width": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "required": [
          "output_endpoint"
        ],
        "type": "object"
      },
      "ThumbnailJobSchema": {
        "properties": {
          "height": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "max_number": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "min_interval": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "output_endpoint": {
            "$ref": "#/components/schemas/OutputEndpointSchema"
          },
          "set_as_custom_keyframe": {
            "type": "boolean"
          },
          "time_end_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "time_start_milliseconds": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "nullable": true,
            "type": "integer"
          },
          "timestamp": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer"
          },
          "width": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "required": [
          "output_endpoint"
        ],
        "type": "object"
      },
      "TranscodeESQueueRecordsSchema": {
        "properties": {
          "objects": {
            "items": {
              "$ref": "#/components/schemas/TranscodeElasticQueueRecord"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "TranscodeElasticQueueRecord": {
        "properties": {
          "date_created": {
            "readOnly": true,
            "type": "string"
          },
          "date_updated": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string"
          },
          "job_id": {
            "readOnly": true,
            "type": "string"
          },
          "object_id": {
            "readOnly": true,
            "type": "string"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "priority": {
            "readOnly": true,
            "type": "string"
          },
          "queue": {
            "readOnly": true,
            "type": "string"
          },
          "retry_count": {
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "readOnly": true,
            "type": "string"
          },
          "storage_id": {
            "readOnly": true,
            "type": "string"
          },
          "system_domain_id": {
            "readOnly": true,
            "type": "string"
          },
          "system_domain_timestamp": {
            "readOnly": true,
            "type": "string"
          },
          "system_name": {
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "TranscodeElasticQueueRecordSchema": {
        "properties": {
          "date_created": {
            "readOnly": true,
            "type": "string"
          },
          "date_updated": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string"
          },
          "job_id": {
            "readOnly": true,
            "type": "string"
          },
          "object_id": {
            "readOnly": true,
            "type": "string"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "priority": {
            "readOnly": true,
            "type": "string"
          },
          "queue": {
            "readOnly": true,
            "type": "string"
          },
          "retry_count": {
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "readOnly": true,
            "type": "string"
          },
          "storage_id": {
            "readOnly": true,
            "type": "string"
          },
          "system_domain_id": {
            "readOnly": true,
            "type": "string"
          },
          "system_domain_timestamp": {
            "readOnly": true,
            "type": "string"
          },
          "system_name": {
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "readOnly": true,
            "type": "string"
          },
          "version_id": {
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "TranscodeJob": {
        "properties": {
          "height": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "output_endpoint": {
            "$ref": "#/components/schemas/OutputEndpoint"
          },
          "width": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "required": [
          "output_endpoint"
        ],
        "type": "object"
      },
      "TranscodeJobSchema": {
        "properties": {
          "height": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "output_endpoint": {
            "$ref": "#/components/schemas/OutputEndpointSchema"
          },
          "width": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          }
        },
        "required": [
          "output_endpoint"
        ],
        "type": "object"
      },
      "TranscodeQueueObjectSchema": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "type": "string"
          },
          "date_updated": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "job_id": {
            "format": "uuid",
            "type": "string"
          },
          "priority": {
            "format": "int32",
            "maximum": 10,
            "minimum": 1,
            "type": "integer"
          },
          "retry_count": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "system_domain": {
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "type": "string"
          },
          "system_domain_timestamp": {
            "type": "number"
          },
          "system_name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TranscodeQueueRecordSchema": {
        "properties": {
          "bytes_params": {
            "nullable": true
          },
          "date_created": {
            "type": "string"
          },
          "date_updated": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "job_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "media_info": {
            "nullable": true,
            "type": "string"
          },
          "object_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "object_type": {
            "nullable": true,
            "type": "string"
          },
          "params": {
            "nullable": true,
            "type": "string"
          },
          "priority": {
            "nullable": true,
            "type": "integer"
          },
          "retry_count": {
            "nullable": true,
            "type": "integer"
          },
          "spec": {
            "nullable": true,
            "type": "string"
          },
          "status": {
            "nullable": true,
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "system_name": {
            "type": "string"
          },
          "type": {
            "nullable": true,
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "version_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "TranscodeQueueSchema": {
        "properties": {
          "facets": {
            "additionalProperties": {
              "$ref": "#/components/schemas/FacetSchema"
            },
            "type": "object"
          },
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/TranscodeQueueObjectSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TranscodeValidateMediaInfoSchema": {
        "properties": {
          "filename": {
            "type": "string"
          },
          "media_info": {
            "type": "string"
          }
        },
        "required": [
          "media_info"
        ],
        "type": "object"
      },
      "Transcoders": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "settings": {
            "type": "object"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TranscodersSchema1": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "settings": {
            "type": "object"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TranscribeSchema": {
        "properties": {
          "engine": {
            "nullable": true,
            "type": "string"
          },
          "force": {
            "default": false,
            "type": "boolean"
          },
          "language": {
            "nullable": true,
            "type": "string"
          },
          "profile_id": {
            "format": "uuid",
            "type": "string"
          },
          "speakers": {
            "format": "int32",
            "maximum": 100,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GroupBaseSchema": {
        "properties": {
          "alias": {
            "type": "string"
          },
          "default_user_type": {
            "nullable": true,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_saml_group": {
            "readOnly": true,
            "type": "boolean"
          },
          "logo": {
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role_categories": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RoleCategories"
              }
            ],
            "nullable": true
          },
          "roles": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "saml_primary_group_priority": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "GroupCreateSchema": {
        "properties": {
          "alias": {
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "default_user_type": {
            "nullable": true,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_saml_group": {
            "readOnly": true,
            "type": "boolean"
          },
          "logo": {
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role_categories": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RoleCategories"
              }
            ],
            "nullable": true
          },
          "roles": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "saml_primary_group_priority": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          },
          "system_domain_id": {
            "format": "uuid",
            "type": "string",
            "writeOnly": true
          }
        },
        "required": [
          "name",
          "system_domain_id"
        ],
        "type": "object"
      },
      "GroupElasticSchema": {
        "properties": {
          "alias": {
            "type": "string"
          },
          "date_created": {
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "readOnly": true,
            "type": "string"
          },
          "default_user_type": {
            "nullable": true,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_saml_group": {
            "readOnly": true,
            "type": "boolean"
          },
          "logo": {
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role_categories": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RoleCategories"
              }
            ],
            "nullable": true
          },
          "roles": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "saml_primary_group_priority": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "GroupMappingSchema": {
        "properties": {
          "group_id": {
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "group_id",
          "name"
        ],
        "type": "object"
      },
      "GroupMappingsSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/GroupMappingSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GroupSchema": {
        "properties": {
          "alias": {
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "default_user_type": {
            "nullable": true,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "external_id": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_saml_group": {
            "readOnly": true,
            "type": "boolean"
          },
          "logo": {
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role_categories": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RoleCategories"
              }
            ],
            "nullable": true
          },
          "roles": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "saml_primary_group_priority": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "GroupsQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GroupsSchema": {
        "properties": {
          "facets": {
            "type": "object"
          },
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/GroupElasticSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ReindexGroupSchema": {
        "properties": {
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ReindexUserSchema": {
        "properties": {
          "sync_to_another_dc": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "RoleCategories": {
        "properties": {
          "assets_edit": {
            "type": "boolean"
          },
          "billing": {
            "type": "boolean"
          },
          "collaborate": {
            "type": "boolean"
          },
          "core": {
            "type": "boolean"
          },
          "download": {
            "type": "boolean"
          },
          "integrations_admin": {
            "type": "boolean"
          },
          "metadata_admin": {
            "type": "boolean"
          },
          "organize": {
            "type": "boolean"
          },
          "others": {
            "type": "boolean"
          },
          "storage_admin": {
            "type": "boolean"
          },
          "upload": {
            "type": "boolean"
          },
          "users_groups_admin": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "RoleCategoriesSchema": {
        "properties": {
          "assets_edit": {
            "type": "boolean"
          },
          "billing": {
            "type": "boolean"
          },
          "collaborate": {
            "type": "boolean"
          },
          "core": {
            "type": "boolean"
          },
          "download": {
            "type": "boolean"
          },
          "integrations_admin": {
            "type": "boolean"
          },
          "metadata_admin": {
            "type": "boolean"
          },
          "organize": {
            "type": "boolean"
          },
          "others": {
            "type": "boolean"
          },
          "storage_admin": {
            "type": "boolean"
          },
          "upload": {
            "type": "boolean"
          },
          "users_groups_admin": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "UserBaseSchema": {
        "properties": {
          "date_terms_accepted": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "email": {
            "format": "email",
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "groups": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "hide_email": {
            "type": "boolean"
          },
          "hide_phone": {
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "identity_provider_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_admin": {
            "type": "boolean"
          },
          "is_super_admin": {
            "readOnly": true,
            "type": "boolean"
          },
          "is_super_admin_light": {
            "readOnly": true,
            "type": "boolean"
          },
          "last_name": {
            "type": "string"
          },
          "last_successful_auth": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "last_unsuccessful_auth": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "last_web_login": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "nullable": true
          },
          "password": {
            "type": "string",
            "writeOnly": true
          },
          "password_changed": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "photo": {
            "readOnly": true,
            "type": "string"
          },
          "photo_big": {
            "readOnly": true,
            "type": "string"
          },
          "photo_small": {
            "readOnly": true,
            "type": "string"
          },
          "primary_group": {
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "enum": [
              "INACTIVE",
              "ACTIVE",
              "BLOCKED",
              "DELETED"
            ],
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "system_domains": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "system_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSystemMetadata"
              }
            ],
            "readOnly": true
          },
          "system_name": {
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "enum": [
              "POWER",
              "STANDARD",
              "BROWSE_ONLY",
              "BROWSE_API_ONLY"
            ],
            "type": "string"
          }
        },
        "required": [
          "first_name",
          "type"
        ],
        "type": "object"
      },
      "UserByEmailAndLoginTypeSchema": {
        "properties": {
          "email": {
            "format": "email",
            "type": "string"
          },
          "login_type": {
            "enum": [
              "SSO",
              "PASSWORD"
            ],
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "UserByEmailSchema": {
        "properties": {
          "email": {
            "format": "email",
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "UserCreateSchema": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_terms_accepted": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "email": {
            "format": "email",
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "groups": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "hide_email": {
            "type": "boolean"
          },
          "hide_phone": {
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "identity_provider_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_admin": {
            "type": "boolean"
          },
          "is_super_admin": {
            "readOnly": true,
            "type": "boolean"
          },
          "is_super_admin_light": {
            "readOnly": true,
            "type": "boolean"
          },
          "last_name": {
            "type": "string"
          },
          "last_successful_auth": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "last_unsuccessful_auth": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "last_web_login": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "nullable": true
          },
          "password": {
            "type": "string",
            "writeOnly": true
          },
          "password_changed": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "photo": {
            "readOnly": true,
            "type": "string"
          },
          "photo_big": {
            "readOnly": true,
            "type": "string"
          },
          "photo_small": {
            "readOnly": true,
            "type": "string"
          },
          "primary_group": {
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "enum": [
              "INACTIVE",
              "ACTIVE",
              "BLOCKED",
              "DELETED"
            ],
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "system_domains": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "system_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSystemMetadata"
              }
            ],
            "readOnly": true
          },
          "system_name": {
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "enum": [
              "POWER",
              "STANDARD",
              "BROWSE_ONLY",
              "BROWSE_API_ONLY"
            ],
            "type": "string"
          }
        },
        "required": [
          "email",
          "first_name",
          "type"
        ],
        "type": "object"
      },
      "UserEditInternalSchema": {
        "properties": {
          "current_password": {
            "type": "string",
            "writeOnly": true
          },
          "date_terms_accepted": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "email": {
            "format": "email",
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "groups": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "hide_email": {
            "type": "boolean"
          },
          "hide_phone": {
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "identity_provider_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_admin": {
            "type": "boolean"
          },
          "is_super_admin": {
            "readOnly": true,
            "type": "boolean"
          },
          "is_super_admin_light": {
            "readOnly": true,
            "type": "boolean"
          },
          "last_name": {
            "type": "string"
          },
          "last_successful_auth": {
            "format": "date-time",
            "type": "string"
          },
          "last_unsuccessful_auth": {
            "format": "date-time",
            "type": "string"
          },
          "last_web_login": {
            "format": "date-time",
            "type": "string"
          },
          "metadata": {
            "nullable": true
          },
          "password": {
            "type": "string",
            "writeOnly": true
          },
          "password_changed": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "photo": {
            "readOnly": true,
            "type": "string"
          },
          "photo_big": {
            "readOnly": true,
            "type": "string"
          },
          "photo_small": {
            "readOnly": true,
            "type": "string"
          },
          "primary_group": {
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "enum": [
              "INACTIVE",
              "ACTIVE",
              "BLOCKED",
              "DELETED"
            ],
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "system_domains": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "system_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSystemMetadata"
              }
            ],
            "readOnly": true
          },
          "system_name": {
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "enum": [
              "POWER",
              "STANDARD",
              "BROWSE_ONLY",
              "BROWSE_API_ONLY"
            ],
            "type": "string"
          }
        },
        "required": [
          "first_name",
          "type"
        ],
        "type": "object"
      },
      "UserEditSchema": {
        "properties": {
          "current_password": {
            "type": "string",
            "writeOnly": true
          },
          "date_terms_accepted": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "email": {
            "format": "email",
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "groups": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "hide_email": {
            "type": "boolean"
          },
          "hide_phone": {
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "identity_provider_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_admin": {
            "type": "boolean"
          },
          "is_super_admin": {
            "readOnly": true,
            "type": "boolean"
          },
          "is_super_admin_light": {
            "readOnly": true,
            "type": "boolean"
          },
          "last_name": {
            "type": "string"
          },
          "last_successful_auth": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "last_unsuccessful_auth": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "last_web_login": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "nullable": true
          },
          "password": {
            "type": "string",
            "writeOnly": true
          },
          "password_changed": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "photo": {
            "readOnly": true,
            "type": "string"
          },
          "photo_big": {
            "readOnly": true,
            "type": "string"
          },
          "photo_small": {
            "readOnly": true,
            "type": "string"
          },
          "primary_group": {
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "enum": [
              "INACTIVE",
              "ACTIVE",
              "BLOCKED",
              "DELETED"
            ],
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "system_domains": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "system_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSystemMetadata"
              }
            ],
            "readOnly": true
          },
          "system_name": {
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "enum": [
              "POWER",
              "STANDARD",
              "BROWSE_ONLY",
              "BROWSE_API_ONLY"
            ],
            "type": "string"
          }
        },
        "required": [
          "first_name",
          "type"
        ],
        "type": "object"
      },
      "UserElasticSchema": {
        "properties": {
          "date_created": {
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "readOnly": true,
            "type": "string"
          },
          "date_terms_accepted": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "email": {
            "format": "email",
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "groups": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "hide_email": {
            "type": "boolean"
          },
          "hide_phone": {
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "identity_provider_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_admin": {
            "type": "boolean"
          },
          "is_super_admin": {
            "readOnly": true,
            "type": "boolean"
          },
          "is_super_admin_light": {
            "readOnly": true,
            "type": "boolean"
          },
          "last_name": {
            "type": "string"
          },
          "last_successful_auth": {
            "readOnly": true,
            "type": "string"
          },
          "last_unsuccessful_auth": {
            "readOnly": true,
            "type": "string"
          },
          "last_web_login": {
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "nullable": true
          },
          "password": {
            "type": "string",
            "writeOnly": true
          },
          "password_changed": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "photo": {
            "readOnly": true,
            "type": "string"
          },
          "photo_big": {
            "readOnly": true,
            "type": "string"
          },
          "photo_small": {
            "readOnly": true,
            "type": "string"
          },
          "primary_group": {
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "enum": [
              "INACTIVE",
              "ACTIVE",
              "BLOCKED",
              "DELETED"
            ],
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "system_domains": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "system_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSystemMetadata"
              }
            ],
            "readOnly": true
          },
          "system_name": {
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "enum": [
              "POWER",
              "STANDARD",
              "BROWSE_ONLY",
              "BROWSE_API_ONLY"
            ],
            "type": "string"
          }
        },
        "required": [
          "first_name",
          "type"
        ],
        "type": "object"
      },
      "UserLoginSchema": {
        "properties": {
          "email": {
            "format": "email",
            "type": "string"
          },
          "password": {
            "type": "string",
            "writeOnly": true
          }
        },
        "required": [
          "email",
          "password"
        ],
        "type": "object"
      },
      "UserRolesSchema": {
        "properties": {
          "objects": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UserSamlCreateSchema": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_terms_accepted": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "email": {
            "format": "email",
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "group_names": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "groups": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "hide_email": {
            "type": "boolean"
          },
          "hide_phone": {
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "identity_provider_id": {
            "format": "uuid",
            "type": "string"
          },
          "is_admin": {
            "type": "boolean"
          },
          "is_super_admin": {
            "readOnly": true,
            "type": "boolean"
          },
          "is_super_admin_light": {
            "readOnly": true,
            "type": "boolean"
          },
          "last_name": {
            "type": "string"
          },
          "last_successful_auth": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "last_unsuccessful_auth": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "last_web_login": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "nullable": true
          },
          "password": {
            "type": "string",
            "writeOnly": true
          },
          "password_changed": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "photo": {
            "readOnly": true,
            "type": "string"
          },
          "photo_big": {
            "readOnly": true,
            "type": "string"
          },
          "photo_small": {
            "readOnly": true,
            "type": "string"
          },
          "primary_group": {
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "enum": [
              "INACTIVE",
              "ACTIVE",
              "BLOCKED",
              "DELETED"
            ],
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "system_domains": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "system_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSystemMetadata"
              }
            ],
            "readOnly": true
          },
          "system_name": {
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "enum": [
              "POWER",
              "STANDARD",
              "BROWSE_ONLY",
              "BROWSE_API_ONLY"
            ],
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "email",
          "first_name"
        ],
        "type": "object"
      },
      "UserSamlIdpUpdateSchema": {
        "properties": {
          "email": {
            "format": "email",
            "type": "string"
          },
          "identity_provider_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "email",
          "identity_provider_id"
        ],
        "type": "object"
      },
      "UserSamlUpdateSchema": {
        "properties": {
          "email": {
            "format": "email",
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "group_names": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "identity_provider_id": {
            "format": "uuid",
            "type": "string"
          },
          "last_name": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "UserSchema1": {
        "properties": {
          "app_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_terms_accepted": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "disable_mixpanel": {
            "readOnly": true,
            "type": "boolean"
          },
          "email": {
            "format": "email",
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "groups": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "hide_email": {
            "type": "boolean"
          },
          "hide_phone": {
            "type": "boolean"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "identity_provider_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_admin": {
            "type": "boolean"
          },
          "is_super_admin": {
            "readOnly": true,
            "type": "boolean"
          },
          "is_super_admin_light": {
            "readOnly": true,
            "type": "boolean"
          },
          "last_name": {
            "type": "string"
          },
          "last_successful_auth": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "last_unsuccessful_auth": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "last_web_login": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "nullable": true
          },
          "password": {
            "type": "string",
            "writeOnly": true
          },
          "password_changed": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "photo": {
            "readOnly": true,
            "type": "string"
          },
          "photo_big": {
            "readOnly": true,
            "type": "string"
          },
          "photo_small": {
            "readOnly": true,
            "type": "string"
          },
          "photo_storage_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "primary_group": {
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "enum": [
              "INACTIVE",
              "ACTIVE",
              "BLOCKED",
              "DELETED"
            ],
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "system_domains": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "type": "array"
          },
          "system_metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSystemMetadata"
              }
            ],
            "readOnly": true
          },
          "system_name": {
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "enum": [
              "POWER",
              "STANDARD",
              "BROWSE_ONLY",
              "BROWSE_API_ONLY"
            ],
            "type": "string"
          }
        },
        "required": [
          "first_name",
          "type"
        ],
        "type": "object"
      },
      "UserSystemMetadata": {
        "properties": {
          "saml_created": {
            "readOnly": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "UserSystemMetadataSchema": {
        "properties": {
          "saml_created": {
            "readOnly": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "UsersByEmailsSchema": {
        "properties": {
          "emails": {
            "items": {
              "format": "email",
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "emails"
        ],
        "type": "object"
      },
      "UsersQueryParamsSchema": {
        "properties": {
          "page": {
            "default": 1,
            "description": "Which page number to fetch",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "per_page": {
            "default": 10,
            "description": "The number of items for each page",
            "format": "int32",
            "maximum": 2147483647,
            "minimum": 1,
            "nullable": true,
            "type": "integer"
          },
          "sort": {
            "description": "A comma separated list of fieldnames with order (asc/desc)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UsersSchema1": {
        "properties": {
          "facets": {
            "type": "object"
          },
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/UserElasticSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "NotificationSchema": {
        "properties": {
          "context": {
            "type": "object"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "event_type": {
            "type": "string"
          },
          "exclude_users": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "message_long": {
            "type": "string"
          },
          "message_short": {
            "type": "string"
          },
          "object_id": {
            "format": "uuid",
            "type": "string"
          },
          "object_type": {
            "type": "string"
          },
          "recipient_id": {
            "format": "uuid",
            "type": "string"
          },
          "sender_id": {
            "format": "uuid",
            "type": "string"
          },
          "share_id": {
            "format": "uuid",
            "type": "string"
          },
          "share_user_id": {
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "enum": [
              "QUEUED",
              "SENT",
              "READ"
            ],
            "type": "string"
          },
          "sub_object_id": {
            "format": "uuid",
            "type": "string"
          },
          "sub_object_type": {
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "event_type",
          "message_long",
          "message_short",
          "object_id",
          "object_type",
          "recipient_id",
          "sender_id"
        ],
        "type": "object"
      },
      "NotificationSettingSchema": {
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "event_type": {
            "readOnly": true,
            "type": "string"
          },
          "object_type": {
            "readOnly": true,
            "type": "string"
          },
          "protocol": {
            "readOnly": true,
            "type": "string"
          },
          "recipient_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "settings": {
            "type": "object"
          },
          "sub_object_type": {
            "readOnly": true,
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "enabled",
          "event_type",
          "object_type",
          "recipient_id"
        ],
        "type": "object"
      },
      "NotificationSettingsSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/NotificationSettingSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "NotificationsSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/NotificationSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SubscriptionSchema": {
        "properties": {
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "event_type": {
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "object_id": {
            "format": "uuid",
            "type": "string"
          },
          "object_type": {
            "type": "string"
          },
          "sub_object_id": {
            "format": "uuid",
            "type": "string"
          },
          "sub_object_type": {
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "object_type"
        ],
        "type": "object"
      },
      "SubscriptionsSchema": {
        "properties": {
          "first_url": {
            "readOnly": true,
            "type": "string"
          },
          "last_url": {
            "readOnly": true,
            "type": "string"
          },
          "next_url": {
            "readOnly": true,
            "type": "string"
          },
          "objects": {
            "items": {
              "$ref": "#/components/schemas/SubscriptionSchema"
            },
            "readOnly": true,
            "type": "array"
          },
          "page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "pages": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "per_page": {
            "format": "int32",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "readOnly": true,
            "type": "integer"
          },
          "prev_url": {
            "readOnly": true,
            "type": "string"
          },
          "total": {
            "format": "int64",
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SystemNotificationSchema": {
        "properties": {
          "context": {
            "type": "object"
          },
          "date_created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_modified": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "event_type": {
            "type": "string"
          },
          "exclude_users": {
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "id": {
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "message_long": {
            "type": "string"
          },
          "message_short": {
            "type": "string"
          },
          "object_id": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "object_type": {
            "type": "string"
          },
          "recipient_id": {
            "format": "uuid",
            "type": "string"
          },
          "sender_id": {
            "format": "uuid",
            "type": "string"
          },
          "share_id": {
            "format": "uuid",
            "type": "string"
          },
          "share_user_id": {
            "format": "uuid",
            "type": "string"
          },
          "status": {
            "enum": [
              "QUEUED",
              "SENT",
              "READ"
            ],
            "nullable": true,
            "type": "string"
          },
          "sub_object_id": {
            "format": "uuid",
            "type": "string"
          },
          "sub_object_type": {
            "type": "string"
          },
          "system_domain_id": {
            "format": "uuid",
            "type": "string"
          },
          "user_id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "event_type",
          "message_long",
          "message_short",
          "object_type",
          "recipient_id",
          "sender_id",
          "system_domain_id"
        ],
        "type": "object"
      }
    }
  }
}